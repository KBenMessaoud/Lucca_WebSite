import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { LuUserDisplayPipe } from '../../display/index';
import { ILuUser } from '../../user.model';
import * as i0 from "@angular/core";
export interface ILuUserHomonymsService<U extends ILuUser = ILuUser> {
    extractHomonyms(users: U[]): U[];
    enrichHomonyms(homonyms: U[]): Observable<U[]>;
}
export declare abstract class ALuUserHomonymsService<U extends ILuUser = ILuUser> implements ILuUserHomonymsService<U> {
    abstract extractHomonyms(users: U[]): U[];
    abstract enrichHomonyms(homonyms: U[]): Observable<U[]>;
}
export declare class LuUserHomonymsService<U extends ILuUser = ILuUser> extends ALuUserHomonymsService<U> implements ILuUserHomonymsService<U> {
    private _pipe;
    private _http;
    private _format;
    extractHomonyms(users: U[]): U[];
    enrichHomonyms(homonyms: U[]): Observable<U[]>;
    constructor(_pipe: LuUserDisplayPipe, _http: HttpClient);
    static ɵfac: i0.ɵɵFactoryDeclaration<LuUserHomonymsService<any>, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<LuUserHomonymsService<any>>;
}
