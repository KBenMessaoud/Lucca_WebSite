import { ElementRef, EventEmitter } from '@angular/core';
import { FormControl } from '@angular/forms';
import { ILuOnCloseSubscriber, ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber } from '@lucca-front/ng/core';
import { ILuOptionOperator } from '@lucca-front/ng/option';
import { Observable } from 'rxjs';
import { ILuEstablishment } from '../../establishment.model';
import { LuEstablishmentService } from '../../service/index';
import * as i0 from "@angular/core";
export declare class LuEstablishmentSearcherComponent implements ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber, ILuOnCloseSubscriber, ILuOptionOperator<ILuEstablishment> {
    set filters(filters: string[]);
    set appInstanceId(appId: number);
    set operations(ops: number[]);
    set sort(sort: string);
    private _service;
    fixed: boolean;
    searchInput: ElementRef<HTMLElement>;
    isSearching: EventEmitter<boolean>;
    private _isSearching;
    clueControl: FormControl<string>;
    loading: boolean;
    private _nextPage$;
    private _page$;
    private _resetOutOptions;
    outOptions$: Observable<ILuEstablishment[]>;
    displayPlaceholder$: Observable<boolean>;
    constructor(hostService: LuEstablishmentService, selfService: LuEstablishmentService);
    onOpen(): void;
    onScrollBottom(): void;
    onClose(): void;
    reset(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<LuEstablishmentSearcherComponent, [{ optional: true; skipSelf: true; }, { self: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LuEstablishmentSearcherComponent, "lu-establishment-searcher", never, { "filters": { "alias": "filters"; "required": false; }; "appInstanceId": { "alias": "appInstanceId"; "required": false; }; "operations": { "alias": "operations"; "required": false; }; "sort": { "alias": "sort"; "required": false; }; }, { "isSearching": "isSearching"; }, never, never, true, never>;
}
