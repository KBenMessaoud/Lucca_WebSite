import { ChangeDetectorRef, ElementRef, Renderer2 } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export type ILuInput = ControlValueAccessor;
export declare abstract class ALuInput<T, U extends HTMLElement = HTMLElement> implements ILuInput {
    protected _changeDetectorRef: ChangeDetectorRef;
    protected _elementRef: ElementRef<U>;
    protected _renderer: Renderer2;
    protected _placeholder: string;
    get placeholder(): string;
    protected _value: T;
    constructor(_changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef<U>, _renderer: Renderer2);
    setValue(value: T): void;
    get value(): T;
    set value(value: T);
    writeValue(value: T): void;
    protected _cvaOnChange: (value: T) => void;
    registerOnChange(fn: (value: T) => void): void;
    protected _onTouched: () => void;
    registerOnTouched(fn: () => void): void;
    protected isEmpty(): boolean;
    protected applyClasses(): void;
    protected abstract render(): void;
}
