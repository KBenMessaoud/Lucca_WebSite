import { TemplateRef, ViewRef } from '@angular/core';
import { ALuInputDisplayer, ILuInputDisplayer } from './input-displayer.model';
import * as i0 from "@angular/core";
export declare class LuInputDisplayerDirective<T> extends ALuInputDisplayer<T> implements ILuInputDisplayer<T> {
    protected template: TemplateRef<LuInputDisplayerContext<T>>;
    set argMultiple(m: boolean);
    set inputMultiple(m: boolean | string);
    constructor(template: TemplateRef<LuInputDisplayerContext<T>>);
    getViewRef(value: T | T[]): ViewRef;
    static ɵfac: i0.ɵɵFactoryDeclaration<LuInputDisplayerDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<LuInputDisplayerDirective<any>, "[luDisplayer]", never, { "argMultiple": { "alias": "luDisplayerMultiple"; "required": false; }; "inputMultiple": { "alias": "multiple"; "required": false; }; }, {}, never, never, true, never>;
}
export declare class LuInputDisplayerContext<T> {
    $implicit: T | T[];
    constructor($implicit: T | T[]);
}
