import { Injectable } from '@angular/core';
import { LuApiV3Service } from '@lucca-front/ng/api';
import { map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
class LuUserV3Service extends LuApiV3Service {
    set appInstanceId(appInstanceId) {
        this._appInstanceId = appInstanceId;
    }
    set operations(operations) {
        this._operations = operations;
    }
    constructor(_http) {
        super(_http);
        this._http = _http;
        this._operations = [];
        this.api = '/api/v3/users/search';
        this.fields = 'id,firstname,lastname,picture[href]';
        this.orderBy = 'lastname,asc,firstname,asc';
    }
    getMe() {
        return this._http.get(`/api/v3/users/me?fields=id`).pipe(switchMap((r) => this._get(this.url + `&id=${r.data.id}`)), map((users) => users[0]));
    }
    get url() {
        if (!this._appInstanceId || !this._operations || !this._operations.length) {
            return `${this._api}?${[...this._filters, this._orderBy, this._fields].filter((f) => !!f).join('&')}`;
        }
        else {
            return `/api/v3/users/scopedsearch?${[...this._filters, `appInstanceId=${this._appInstanceId}`, `operations=${this._operations.join(',')}`, this._orderBy, this._fields]
                .filter((f) => !!f)
                .join('&')}`;
        }
    }
    // FIXME typing
    _get(url) {
        return super._get(url).pipe(map((suggestions) => suggestions.map((s) => s.item)));
    }
    _clueFilter(clue) {
        const urlSafeClue = clue
            .split(' ')
            .map((c) => encodeURIComponent(c))
            .join(',');
        return `clue=${urlSafeClue}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserV3Service, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserV3Service }); }
}
export { LuUserV3Service };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserV3Service, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci12My5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvdXNlci9zZXJ2aWNlL3VzZXItdjMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBb0MsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdkYsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBSWhELE1BQ2EsZUFBNkMsU0FBUSxjQUFpQjtJQUVsRixJQUFJLGFBQWEsQ0FBQyxhQUE4QjtRQUMvQyxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztJQUNyQyxDQUFDO0lBRUQsSUFBSSxVQUFVLENBQUMsVUFBb0I7UUFDbEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7SUFDL0IsQ0FBQztJQUVELFlBQStCLEtBQWlCO1FBQy9DLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQURpQixVQUFLLEdBQUwsS0FBSyxDQUFZO1FBTHRDLGdCQUFXLEdBQWEsRUFBRSxDQUFDO1FBT3BDLElBQUksQ0FBQyxHQUFHLEdBQUcsc0JBQXNCLENBQUM7UUFDbEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxxQ0FBcUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsT0FBTyxHQUFHLDRCQUE0QixDQUFDO0lBQzdDLENBQUM7SUFFRCxLQUFLO1FBQ0osT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBMEIsNEJBQTRCLENBQUMsQ0FBQyxJQUFJLENBQ2hGLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQzFELEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3hCLENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBYSxHQUFHO1FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDMUUsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7U0FDdEc7YUFBTTtZQUNOLE9BQU8sOEJBQThCLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLGlCQUFpQixJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsY0FBYyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQztpQkFDdEssTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztTQUNkO0lBQ0YsQ0FBQztJQUVELGVBQWU7SUFDSSxJQUFJLENBQUMsR0FBVztRQUNsQyxPQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFrRCxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFzQixFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFKLENBQUM7SUFFa0IsV0FBVyxDQUFDLElBQVk7UUFDMUMsTUFBTSxXQUFXLEdBQUcsSUFBSTthQUN0QixLQUFLLENBQUMsR0FBRyxDQUFDO2FBQ1YsR0FBRyxDQUFDLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN6QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixPQUFPLFFBQVEsV0FBVyxFQUFFLENBQUM7SUFDOUIsQ0FBQzs4R0E3Q1csZUFBZTtrSEFBZixlQUFlOztTQUFmLGVBQWU7MkZBQWYsZUFBZTtrQkFEM0IsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJTHVBcGlSZXNwb25zZSwgSUx1QXBpU3VnZ2VzdGlvbiwgTHVBcGlWM1NlcnZpY2UgfSBmcm9tICdAbHVjY2EtZnJvbnQvbmcvYXBpJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSUx1VXNlciB9IGZyb20gJy4uL3VzZXIubW9kZWwnO1xuaW1wb3J0IHsgSUx1VXNlclNlcnZpY2UgfSBmcm9tICcuL3VzZXItc2VydmljZS5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMdVVzZXJWM1NlcnZpY2U8VSBleHRlbmRzIElMdVVzZXIgPSBJTHVVc2VyPiBleHRlbmRzIEx1QXBpVjNTZXJ2aWNlPFU+IGltcGxlbWVudHMgSUx1VXNlclNlcnZpY2U8VT4ge1xuXHRwcm90ZWN0ZWQgX2FwcEluc3RhbmNlSWQ6IG51bWJlciB8IHN0cmluZztcblx0c2V0IGFwcEluc3RhbmNlSWQoYXBwSW5zdGFuY2VJZDogbnVtYmVyIHwgc3RyaW5nKSB7XG5cdFx0dGhpcy5fYXBwSW5zdGFuY2VJZCA9IGFwcEluc3RhbmNlSWQ7XG5cdH1cblx0cHJvdGVjdGVkIF9vcGVyYXRpb25zOiBudW1iZXJbXSA9IFtdO1xuXHRzZXQgb3BlcmF0aW9ucyhvcGVyYXRpb25zOiBudW1iZXJbXSkge1xuXHRcdHRoaXMuX29wZXJhdGlvbnMgPSBvcGVyYXRpb25zO1xuXHR9XG5cblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIG92ZXJyaWRlIF9odHRwOiBIdHRwQ2xpZW50KSB7XG5cdFx0c3VwZXIoX2h0dHApO1xuXHRcdHRoaXMuYXBpID0gJy9hcGkvdjMvdXNlcnMvc2VhcmNoJztcblx0XHR0aGlzLmZpZWxkcyA9ICdpZCxmaXJzdG5hbWUsbGFzdG5hbWUscGljdHVyZVtocmVmXSc7XG5cdFx0dGhpcy5vcmRlckJ5ID0gJ2xhc3RuYW1lLGFzYyxmaXJzdG5hbWUsYXNjJztcblx0fVxuXG5cdGdldE1lKCk6IE9ic2VydmFibGU8VT4ge1xuXHRcdHJldHVybiB0aGlzLl9odHRwLmdldDxJTHVBcGlSZXNwb25zZTxJTHVVc2VyPj4oYC9hcGkvdjMvdXNlcnMvbWU/ZmllbGRzPWlkYCkucGlwZShcblx0XHRcdHN3aXRjaE1hcCgocikgPT4gdGhpcy5fZ2V0KHRoaXMudXJsICsgYCZpZD0ke3IuZGF0YS5pZH1gKSksXG5cdFx0XHRtYXAoKHVzZXJzKSA9PiB1c2Vyc1swXSksXG5cdFx0KTtcblx0fVxuXG5cdG92ZXJyaWRlIGdldCB1cmwoKSB7XG5cdFx0aWYgKCF0aGlzLl9hcHBJbnN0YW5jZUlkIHx8ICF0aGlzLl9vcGVyYXRpb25zIHx8ICF0aGlzLl9vcGVyYXRpb25zLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIGAke3RoaXMuX2FwaX0/JHtbLi4udGhpcy5fZmlsdGVycywgdGhpcy5fb3JkZXJCeSwgdGhpcy5fZmllbGRzXS5maWx0ZXIoKGYpID0+ICEhZikuam9pbignJicpfWA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBgL2FwaS92My91c2Vycy9zY29wZWRzZWFyY2g/JHtbLi4udGhpcy5fZmlsdGVycywgYGFwcEluc3RhbmNlSWQ9JHt0aGlzLl9hcHBJbnN0YW5jZUlkfWAsIGBvcGVyYXRpb25zPSR7dGhpcy5fb3BlcmF0aW9ucy5qb2luKCcsJyl9YCwgdGhpcy5fb3JkZXJCeSwgdGhpcy5fZmllbGRzXVxuXHRcdFx0XHQuZmlsdGVyKChmKSA9PiAhIWYpXG5cdFx0XHRcdC5qb2luKCcmJyl9YDtcblx0XHR9XG5cdH1cblxuXHQvLyBGSVhNRSB0eXBpbmdcblx0cHJvdGVjdGVkIG92ZXJyaWRlIF9nZXQodXJsOiBzdHJpbmcpIHtcblx0XHRyZXR1cm4gKHN1cGVyLl9nZXQodXJsKSBhcyB1bmtub3duIGFzIE9ic2VydmFibGU8SUx1QXBpU3VnZ2VzdGlvbjxVPltdPikucGlwZShtYXAoKHN1Z2dlc3Rpb25zKSA9PiBzdWdnZXN0aW9ucy5tYXAoKHM6IElMdUFwaVN1Z2dlc3Rpb248VT4pID0+IHMuaXRlbSkpKTtcblx0fVxuXG5cdHByb3RlY3RlZCBvdmVycmlkZSBfY2x1ZUZpbHRlcihjbHVlOiBzdHJpbmcpIHtcblx0XHRjb25zdCB1cmxTYWZlQ2x1ZSA9IGNsdWVcblx0XHRcdC5zcGxpdCgnICcpXG5cdFx0XHQubWFwKChjOiBzdHJpbmcpID0+IGVuY29kZVVSSUNvbXBvbmVudChjKSlcblx0XHRcdC5qb2luKCcsJyk7XG5cdFx0cmV0dXJuIGBjbHVlPSR7dXJsU2FmZUNsdWV9YDtcblx0fVxufVxuIl19