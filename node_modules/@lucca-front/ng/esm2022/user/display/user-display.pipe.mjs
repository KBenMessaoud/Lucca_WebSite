import { inject, Pipe } from '@angular/core';
import { LuDisplayFullname, LuDisplayHybrid, LuDisplayInitials, LU_DEFAULT_DISPLAY_POLICY } from './display-format.model';
import * as i0 from "@angular/core";
/**
 * Displays a user name according to specified format. Supported formats: f for first name,
 * F for first initial, l for last name, L for last initial.
 */
export function luUserDisplay(user, format = LuDisplayFullname.lastfirst) {
    let result = '';
    if (!!user && !!user.firstName && !!user.lastName) {
        switch (format) {
            case LuDisplayFullname.lastfirst:
                result = user.lastName + ' ' + user.firstName;
                break;
            case LuDisplayFullname.firstlast:
                result = user.firstName + ' ' + user.lastName;
                break;
            case LuDisplayFullname.first:
                result = user.firstName;
                break;
            case LuDisplayFullname.last:
                result = user.lastName;
                break;
            case LuDisplayInitials.lastfirst:
                result = user.lastName.charAt(0) + user.firstName.charAt(0);
                break;
            case LuDisplayInitials.firstlast:
                result = user.firstName.charAt(0) + user.lastName.charAt(0);
                break;
            case LuDisplayInitials.first:
                result = user.firstName.charAt(0);
                break;
            case LuDisplayInitials.last:
                result = user.lastName.charAt(0);
                break;
            case LuDisplayHybrid.firstIlastFull:
                result = user.firstName.charAt(0) + '. ' + user.lastName;
                break;
            case LuDisplayHybrid.lastIfirstFull:
                result = user.lastName.charAt(0) + '. ' + user.firstName;
                break;
            case LuDisplayHybrid.lastFullfirstI:
                result = user.lastName + ' ' + user.firstName.charAt(0) + '.';
                break;
            case LuDisplayHybrid.firstFulllastI:
                result = user.firstName + ' ' + user.lastName.charAt(0) + '.';
                break;
            default:
                break;
        }
    }
    return result;
}
/**
 * Displays a user name according to specified format. Supported formats: f for first name,
 * F for first initial, l for last name, L for last initial.
 */
class LuUserDisplayPipe {
    constructor() {
        this.defaultFormat = inject(LU_DEFAULT_DISPLAY_POLICY);
    }
    transform(user, format = this.defaultFormat) {
        return luUserDisplay(user, format);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserDisplayPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuUserDisplayPipe, isStandalone: true, name: "luUserDisplay" }); }
}
export { LuUserDisplayPipe };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserDisplayPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'luUserDisplay', standalone: true }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1kaXNwbGF5LnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy91c2VyL2Rpc3BsYXkvdXNlci1kaXNwbGF5LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRTVELE9BQU8sRUFBbUIsaUJBQWlCLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLHlCQUF5QixFQUFFLE1BQU0sd0JBQXdCLENBQUM7O0FBRTNJOzs7R0FHRztBQUNILE1BQU0sVUFBVSxhQUFhLENBQUMsSUFBYSxFQUFFLFNBQTBCLGlCQUFpQixDQUFDLFNBQVM7SUFDakcsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNsRCxRQUFRLE1BQU0sRUFBRTtZQUNmLEtBQUssaUJBQWlCLENBQUMsU0FBUztnQkFDL0IsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQzlDLE1BQU07WUFDUCxLQUFLLGlCQUFpQixDQUFDLFNBQVM7Z0JBQy9CLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUM5QyxNQUFNO1lBQ1AsS0FBSyxpQkFBaUIsQ0FBQyxLQUFLO2dCQUMzQixNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDeEIsTUFBTTtZQUNQLEtBQUssaUJBQWlCLENBQUMsSUFBSTtnQkFDMUIsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ3ZCLE1BQU07WUFDUCxLQUFLLGlCQUFpQixDQUFDLFNBQVM7Z0JBQy9CLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDNUQsTUFBTTtZQUNQLEtBQUssaUJBQWlCLENBQUMsU0FBUztnQkFDL0IsTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1RCxNQUFNO1lBQ1AsS0FBSyxpQkFBaUIsQ0FBQyxLQUFLO2dCQUMzQixNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xDLE1BQU07WUFDUCxLQUFLLGlCQUFpQixDQUFDLElBQUk7Z0JBQzFCLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakMsTUFBTTtZQUNQLEtBQUssZUFBZSxDQUFDLGNBQWM7Z0JBQ2xDLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFDekQsTUFBTTtZQUNQLEtBQUssZUFBZSxDQUFDLGNBQWM7Z0JBQ2xDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDekQsTUFBTTtZQUNQLEtBQUssZUFBZSxDQUFDLGNBQWM7Z0JBQ2xDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQzlELE1BQU07WUFDUCxLQUFLLGVBQWUsQ0FBQyxjQUFjO2dCQUNsQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUM5RCxNQUFNO1lBQ1A7Z0JBQ0MsTUFBTTtTQUNQO0tBQ0Q7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxNQUNhLGlCQUFpQjtJQUQ5QjtRQUVrQixrQkFBYSxHQUFHLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0tBS25FO0lBSE8sU0FBUyxDQUFDLElBQWEsRUFBRSxTQUEwQixJQUFJLENBQUMsYUFBYTtRQUMzRSxPQUFPLGFBQWEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDcEMsQ0FBQzs4R0FMVyxpQkFBaUI7NEdBQWpCLGlCQUFpQjs7U0FBakIsaUJBQWlCOzJGQUFqQixpQkFBaUI7a0JBRDdCLElBQUk7bUJBQUMsRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3QsIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElMdVVzZXIgfSBmcm9tICcuLi91c2VyLm1vZGVsJztcbmltcG9ydCB7IEx1RGlzcGxheUZvcm1hdCwgTHVEaXNwbGF5RnVsbG5hbWUsIEx1RGlzcGxheUh5YnJpZCwgTHVEaXNwbGF5SW5pdGlhbHMsIExVX0RFRkFVTFRfRElTUExBWV9QT0xJQ1kgfSBmcm9tICcuL2Rpc3BsYXktZm9ybWF0Lm1vZGVsJztcblxuLyoqXG4gKiBEaXNwbGF5cyBhIHVzZXIgbmFtZSBhY2NvcmRpbmcgdG8gc3BlY2lmaWVkIGZvcm1hdC4gU3VwcG9ydGVkIGZvcm1hdHM6IGYgZm9yIGZpcnN0IG5hbWUsXG4gKiBGIGZvciBmaXJzdCBpbml0aWFsLCBsIGZvciBsYXN0IG5hbWUsIEwgZm9yIGxhc3QgaW5pdGlhbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGx1VXNlckRpc3BsYXkodXNlcjogSUx1VXNlciwgZm9ybWF0OiBMdURpc3BsYXlGb3JtYXQgPSBMdURpc3BsYXlGdWxsbmFtZS5sYXN0Zmlyc3QpOiBzdHJpbmcge1xuXHRsZXQgcmVzdWx0ID0gJyc7XG5cdGlmICghIXVzZXIgJiYgISF1c2VyLmZpcnN0TmFtZSAmJiAhIXVzZXIubGFzdE5hbWUpIHtcblx0XHRzd2l0Y2ggKGZvcm1hdCkge1xuXHRcdFx0Y2FzZSBMdURpc3BsYXlGdWxsbmFtZS5sYXN0Zmlyc3Q6XG5cdFx0XHRcdHJlc3VsdCA9IHVzZXIubGFzdE5hbWUgKyAnICcgKyB1c2VyLmZpcnN0TmFtZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIEx1RGlzcGxheUZ1bGxuYW1lLmZpcnN0bGFzdDpcblx0XHRcdFx0cmVzdWx0ID0gdXNlci5maXJzdE5hbWUgKyAnICcgKyB1c2VyLmxhc3ROYW1lO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgTHVEaXNwbGF5RnVsbG5hbWUuZmlyc3Q6XG5cdFx0XHRcdHJlc3VsdCA9IHVzZXIuZmlyc3ROYW1lO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgTHVEaXNwbGF5RnVsbG5hbWUubGFzdDpcblx0XHRcdFx0cmVzdWx0ID0gdXNlci5sYXN0TmFtZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIEx1RGlzcGxheUluaXRpYWxzLmxhc3RmaXJzdDpcblx0XHRcdFx0cmVzdWx0ID0gdXNlci5sYXN0TmFtZS5jaGFyQXQoMCkgKyB1c2VyLmZpcnN0TmFtZS5jaGFyQXQoMCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBMdURpc3BsYXlJbml0aWFscy5maXJzdGxhc3Q6XG5cdFx0XHRcdHJlc3VsdCA9IHVzZXIuZmlyc3ROYW1lLmNoYXJBdCgwKSArIHVzZXIubGFzdE5hbWUuY2hhckF0KDApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgTHVEaXNwbGF5SW5pdGlhbHMuZmlyc3Q6XG5cdFx0XHRcdHJlc3VsdCA9IHVzZXIuZmlyc3ROYW1lLmNoYXJBdCgwKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIEx1RGlzcGxheUluaXRpYWxzLmxhc3Q6XG5cdFx0XHRcdHJlc3VsdCA9IHVzZXIubGFzdE5hbWUuY2hhckF0KDApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgTHVEaXNwbGF5SHlicmlkLmZpcnN0SWxhc3RGdWxsOlxuXHRcdFx0XHRyZXN1bHQgPSB1c2VyLmZpcnN0TmFtZS5jaGFyQXQoMCkgKyAnLiAnICsgdXNlci5sYXN0TmFtZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIEx1RGlzcGxheUh5YnJpZC5sYXN0SWZpcnN0RnVsbDpcblx0XHRcdFx0cmVzdWx0ID0gdXNlci5sYXN0TmFtZS5jaGFyQXQoMCkgKyAnLiAnICsgdXNlci5maXJzdE5hbWU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBMdURpc3BsYXlIeWJyaWQubGFzdEZ1bGxmaXJzdEk6XG5cdFx0XHRcdHJlc3VsdCA9IHVzZXIubGFzdE5hbWUgKyAnICcgKyB1c2VyLmZpcnN0TmFtZS5jaGFyQXQoMCkgKyAnLic7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBMdURpc3BsYXlIeWJyaWQuZmlyc3RGdWxsbGFzdEk6XG5cdFx0XHRcdHJlc3VsdCA9IHVzZXIuZmlyc3ROYW1lICsgJyAnICsgdXNlci5sYXN0TmFtZS5jaGFyQXQoMCkgKyAnLic7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGlzcGxheXMgYSB1c2VyIG5hbWUgYWNjb3JkaW5nIHRvIHNwZWNpZmllZCBmb3JtYXQuIFN1cHBvcnRlZCBmb3JtYXRzOiBmIGZvciBmaXJzdCBuYW1lLFxuICogRiBmb3IgZmlyc3QgaW5pdGlhbCwgbCBmb3IgbGFzdCBuYW1lLCBMIGZvciBsYXN0IGluaXRpYWwuXG4gKi9cbkBQaXBlKHsgbmFtZTogJ2x1VXNlckRpc3BsYXknLCBzdGFuZGFsb25lOiB0cnVlIH0pXG5leHBvcnQgY2xhc3MgTHVVc2VyRGlzcGxheVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblx0cHJpdmF0ZSByZWFkb25seSBkZWZhdWx0Rm9ybWF0ID0gaW5qZWN0KExVX0RFRkFVTFRfRElTUExBWV9QT0xJQ1kpO1xuXG5cdHB1YmxpYyB0cmFuc2Zvcm0odXNlcjogSUx1VXNlciwgZm9ybWF0OiBMdURpc3BsYXlGb3JtYXQgPSB0aGlzLmRlZmF1bHRGb3JtYXQpOiBzdHJpbmcge1xuXHRcdHJldHVybiBsdVVzZXJEaXNwbGF5KHVzZXIsIGZvcm1hdCk7XG5cdH1cbn1cbiJdfQ==