import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { LuDisplayFullname } from '../../display/index';
import * as i0 from "@angular/core";
import * as i1 from "../../display/index";
import * as i2 from "@angular/common/http";
export class ALuUserHomonymsService {
}
class LuUserHomonymsService extends ALuUserHomonymsService {
    extractHomonyms(users) {
        const usersByName = {};
        users.forEach((user) => {
            const name = this._pipe.transform(user, this._format);
            usersByName[name] = [...(usersByName[name] || []), user];
        });
        const nonUniqNames = Object.keys(usersByName).filter((key) => usersByName[key].length > 1);
        const homonyms = [];
        nonUniqNames.forEach((name) => homonyms.push(...usersByName[name]));
        return homonyms;
    }
    enrichHomonyms(homonyms) {
        if (!homonyms || homonyms.length === 0) {
            return of([]);
        }
        return this._http
            .get(`/api/v3/users`, {
            params: {
                id: homonyms.map((u) => u.id).join(','),
                fields: 'id,department.name',
            },
        })
            .pipe(map((res) => res.data.items), map((infos) => infos.map((info) => {
            const homonym = homonyms.find((h) => h.id === info.id);
            return {
                ...homonym,
                additionalInformation: info.department ? info.department.name : '',
            };
        })), catchError(() => of([])));
    }
    constructor(_pipe, _http) {
        super();
        this._pipe = _pipe;
        this._http = _http;
        this._format = LuDisplayFullname.lastfirst;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserHomonymsService, deps: [{ token: i1.LuUserDisplayPipe }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserHomonymsService }); }
}
export { LuUserHomonymsService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserHomonymsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LuUserDisplayPipe }, { type: i2.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1ob21vbnltcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvdXNlci9zZWxlY3QvaG9tb255bXMvdXNlci1ob21vbnltcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxpQkFBaUIsRUFBcUIsTUFBTSxxQkFBcUIsQ0FBQzs7OztBQVkzRSxNQUFNLE9BQWdCLHNCQUFzQjtDQUczQztBQUNELE1BQ2EscUJBQW1ELFNBQVEsc0JBQXlCO0lBRWhHLGVBQWUsQ0FBQyxLQUFVO1FBQ3pCLE1BQU0sV0FBVyxHQUFHLEVBQTRCLENBQUM7UUFDakQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3RCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdEQsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxRCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRTNGLE1BQU0sUUFBUSxHQUFRLEVBQUUsQ0FBQztRQUN6QixZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRSxPQUFPLFFBQVEsQ0FBQztJQUNqQixDQUFDO0lBRUQsY0FBYyxDQUFDLFFBQWE7UUFDM0IsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN2QyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQW9CLENBQUM7U0FDakM7UUFDRCxPQUFPLElBQUksQ0FBQyxLQUFLO2FBQ2YsR0FBRyxDQUFzRSxlQUFlLEVBQUU7WUFDMUYsTUFBTSxFQUFFO2dCQUNQLEVBQUUsRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztnQkFDdkMsTUFBTSxFQUFFLG9CQUFvQjthQUM1QjtTQUNELENBQUM7YUFDRCxJQUFJLENBQ0osR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUM1QixHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNiLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNsQixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN2RCxPQUFPO2dCQUNOLEdBQUcsT0FBTztnQkFDVixxQkFBcUIsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTthQUM3RCxDQUFDO1FBQ1IsQ0FBQyxDQUFDLENBQ0YsRUFDRCxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQ3hCLENBQUM7SUFDSixDQUFDO0lBQ0QsWUFBb0IsS0FBd0IsRUFBVSxLQUFpQjtRQUN0RSxLQUFLLEVBQUUsQ0FBQztRQURXLFVBQUssR0FBTCxLQUFLLENBQW1CO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQXhDL0QsWUFBTyxHQUFHLGlCQUFpQixDQUFDLFNBQVMsQ0FBQztJQTBDOUMsQ0FBQzs4R0EzQ1cscUJBQXFCO2tIQUFyQixxQkFBcUI7O1NBQXJCLHFCQUFxQjsyRkFBckIscUJBQXFCO2tCQURqQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBMdURpc3BsYXlGdWxsbmFtZSwgTHVVc2VyRGlzcGxheVBpcGUgfSBmcm9tICcuLi8uLi9kaXNwbGF5L2luZGV4JztcbmltcG9ydCB7IElMdVVzZXIgfSBmcm9tICcuLi8uLi91c2VyLm1vZGVsJztcblxuaW50ZXJmYWNlIElWM0NvbGxlY3Rpb25SZXNwb25zZTxUPiB7XG5cdGRhdGE6IHsgaXRlbXM6IFRbXSB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElMdVVzZXJIb21vbnltc1NlcnZpY2U8VSBleHRlbmRzIElMdVVzZXIgPSBJTHVVc2VyPiB7XG5cdGV4dHJhY3RIb21vbnltcyh1c2VyczogVVtdKTogVVtdO1xuXHRlbnJpY2hIb21vbnltcyhob21vbnltczogVVtdKTogT2JzZXJ2YWJsZTxVW10+O1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQUx1VXNlckhvbW9ueW1zU2VydmljZTxVIGV4dGVuZHMgSUx1VXNlciA9IElMdVVzZXI+IGltcGxlbWVudHMgSUx1VXNlckhvbW9ueW1zU2VydmljZTxVPiB7XG5cdGFic3RyYWN0IGV4dHJhY3RIb21vbnltcyh1c2VyczogVVtdKTogVVtdO1xuXHRhYnN0cmFjdCBlbnJpY2hIb21vbnltcyhob21vbnltczogVVtdKTogT2JzZXJ2YWJsZTxVW10+O1xufVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEx1VXNlckhvbW9ueW1zU2VydmljZTxVIGV4dGVuZHMgSUx1VXNlciA9IElMdVVzZXI+IGV4dGVuZHMgQUx1VXNlckhvbW9ueW1zU2VydmljZTxVPiBpbXBsZW1lbnRzIElMdVVzZXJIb21vbnltc1NlcnZpY2U8VT4ge1xuXHRwcml2YXRlIF9mb3JtYXQgPSBMdURpc3BsYXlGdWxsbmFtZS5sYXN0Zmlyc3Q7XG5cdGV4dHJhY3RIb21vbnltcyh1c2VyczogVVtdKTogVVtdIHtcblx0XHRjb25zdCB1c2Vyc0J5TmFtZSA9IHt9IGFzIHsgW2tleTogc3RyaW5nXTogVVtdIH07XG5cdFx0dXNlcnMuZm9yRWFjaCgodXNlcikgPT4ge1xuXHRcdFx0Y29uc3QgbmFtZSA9IHRoaXMuX3BpcGUudHJhbnNmb3JtKHVzZXIsIHRoaXMuX2Zvcm1hdCk7XG5cdFx0XHR1c2Vyc0J5TmFtZVtuYW1lXSA9IFsuLi4odXNlcnNCeU5hbWVbbmFtZV0gfHwgW10pLCB1c2VyXTtcblx0XHR9KTtcblxuXHRcdGNvbnN0IG5vblVuaXFOYW1lcyA9IE9iamVjdC5rZXlzKHVzZXJzQnlOYW1lKS5maWx0ZXIoKGtleSkgPT4gdXNlcnNCeU5hbWVba2V5XS5sZW5ndGggPiAxKTtcblxuXHRcdGNvbnN0IGhvbW9ueW1zOiBVW10gPSBbXTtcblx0XHRub25VbmlxTmFtZXMuZm9yRWFjaCgobmFtZSkgPT4gaG9tb255bXMucHVzaCguLi51c2Vyc0J5TmFtZVtuYW1lXSkpO1xuXHRcdHJldHVybiBob21vbnltcztcblx0fVxuXG5cdGVucmljaEhvbW9ueW1zKGhvbW9ueW1zOiBVW10pOiBPYnNlcnZhYmxlPFVbXT4ge1xuXHRcdGlmICghaG9tb255bXMgfHwgaG9tb255bXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gb2YoW10pIGFzIE9ic2VydmFibGU8VVtdPjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuX2h0dHBcblx0XHRcdC5nZXQ8SVYzQ29sbGVjdGlvblJlc3BvbnNlPHsgaWQ6IG51bWJlcjsgZGVwYXJ0bWVudDogeyBuYW1lOiBzdHJpbmcgfSB9Pj4oYC9hcGkvdjMvdXNlcnNgLCB7XG5cdFx0XHRcdHBhcmFtczoge1xuXHRcdFx0XHRcdGlkOiBob21vbnltcy5tYXAoKHUpID0+IHUuaWQpLmpvaW4oJywnKSxcblx0XHRcdFx0XHRmaWVsZHM6ICdpZCxkZXBhcnRtZW50Lm5hbWUnLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSlcblx0XHRcdC5waXBlKFxuXHRcdFx0XHRtYXAoKHJlcykgPT4gcmVzLmRhdGEuaXRlbXMpLFxuXHRcdFx0XHRtYXAoKGluZm9zKSA9PlxuXHRcdFx0XHRcdGluZm9zLm1hcCgoaW5mbykgPT4ge1xuXHRcdFx0XHRcdFx0Y29uc3QgaG9tb255bSA9IGhvbW9ueW1zLmZpbmQoKGgpID0+IGguaWQgPT09IGluZm8uaWQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0Li4uaG9tb255bSxcblx0XHRcdFx0XHRcdFx0YWRkaXRpb25hbEluZm9ybWF0aW9uOiBpbmZvLmRlcGFydG1lbnQgPyBpbmZvLmRlcGFydG1lbnQubmFtZSA6ICcnLFxuXHRcdFx0XHRcdFx0fSBhcyBVO1xuXHRcdFx0XHRcdH0pLFxuXHRcdFx0XHQpLFxuXHRcdFx0XHRjYXRjaEVycm9yKCgpID0+IG9mKFtdKSksXG5cdFx0XHQpO1xuXHR9XG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgX3BpcGU6IEx1VXNlckRpc3BsYXlQaXBlLCBwcml2YXRlIF9odHRwOiBIdHRwQ2xpZW50KSB7XG5cdFx0c3VwZXIoKTtcblx0fVxufVxuIl19