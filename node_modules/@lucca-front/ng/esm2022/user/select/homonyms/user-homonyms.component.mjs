import { ChangeDetectionStrategy, Component, forwardRef, Inject, Optional, Self, SkipSelf } from '@angular/core';
import { ALuOptionOperator } from '@lucca-front/ng/option';
import { merge } from 'rxjs';
import { map, switchMap, withLatestFrom } from 'rxjs/operators';
import { LuUserDisplayPipe } from '../../display';
import { ALuUserHomonymsService, LuUserHomonymsService } from './user-homonyms.service';
import * as i0 from "@angular/core";
class LuUserHomonymsComponent {
    set inOptions$(in$) {
        this._outOptions$ = merge(in$, in$.pipe(map((users) => this._service.extractHomonyms(users)), switchMap((homonyms) => this._service.enrichHomonyms(homonyms)), withLatestFrom(in$), map(([enrichedUsers, users]) => {
            const result = [...users];
            enrichedUsers.forEach((user) => {
                const i = result.findIndex((u) => u.id === user.id);
                result[i] = user;
            });
            return result;
        })));
    }
    get outOptions$() {
        return this._outOptions$;
    }
    constructor(hostService, selfService) {
        this._service = hostService || selfService;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserHomonymsComponent, deps: [{ token: ALuUserHomonymsService, optional: true, skipSelf: true }, { token: ALuUserHomonymsService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuUserHomonymsComponent, isStandalone: true, selector: "lu-user-homonyms", providers: [
            LuUserDisplayPipe,
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuUserHomonymsComponent),
                multi: true,
            },
            {
                provide: ALuUserHomonymsService,
                useClass: LuUserHomonymsService,
            },
        ], ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuUserHomonymsComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserHomonymsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lu-user-homonyms',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    standalone: true,
                    providers: [
                        LuUserDisplayPipe,
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuUserHomonymsComponent),
                            multi: true,
                        },
                        {
                            provide: ALuUserHomonymsService,
                            useClass: LuUserHomonymsService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [ALuUserHomonymsService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [ALuUserHomonymsService]
                }, {
                    type: Self
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1ob21vbnltcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy91c2VyL3NlbGVjdC9ob21vbnltcy91c2VyLWhvbW9ueW1zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakgsT0FBTyxFQUFFLGlCQUFpQixFQUFxQixNQUFNLHdCQUF3QixDQUFDO0FBQzlFLE9BQU8sRUFBRSxLQUFLLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDekMsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWxELE9BQU8sRUFBRSxzQkFBc0IsRUFBMEIscUJBQXFCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7QUFFaEgsTUFrQmEsdUJBQXVCO0lBQ25DLElBQUksVUFBVSxDQUFDLEdBQW9CO1FBQ2xDLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUN4QixHQUFHLEVBQ0gsR0FBRyxDQUFDLElBQUksQ0FDUCxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQ3BELFNBQVMsQ0FBQyxDQUFDLFFBQWEsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDcEUsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUNuQixHQUFHLENBQWtCLENBQUMsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtZQUMvQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7WUFDMUIsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUM5QixNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDcEQsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUNsQixDQUFDLENBQUMsQ0FBQztZQUNILE9BQU8sTUFBTSxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQ0YsQ0FDRCxDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUksV0FBVztRQUNkLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMxQixDQUFDO0lBRUQsWUFJQyxXQUFzQyxFQUd0QyxXQUFzQztRQUV0QyxJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUM7SUFDNUMsQ0FBQzs4R0FsQ1csdUJBQXVCLGtCQXlCMUIsc0JBQXNCLDZDQUl0QixzQkFBc0I7a0dBN0JuQix1QkFBdUIsK0RBYnhCO1lBQ1YsaUJBQWlCO1lBQ2pCO2dCQUNDLE9BQU8sRUFBRSxpQkFBaUI7Z0JBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUM7Z0JBQ3RELEtBQUssRUFBRSxJQUFJO2FBQ1g7WUFDRDtnQkFDQyxPQUFPLEVBQUUsc0JBQXNCO2dCQUMvQixRQUFRLEVBQUUscUJBQXFCO2FBQy9CO1NBQ0QsMEJBZFMsRUFBRTs7U0FnQkEsdUJBQXVCOzJGQUF2Qix1QkFBdUI7a0JBbEJuQyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRSxFQUFFO29CQUNaLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsU0FBUyxFQUFFO3dCQUNWLGlCQUFpQjt3QkFDakI7NEJBQ0MsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsd0JBQXdCLENBQUM7NEJBQ3RELEtBQUssRUFBRSxJQUFJO3lCQUNYO3dCQUNEOzRCQUNDLE9BQU8sRUFBRSxzQkFBc0I7NEJBQy9CLFFBQVEsRUFBRSxxQkFBcUI7eUJBQy9CO3FCQUNEO2lCQUNEOzswQkEwQkUsTUFBTTsyQkFBQyxzQkFBc0I7OzBCQUM3QixRQUFROzswQkFDUixRQUFROzswQkFFUixNQUFNOzJCQUFDLHNCQUFzQjs7MEJBQzdCLElBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbmplY3QsIE9wdGlvbmFsLCBTZWxmLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQUx1T3B0aW9uT3BlcmF0b3IsIElMdU9wdGlvbk9wZXJhdG9yIH0gZnJvbSAnQGx1Y2NhLWZyb250L25nL29wdGlvbic7XG5pbXBvcnQgeyBtZXJnZSwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAsIHdpdGhMYXRlc3RGcm9tIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTHVVc2VyRGlzcGxheVBpcGUgfSBmcm9tICcuLi8uLi9kaXNwbGF5JztcbmltcG9ydCB7IElMdVVzZXIgfSBmcm9tICcuLi8uLi91c2VyLm1vZGVsJztcbmltcG9ydCB7IEFMdVVzZXJIb21vbnltc1NlcnZpY2UsIElMdVVzZXJIb21vbnltc1NlcnZpY2UsIEx1VXNlckhvbW9ueW1zU2VydmljZSB9IGZyb20gJy4vdXNlci1ob21vbnltcy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnbHUtdXNlci1ob21vbnltcycsXG5cdHRlbXBsYXRlOiAnJyxcblx0Y2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG5cdHByb3ZpZGVyczogW1xuXHRcdEx1VXNlckRpc3BsYXlQaXBlLFxuXHRcdHtcblx0XHRcdHByb3ZpZGU6IEFMdU9wdGlvbk9wZXJhdG9yLFxuXHRcdFx0dXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTHVVc2VySG9tb255bXNDb21wb25lbnQpLFxuXHRcdFx0bXVsdGk6IHRydWUsXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRwcm92aWRlOiBBTHVVc2VySG9tb255bXNTZXJ2aWNlLFxuXHRcdFx0dXNlQ2xhc3M6IEx1VXNlckhvbW9ueW1zU2VydmljZSxcblx0XHR9LFxuXHRdLFxufSlcbmV4cG9ydCBjbGFzcyBMdVVzZXJIb21vbnltc0NvbXBvbmVudDxVIGV4dGVuZHMgSUx1VXNlciA9IElMdVVzZXI+IGltcGxlbWVudHMgSUx1T3B0aW9uT3BlcmF0b3I8VT4ge1xuXHRzZXQgaW5PcHRpb25zJChpbiQ6IE9ic2VydmFibGU8VVtdPikge1xuXHRcdHRoaXMuX291dE9wdGlvbnMkID0gbWVyZ2UoXG5cdFx0XHRpbiQsXG5cdFx0XHRpbiQucGlwZShcblx0XHRcdFx0bWFwKCh1c2VycykgPT4gdGhpcy5fc2VydmljZS5leHRyYWN0SG9tb255bXModXNlcnMpKSxcblx0XHRcdFx0c3dpdGNoTWFwKChob21vbnltczogVVtdKSA9PiB0aGlzLl9zZXJ2aWNlLmVucmljaEhvbW9ueW1zKGhvbW9ueW1zKSksXG5cdFx0XHRcdHdpdGhMYXRlc3RGcm9tKGluJCksXG5cdFx0XHRcdG1hcDxbVVtdLCBVW11dLCBVW10+KChbZW5yaWNoZWRVc2VycywgdXNlcnNdKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgcmVzdWx0ID0gWy4uLnVzZXJzXTtcblx0XHRcdFx0XHRlbnJpY2hlZFVzZXJzLmZvckVhY2goKHVzZXIpID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IGkgPSByZXN1bHQuZmluZEluZGV4KCh1KSA9PiB1LmlkID09PSB1c2VyLmlkKTtcblx0XHRcdFx0XHRcdHJlc3VsdFtpXSA9IHVzZXI7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fSksXG5cdFx0XHQpLFxuXHRcdCk7XG5cdH1cblx0cHJpdmF0ZSBfb3V0T3B0aW9ucyQ6IE9ic2VydmFibGU8VVtdPjtcblx0Z2V0IG91dE9wdGlvbnMkKCkge1xuXHRcdHJldHVybiB0aGlzLl9vdXRPcHRpb25zJDtcblx0fVxuXHRwcml2YXRlIF9zZXJ2aWNlOiBJTHVVc2VySG9tb255bXNTZXJ2aWNlPFU+O1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRASW5qZWN0KEFMdVVzZXJIb21vbnltc1NlcnZpY2UpXG5cdFx0QE9wdGlvbmFsKClcblx0XHRAU2tpcFNlbGYoKVxuXHRcdGhvc3RTZXJ2aWNlOiBJTHVVc2VySG9tb255bXNTZXJ2aWNlPFU+LFxuXHRcdEBJbmplY3QoQUx1VXNlckhvbW9ueW1zU2VydmljZSlcblx0XHRAU2VsZigpXG5cdFx0c2VsZlNlcnZpY2U6IElMdVVzZXJIb21vbnltc1NlcnZpY2U8VT4sXG5cdCkge1xuXHRcdHRoaXMuX3NlcnZpY2UgPSBob3N0U2VydmljZSB8fCBzZWxmU2VydmljZTtcblx0fVxufVxuIl19