import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, ElementRef, forwardRef, HostBinding, Inject, Input, Optional, Output, Self, SkipSelf, ViewChild } from '@angular/core';
import { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { ALuOnCloseSubscriber, ALuOnOpenSubscriber, ALuOnScrollBottomSubscriber, getIntl } from '@lucca-front/ng/core';
import { ALuOptionOperator, LuOptionPlaceholderComponent } from '@lucca-front/ng/option';
import { BehaviorSubject, combineLatest, merge, of, Subject, Subscription } from 'rxjs';
import { catchError, debounceTime, filter, map, scan, share, startWith, switchMap } from 'rxjs/operators';
import { ALuUserService, LuUserV3Service } from '../../service/index';
import { LU_USER_SEARCHER_TRANSLATIONS } from './user-searcher.translate';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/common";
import * as i3 from "../../service/index";
class LuUserPagedSearcherComponent {
    set fields(fields) {
        this._service.fields = fields;
    }
    set filters(filters) {
        this._service.filters = filters;
    }
    set orderBy(orderBy) {
        this._service.orderBy = orderBy;
    }
    set appInstanceId(appInstanceId) {
        this._service.appInstanceId = appInstanceId;
    }
    set operations(operations) {
        this._service.operations = operations;
    }
    constructor(hostService, selfService) {
        this._subs = new Subscription();
        this.fixed = true;
        this.enableFormerEmployees = false;
        // page$: Subject<number>;
        this.outOptions$ = new Subject();
        this._loading = false;
        this._isOpened$ = new BehaviorSubject(false);
        this._page$ = new Subject();
        this._options = [];
        this.intl = getIntl(LU_USER_SEARCHER_TRANSLATIONS);
        this._service = hostService || selfService;
        const clue = new FormControl('');
        this.form = new FormGroup({
            clue,
            formerEmployees: new FormControl(false),
        });
        this.clueChange = clue.valueChanges;
    }
    ngOnInit() {
        const formValue$ = this.form.valueChanges.pipe(startWith(this.form.value));
        const pager$ = this._page$.pipe(scan((acc) => acc + 1, 0), startWith(0));
        const query$ = combineLatest([formValue$.pipe(debounceTime(250)), this._isOpened$]).pipe(filter(([, isOpened]) => isOpened), switchMap(([val]) => pager$.pipe(map((page) => [val, page]))), share());
        const results$ = query$.pipe(switchMap(([val, page]) => {
            const filters = [];
            if (val.formerEmployees) {
                filters.push(`formerEmployees=true`);
            }
            return this._service.searchPaged(val.clue, page, filters).pipe(catchError(() => of([])), map((items) => [items, page]));
        }), share());
        const resultsSub = results$.subscribe(([items, page]) => {
            if (page === 0) {
                this._options = [...items];
            }
            else {
                this._options.push(...items);
            }
            this._isLastPage = !items.length;
            this.outOptions$.next([...this._options]);
        });
        this._subs.add(resultsSub);
        this.loading$ = merge(query$.pipe(map(() => true)), results$.pipe(map(() => false)));
        const loadingSub = this.loading$.subscribe((l) => (this._loading = l));
        this._subs.add(loadingSub);
        this.empty$ = this.outOptions$.pipe(map((o) => o.length === 0));
    }
    ngOnDestroy() {
        this._subs.unsubscribe();
    }
    onOpen() {
        this.searchInput.nativeElement.focus();
        this._isOpened$.next(true);
    }
    onScrollBottom() {
        if (!this._loading && !this._isLastPage) {
            this._page$.next();
        }
    }
    onClose() {
        this._isOpened$.next(false);
        this.outOptions$.next([]);
        this.reset();
    }
    reset() {
        if (this.form.dirty) {
            this.form.reset();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserPagedSearcherComponent, deps: [{ token: ALuUserService, optional: true, skipSelf: true }, { token: ALuUserService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuUserPagedSearcherComponent, isStandalone: true, selector: "lu-user-paged-searcher", inputs: { fields: "fields", filters: "filters", orderBy: "orderBy", appInstanceId: "appInstanceId", operations: "operations", enableFormerEmployees: "enableFormerEmployees" }, outputs: { clueChange: "clueChange" }, host: { properties: { "class.position-fixed": "this.fixed" } }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuUserPagedSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuUserPagedSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnCloseSubscriber,
                useExisting: forwardRef(() => LuUserPagedSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnScrollBottomSubscriber,
                useExisting: forwardRef(() => LuUserPagedSearcherComponent),
                multi: true,
            },
            {
                provide: ALuUserService,
                useClass: LuUserV3Service,
            },
        ], viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: "<form [formGroup]=\"form\">\n\t<div class=\"textfield mod-search\" [class.is-loading]=\"loading$ | async\">\n\t\t<input #searchInput class=\"textfield-input\" formControlName=\"clue\" />\n\t</div>\n\n\t<label class=\"checkbox mod-formerEmployee mod-S\" *ngIf=\"enableFormerEmployees\">\n\t\t<input class=\"checkbox-input\" type=\"checkbox\" formControlName=\"formerEmployees\" />\n\t\t<span class=\"checkbox-label\">{{ intl.includeFormerEmployees }}</span>\n\t</label>\n</form>\n\n<lu-option-placeholder *ngIf=\"(empty$ | async) && (loading$ | async) === false\" (onClear)=\"reset()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"], dependencies: [{ kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "component", type: LuOptionPlaceholderComponent, selector: "lu-option-placeholder", outputs: ["onClear"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuUserPagedSearcherComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserPagedSearcherComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-user-paged-searcher', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [ReactiveFormsModule, CommonModule, LuOptionPlaceholderComponent], providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuUserPagedSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuUserPagedSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnCloseSubscriber,
                            useExisting: forwardRef(() => LuUserPagedSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnScrollBottomSubscriber,
                            useExisting: forwardRef(() => LuUserPagedSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuUserService,
                            useClass: LuUserV3Service,
                        },
                    ], template: "<form [formGroup]=\"form\">\n\t<div class=\"textfield mod-search\" [class.is-loading]=\"loading$ | async\">\n\t\t<input #searchInput class=\"textfield-input\" formControlName=\"clue\" />\n\t</div>\n\n\t<label class=\"checkbox mod-formerEmployee mod-S\" *ngIf=\"enableFormerEmployees\">\n\t\t<input class=\"checkbox-input\" type=\"checkbox\" formControlName=\"formerEmployees\" />\n\t\t<span class=\"checkbox-label\">{{ intl.includeFormerEmployees }}</span>\n\t</label>\n</form>\n\n<lu-option-placeholder *ngIf=\"(empty$ | async) && (loading$ | async) === false\" (onClear)=\"reset()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"] }]
        }], ctorParameters: function () { return [{ type: i3.LuUserV3Service, decorators: [{
                    type: Inject,
                    args: [ALuUserService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i3.LuUserV3Service, decorators: [{
                    type: Inject,
                    args: [ALuUserService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { fixed: [{
                type: HostBinding,
                args: ['class.position-fixed']
            }], searchInput: [{
                type: ViewChild,
                args: ['searchInput', { read: ElementRef, static: true }]
            }], fields: [{
                type: Input
            }], filters: [{
                type: Input
            }], orderBy: [{
                type: Input
            }], appInstanceId: [{
                type: Input
            }], operations: [{
                type: Input
            }], enableFormerEmployees: [{
                type: Input
            }], clueChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,