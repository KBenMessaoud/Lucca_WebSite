import { Directive, forwardRef, Inject, Input, Optional, Self, SkipSelf } from '@angular/core';
import { ALuOnOpenSubscriber } from '@lucca-front/ng/core';
import { ALuOptionOperator } from '@lucca-front/ng/option';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { ALuUserService, LuUserV3Service } from '../../service/index';
import * as i0 from "@angular/core";
import * as i1 from "../../service/index";
class LuUserMeOptionDirective {
    set luUserMeOptionFields(fields) {
        this._service.fields = fields;
    }
    set luUserMeOptionFilters(filters) {
        this._service.filters = filters;
    }
    set luUserMeOptionOrderBy(orderBy) {
        this._service.orderBy = orderBy;
    }
    set luUserMeOptionAppInstanceId(appInstanceId) {
        this._service.appInstanceId = appInstanceId;
    }
    set luUserMeOptionOperations(operations) {
        this._service.operations = operations;
    }
    set luUserMeOptionClue(clue) {
        clue ? this.hideMe() : this.displayMe();
    }
    set inOptions$(in$) {
        this.outOptions$ = combineLatest([in$, this.meDisplayed$]).pipe(map(([options, meDisplayed]) => (meDisplayed ? options?.filter((o) => o.id !== this.me?.id) : options)));
    }
    constructor(hostService, selfService, _vcr, _templateRef) {
        this._vcr = _vcr;
        this._templateRef = _templateRef;
        this.me = undefined;
        this.meDisplayed$ = new BehaviorSubject(false);
        this._service = hostService || selfService;
    }
    onOpen() {
        this._service.getMe().subscribe((me) => {
            this.me = me;
            this.displayMe();
        });
    }
    displayMe() {
        if (this.me && !this.meDisplayed$.value) {
            this.meDisplayed$.next(true);
            this._viewRef = this._vcr.createEmbeddedView(this._templateRef, {
                $implicit: this.me,
            });
        }
    }
    hideMe() {
        if (this.me && this.meDisplayed$.value && this._viewRef) {
            this.meDisplayed$.next(false);
            this._viewRef.destroy();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserMeOptionDirective, deps: [{ token: ALuUserService, optional: true, skipSelf: true }, { token: ALuUserService, self: true }, { token: i0.ViewContainerRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuUserMeOptionDirective, isStandalone: true, selector: "[luUserMeOption]", inputs: { luUserMeOptionFields: "luUserMeOptionFields", luUserMeOptionFilters: "luUserMeOptionFilters", luUserMeOptionOrderBy: "luUserMeOptionOrderBy", luUserMeOptionAppInstanceId: "luUserMeOptionAppInstanceId", luUserMeOptionOperations: "luUserMeOptionOperations", luUserMeOptionClue: "luUserMeOptionClue" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuUserMeOptionDirective),
                multi: true,
            },
            {
                provide: ALuUserService,
                useClass: LuUserV3Service,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuUserMeOptionDirective),
                multi: true,
            },
        ], ngImport: i0 }); }
}
export { LuUserMeOptionDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserMeOptionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luUserMeOption]',
                    standalone: true,
                    providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuUserMeOptionDirective),
                            multi: true,
                        },
                        {
                            provide: ALuUserService,
                            useClass: LuUserV3Service,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuUserMeOptionDirective),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.LuUserV3Service, decorators: [{
                    type: Inject,
                    args: [ALuUserService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.LuUserV3Service, decorators: [{
                    type: Inject,
                    args: [ALuUserService]
                }, {
                    type: Self
                }] }, { type: i0.ViewContainerRef }, { type: i0.TemplateRef }]; }, propDecorators: { luUserMeOptionFields: [{
                type: Input
            }], luUserMeOptionFilters: [{
                type: Input
            }], luUserMeOptionOrderBy: [{
                type: Input
            }], luUserMeOptionAppInstanceId: [{
                type: Input
            }], luUserMeOptionOperations: [{
                type: Input
            }], luUserMeOptionClue: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,