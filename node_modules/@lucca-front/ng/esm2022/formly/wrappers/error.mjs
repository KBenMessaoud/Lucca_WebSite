import { ChangeDetectionStrategy, Component, Input, ViewChild, ViewContainerRef } from '@angular/core';
import { FieldWrapper } from '@ngx-formly/core';
import { buildAddWrapperExtension } from '../formly.utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
// wrapper
class LuFormlyWrapperError extends FieldWrapper {
    get validationId() {
        return this.field.id + '-message';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyWrapperError, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyWrapperError, selector: "lu-formly-wrapper-error", viewQueries: [{ propertyName: "fieldComponent", first: true, predicate: ["fieldComponent"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0, template: "<ng-container #fieldComponent></ng-container>\n<div class=\"textfield-messages\" *ngIf=\"formControl.touched && formControl.invalid\" [id]=\"validationId\">\n\t<lu-formly-error-message [formControl]=\"formControl\" [field]=\"field\"></lu-formly-error-message>\n</div>\n", styles: [":host{display:inherit;flex-direction:inherit;flex:1 1 auto;width:100%}\n"], dependencies: [{ kind: "directive", type: i0.forwardRef(function () { return i1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i0.forwardRef(function () { return i2.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i0.forwardRef(function () { return i2.FormControlDirective; }), selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i0.forwardRef(function () { return LuFormlyErrorMessage; }), selector: "lu-formly-error-message", inputs: ["formControl", "field"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuFormlyWrapperError };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyWrapperError, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-wrapper-error', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container #fieldComponent></ng-container>\n<div class=\"textfield-messages\" *ngIf=\"formControl.touched && formControl.invalid\" [id]=\"validationId\">\n\t<lu-formly-error-message [formControl]=\"formControl\" [field]=\"field\"></lu-formly-error-message>\n</div>\n", styles: [":host{display:inherit;flex-direction:inherit;flex:1 1 auto;width:100%}\n"] }]
        }], propDecorators: { fieldComponent: [{
                type: ViewChild,
                args: ['fieldComponent', { read: ViewContainerRef, static: true }]
            }] } });
// component that display the right error message
class LuFormlyErrorMessage {
    get errorMessages() {
        const messages = [];
        if (this.formControl?.errors) {
            Object.keys(this.formControl.errors).forEach((key) => {
                if (this.field.validation?.messages?.[key]) {
                    messages.push(this.field.validation.messages[key]);
                }
            });
        }
        return messages;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyErrorMessage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyErrorMessage, selector: "lu-formly-error-message", inputs: { formControl: "formControl", field: "field" }, ngImport: i0, template: `<div class="textfield-messages-error" *ngFor="let message of errorMessages">
		{{ message }}
	</div>`, isInline: true, dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuFormlyErrorMessage };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyErrorMessage, decorators: [{
            type: Component,
            args: [{
                    selector: 'lu-formly-error-message',
                    template: `<div class="textfield-messages-error" *ngFor="let message of errorMessages">
		{{ message }}
	</div>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { formControl: [{
                type: Input
            }], field: [{
                type: Input
            }] } });
export const templateErrorExtension = buildAddWrapperExtension('error', (field) => !!field.validation);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy9mb3JtbHkvd3JhcHBlcnMvZXJyb3IudHMiLCIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy9mb3JtbHkvd3JhcHBlcnMvZXJyb3IuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkcsT0FBTyxFQUFtQixZQUFZLEVBQXFCLE1BQU0sa0JBQWtCLENBQUM7QUFDcEYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7QUFFM0QsVUFBVTtBQUNWLE1BT2Esb0JBQXFCLFNBQVEsWUFBNkI7SUFJdEUsSUFBSSxZQUFZO1FBQ2YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxVQUFVLENBQUM7SUFDbkMsQ0FBQzs4R0FOVyxvQkFBb0I7a0dBQXBCLG9CQUFvQiw0SkFDSyxnQkFBZ0Isa0VDZHRELCtRQUlBLHlwQkQyQmEsb0JBQW9COztTQWxCcEIsb0JBQW9COzJGQUFwQixvQkFBb0I7a0JBUGhDLFNBQVM7K0JBQ0MseUJBQXlCLG1CQUdsQix1QkFBdUIsQ0FBQyxNQUFNOzhCQUt0QyxjQUFjO3NCQUR0QixTQUFTO3VCQUFDLGdCQUFnQixFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7O0FBUXRFLGlEQUFpRDtBQUNqRCxNQVFhLG9CQUFvQjtJQUloQyxJQUFJLGFBQWE7UUFDaEIsTUFBTSxRQUFRLEdBQWEsRUFBRSxDQUFDO1FBQzlCLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUU7WUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUNwRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUMzQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQVcsQ0FBQyxDQUFDO2lCQUM3RDtZQUNGLENBQUMsQ0FBQyxDQUFDO1NBQ0g7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNqQixDQUFDOzhHQWRXLG9CQUFvQjtrR0FBcEIsb0JBQW9CLHVIQU50Qjs7UUFFSDs7U0FJSyxvQkFBb0I7MkZBQXBCLG9CQUFvQjtrQkFSaEMsU0FBUzttQkFBQztvQkFDVixRQUFRLEVBQUUseUJBQXlCO29CQUNuQyxRQUFRLEVBQUU7O1FBRUg7b0JBQ1AsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQy9DOzhCQUdTLFdBQVc7c0JBQW5CLEtBQUs7Z0JBQ0csS0FBSztzQkFBYixLQUFLOztBQWVQLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBWaWV3Q2hpbGQsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRmllbGRUeXBlQ29uZmlnLCBGaWVsZFdyYXBwZXIsIEZvcm1seUZpZWxkQ29uZmlnIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5pbXBvcnQgeyBidWlsZEFkZFdyYXBwZXJFeHRlbnNpb24gfSBmcm9tICcuLi9mb3JtbHkudXRpbHMnO1xuXG4vLyB3cmFwcGVyXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICdsdS1mb3JtbHktd3JhcHBlci1lcnJvcicsXG5cdHN0eWxlVXJsczogWydmbGV4LWxheW91dC5zY3NzJ10sXG5cdHRlbXBsYXRlVXJsOiAnLi9lcnJvci5odG1sJyxcblx0Y2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtY2xhc3Mtc3VmZml4XG5leHBvcnQgY2xhc3MgTHVGb3JtbHlXcmFwcGVyRXJyb3IgZXh0ZW5kcyBGaWVsZFdyYXBwZXI8RmllbGRUeXBlQ29uZmlnPiB7XG5cdEBWaWV3Q2hpbGQoJ2ZpZWxkQ29tcG9uZW50JywgeyByZWFkOiBWaWV3Q29udGFpbmVyUmVmLCBzdGF0aWM6IHRydWUgfSlcblx0b3ZlcnJpZGUgZmllbGRDb21wb25lbnQ6IFZpZXdDb250YWluZXJSZWY7XG5cblx0Z2V0IHZhbGlkYXRpb25JZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5maWVsZC5pZCArICctbWVzc2FnZSc7XG5cdH1cbn1cblxuLy8gY29tcG9uZW50IHRoYXQgZGlzcGxheSB0aGUgcmlnaHQgZXJyb3IgbWVzc2FnZVxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnbHUtZm9ybWx5LWVycm9yLW1lc3NhZ2UnLFxuXHR0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJ0ZXh0ZmllbGQtbWVzc2FnZXMtZXJyb3JcIiAqbmdGb3I9XCJsZXQgbWVzc2FnZSBvZiBlcnJvck1lc3NhZ2VzXCI+XG5cdFx0e3sgbWVzc2FnZSB9fVxuXHQ8L2Rpdj5gLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1jbGFzcy1zdWZmaXhcbmV4cG9ydCBjbGFzcyBMdUZvcm1seUVycm9yTWVzc2FnZSB7XG5cdEBJbnB1dCgpIGZvcm1Db250cm9sPzogRm9ybUNvbnRyb2w7XG5cdEBJbnB1dCgpIGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZztcblxuXHRnZXQgZXJyb3JNZXNzYWdlcygpOiBzdHJpbmdbXSB7XG5cdFx0Y29uc3QgbWVzc2FnZXM6IHN0cmluZ1tdID0gW107XG5cdFx0aWYgKHRoaXMuZm9ybUNvbnRyb2w/LmVycm9ycykge1xuXHRcdFx0T2JqZWN0LmtleXModGhpcy5mb3JtQ29udHJvbC5lcnJvcnMpLmZvckVhY2goKGtleSkgPT4ge1xuXHRcdFx0XHRpZiAodGhpcy5maWVsZC52YWxpZGF0aW9uPy5tZXNzYWdlcz8uW2tleV0pIHtcblx0XHRcdFx0XHRtZXNzYWdlcy5wdXNoKHRoaXMuZmllbGQudmFsaWRhdGlvbi5tZXNzYWdlc1trZXldIGFzIHN0cmluZyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0XHRyZXR1cm4gbWVzc2FnZXM7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IHRlbXBsYXRlRXJyb3JFeHRlbnNpb24gPSBidWlsZEFkZFdyYXBwZXJFeHRlbnNpb24oJ2Vycm9yJywgKGZpZWxkKSA9PiAhIWZpZWxkLnZhbGlkYXRpb24pO1xuIiwiPG5nLWNvbnRhaW5lciAjZmllbGRDb21wb25lbnQ+PC9uZy1jb250YWluZXI+XG48ZGl2IGNsYXNzPVwidGV4dGZpZWxkLW1lc3NhZ2VzXCIgKm5nSWY9XCJmb3JtQ29udHJvbC50b3VjaGVkICYmIGZvcm1Db250cm9sLmludmFsaWRcIiBbaWRdPVwidmFsaWRhdGlvbklkXCI+XG5cdDxsdS1mb3JtbHktZXJyb3ItbWVzc2FnZSBbZm9ybUNvbnRyb2xdPVwiZm9ybUNvbnRyb2xcIiBbZmllbGRdPVwiZmllbGRcIj48L2x1LWZvcm1seS1lcnJvci1tZXNzYWdlPlxuPC9kaXY+XG4iXX0=