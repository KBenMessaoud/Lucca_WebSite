import { ALuPopoverTrigger, LuPopoverTarget } from '@lucca-front/ng/popover';
import { Subscription } from 'rxjs';
export class ALuSelectInput extends ALuPopoverTrigger {
    constructor(_changeDetectorRef, _overlay, _elementRef, _viewContainerRef, _renderer) {
        super(_overlay, _elementRef, _viewContainerRef);
        this._changeDetectorRef = _changeDetectorRef;
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._renderer = _renderer;
        this._subs = new Subscription();
        this._isContentInitialized = false;
        // From ControlValueAccessor interface
        this._cvaOnChange = (v) => void v;
        // From ControlValueAccessor interface
        this._onTouched = () => void {};
        // multiple
        this._multiple = false;
        this.target = new LuPopoverTarget();
        this.target.elementRef = this._elementRef;
        this.target.position = 'below';
        this.target.alignment = 'left';
    }
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(p) {
        this._placeholder = p;
    }
    setValue(value) {
        if (this.disabled) {
            return;
        }
        this.value = value;
        this._cvaOnChange(value);
        this._onTouched();
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
        this.render();
        this.applyClasses();
        if (this._picker) {
            this._picker.setValue(value);
        }
        this._changeDetectorRef.markForCheck();
    }
    // From ControlValueAccessor interface
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this._cvaOnChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    set disabled(d) {
        this._disabled = d;
    }
    get disabled() {
        return this._disabled;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
        this._changeDetectorRef.markForCheck();
    }
    isEmpty() {
        const isEmptyArray = Array.isArray(this.value) && this.value.length === 0;
        return this.value === null || this.value === undefined || isEmptyArray;
    }
    applyClasses() {
        if (this.isEmpty()) {
            this._renderer.removeClass(this._elementRef.nativeElement, 'is-filled');
        }
        else {
            this._renderer.addClass(this._elementRef.nativeElement, 'is-filled');
        }
    }
    /**
     * popover trigger class extension
     */
    set _picker(picker) {
        this.panel = picker;
        picker.multiple = this._multiple;
        this.subToPickerEvts();
    }
    get _picker() {
        return this.panel;
    }
    set _clearer(clearer) {
        if (!!clearer && !!clearer.onClear) {
            this._subs.add(clearer.onClear.subscribe(() => this.setValue(this._multiple ? [] : undefined)));
        }
    }
    subToPickerEvts() {
        if (this.panel) {
            this._subs.add(this.panel.onSelectValue.subscribe((value) => this.setValue(value)));
        }
    }
    closePopover() {
        this._onTouched();
        super.closePopover();
    }
    onDestroy() {
        if (this._popoverOpen) {
            this.closePopover();
        }
        this.destroyPopover();
        this._subs.unsubscribe();
        this._cleanUpSubscriptions();
    }
    _getOverlayConfig() {
        const config = super._getOverlayConfig();
        const clientRect = this._elementRef.nativeElement.getBoundingClientRect();
        config.minWidth = `${Math.max(185, clientRect.width)}px`; // might become min/maxWidth
        return config;
    }
    set displayer(d) {
        this._displayer = d;
        this.render();
    }
    set displayContainer(vcr) {
        this._displayContainer = vcr;
    }
    render() {
        if (!this._displayer || !this._isContentInitialized) {
            return;
        }
        if (this.useMultipleViews()) {
            this.renderMultipleViews();
        }
        else {
            this.renderSingleView();
        }
    }
    useMultipleViews() {
        return this._multiple && !!this._displayer && !this._displayer.multiple;
    }
    renderSingleView() {
        this.clearDisplay();
        if (this.value !== null && this.value !== undefined) {
            const newView = this.getView(this.value);
            this.displayView(newView);
        }
    }
    clearDisplay() {
        this._displayContainer.clear();
    }
    getView(value) {
        if (this._displayer) {
            return this._displayer.getViewRef(value);
        }
        return undefined;
    }
    displayView(view) {
        if (view) {
            this._displayContainer.insert(view);
        }
    }
    renderMultipleViews() {
        this.clearDisplay();
        const values = this.value || [];
        const views = values.map((value) => this.getView(value));
        views.forEach((view) => this.displayView(view));
    }
    set multiple(m) {
        this._multiple = m;
        if (this._picker) {
            this._picker.multiple = m;
        }
    }
    get multiple() {
        return this._multiple;
    }
}
//# sourceMappingURL=data:application/json;base64,