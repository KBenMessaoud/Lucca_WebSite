import { formatNumber, getLocaleNumberSymbol, NumberSymbol } from '@angular/common';
import { Inject, LOCALE_ID, Pipe } from '@angular/core';
import * as i0 from "@angular/core";
class LuNumberPipe {
    constructor(locale) {
        this.locale = locale;
    }
    transform(number, precision = 2) {
        const formatted = formatNumber(number, this.locale, `1.${precision}-${precision}`);
        const separator = getLocaleNumberSymbol(this.locale, NumberSymbol.Decimal);
        const split = formatted.split(separator);
        const integral = split[0];
        const decimal = split[1];
        const hideDecimal = Math.round(number) === number;
        if (precision > 0) {
            return `${integral}<span class="decimal-part${hideDecimal ? ' u-hidden' : ''}">${separator}${decimal}</span>`;
        }
        else {
            return integral;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuNumberPipe, deps: [{ token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuNumberPipe, isStandalone: true, name: "luNumber" }); }
}
export { LuNumberPipe };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuNumberPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'luNumber',
                    pure: true,
                    standalone: true,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy9udW1iZXIvbnVtYmVyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxxQkFBcUIsRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRixPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDOztBQUV2RSxNQUthLFlBQVk7SUFDeEIsWUFBeUMsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7SUFBRyxDQUFDO0lBQzNELFNBQVMsQ0FBQyxNQUFjLEVBQUUsU0FBUyxHQUFHLENBQUM7UUFDdEMsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssU0FBUyxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDbkYsTUFBTSxTQUFTLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0UsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6QyxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssTUFBTSxDQUFDO1FBQ2xELElBQUksU0FBUyxHQUFHLENBQUMsRUFBRTtZQUNsQixPQUFPLEdBQUcsUUFBUSw0QkFBNEIsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxTQUFTLEdBQUcsT0FBTyxTQUFTLENBQUM7U0FDOUc7YUFBTTtZQUNOLE9BQU8sUUFBUSxDQUFDO1NBQ2hCO0lBQ0YsQ0FBQzs4R0FkVyxZQUFZLGtCQUNKLFNBQVM7NEdBRGpCLFlBQVk7O1NBQVosWUFBWTsyRkFBWixZQUFZO2tCQUx4QixJQUFJO21CQUFDO29CQUNMLElBQUksRUFBRSxVQUFVO29CQUNoQixJQUFJLEVBQUUsSUFBSTtvQkFDVixVQUFVLEVBQUUsSUFBSTtpQkFDaEI7OzBCQUVhLE1BQU07MkJBQUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcm1hdE51bWJlciwgZ2V0TG9jYWxlTnVtYmVyU3ltYm9sLCBOdW1iZXJTeW1ib2wgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0LCBMT0NBTEVfSUQsIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQFBpcGUoe1xuXHRuYW1lOiAnbHVOdW1iZXInLFxuXHRwdXJlOiB0cnVlLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxufSlcbmV4cG9ydCBjbGFzcyBMdU51bWJlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblx0Y29uc3RydWN0b3IoQEluamVjdChMT0NBTEVfSUQpIHByb3RlY3RlZCBsb2NhbGU6IHN0cmluZykge31cblx0dHJhbnNmb3JtKG51bWJlcjogbnVtYmVyLCBwcmVjaXNpb24gPSAyKSB7XG5cdFx0Y29uc3QgZm9ybWF0dGVkID0gZm9ybWF0TnVtYmVyKG51bWJlciwgdGhpcy5sb2NhbGUsIGAxLiR7cHJlY2lzaW9ufS0ke3ByZWNpc2lvbn1gKTtcblx0XHRjb25zdCBzZXBhcmF0b3IgPSBnZXRMb2NhbGVOdW1iZXJTeW1ib2wodGhpcy5sb2NhbGUsIE51bWJlclN5bWJvbC5EZWNpbWFsKTtcblx0XHRjb25zdCBzcGxpdCA9IGZvcm1hdHRlZC5zcGxpdChzZXBhcmF0b3IpO1xuXHRcdGNvbnN0IGludGVncmFsID0gc3BsaXRbMF07XG5cdFx0Y29uc3QgZGVjaW1hbCA9IHNwbGl0WzFdO1xuXHRcdGNvbnN0IGhpZGVEZWNpbWFsID0gTWF0aC5yb3VuZChudW1iZXIpID09PSBudW1iZXI7XG5cdFx0aWYgKHByZWNpc2lvbiA+IDApIHtcblx0XHRcdHJldHVybiBgJHtpbnRlZ3JhbH08c3BhbiBjbGFzcz1cImRlY2ltYWwtcGFydCR7aGlkZURlY2ltYWwgPyAnIHUtaGlkZGVuJyA6ICcnfVwiPiR7c2VwYXJhdG9yfSR7ZGVjaW1hbH08L3NwYW4+YDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGludGVncmFsO1xuXHRcdH1cblx0fVxufVxuIl19