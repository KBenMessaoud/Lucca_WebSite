/* eslint-disable @angular-eslint/no-output-on-prefix */
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import * as i0 from "@angular/core";
/**
 * emits on scroll events
 */
class LuScrollDirective {
    _scroll($event) {
        this.scrollSubject.next($event);
    }
    ngOnInit() {
        this.scroll$.subscribe((scrollEvent) => this.emitScrollEvents(scrollEvent));
    }
    emitScrollEvents($event) {
        this.onScroll.emit($event);
        const target = $event.target;
        if (target instanceof Element) {
            const scrollLeft = target.scrollLeft;
            const scrollTop = target.scrollTop;
            if (scrollLeft === 0) {
                this.onScrollLeft.emit($event);
            }
            if (scrollTop === 0) {
                this.onScrollTop.emit($event);
            }
            const scrollWidth = target.scrollWidth;
            const scrollHeight = target.scrollHeight;
            const eltHeight = this._elementRef.nativeElement.clientHeight;
            const eltWidth = this._elementRef.nativeElement.clientWidth;
            if (scrollWidth - scrollLeft - eltWidth < 10) {
                this.onScrollRight.emit($event);
            }
            if (scrollHeight - scrollTop - eltHeight < 10) {
                this.onScrollBottom.emit($event);
            }
        }
    }
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this.debounceTime = 100;
        this.onScroll = new EventEmitter();
        this.onScrollTop = new EventEmitter();
        this.onScrollBottom = new EventEmitter();
        this.onScrollLeft = new EventEmitter();
        this.onScrollRight = new EventEmitter();
        this.scrollSubject = new Subject();
        this.scroll$ = this.scrollSubject.asObservable().pipe(debounceTime(this.debounceTime));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuScrollDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuScrollDirective, isStandalone: true, selector: "[luScroll]", inputs: { debounceTime: "debounceTime" }, outputs: { onScroll: "onScroll", onScrollTop: "onScrollTop", onScrollBottom: "onScrollBottom", onScrollLeft: "onScrollLeft", onScrollRight: "onScrollRight" }, host: { listeners: { "scroll": "_scroll($event)" } }, exportAs: ["luScroll"], ngImport: i0 }); }
}
export { LuScrollDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuScrollDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luScroll]',
                    exportAs: 'luScroll',
                    standalone: true,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { debounceTime: [{
                type: Input
            }], onScroll: [{
                type: Output
            }], onScrollTop: [{
                type: Output
            }], onScrollBottom: [{
                type: Output
            }], onScrollLeft: [{
                type: Output
            }], onScrollRight: [{
                type: Output
            }], _scroll: [{
                type: HostListener,
                args: ['scroll', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL3Njcm9sbC9zY3JvbGwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdEQUF3RDtBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFjLFlBQVksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFHOUM7O0dBRUc7QUFDSCxNQUthLGlCQUFpQjtJQVU3QixPQUFPLENBQUMsTUFBYTtRQUNwQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsUUFBUTtRQUNQLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBQ08sZ0JBQWdCLENBQUMsTUFBYTtRQUNyQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUzQixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzdCLElBQUksTUFBTSxZQUFZLE9BQU8sRUFBRTtZQUM5QixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO1lBQ3JDLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDbkMsSUFBSSxVQUFVLEtBQUssQ0FBQyxFQUFFO2dCQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMvQjtZQUNELElBQUksU0FBUyxLQUFLLENBQUMsRUFBRTtnQkFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDOUI7WUFDRCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO1lBQ3ZDLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7WUFDekMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO1lBQzlELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztZQUM1RCxJQUFJLFdBQVcsR0FBRyxVQUFVLEdBQUcsUUFBUSxHQUFHLEVBQUUsRUFBRTtnQkFDN0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDaEM7WUFDRCxJQUFJLFlBQVksR0FBRyxTQUFTLEdBQUcsU0FBUyxHQUFHLEVBQUUsRUFBRTtnQkFDOUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDakM7U0FDRDtJQUNGLENBQUM7SUFDRCxZQUFzQixXQUFvQztRQUFwQyxnQkFBVyxHQUFYLFdBQVcsQ0FBeUI7UUF6Q2pELGlCQUFZLEdBQUcsR0FBRyxDQUFDO1FBQ2xCLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBUyxDQUFDO1FBQ3JDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVMsQ0FBQztRQUN4QyxtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFTLENBQUM7UUFDM0MsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBUyxDQUFDO1FBQ3pDLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQVMsQ0FBQztRQUM1QyxrQkFBYSxHQUFHLElBQUksT0FBTyxFQUFTLENBQUM7UUFDckMsWUFBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQWtDN0IsQ0FBQzs4R0ExQ2xELGlCQUFpQjtrR0FBakIsaUJBQWlCOztTQUFqQixpQkFBaUI7MkZBQWpCLGlCQUFpQjtrQkFMN0IsU0FBUzttQkFBQztvQkFDVixRQUFRLEVBQUUsWUFBWTtvQkFDdEIsUUFBUSxFQUFFLFVBQVU7b0JBQ3BCLFVBQVUsRUFBRSxJQUFJO2lCQUNoQjtpR0FFUyxZQUFZO3NCQUFwQixLQUFLO2dCQUNJLFFBQVE7c0JBQWpCLE1BQU07Z0JBQ0csV0FBVztzQkFBcEIsTUFBTTtnQkFDRyxjQUFjO3NCQUF2QixNQUFNO2dCQUNHLFlBQVk7c0JBQXJCLE1BQU07Z0JBQ0csYUFBYTtzQkFBdEIsTUFBTTtnQkFJUCxPQUFPO3NCQUROLFlBQVk7dUJBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQGFuZ3VsYXItZXNsaW50L25vLW91dHB1dC1vbi1wcmVmaXggKi9cbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSUx1U2Nyb2xsYWJsZSB9IGZyb20gJy4vc2Nyb2xsLm1vZGVsJztcblxuLyoqXG4gKiBlbWl0cyBvbiBzY3JvbGwgZXZlbnRzXG4gKi9cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1tsdVNjcm9sbF0nLFxuXHRleHBvcnRBczogJ2x1U2Nyb2xsJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgTHVTY3JvbGxEaXJlY3RpdmUgaW1wbGVtZW50cyBJTHVTY3JvbGxhYmxlLCBPbkluaXQge1xuXHRASW5wdXQoKSBkZWJvdW5jZVRpbWUgPSAxMDA7XG5cdEBPdXRwdXQoKSBvblNjcm9sbCA9IG5ldyBFdmVudEVtaXR0ZXI8RXZlbnQ+KCk7XG5cdEBPdXRwdXQoKSBvblNjcm9sbFRvcCA9IG5ldyBFdmVudEVtaXR0ZXI8RXZlbnQ+KCk7XG5cdEBPdXRwdXQoKSBvblNjcm9sbEJvdHRvbSA9IG5ldyBFdmVudEVtaXR0ZXI8RXZlbnQ+KCk7XG5cdEBPdXRwdXQoKSBvblNjcm9sbExlZnQgPSBuZXcgRXZlbnRFbWl0dGVyPEV2ZW50PigpO1xuXHRAT3V0cHV0KCkgb25TY3JvbGxSaWdodCA9IG5ldyBFdmVudEVtaXR0ZXI8RXZlbnQ+KCk7XG5cdHByaXZhdGUgc2Nyb2xsU3ViamVjdCA9IG5ldyBTdWJqZWN0PEV2ZW50PigpO1xuXHRwcml2YXRlIHNjcm9sbCQgPSB0aGlzLnNjcm9sbFN1YmplY3QuYXNPYnNlcnZhYmxlKCkucGlwZShkZWJvdW5jZVRpbWUodGhpcy5kZWJvdW5jZVRpbWUpKTtcblx0QEhvc3RMaXN0ZW5lcignc2Nyb2xsJywgWyckZXZlbnQnXSlcblx0X3Njcm9sbCgkZXZlbnQ6IEV2ZW50KSB7XG5cdFx0dGhpcy5zY3JvbGxTdWJqZWN0Lm5leHQoJGV2ZW50KTtcblx0fVxuXG5cdG5nT25Jbml0KCk6IHZvaWQge1xuXHRcdHRoaXMuc2Nyb2xsJC5zdWJzY3JpYmUoKHNjcm9sbEV2ZW50KSA9PiB0aGlzLmVtaXRTY3JvbGxFdmVudHMoc2Nyb2xsRXZlbnQpKTtcblx0fVxuXHRwcml2YXRlIGVtaXRTY3JvbGxFdmVudHMoJGV2ZW50OiBFdmVudCkge1xuXHRcdHRoaXMub25TY3JvbGwuZW1pdCgkZXZlbnQpO1xuXG5cdFx0Y29uc3QgdGFyZ2V0ID0gJGV2ZW50LnRhcmdldDtcblx0XHRpZiAodGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCkge1xuXHRcdFx0Y29uc3Qgc2Nyb2xsTGVmdCA9IHRhcmdldC5zY3JvbGxMZWZ0O1xuXHRcdFx0Y29uc3Qgc2Nyb2xsVG9wID0gdGFyZ2V0LnNjcm9sbFRvcDtcblx0XHRcdGlmIChzY3JvbGxMZWZ0ID09PSAwKSB7XG5cdFx0XHRcdHRoaXMub25TY3JvbGxMZWZ0LmVtaXQoJGV2ZW50KTtcblx0XHRcdH1cblx0XHRcdGlmIChzY3JvbGxUb3AgPT09IDApIHtcblx0XHRcdFx0dGhpcy5vblNjcm9sbFRvcC5lbWl0KCRldmVudCk7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBzY3JvbGxXaWR0aCA9IHRhcmdldC5zY3JvbGxXaWR0aDtcblx0XHRcdGNvbnN0IHNjcm9sbEhlaWdodCA9IHRhcmdldC5zY3JvbGxIZWlnaHQ7XG5cdFx0XHRjb25zdCBlbHRIZWlnaHQgPSB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXHRcdFx0Y29uc3QgZWx0V2lkdGggPSB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGg7XG5cdFx0XHRpZiAoc2Nyb2xsV2lkdGggLSBzY3JvbGxMZWZ0IC0gZWx0V2lkdGggPCAxMCkge1xuXHRcdFx0XHR0aGlzLm9uU2Nyb2xsUmlnaHQuZW1pdCgkZXZlbnQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNjcm9sbEhlaWdodCAtIHNjcm9sbFRvcCAtIGVsdEhlaWdodCA8IDEwKSB7XG5cdFx0XHRcdHRoaXMub25TY3JvbGxCb3R0b20uZW1pdCgkZXZlbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KSB7fVxufVxuIl19