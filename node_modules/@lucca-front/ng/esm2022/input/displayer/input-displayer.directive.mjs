import { Directive, forwardRef, Input } from '@angular/core';
import { ALuInputDisplayer } from './input-displayer.model';
import * as i0 from "@angular/core";
class LuInputDisplayerDirective extends ALuInputDisplayer {
    set argMultiple(m) {
        this.multiple = !!m;
    }
    set inputMultiple(m) {
        if (m === '') {
            // allows to have multiple = true when writing
            // <ng-template luDisplayer multiple>
            this.multiple = true;
        }
        else {
            this.multiple = !!m;
        }
    }
    constructor(template) {
        super();
        this.template = template;
    }
    getViewRef(value) {
        return this.template.createEmbeddedView({ $implicit: value });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputDisplayerDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuInputDisplayerDirective, isStandalone: true, selector: "[luDisplayer]", inputs: { argMultiple: ["luDisplayerMultiple", "argMultiple"], inputMultiple: ["multiple", "inputMultiple"] }, providers: [
            {
                provide: ALuInputDisplayer,
                useExisting: forwardRef(() => LuInputDisplayerDirective),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0 }); }
}
export { LuInputDisplayerDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputDisplayerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luDisplayer]',
                    standalone: true,
                    providers: [
                        {
                            provide: ALuInputDisplayer,
                            useExisting: forwardRef(() => LuInputDisplayerDirective),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { argMultiple: [{
                type: Input,
                args: ['luDisplayerMultiple']
            }], inputMultiple: [{
                type: Input,
                args: ['multiple']
            }] } });
export class LuInputDisplayerContext {
    constructor($implicit) {
        this.$implicit = $implicit;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZGlzcGxheWVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL2lucHV0L2Rpc3BsYXllci9pbnB1dC1kaXNwbGF5ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBd0IsTUFBTSxlQUFlLENBQUM7QUFDbkYsT0FBTyxFQUFFLGlCQUFpQixFQUFxQixNQUFNLHlCQUF5QixDQUFDOztBQUUvRSxNQVdhLHlCQUE2QixTQUFRLGlCQUFvQjtJQUNyRSxJQUFrQyxXQUFXLENBQUMsQ0FBVTtRQUN2RCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUNELElBQXVCLGFBQWEsQ0FBQyxDQUFtQjtRQUN2RCxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDYiw4Q0FBOEM7WUFDOUMscUNBQXFDO1lBQ3JDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1NBQ3JCO2FBQU07WUFDTixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEI7SUFDRixDQUFDO0lBQ0QsWUFBc0IsUUFBaUQ7UUFDdEUsS0FBSyxFQUFFLENBQUM7UUFEYSxhQUFRLEdBQVIsUUFBUSxDQUF5QztJQUV2RSxDQUFDO0lBQ0QsVUFBVSxDQUFDLEtBQWM7UUFDeEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDL0QsQ0FBQzs4R0FsQlcseUJBQXlCO2tHQUF6Qix5QkFBeUIsMktBUjFCO1lBQ1Y7Z0JBQ0MsT0FBTyxFQUFFLGlCQUFpQjtnQkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQztnQkFDeEQsS0FBSyxFQUFFLElBQUk7YUFDWDtTQUNEOztTQUVXLHlCQUF5QjsyRkFBekIseUJBQXlCO2tCQVhyQyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxlQUFlO29CQUN6QixVQUFVLEVBQUUsSUFBSTtvQkFDaEIsU0FBUyxFQUFFO3dCQUNWOzRCQUNDLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLDBCQUEwQixDQUFDOzRCQUN4RCxLQUFLLEVBQUUsSUFBSTt5QkFDWDtxQkFDRDtpQkFDRDtrR0FFa0MsV0FBVztzQkFBNUMsS0FBSzt1QkFBQyxxQkFBcUI7Z0JBR0wsYUFBYTtzQkFBbkMsS0FBSzt1QkFBQyxVQUFVOztBQWlCbEIsTUFBTSxPQUFPLHVCQUF1QjtJQUNuQyxZQUFtQixTQUFrQjtRQUFsQixjQUFTLEdBQVQsU0FBUyxDQUFTO0lBQUcsQ0FBQztDQUN6QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgZm9yd2FyZFJlZiwgSW5wdXQsIFRlbXBsYXRlUmVmLCBWaWV3UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBTHVJbnB1dERpc3BsYXllciwgSUx1SW5wdXREaXNwbGF5ZXIgfSBmcm9tICcuL2lucHV0LWRpc3BsYXllci5tb2RlbCc7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1tsdURpc3BsYXllcl0nLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxuXHRwcm92aWRlcnM6IFtcblx0XHR7XG5cdFx0XHRwcm92aWRlOiBBTHVJbnB1dERpc3BsYXllcixcblx0XHRcdHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEx1SW5wdXREaXNwbGF5ZXJEaXJlY3RpdmUpLFxuXHRcdFx0bXVsdGk6IHRydWUsXG5cdFx0fSxcblx0XSxcbn0pXG5leHBvcnQgY2xhc3MgTHVJbnB1dERpc3BsYXllckRpcmVjdGl2ZTxUPiBleHRlbmRzIEFMdUlucHV0RGlzcGxheWVyPFQ+IGltcGxlbWVudHMgSUx1SW5wdXREaXNwbGF5ZXI8VD4ge1xuXHRASW5wdXQoJ2x1RGlzcGxheWVyTXVsdGlwbGUnKSBzZXQgYXJnTXVsdGlwbGUobTogYm9vbGVhbikge1xuXHRcdHRoaXMubXVsdGlwbGUgPSAhIW07XG5cdH1cblx0QElucHV0KCdtdWx0aXBsZScpIHNldCBpbnB1dE11bHRpcGxlKG06IGJvb2xlYW4gfCBzdHJpbmcpIHtcblx0XHRpZiAobSA9PT0gJycpIHtcblx0XHRcdC8vIGFsbG93cyB0byBoYXZlIG11bHRpcGxlID0gdHJ1ZSB3aGVuIHdyaXRpbmdcblx0XHRcdC8vIDxuZy10ZW1wbGF0ZSBsdURpc3BsYXllciBtdWx0aXBsZT5cblx0XHRcdHRoaXMubXVsdGlwbGUgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLm11bHRpcGxlID0gISFtO1xuXHRcdH1cblx0fVxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPEx1SW5wdXREaXNwbGF5ZXJDb250ZXh0PFQ+Pikge1xuXHRcdHN1cGVyKCk7XG5cdH1cblx0Z2V0Vmlld1JlZih2YWx1ZTogVCB8IFRbXSk6IFZpZXdSZWYge1xuXHRcdHJldHVybiB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVtYmVkZGVkVmlldyh7ICRpbXBsaWNpdDogdmFsdWUgfSk7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIEx1SW5wdXREaXNwbGF5ZXJDb250ZXh0PFQ+IHtcblx0Y29uc3RydWN0b3IocHVibGljICRpbXBsaWNpdDogVCB8IFRbXSkge31cbn1cbiJdfQ==