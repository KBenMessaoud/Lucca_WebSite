export class ALuInput {
    get placeholder() {
        return this._placeholder;
    }
    constructor(_changeDetectorRef, _elementRef, _renderer) {
        this._changeDetectorRef = _changeDetectorRef;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        // From ControlValueAccessor interface
        this._cvaOnChange = () => {
            return;
        };
        // From ControlValueAccessor interface
        this._onTouched = () => {
            return;
        };
    }
    setValue(value) {
        this.value = value;
        this._cvaOnChange(value);
        this._onTouched();
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
        this.render();
        this.applyClasses();
        this._changeDetectorRef.markForCheck();
    }
    // From ControlValueAccessor interface
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this._cvaOnChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    isEmpty() {
        return this.value === null || this.value === undefined;
    }
    applyClasses() {
        if (this.isEmpty()) {
            this._renderer.removeClass(this._elementRef.nativeElement, 'is-filled');
        }
        else {
            this._renderer.addClass(this._elementRef.nativeElement, 'is-filled');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy9pbnB1dC9pbnB1dC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxNQUFNLE9BQWdCLFFBQVE7SUFFN0IsSUFBSSxXQUFXO1FBQ2QsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzFCLENBQUM7SUFFRCxZQUFzQixrQkFBcUMsRUFBWSxXQUEwQixFQUFZLFNBQW9CO1FBQTNHLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7UUFBWSxnQkFBVyxHQUFYLFdBQVcsQ0FBZTtRQUFZLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFtQmpJLHNDQUFzQztRQUM1QixpQkFBWSxHQUF1QixHQUFHLEVBQUU7WUFDakQsT0FBTztRQUNSLENBQUMsQ0FBQztRQUlGLHNDQUFzQztRQUM1QixlQUFVLEdBQWUsR0FBRyxFQUFFO1lBQ3ZDLE9BQU87UUFDUixDQUFDLENBQUM7SUE3QmtJLENBQUM7SUFDckksUUFBUSxDQUFDLEtBQVE7UUFDaEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUNELElBQUksS0FBSztRQUNSLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNwQixDQUFDO0lBQ0QsSUFBSSxLQUFLLENBQUMsS0FBUTtRQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3hDLENBQUM7SUFDRCxzQ0FBc0M7SUFDdEMsVUFBVSxDQUFDLEtBQVE7UUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUtELGdCQUFnQixDQUFDLEVBQXNCO1FBQ3RDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFLRCxpQkFBaUIsQ0FBQyxFQUFjO1FBQy9CLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFDUyxPQUFPO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUM7SUFDeEQsQ0FBQztJQUNTLFlBQVk7UUFDckIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDeEU7YUFBTTtZQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ3JFO0lBQ0YsQ0FBQztDQUdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmV4cG9ydCB0eXBlIElMdUlucHV0ID0gQ29udHJvbFZhbHVlQWNjZXNzb3I7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBTHVJbnB1dDxULCBVIGV4dGVuZHMgSFRNTEVsZW1lbnQgPSBIVE1MRWxlbWVudD4gaW1wbGVtZW50cyBJTHVJbnB1dCB7XG5cdHByb3RlY3RlZCBfcGxhY2Vob2xkZXI6IHN0cmluZztcblx0Z2V0IHBsYWNlaG9sZGVyKCkge1xuXHRcdHJldHVybiB0aGlzLl9wbGFjZWhvbGRlcjtcblx0fVxuXHRwcm90ZWN0ZWQgX3ZhbHVlOiBUO1xuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgcHJvdGVjdGVkIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmPFU+LCBwcm90ZWN0ZWQgX3JlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cdHNldFZhbHVlKHZhbHVlOiBUKSB7XG5cdFx0dGhpcy52YWx1ZSA9IHZhbHVlO1xuXHRcdHRoaXMuX2N2YU9uQ2hhbmdlKHZhbHVlKTtcblx0XHR0aGlzLl9vblRvdWNoZWQoKTtcblx0fVxuXHRnZXQgdmFsdWUoKTogVCB7XG5cdFx0cmV0dXJuIHRoaXMuX3ZhbHVlO1xuXHR9XG5cdHNldCB2YWx1ZSh2YWx1ZTogVCkge1xuXHRcdHRoaXMuX3ZhbHVlID0gdmFsdWU7XG5cdFx0dGhpcy5yZW5kZXIoKTtcblx0XHR0aGlzLmFwcGx5Q2xhc3NlcygpO1xuXHRcdHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuXHR9XG5cdC8vIEZyb20gQ29udHJvbFZhbHVlQWNjZXNzb3IgaW50ZXJmYWNlXG5cdHdyaXRlVmFsdWUodmFsdWU6IFQpIHtcblx0XHR0aGlzLnZhbHVlID0gdmFsdWU7XG5cdH1cblx0Ly8gRnJvbSBDb250cm9sVmFsdWVBY2Nlc3NvciBpbnRlcmZhY2Vcblx0cHJvdGVjdGVkIF9jdmFPbkNoYW5nZTogKHZhbHVlOiBUKSA9PiB2b2lkID0gKCkgPT4ge1xuXHRcdHJldHVybjtcblx0fTtcblx0cmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBUKSA9PiB2b2lkKSB7XG5cdFx0dGhpcy5fY3ZhT25DaGFuZ2UgPSBmbjtcblx0fVxuXHQvLyBGcm9tIENvbnRyb2xWYWx1ZUFjY2Vzc29yIGludGVyZmFjZVxuXHRwcm90ZWN0ZWQgX29uVG91Y2hlZDogKCkgPT4gdm9pZCA9ICgpID0+IHtcblx0XHRyZXR1cm47XG5cdH07XG5cdHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKSB7XG5cdFx0dGhpcy5fb25Ub3VjaGVkID0gZm47XG5cdH1cblx0cHJvdGVjdGVkIGlzRW1wdHkoKSB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWUgPT09IG51bGwgfHwgdGhpcy52YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXHR9XG5cdHByb3RlY3RlZCBhcHBseUNsYXNzZXMoKSB7XG5cdFx0aWYgKHRoaXMuaXNFbXB0eSgpKSB7XG5cdFx0XHR0aGlzLl9yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdpcy1maWxsZWQnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fcmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnaXMtZmlsbGVkJyk7XG5cdFx0fVxuXHR9XG5cblx0cHJvdGVjdGVkIGFic3RyYWN0IHJlbmRlcigpOiB2b2lkO1xufVxuIl19