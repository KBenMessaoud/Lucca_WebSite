import { Directive } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
/**
 * adds class is-filled when model is empty
 */
class LuInputDirective {
    constructor(_elementRef, _renderer, _ngControl) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._ngControl = _ngControl;
    }
    isEmpty(value) {
        if (typeof value === 'string') {
            return value === '';
        }
        return value === null || value === undefined;
    }
    applyClasses(value) {
        if (this.isEmpty(value)) {
            this._renderer.removeClass(this._elementRef.nativeElement, 'is-filled');
        }
        else {
            this._renderer.addClass(this._elementRef.nativeElement, 'is-filled');
        }
    }
    ngOnInit() {
        this._ngControl.valueChanges.subscribe((v) => this.applyClasses(v));
        const val = this._ngControl.value;
        this.applyClasses(val);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.NgControl }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuInputDirective, isStandalone: true, selector: "[luInput]", ngImport: i0 }); }
}
export { LuInputDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luInput]',
                    standalone: true,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.NgControl }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvaW5wdXQvaW5wdXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWlDLE1BQU0sZUFBZSxDQUFDOzs7QUFHekU7O0dBRUc7QUFDSCxNQUlhLGdCQUFnQjtJQUM1QixZQUFzQixXQUF1QixFQUFZLFNBQW9CLEVBQVksVUFBcUI7UUFBeEYsZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFBWSxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQVksZUFBVSxHQUFWLFVBQVUsQ0FBVztJQUFHLENBQUM7SUFDeEcsT0FBTyxDQUFDLEtBQUs7UUFDdEIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDOUIsT0FBTyxLQUFLLEtBQUssRUFBRSxDQUFDO1NBQ3BCO1FBQ0QsT0FBTyxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxTQUFTLENBQUM7SUFDOUMsQ0FBQztJQUNTLFlBQVksQ0FBQyxLQUFLO1FBQzNCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztTQUN4RTthQUFNO1lBQ04sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDckU7SUFDRixDQUFDO0lBQ0QsUUFBUTtRQUNQLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sR0FBRyxHQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO1FBQzNDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQzs4R0FuQlcsZ0JBQWdCO2tHQUFoQixnQkFBZ0I7O1NBQWhCLGdCQUFnQjsyRkFBaEIsZ0JBQWdCO2tCQUo1QixTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxXQUFXO29CQUNyQixVQUFVLEVBQUUsSUFBSTtpQkFDaEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIE9uSW5pdCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbi8qKlxuICogYWRkcyBjbGFzcyBpcy1maWxsZWQgd2hlbiBtb2RlbCBpcyBlbXB0eVxuICovXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdbbHVJbnB1dF0nLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxufSlcbmV4cG9ydCBjbGFzcyBMdUlucHV0RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIHByb3RlY3RlZCBfbmdDb250cm9sOiBOZ0NvbnRyb2wpIHt9XG5cdHByb3RlY3RlZCBpc0VtcHR5KHZhbHVlKSB7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gJyc7XG5cdFx0fVxuXHRcdHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXHR9XG5cdHByb3RlY3RlZCBhcHBseUNsYXNzZXModmFsdWUpIHtcblx0XHRpZiAodGhpcy5pc0VtcHR5KHZhbHVlKSkge1xuXHRcdFx0dGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnaXMtZmlsbGVkJyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2lzLWZpbGxlZCcpO1xuXHRcdH1cblx0fVxuXHRuZ09uSW5pdCgpIHtcblx0XHR0aGlzLl9uZ0NvbnRyb2wudmFsdWVDaGFuZ2VzLnN1YnNjcmliZSgodikgPT4gdGhpcy5hcHBseUNsYXNzZXModikpO1xuXHRcdGNvbnN0IHZhbDogdW5rbm93biA9IHRoaXMuX25nQ29udHJvbC52YWx1ZTtcblx0XHR0aGlzLmFwcGx5Q2xhc3Nlcyh2YWwpO1xuXHR9XG59XG4iXX0=