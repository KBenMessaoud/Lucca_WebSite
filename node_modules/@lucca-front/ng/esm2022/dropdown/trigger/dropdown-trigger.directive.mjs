import { Directive, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';
import { ALuPopoverTrigger, LuPopoverTarget } from '@lucca-front/ng/popover';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
/**
 * This directive is intended to be used in conjunction with an lu-dropdown tag.  It is
 * responsible for toggling the display of the provided dropdown instance.
 */
class LuDropdownTriggerDirective extends ALuPopoverTrigger {
    /** References the popover instance that the trigger is associated with. */
    set inputPanel(p) {
        this.panel = p;
    }
    /** how you want to position the panel relative to the target, allowed values: above, below, before, after */
    set inputPosition(pos) {
        this.target.position = pos;
    }
    /** how the panel will be align with the target, allowed values: top, bottom, left, right */
    set inputAlignment(al) {
        this.target.alignment = al;
    }
    /** disable popover apparition */
    set inputDisabled(d) {
        this.disabled = d;
    }
    /** set to true if you want the panel to appear on top of the target */
    set inputOverlap(ov) {
        this.target.overlap = ov;
    }
    /** accessibility attribute - dont override */
    get _attrAriaExpanded() {
        return this._popoverOpen;
    }
    /** accessibility attribute - dont override */
    get _attrId() {
        return this._triggerId;
    }
    /** accessibility attribute - dont override */
    get _attrAriaControls() {
        return this._panelId;
    }
    constructor(_overlay, _elementRef, _viewContainerRef) {
        super(_overlay, _elementRef, _viewContainerRef);
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        /** Event emitted when the associated popover is opened. */
        this.onOpen = new EventEmitter();
        /** Event emitted when the associated popover is closed. */
        this.onClose = new EventEmitter();
        this.target = new LuPopoverTarget();
        this.target.elementRef = this._elementRef;
        this._triggerId = this._elementRef.nativeElement.getAttribute('id') || this._triggerId;
        this.triggerEvent = 'click';
        this.target.position = 'below';
        this.target.alignment = 'right';
    }
    onClick() {
        super.onClick();
    }
    ngAfterViewInit() {
        this._checkPanel();
        this._checkTarget();
    }
    ngOnDestroy() {
        this._cleanUpSubscriptions();
        if (this._popoverOpen) {
            this.closePopover();
        }
        this.destroyPopover();
    }
    _emitOpen() {
        this.onOpen.emit();
    }
    _emitClose() {
        this.onClose.emit();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownTriggerDirective, deps: [{ token: i1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuDropdownTriggerDirective, selector: "[luDropdown]", inputs: { inputPanel: ["luDropdown", "inputPanel"], inputPosition: ["luDropdownPosition", "inputPosition"], inputAlignment: ["luDropdownAlignment", "inputAlignment"], inputDisabled: ["luDropdownDisabled", "inputDisabled"], inputOverlap: ["luDropdownOverlap", "inputOverlap"] }, outputs: { onOpen: "luDropdownOnOpen", onClose: "luDropdownOnClose" }, host: { listeners: { "click": "onClick()" }, properties: { "attr.aria-expanded": "this._attrAriaExpanded", "attr.id": "this._attrId", "attr.aria-controls": "this._attrAriaControls" } }, exportAs: ["LuDropdownTrigger"], usesInheritance: true, ngImport: i0 }); }
}
export { LuDropdownTriggerDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luDropdown]',
                    exportAs: 'LuDropdownTrigger',
                }]
        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }]; }, propDecorators: { inputPanel: [{
                type: Input,
                args: ['luDropdown']
            }], inputPosition: [{
                type: Input,
                args: ['luDropdownPosition']
            }], inputAlignment: [{
                type: Input,
                args: ['luDropdownAlignment']
            }], inputDisabled: [{
                type: Input,
                args: ['luDropdownDisabled']
            }], inputOverlap: [{
                type: Input,
                args: ['luDropdownOverlap']
            }], onOpen: [{
                type: Output,
                args: ['luDropdownOnOpen']
            }], onClose: [{
                type: Output,
                args: ['luDropdownOnClose']
            }], _attrAriaExpanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }], _attrId: [{
                type: HostBinding,
                args: ['attr.id']
            }], _attrAriaControls: [{
                type: HostBinding,
                args: ['attr.aria-controls']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,