import { ChangeDetectionStrategy, Component, ContentChildren, EventEmitter, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { ALuPopoverPanel, luTransformPopover } from '@lucca-front/ng/popover';
// import { UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';
import { merge, Subscription } from 'rxjs';
import { debounceTime, delay, map, share, startWith, switchMap } from 'rxjs/operators';
import { ALuDropdownItem } from '../item/index';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
class LuDropdownPanelComponent extends ALuPopoverPanel {
    /**
     * This method takes classes set on the host lu-popover element and applies them on the
     * popover template that displays in the overlay container.  Otherwise, it's difficult
     * to style the containing popover from outside the component.
     * @param classes list of class names
     */
    set inputPanelClasses(classes) {
        this.panelClasses = classes;
    }
    /**
     * This method takes classes set on the host lu-popover element and applies them on the
     * popover template that displays in the overlay container. Otherwise, it's difficult
     * to style the containing popover from outside the component.
     * @param classes list of class names
     */
    set inputContentClasses(classes) {
        this.contentClasses = classes;
    }
    set vcTemplateRef(tr) {
        this.templateRef = tr;
    }
    set optionsQL(ql) {
        this._itemsQL = ql;
    }
    constructor() {
        super();
        /** Event emitted when the popover is closed. */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.close = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.open = new EventEmitter();
        this.hovered = new EventEmitter();
        // protected _highlightIndex = -1;
        // get highlightIndex() { return this._highlightIndex; }
        // set highlightIndex(i: number) {
        // 	this._highlightIndex = i;
        // 	this._applyHighlight();
        // }
        this._items = [];
        this._subs = new Subscription();
    }
    initItems() {
        const items$ = this._itemsQL.changes.pipe(startWith(this._itemsQL), map((ql) => ql.toArray()), delay(0), share());
        const itemsSub = items$.subscribe((i) => (this._items = i || []));
        this._subs.add(itemsSub);
        // this.highlightIndex = -1;
        const singleFlow$ = items$.pipe(switchMap((items) => merge(...items.map((i) => i.onSelect))), debounceTime(1));
        const itemSelectSub = singleFlow$.subscribe(() => this.close.emit());
        this._subs.add(itemSelectSub);
    }
    ngAfterViewInit() {
        this.initItems();
    }
    ngOnDestroy() {
        this.onClose();
        this.close.complete();
        this._subs.unsubscribe();
    }
    _emitCloseEvent() {
        this.close.emit();
    }
    _emitOpenEvent() {
        this.open.emit();
    }
    _emitHoveredEvent(hovered) {
        this.hovered.emit(hovered);
    }
    onOpen() {
        this.focusFirstItem();
    }
    focusFirstItem() {
        const firstItem = this._items[0];
        if (firstItem) {
            firstItem.focus();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuDropdownPanelComponent, selector: "lu-dropdown", inputs: { inputPanelClasses: ["panel-classes", "inputPanelClasses"], inputContentClasses: ["content-classes", "inputContentClasses"] }, outputs: { close: "close", open: "open", hovered: "hovered" }, queries: [{ propertyName: "optionsQL", predicate: ALuDropdownItem, descendants: true }], viewQueries: [{ propertyName: "vcTemplateRef", first: true, predicate: TemplateRef, descendants: true, static: true }], exportAs: ["LuDropdownPanel"], usesInheritance: true, ngImport: i0, template: "<ng-template>\n\t<div\n\t\tclass=\"lu-dropdown-panel lu-popover-panel\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t(keydown)=\"_handleKeydown($event)\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t\t[attr.id]=\"panelId\"\n\t\t[attr.aria-labelledby]=\"triggerId\"\n\t\t[@transformPopover]=\"'enter'\"\n\t>\n\t\t<div class=\"lu-popover-content lu-dropdown-content\" [ngClass]=\"contentClassesMap\">\n\t\t\t<ul class=\"lu-dropdown-options\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], animations: [luTransformPopover], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuDropdownPanelComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-dropdown', changeDetection: ChangeDetectionStrategy.OnPush, animations: [luTransformPopover], exportAs: 'LuDropdownPanel', template: "<ng-template>\n\t<div\n\t\tclass=\"lu-dropdown-panel lu-popover-panel\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t(keydown)=\"_handleKeydown($event)\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t\t[attr.id]=\"panelId\"\n\t\t[attr.aria-labelledby]=\"triggerId\"\n\t\t[@transformPopover]=\"'enter'\"\n\t>\n\t\t<div class=\"lu-popover-content lu-dropdown-content\" [ngClass]=\"contentClassesMap\">\n\t\t\t<ul class=\"lu-dropdown-options\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return []; }, propDecorators: { inputPanelClasses: [{
                type: Input,
                args: ['panel-classes']
            }], inputContentClasses: [{
                type: Input,
                args: ['content-classes']
            }], close: [{
                type: Output
            }], open: [{
                type: Output
            }], hovered: [{
                type: Output
            }], vcTemplateRef: [{
                type: ViewChild,
                args: [TemplateRef, { static: true }]
            }], optionsQL: [{
                type: ContentChildren,
                args: [ALuDropdownItem, { descendants: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,