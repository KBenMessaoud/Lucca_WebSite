import { Directive, EventEmitter, forwardRef, HostListener, Output } from '@angular/core';
import { ALuDropdownItem } from './dropdown-item.model';
import * as i0 from "@angular/core";
class LuDropdownItemDirective extends ALuDropdownItem {
    constructor(_eltRef) {
        super();
        this._eltRef = _eltRef;
        // arreter les ONxxxx
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onSelect = new EventEmitter();
    }
    onClick() {
        this.onSelect.emit(true);
    }
    onEnter() {
        this.onSelect.emit(true);
    }
    focus() {
        this._eltRef.nativeElement.focus();
    }
    ngOnDestroy() {
        this.onSelect.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownItemDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuDropdownItemDirective, selector: "[luDropdownItem]", outputs: { onSelect: "onSelect" }, host: { listeners: { "click": "onClick($event)", "keydown.enter": "onEnter($event)" } }, providers: [
            {
                provide: ALuDropdownItem,
                useExisting: forwardRef(() => LuDropdownItemDirective),
                multi: true,
            },
        ], exportAs: ["LuDropdownItem"], usesInheritance: true, ngImport: i0 }); }
}
export { LuDropdownItemDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luDropdownItem]',
                    exportAs: 'LuDropdownItem',
                    providers: [
                        {
                            provide: ALuDropdownItem,
                            useExisting: forwardRef(() => LuDropdownItemDirective),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { onSelect: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }], onEnter: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24taXRlbS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy9kcm9wZG93bi9pdGVtL2Ryb3Bkb3duLWl0ZW0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWMsWUFBWSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQWEsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pILE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7QUFFeEQsTUFXYSx1QkFBd0IsU0FBUSxlQUFlO0lBSTNELFlBQW9CLE9BQWdDO1FBQ25ELEtBQUssRUFBRSxDQUFDO1FBRFcsWUFBTyxHQUFQLE9BQU8sQ0FBeUI7UUFIcEQscUJBQXFCO1FBQ3JCLCtEQUErRDtRQUNyRCxhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztJQUdqRCxDQUFDO0lBQ2tDLE9BQU87UUFDekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUMwQyxPQUFPO1FBQ2pELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFDRCxLQUFLO1FBQ0osSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUNELFdBQVc7UUFDVixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzFCLENBQUM7OEdBbEJXLHVCQUF1QjtrR0FBdkIsdUJBQXVCLHVLQVJ4QjtZQUNWO2dCQUNDLE9BQU8sRUFBRSxlQUFlO2dCQUN4QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDO2dCQUN0RCxLQUFLLEVBQUUsSUFBSTthQUNYO1NBQ0Q7O1NBRVcsdUJBQXVCOzJGQUF2Qix1QkFBdUI7a0JBWG5DLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsU0FBUyxFQUFFO3dCQUNWOzRCQUNDLE9BQU8sRUFBRSxlQUFlOzRCQUN4QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSx3QkFBd0IsQ0FBQzs0QkFDdEQsS0FBSyxFQUFFLElBQUk7eUJBQ1g7cUJBQ0Q7aUJBQ0Q7aUdBSVUsUUFBUTtzQkFBakIsTUFBTTtnQkFJNEIsT0FBTztzQkFBekMsWUFBWTt1QkFBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7Z0JBR1UsT0FBTztzQkFBakQsWUFBWTt1QkFBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgZm9yd2FyZFJlZiwgSG9zdExpc3RlbmVyLCBPbkRlc3Ryb3ksIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQUx1RHJvcGRvd25JdGVtIH0gZnJvbSAnLi9kcm9wZG93bi1pdGVtLm1vZGVsJztcblxuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiAnW2x1RHJvcGRvd25JdGVtXScsXG5cdGV4cG9ydEFzOiAnTHVEcm9wZG93bkl0ZW0nLFxuXHRwcm92aWRlcnM6IFtcblx0XHR7XG5cdFx0XHRwcm92aWRlOiBBTHVEcm9wZG93bkl0ZW0sXG5cdFx0XHR1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBMdURyb3Bkb3duSXRlbURpcmVjdGl2ZSksXG5cdFx0XHRtdWx0aTogdHJ1ZSxcblx0XHR9LFxuXHRdLFxufSlcbmV4cG9ydCBjbGFzcyBMdURyb3Bkb3duSXRlbURpcmVjdGl2ZSBleHRlbmRzIEFMdURyb3Bkb3duSXRlbSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cdC8vIGFycmV0ZXIgbGVzIE9OeHh4eFxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L25vLW91dHB1dC1vbi1wcmVmaXhcblx0QE91dHB1dCgpIG9uU2VsZWN0ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbHRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KSB7XG5cdFx0c3VwZXIoKTtcblx0fVxuXHRASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pIG9uQ2xpY2soKSB7XG5cdFx0dGhpcy5vblNlbGVjdC5lbWl0KHRydWUpO1xuXHR9XG5cdEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uZW50ZXInLCBbJyRldmVudCddKSBvbkVudGVyKCkge1xuXHRcdHRoaXMub25TZWxlY3QuZW1pdCh0cnVlKTtcblx0fVxuXHRmb2N1cygpIHtcblx0XHR0aGlzLl9lbHRSZWYubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuXHR9XG5cdG5nT25EZXN0cm95KCkge1xuXHRcdHRoaXMub25TZWxlY3QuY29tcGxldGUoKTtcblx0fVxufVxuIl19