import { Directive, inject, Injector, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { LU_OPTION_CONTEXT, provideOptionContext } from './option.token';
import * as i0 from "@angular/core";
class LuOptionOutletDirective {
    constructor() {
        this.viewContainerRef = inject(ViewContainerRef);
        this.injector = inject(Injector);
        this.optionContext = inject(LU_OPTION_CONTEXT);
    }
    ngOnChanges(changes) {
        if (changes['luOptionOutlet'] || !this.luOptionOutletValue) {
            this.clearContainer();
        }
        const hasRef = this.embeddedViewRef || this.componentRef;
        if (changes['luOptionOutlet'] || (changes['luOptionOutletValue'] && !hasRef)) {
            this.createComponent();
        }
        else if (changes['luOptionOutletValue']) {
            this.updateRefValue();
        }
    }
    ngOnDestroy() {
        this.optionContext.destroy();
    }
    clearContainer() {
        this.viewContainerRef.clear();
        this.embeddedViewRef?.destroy();
        this.componentRef?.destroy();
        this.embeddedViewRef = undefined;
        this.componentRef = undefined;
    }
    createComponent() {
        if (!this.luOptionOutlet || !this.luOptionOutletValue) {
            return;
        }
        if (this.luOptionOutlet instanceof TemplateRef) {
            this.embeddedViewRef = this.viewContainerRef.createEmbeddedView(this.luOptionOutlet, { $implicit: this.luOptionOutletValue }, { injector: this.injector });
        }
        else {
            this.optionContext.option$.next(this.luOptionOutletValue);
            this.componentRef = this.viewContainerRef.createComponent(this.luOptionOutlet, { injector: this.injector });
        }
    }
    updateRefValue() {
        if (!this.luOptionOutletValue) {
            return;
        }
        if (this.embeddedViewRef) {
            this.embeddedViewRef.context = { $implicit: this.luOptionOutletValue };
        }
        else if (this.componentRef) {
            this.optionContext.option$.next(this.luOptionOutletValue);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionOutletDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuOptionOutletDirective, isStandalone: true, selector: "[luOptionOutlet]", inputs: { luOptionOutlet: "luOptionOutlet", luOptionOutletValue: "luOptionOutletValue" }, providers: [provideOptionContext()], usesOnChanges: true, ngImport: i0 }); }
}
export { LuOptionOutletDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionOutletDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luOptionOutlet]',
                    standalone: true,
                    providers: [provideOptionContext()],
                }]
        }], propDecorators: { luOptionOutlet: [{
                type: Input
            }], luOptionOutletValue: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLW91dGxldC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy9jb3JlLXNlbGVjdC9vcHRpb24vb3B0aW9uLW91dGxldC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFnQixTQUFTLEVBQW1CLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUF1QyxXQUFXLEVBQVEsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUssT0FBTyxFQUFFLGlCQUFpQixFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRXpFLE1BS2EsdUJBQXVCO0lBTHBDO1FBU1MscUJBQWdCLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDNUMsYUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUc1QixrQkFBYSxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0tBbURsRDtJQWpEQSxXQUFXLENBQUMsT0FBc0I7UUFDakMsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUMzRCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDdEI7UUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUM7UUFFekQsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDN0UsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQ3ZCO2FBQU0sSUFBSSxPQUFPLENBQUMscUJBQXFCLENBQUMsRUFBRTtZQUMxQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDdEI7SUFDRixDQUFDO0lBRUQsV0FBVztRQUNWLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVPLGNBQWM7UUFDckIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlCLElBQUksQ0FBQyxlQUFlLEVBQUUsT0FBTyxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLFlBQVksRUFBRSxPQUFPLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztJQUMvQixDQUFDO0lBRU8sZUFBZTtRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUN0RCxPQUFPO1NBQ1A7UUFFRCxJQUFJLElBQUksQ0FBQyxjQUFjLFlBQVksV0FBVyxFQUFFO1lBQy9DLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDM0o7YUFBTTtZQUNOLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUM1RztJQUNGLENBQUM7SUFFTyxjQUFjO1FBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDOUIsT0FBTztTQUNQO1FBQ0QsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1NBQ3ZFO2FBQU0sSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQzdCLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztTQUMxRDtJQUNGLENBQUM7OEdBMURXLHVCQUF1QjtrR0FBdkIsdUJBQXVCLHlKQUZ4QixDQUFDLG9CQUFvQixFQUFFLENBQUM7O1NBRXZCLHVCQUF1QjsyRkFBdkIsdUJBQXVCO2tCQUxuQyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFVBQVUsRUFBRSxJQUFJO29CQUNoQixTQUFTLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO2lCQUNuQzs4QkFFUyxjQUFjO3NCQUF0QixLQUFLO2dCQUNHLG1CQUFtQjtzQkFBM0IsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFJlZiwgRGlyZWN0aXZlLCBFbWJlZGRlZFZpZXdSZWYsIGluamVjdCwgSW5qZWN0b3IsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIFR5cGUsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEx1T3B0aW9uQ29udGV4dCB9IGZyb20gJy4uL3NlbGVjdC5tb2RlbCc7XG5pbXBvcnQgeyBMVV9PUFRJT05fQ09OVEVYVCwgcHJvdmlkZU9wdGlvbkNvbnRleHQgfSBmcm9tICcuL29wdGlvbi50b2tlbic7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1tsdU9wdGlvbk91dGxldF0nLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxuXHRwcm92aWRlcnM6IFtwcm92aWRlT3B0aW9uQ29udGV4dCgpXSxcbn0pXG5leHBvcnQgY2xhc3MgTHVPcHRpb25PdXRsZXREaXJlY3RpdmU8VD4gaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG5cdEBJbnB1dCgpIGx1T3B0aW9uT3V0bGV0PzogVHlwZTx1bmtub3duPiB8IFRlbXBsYXRlUmVmPEx1T3B0aW9uQ29udGV4dDxUPj47XG5cdEBJbnB1dCgpIGx1T3B0aW9uT3V0bGV0VmFsdWU6IFQgfCB1bmRlZmluZWQ7XG5cblx0cHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmID0gaW5qZWN0KFZpZXdDb250YWluZXJSZWYpO1xuXHRwcml2YXRlIGluamVjdG9yID0gaW5qZWN0KEluamVjdG9yKTtcblx0cHJpdmF0ZSBlbWJlZGRlZFZpZXdSZWY/OiBFbWJlZGRlZFZpZXdSZWY8THVPcHRpb25Db250ZXh0PFQ+Pjtcblx0cHJpdmF0ZSBjb21wb25lbnRSZWY/OiBDb21wb25lbnRSZWY8dW5rbm93bj47XG5cdHByaXZhdGUgb3B0aW9uQ29udGV4dCA9IGluamVjdChMVV9PUFRJT05fQ09OVEVYVCk7XG5cblx0bmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuXHRcdGlmIChjaGFuZ2VzWydsdU9wdGlvbk91dGxldCddIHx8ICF0aGlzLmx1T3B0aW9uT3V0bGV0VmFsdWUpIHtcblx0XHRcdHRoaXMuY2xlYXJDb250YWluZXIoKTtcblx0XHR9XG5cblx0XHRjb25zdCBoYXNSZWYgPSB0aGlzLmVtYmVkZGVkVmlld1JlZiB8fCB0aGlzLmNvbXBvbmVudFJlZjtcblxuXHRcdGlmIChjaGFuZ2VzWydsdU9wdGlvbk91dGxldCddIHx8IChjaGFuZ2VzWydsdU9wdGlvbk91dGxldFZhbHVlJ10gJiYgIWhhc1JlZikpIHtcblx0XHRcdHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XG5cdFx0fSBlbHNlIGlmIChjaGFuZ2VzWydsdU9wdGlvbk91dGxldFZhbHVlJ10pIHtcblx0XHRcdHRoaXMudXBkYXRlUmVmVmFsdWUoKTtcblx0XHR9XG5cdH1cblxuXHRuZ09uRGVzdHJveSgpOiB2b2lkIHtcblx0XHR0aGlzLm9wdGlvbkNvbnRleHQuZGVzdHJveSgpO1xuXHR9XG5cblx0cHJpdmF0ZSBjbGVhckNvbnRhaW5lcigpOiB2b2lkIHtcblx0XHR0aGlzLnZpZXdDb250YWluZXJSZWYuY2xlYXIoKTtcblx0XHR0aGlzLmVtYmVkZGVkVmlld1JlZj8uZGVzdHJveSgpO1xuXHRcdHRoaXMuY29tcG9uZW50UmVmPy5kZXN0cm95KCk7XG5cdFx0dGhpcy5lbWJlZGRlZFZpZXdSZWYgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5jb21wb25lbnRSZWYgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZUNvbXBvbmVudCgpOiB2b2lkIHtcblx0XHRpZiAoIXRoaXMubHVPcHRpb25PdXRsZXQgfHwgIXRoaXMubHVPcHRpb25PdXRsZXRWYWx1ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmx1T3B0aW9uT3V0bGV0IGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpIHtcblx0XHRcdHRoaXMuZW1iZWRkZWRWaWV3UmVmID0gdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLmx1T3B0aW9uT3V0bGV0LCB7ICRpbXBsaWNpdDogdGhpcy5sdU9wdGlvbk91dGxldFZhbHVlIH0sIHsgaW5qZWN0b3I6IHRoaXMuaW5qZWN0b3IgfSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMub3B0aW9uQ29udGV4dC5vcHRpb24kLm5leHQodGhpcy5sdU9wdGlvbk91dGxldFZhbHVlKTtcblx0XHRcdHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudCh0aGlzLmx1T3B0aW9uT3V0bGV0LCB7IGluamVjdG9yOiB0aGlzLmluamVjdG9yIH0pO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgdXBkYXRlUmVmVmFsdWUoKTogdm9pZCB7XG5cdFx0aWYgKCF0aGlzLmx1T3B0aW9uT3V0bGV0VmFsdWUpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKHRoaXMuZW1iZWRkZWRWaWV3UmVmKSB7XG5cdFx0XHR0aGlzLmVtYmVkZGVkVmlld1JlZi5jb250ZXh0ID0geyAkaW1wbGljaXQ6IHRoaXMubHVPcHRpb25PdXRsZXRWYWx1ZSB9O1xuXHRcdH0gZWxzZSBpZiAodGhpcy5jb21wb25lbnRSZWYpIHtcblx0XHRcdHRoaXMub3B0aW9uQ29udGV4dC5vcHRpb24kLm5leHQodGhpcy5sdU9wdGlvbk91dGxldFZhbHVlKTtcblx0XHR9XG5cdH1cbn1cbiJdfQ==