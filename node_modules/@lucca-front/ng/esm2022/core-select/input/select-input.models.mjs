import { Overlay, OverlayContainer } from '@angular/cdk/overlay';
import { Platform } from '@angular/cdk/platform';
import { DOCUMENT } from '@angular/common';
import { ElementRef, Injectable, inject } from '@angular/core';
import { SELECT_ID, SELECT_LABEL, SELECT_LABEL_ID } from '../select.model';
import * as i0 from "@angular/core";
let selectId = 0;
function selectIdFactory() {
    return selectId++;
}
function selectLabelFactory() {
    const elementRef = inject(ElementRef);
    function getLabel(node) {
        if (node instanceof HTMLLabelElement) {
            return node;
        }
        if (!node.parentElement) {
            return undefined;
        }
        return getLabel(node.parentElement);
    }
    return getLabel(elementRef.nativeElement);
}
function selectLabelIdFactory() {
    return inject(SELECT_LABEL)?.id || `lu-select-label-${inject(SELECT_ID)}`;
}
export function provideLuSelectLabelsAndIds() {
    return [
        { provide: SELECT_ID, useFactory: selectIdFactory },
        { provide: SELECT_LABEL, useFactory: selectLabelFactory },
        { provide: SELECT_LABEL_ID, useFactory: selectLabelIdFactory },
    ];
}
class LuSelectOverlayContainer extends OverlayContainer {
    constructor() {
        super(inject(DOCUMENT), inject(Platform));
        this.selectLabelId = inject(SELECT_LABEL_ID);
        this.selectId = inject(SELECT_ID);
    }
    _createContainer() {
        super._createContainer();
        this._containerElement.setAttribute('aria-labelledby', this.selectLabelId);
        this._containerElement.id = `lu-select-overlay-container-${this.selectId}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSelectOverlayContainer, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSelectOverlayContainer }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSelectOverlayContainer, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
export function provideLuSelectOverlayContainer() {
    return [
        Overlay,
        {
            provide: OverlayContainer,
            useClass: LuSelectOverlayContainer,
        },
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWlucHV0Lm1vZGVscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL2NvcmUtc2VsZWN0L2lucHV0L3NlbGVjdC1pbnB1dC5tb2RlbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQVksTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQUUzRSxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFFakIsU0FBUyxlQUFlO0lBQ3ZCLE9BQU8sUUFBUSxFQUFFLENBQUM7QUFDbkIsQ0FBQztBQUVELFNBQVMsa0JBQWtCO0lBQzFCLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBMEIsVUFBVSxDQUFDLENBQUM7SUFFL0QsU0FBUyxRQUFRLENBQUMsSUFBaUI7UUFDbEMsSUFBSSxJQUFJLFlBQVksZ0JBQWdCLEVBQUU7WUFDckMsT0FBTyxJQUFJLENBQUM7U0FDWjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3hCLE9BQU8sU0FBUyxDQUFDO1NBQ2pCO1FBRUQsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDM0MsQ0FBQztBQUVELFNBQVMsb0JBQW9CO0lBQzVCLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsSUFBSSxtQkFBbUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7QUFDM0UsQ0FBQztBQUVELE1BQU0sVUFBVSwyQkFBMkI7SUFDMUMsT0FBTztRQUNOLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFO1FBQ25ELEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUU7UUFDekQsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxvQkFBb0IsRUFBRTtLQUM5RCxDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQ00sd0JBQXlCLFNBQVEsZ0JBQWdCO0lBSXREO1FBQ0MsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUpuQyxrQkFBYSxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN4QyxhQUFRLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBSXJDLENBQUM7SUFFa0IsZ0JBQWdCO1FBQ2xDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEdBQUcsK0JBQStCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM1RSxDQUFDOzhHQVpJLHdCQUF3QjtrSEFBeEIsd0JBQXdCOzsyRkFBeEIsd0JBQXdCO2tCQUQ3QixVQUFVOztBQWdCWCxNQUFNLFVBQVUsK0JBQStCO0lBQzlDLE9BQU87UUFDTixPQUFPO1FBQ1A7WUFDQyxPQUFPLEVBQUUsZ0JBQWdCO1lBQ3pCLFFBQVEsRUFBRSx3QkFBd0I7U0FDbEM7S0FDRCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE92ZXJsYXksIE92ZXJsYXlDb250YWluZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wbGF0Zm9ybSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBFbGVtZW50UmVmLCBJbmplY3RhYmxlLCBQcm92aWRlciwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTRUxFQ1RfSUQsIFNFTEVDVF9MQUJFTCwgU0VMRUNUX0xBQkVMX0lEIH0gZnJvbSAnLi4vc2VsZWN0Lm1vZGVsJztcblxubGV0IHNlbGVjdElkID0gMDtcblxuZnVuY3Rpb24gc2VsZWN0SWRGYWN0b3J5KCk6IG51bWJlciB7XG5cdHJldHVybiBzZWxlY3RJZCsrO1xufVxuXG5mdW5jdGlvbiBzZWxlY3RMYWJlbEZhY3RvcnkoKTogSFRNTExhYmVsRWxlbWVudCB8IHVuZGVmaW5lZCB7XG5cdGNvbnN0IGVsZW1lbnRSZWYgPSBpbmplY3Q8RWxlbWVudFJlZjxIVE1MRWxlbWVudD4+KEVsZW1lbnRSZWYpO1xuXG5cdGZ1bmN0aW9uIGdldExhYmVsKG5vZGU6IEhUTUxFbGVtZW50KTogSFRNTExhYmVsRWxlbWVudCB8IHVuZGVmaW5lZCB7XG5cdFx0aWYgKG5vZGUgaW5zdGFuY2VvZiBIVE1MTGFiZWxFbGVtZW50KSB7XG5cdFx0XHRyZXR1cm4gbm9kZTtcblx0XHR9XG5cblx0XHRpZiAoIW5vZGUucGFyZW50RWxlbWVudCkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZ2V0TGFiZWwobm9kZS5wYXJlbnRFbGVtZW50KTtcblx0fVxuXG5cdHJldHVybiBnZXRMYWJlbChlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3RMYWJlbElkRmFjdG9yeSgpOiBzdHJpbmcge1xuXHRyZXR1cm4gaW5qZWN0KFNFTEVDVF9MQUJFTCk/LmlkIHx8IGBsdS1zZWxlY3QtbGFiZWwtJHtpbmplY3QoU0VMRUNUX0lEKX1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUx1U2VsZWN0TGFiZWxzQW5kSWRzKCk6IFByb3ZpZGVyW10ge1xuXHRyZXR1cm4gW1xuXHRcdHsgcHJvdmlkZTogU0VMRUNUX0lELCB1c2VGYWN0b3J5OiBzZWxlY3RJZEZhY3RvcnkgfSxcblx0XHR7IHByb3ZpZGU6IFNFTEVDVF9MQUJFTCwgdXNlRmFjdG9yeTogc2VsZWN0TGFiZWxGYWN0b3J5IH0sXG5cdFx0eyBwcm92aWRlOiBTRUxFQ1RfTEFCRUxfSUQsIHVzZUZhY3Rvcnk6IHNlbGVjdExhYmVsSWRGYWN0b3J5IH0sXG5cdF07XG59XG5cbkBJbmplY3RhYmxlKClcbmNsYXNzIEx1U2VsZWN0T3ZlcmxheUNvbnRhaW5lciBleHRlbmRzIE92ZXJsYXlDb250YWluZXIge1xuXHRwcml2YXRlIHNlbGVjdExhYmVsSWQgPSBpbmplY3QoU0VMRUNUX0xBQkVMX0lEKTtcblx0cHJpdmF0ZSBzZWxlY3RJZCA9IGluamVjdChTRUxFQ1RfSUQpO1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKGluamVjdChET0NVTUVOVCksIGluamVjdChQbGF0Zm9ybSkpO1xuXHR9XG5cblx0cHJvdGVjdGVkIG92ZXJyaWRlIF9jcmVhdGVDb250YWluZXIoKTogdm9pZCB7XG5cdFx0c3VwZXIuX2NyZWF0ZUNvbnRhaW5lcigpO1xuXHRcdHRoaXMuX2NvbnRhaW5lckVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknLCB0aGlzLnNlbGVjdExhYmVsSWQpO1xuXHRcdHRoaXMuX2NvbnRhaW5lckVsZW1lbnQuaWQgPSBgbHUtc2VsZWN0LW92ZXJsYXktY29udGFpbmVyLSR7dGhpcy5zZWxlY3RJZH1gO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlTHVTZWxlY3RPdmVybGF5Q29udGFpbmVyKCk6IFByb3ZpZGVyW10ge1xuXHRyZXR1cm4gW1xuXHRcdE92ZXJsYXksXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogT3ZlcmxheUNvbnRhaW5lcixcblx0XHRcdHVzZUNsYXNzOiBMdVNlbGVjdE92ZXJsYXlDb250YWluZXIsXG5cdFx0fSxcblx0XTtcbn1cbiJdfQ==