/* eslint-disable @angular-eslint/no-output-on-prefix */
import { OverlayContainer } from '@angular/cdk/overlay';
import { ChangeDetectorRef, Directive, EventEmitter, HostBinding, HostListener, Input, Output, inject } from '@angular/core';
import { BehaviorSubject, ReplaySubject, Subject } from 'rxjs';
import { LuSimpleSelectDefaultOptionComponent } from '../option';
import { SELECT_LABEL, SELECT_LABEL_ID } from '../select.model';
import * as i0 from "@angular/core";
class ALuSelectInputComponent {
    constructor() {
        this.tabindex = 0;
        this.placeholder = '';
        this.clearable = false;
        this.disabled = false;
        this.isPanelOpen$ = new BehaviorSubject(false);
        this.role = 'combobox';
        this.overlayConfig = {
            hasBackdrop: true,
            backdropClass: 'cdk-overlay-transparent-backdrop',
        };
        this.optionComparer = (option1, option2) => JSON.stringify(option1) === JSON.stringify(option2);
        this.optionTpl = LuSimpleSelectDefaultOptionComponent;
        this.clueChange = new EventEmitter();
        this.nextPage = new EventEmitter();
        this.previousPage = new EventEmitter();
        this.options$ = new ReplaySubject(1);
        this.loading$ = new ReplaySubject(1);
        this.clue = null;
        this.destroyed$ = new Subject();
        this.changeDetectorRef = inject(ChangeDetectorRef);
        this.overlayContainerRef = inject(OverlayContainer).getContainerElement();
        this.label = inject(SELECT_LABEL);
        this.labelId = inject(SELECT_LABEL_ID);
    }
    get searchable() {
        return this.clueChange.observed;
    }
    get isFilledClass() {
        return this.hasValue;
    }
    get isPanelOpen() {
        return this.isPanelOpen$.value;
    }
    get ariaControls() {
        return this.overlayContainerRef.id;
    }
    set loading(value) {
        this.loading$.next(value);
    }
    set options(options) {
        this.options$.next(options);
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
        this.changeDetectorRef.markForCheck();
    }
    get panelRef() {
        return this._panelRef;
    }
    onKeydown($event) {
        if (!this.isPanelOpen) {
            this.openPanel();
            $event.stopPropagation();
            $event.preventDefault();
        }
    }
    registerOnChange(onChange) {
        this.onChange = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    ngOnDestroy() {
        this.closePanel();
        this.destroyed$.next();
        this.destroyed$.complete();
    }
    ngOnInit() {
        if (this.label) {
            this.label.id = this.labelId;
        }
    }
    clearValue(event) {
        event.stopPropagation();
        this.updateValue(null);
    }
    openPanel() {
        if (this.isPanelOpen || this.disabled) {
            return;
        }
        this.isPanelOpen$.next(true);
        this._panelRef = this.buildPanelRef();
        this.bindInputToPanelRefEvents();
    }
    bindInputToPanelRefEvents() {
        if (!this.panelRef) {
            return;
        }
        this.panelRef.valueChanged.subscribe((value) => this.updateValue(value));
        this.panelRef.nextPage.subscribe(() => this.nextPage.emit());
        this.panelRef.previousPage.subscribe(() => this.previousPage.emit());
        this.panelRef.clueChanged.subscribe((clue) => {
            this.clueChange.emit(clue);
            this.clue = clue;
        });
        this.panelRef.activeOptionIdChanged.subscribe((optionId) => {
            this.activeDescendant = optionId;
            this.changeDetectorRef.markForCheck();
        });
        this.panelRef.closed.subscribe(() => this.closePanel());
    }
    closePanel() {
        if (!this.isPanelOpen) {
            return;
        }
        this.onTouched?.();
        this.isPanelOpen$.next(false);
        this.panelRef.close();
        this._panelRef = undefined;
    }
    writeValue(value) {
        this.value = value;
    }
    updateValue(value) {
        this.value = value;
        this.onChange?.(value);
        this.onTouched?.();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuSelectInputComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: ALuSelectInputComponent, inputs: { placeholder: "placeholder", clearable: "clearable", disabled: "disabled", overlayConfig: "overlayConfig", loading: "loading", options: "options", optionComparer: "optionComparer", optionTpl: "optionTpl", valueTpl: "valueTpl" }, outputs: { clueChange: "clueChange", nextPage: "nextPage", previousPage: "previousPage" }, host: { listeners: { "keydown.space": "onKeydown($event)", "keydown.enter": "onKeydown($event)", "keydown.arrowDown": "onKeydown($event)", "click": "onKeydown($event)" }, properties: { "tabindex": "this.tabindex", "class.is-clearable": "this.clearable", "class.is-disabled": "this.disabled", "class.is-filled": "this.isFilledClass", "class.is-focused": "this.isPanelOpen", "attr.aria-expanded": "this.isPanelOpen", "attr.role": "this.role", "attr.aria-activedescendant": "this.activeDescendant", "attr.aria-controls": "this.ariaControls" } }, ngImport: i0 }); }
}
export { ALuSelectInputComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuSelectInputComponent, decorators: [{
            type: Directive
        }], propDecorators: { tabindex: [{
                type: HostBinding,
                args: ['tabindex']
            }], placeholder: [{
                type: Input
            }], clearable: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.is-clearable']
            }], disabled: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.is-disabled']
            }], isFilledClass: [{
                type: HostBinding,
                args: ['class.is-filled']
            }], isPanelOpen: [{
                type: HostBinding,
                args: ['class.is-focused']
            }, {
                type: HostBinding,
                args: ['attr.aria-expanded']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], activeDescendant: [{
                type: HostBinding,
                args: ['attr.aria-activedescendant']
            }], ariaControls: [{
                type: HostBinding,
                args: ['attr.aria-controls']
            }], overlayConfig: [{
                type: Input
            }], loading: [{
                type: Input
            }], options: [{
                type: Input
            }], optionComparer: [{
                type: Input
            }], optionTpl: [{
                type: Input
            }], valueTpl: [{
                type: Input
            }], clueChange: [{
                type: Output
            }], nextPage: [{
                type: Output
            }], previousPage: [{
                type: Output
            }], onKeydown: [{
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.arrowDown', ['$event']]
            }, {
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,