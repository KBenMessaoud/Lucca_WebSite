import { Injectable } from '@angular/core';
import { LuApiV4Service } from '@lucca-front/ng/api';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
class LuEstablishmentService extends LuApiV4Service {
    set appInstanceId(id) {
        this._appInstanceId = id;
    }
    set operations(ops) {
        this._operations = ops || [];
    }
    get filters() {
        const isScopeFiltered = this._appInstanceId && this._operations.length;
        if (isScopeFiltered) {
            const appIdFilter = `appInstanceId=${this._appInstanceId}`;
            const operationFilter = `operations=${this._operations.join(',')}`;
            return [...this._filters, appIdFilter, operationFilter];
        }
        return this._filters;
    }
    set filters(filters) {
        this._filters = filters || [];
    }
    constructor(_http) {
        super(_http);
        this._http = _http;
        this._api = `/organization/structure/api/establishments`;
        this._appInstanceId = null;
        this._operations = [];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentService }); }
}
export { LuEstablishmentService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXN0YWJsaXNobWVudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvZXN0YWJsaXNobWVudC9zZXJ2aWNlL2VzdGFibGlzaG1lbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBRXJELE1BQ2Esc0JBQXVCLFNBQVEsY0FBZ0M7SUFJM0UsSUFBSSxhQUFhLENBQUMsRUFBVTtRQUMzQixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxVQUFVLENBQUMsR0FBYTtRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsSUFBSSxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUNELElBQWEsT0FBTztRQUNuQixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO1FBRXZFLElBQUksZUFBZSxFQUFFO1lBQ3BCLE1BQU0sV0FBVyxHQUFHLGlCQUFpQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDM0QsTUFBTSxlQUFlLEdBQUcsY0FBYyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBRW5FLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsV0FBVyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1NBQ3hEO1FBRUQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3RCLENBQUM7SUFDRCxJQUFhLE9BQU8sQ0FBQyxPQUFpQjtRQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVELFlBQStCLEtBQWlCO1FBQy9DLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQURpQixVQUFLLEdBQUwsS0FBSyxDQUFZO1FBMUI3QixTQUFJLEdBQUcsNENBQTRDLENBQUM7UUFFN0QsbUJBQWMsR0FBVyxJQUFJLENBQUM7UUFJOUIsZ0JBQVcsR0FBYSxFQUFFLENBQUM7SUFzQnJDLENBQUM7OEdBN0JXLHNCQUFzQjtrSEFBdEIsc0JBQXNCOztTQUF0QixzQkFBc0I7MkZBQXRCLHNCQUFzQjtrQkFEbEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElMdUVzdGFibGlzaG1lbnQgfSBmcm9tICcuLi9lc3RhYmxpc2htZW50Lm1vZGVsJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBMdUFwaVY0U2VydmljZSB9IGZyb20gJ0BsdWNjYS1mcm9udC9uZy9hcGknO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTHVFc3RhYmxpc2htZW50U2VydmljZSBleHRlbmRzIEx1QXBpVjRTZXJ2aWNlPElMdUVzdGFibGlzaG1lbnQ+IHtcblx0cHJvdGVjdGVkIG92ZXJyaWRlIF9hcGkgPSBgL29yZ2FuaXphdGlvbi9zdHJ1Y3R1cmUvYXBpL2VzdGFibGlzaG1lbnRzYDtcblxuXHRwcm90ZWN0ZWQgX2FwcEluc3RhbmNlSWQ6IG51bWJlciA9IG51bGw7XG5cdHNldCBhcHBJbnN0YW5jZUlkKGlkOiBudW1iZXIpIHtcblx0XHR0aGlzLl9hcHBJbnN0YW5jZUlkID0gaWQ7XG5cdH1cblx0cHJvdGVjdGVkIF9vcGVyYXRpb25zOiBudW1iZXJbXSA9IFtdO1xuXHRzZXQgb3BlcmF0aW9ucyhvcHM6IG51bWJlcltdKSB7XG5cdFx0dGhpcy5fb3BlcmF0aW9ucyA9IG9wcyB8fCBbXTtcblx0fVxuXHRvdmVycmlkZSBnZXQgZmlsdGVycygpOiBzdHJpbmdbXSB7XG5cdFx0Y29uc3QgaXNTY29wZUZpbHRlcmVkID0gdGhpcy5fYXBwSW5zdGFuY2VJZCAmJiB0aGlzLl9vcGVyYXRpb25zLmxlbmd0aDtcblxuXHRcdGlmIChpc1Njb3BlRmlsdGVyZWQpIHtcblx0XHRcdGNvbnN0IGFwcElkRmlsdGVyID0gYGFwcEluc3RhbmNlSWQ9JHt0aGlzLl9hcHBJbnN0YW5jZUlkfWA7XG5cdFx0XHRjb25zdCBvcGVyYXRpb25GaWx0ZXIgPSBgb3BlcmF0aW9ucz0ke3RoaXMuX29wZXJhdGlvbnMuam9pbignLCcpfWA7XG5cblx0XHRcdHJldHVybiBbLi4udGhpcy5fZmlsdGVycywgYXBwSWRGaWx0ZXIsIG9wZXJhdGlvbkZpbHRlcl07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX2ZpbHRlcnM7XG5cdH1cblx0b3ZlcnJpZGUgc2V0IGZpbHRlcnMoZmlsdGVyczogc3RyaW5nW10pIHtcblx0XHR0aGlzLl9maWx0ZXJzID0gZmlsdGVycyB8fCBbXTtcblx0fVxuXG5cdGNvbnN0cnVjdG9yKHByb3RlY3RlZCBvdmVycmlkZSBfaHR0cDogSHR0cENsaWVudCkge1xuXHRcdHN1cGVyKF9odHRwKTtcblx0fVxufVxuIl19