/* eslint-disable max-len */
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, forwardRef, HostBinding, Inject, Input, Optional, Output, Self, SkipSelf, ViewChild } from '@angular/core';
import { FormControl, ReactiveFormsModule } from '@angular/forms';
import { ALuOnCloseSubscriber, ALuOnOpenSubscriber, ALuOnScrollBottomSubscriber } from '@lucca-front/ng/core';
import { ALuOptionOperator, LuOptionPlaceholderComponent } from '@lucca-front/ng/option';
import { of, Subject } from 'rxjs';
import { catchError, debounceTime, map, scan, share, startWith, switchMap, takeWhile, tap } from 'rxjs/operators';
import { ALuEstablishmentService, LuEstablishmentService } from '../../service/index';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/common";
import * as i3 from "../../service/index";
class LuEstablishmentSearcherComponent {
    set filters(filters) {
        this._service.filters = filters;
    }
    set appInstanceId(appId) {
        this._service.appInstanceId = appId;
    }
    set operations(ops) {
        this._service.operations = ops;
    }
    set sort(sort) {
        this._service.sort = sort;
    }
    constructor(hostService, selfService) {
        this.fixed = true;
        this.isSearching = new EventEmitter();
        this._isSearching = false;
        this.clueControl = new FormControl('');
        this.loading = false;
        this._nextPage$ = new Subject();
        this._page$ = this._nextPage$.pipe(scan((acc) => acc + 1, 0), startWith(0));
        this._resetOutOptions = new Subject();
        this.outOptions$ = this._resetOutOptions.pipe(startWith(undefined), switchMap(() => this.clueControl.valueChanges.pipe(debounceTime(100), switchMap((clue) => this._page$.pipe(tap(() => (this.loading = true)), tap(() => {
            // FIXME refactor, add some spec anywhere
            const isSearching = clue != null && clue !== '';
            if (this._isSearching !== isSearching) {
                this._isSearching = isSearching;
                this.isSearching.emit(this._isSearching);
            }
        }), switchMap((page) => this._service.searchPaged(clue, page).pipe(catchError(() => of([])))), takeWhile((loadedItems) => !!loadedItems.length), scan((acc, next) => [...acc, ...next]))), tap(() => (this.loading = false)))), share());
        this.displayPlaceholder$ = this.outOptions$.pipe(map((o) => o?.length === 0 && this._isSearching));
        this._service = hostService || selfService;
    }
    onOpen() {
        this.searchInput.nativeElement.focus();
        this.reset();
    }
    onScrollBottom() {
        if (!this.loading) {
            this._nextPage$.next();
        }
    }
    onClose() {
        this._resetOutOptions.next();
    }
    reset() {
        this.clueControl.reset();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSearcherComponent, deps: [{ token: ALuEstablishmentService, optional: true, skipSelf: true }, { token: ALuEstablishmentService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuEstablishmentSearcherComponent, isStandalone: true, selector: "lu-establishment-searcher", inputs: { filters: "filters", appInstanceId: "appInstanceId", operations: "operations", sort: "sort" }, outputs: { isSearching: "isSearching" }, host: { properties: { "class.position-fixed": "this.fixed" } }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuEstablishmentSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuEstablishmentSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnCloseSubscriber,
                useExisting: forwardRef(() => LuEstablishmentSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnScrollBottomSubscriber,
                useExisting: forwardRef(() => LuEstablishmentSearcherComponent),
                multi: true,
            },
            {
                provide: ALuEstablishmentService,
                useClass: LuEstablishmentService,
            },
        ], viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: "<form>\n\t<div class=\"textfield mod-search\" [class.is-loading]=\"loading\">\n\t\t<input #searchInput class=\"textfield-input\" [formControl]=\"clueControl\" />\n\t</div>\n</form>\n\n<lu-option-placeholder *ngIf=\"displayPlaceholder$ | async\" (onClear)=\"reset()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"], dependencies: [{ kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "component", type: LuOptionPlaceholderComponent, selector: "lu-option-placeholder", outputs: ["onClear"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuEstablishmentSearcherComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSearcherComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-establishment-searcher', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [ReactiveFormsModule, CommonModule, LuOptionPlaceholderComponent], providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuEstablishmentSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuEstablishmentSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnCloseSubscriber,
                            useExisting: forwardRef(() => LuEstablishmentSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnScrollBottomSubscriber,
                            useExisting: forwardRef(() => LuEstablishmentSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuEstablishmentService,
                            useClass: LuEstablishmentService,
                        },
                    ], template: "<form>\n\t<div class=\"textfield mod-search\" [class.is-loading]=\"loading\">\n\t\t<input #searchInput class=\"textfield-input\" [formControl]=\"clueControl\" />\n\t</div>\n</form>\n\n<lu-option-placeholder *ngIf=\"displayPlaceholder$ | async\" (onClear)=\"reset()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"] }]
        }], ctorParameters: function () { return [{ type: i3.LuEstablishmentService, decorators: [{
                    type: Inject,
                    args: [ALuEstablishmentService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i3.LuEstablishmentService, decorators: [{
                    type: Inject,
                    args: [ALuEstablishmentService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { filters: [{
                type: Input
            }], appInstanceId: [{
                type: Input
            }], operations: [{
                type: Input
            }], sort: [{
                type: Input
            }], fixed: [{
                type: HostBinding,
                args: ['class.position-fixed']
            }], searchInput: [{
                type: ViewChild,
                args: ['searchInput', { read: ElementRef, static: true }]
            }], isSearching: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,