import { ChangeDetectionStrategy, Component, forwardRef, Inject, Input, Optional, Self, SkipSelf } from '@angular/core';
import { ALuOptionOperator, ALuOptionSelector, LuOptionSelectAllComponent } from '@lucca-front/ng/option';
import { Subscription } from 'rxjs';
import { ALuEstablishmentService, LuEstablishmentService } from '../../service/index';
import * as i0 from "@angular/core";
import * as i1 from "../../service/index";
class LuEstablishmentSelectAllComponent extends LuOptionSelectAllComponent {
    set filters(filters) {
        this._service.filters = filters;
    }
    set appInstanceId(appInstanceId) {
        this._service.appInstanceId = appInstanceId;
    }
    set operations(operations) {
        this._service.operations = operations;
    }
    constructor(_changeDetectorRef, hostService, selfService) {
        super();
        this._changeDetectorRef = _changeDetectorRef;
        this.loading = false;
        this._subs = new Subscription();
        this._service = hostService || selfService;
    }
    selectAll() {
        this.loading = true;
        const sub = this._service.getAll().subscribe({
            next: (establishments) => {
                this.onSelectValue.next([...establishments]);
            },
            complete: () => {
                this.loading = false;
                this._changeDetectorRef.detectChanges();
            },
        });
        this._subs.add(sub);
    }
    ngOnDestroy() {
        this._subs.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectAllComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: ALuEstablishmentService, optional: true, skipSelf: true }, { token: ALuEstablishmentService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuEstablishmentSelectAllComponent, isStandalone: true, selector: "lu-establishment-select-all", inputs: { filters: "filters", appInstanceId: "appInstanceId", operations: "operations" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuEstablishmentSelectAllComponent),
                multi: true,
            },
            {
                provide: ALuOptionSelector,
                useExisting: forwardRef(() => LuEstablishmentSelectAllComponent),
                multi: true,
            },
            {
                provide: ALuEstablishmentService,
                useClass: LuEstablishmentService,
            },
        ], usesInheritance: true, ngImport: i0, template: "<button type=\"button\" (click)=\"selectAll()\" [disabled]=\"loading\" class=\"link selectAll-button\">{{ intl.select }}</button>\n<button type=\"button\" (click)=\"deselectAll()\" [disabled]=\"loading\" class=\"link selectAll-button u-marginLeftXS\">{{ intl.deselect }}</button>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host .selectAll-button{color:var(--palettes-grey-600);font-size:var(--sizes-S-fontSize);outline:none}:host .selectAll-button:hover{color:var(--palettes-grey-800)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuEstablishmentSelectAllComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectAllComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-establishment-select-all', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuEstablishmentSelectAllComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOptionSelector,
                            useExisting: forwardRef(() => LuEstablishmentSelectAllComponent),
                            multi: true,
                        },
                        {
                            provide: ALuEstablishmentService,
                            useClass: LuEstablishmentService,
                        },
                    ], template: "<button type=\"button\" (click)=\"selectAll()\" [disabled]=\"loading\" class=\"link selectAll-button\">{{ intl.select }}</button>\n<button type=\"button\" (click)=\"deselectAll()\" [disabled]=\"loading\" class=\"link selectAll-button u-marginLeftXS\">{{ intl.deselect }}</button>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host .selectAll-button{color:var(--palettes-grey-600);font-size:var(--sizes-S-fontSize);outline:none}:host .selectAll-button:hover{color:var(--palettes-grey-800)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.LuEstablishmentService, decorators: [{
                    type: Inject,
                    args: [ALuEstablishmentService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.LuEstablishmentService, decorators: [{
                    type: Inject,
                    args: [ALuEstablishmentService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { filters: [{
                type: Input
            }], appInstanceId: [{
                type: Input
            }], operations: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXN0YWJsaXNobWVudC1zZWxlY3QtYWxsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL2VzdGFibGlzaG1lbnQvc2VsZWN0L3NlbGVjdC1hbGwvZXN0YWJsaXNobWVudC1zZWxlY3QtYWxsLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL2VzdGFibGlzaG1lbnQvc2VsZWN0L3NlbGVjdC1hbGwvZXN0YWJsaXNobWVudC1zZWxlY3QtYWxsLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBcUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFhLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RKLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxpQkFBaUIsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzFHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFcEMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLHNCQUFzQixFQUFFLE1BQU0scUJBQXFCLENBQUM7OztBQUV0RixNQXVCYSxpQ0FBa0MsU0FBUSwwQkFBNEM7SUFDbEcsSUFBYSxPQUFPLENBQUMsT0FBaUI7UUFDckMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ2pDLENBQUM7SUFDRCxJQUFhLGFBQWEsQ0FBQyxhQUFxQjtRQUMvQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7SUFDN0MsQ0FBQztJQUNELElBQWEsVUFBVSxDQUFDLFVBQW9CO1FBQzNDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUN2QyxDQUFDO0lBTUQsWUFDa0Isa0JBQXFDLEVBSXRELFdBQW1DLEVBR25DLFdBQW1DO1FBRW5DLEtBQUssRUFBRSxDQUFDO1FBVFMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFtQjtRQUx2RCxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBRVIsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFhbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxXQUFXLElBQUksV0FBVyxDQUFDO0lBQzVDLENBQUM7SUFFUSxTQUFTO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDO1lBQzVDLElBQUksRUFBRSxDQUFDLGNBQWMsRUFBRSxFQUFFO2dCQUN4QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUM5QyxDQUFDO1lBQ0QsUUFBUSxFQUFFLEdBQUcsRUFBRTtnQkFDZCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztnQkFDckIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3pDLENBQUM7U0FDRCxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUQsV0FBVztRQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs4R0E5Q1csaUNBQWlDLG1EQWlCcEMsdUJBQXVCLDZDQUl2Qix1QkFBdUI7a0dBckJwQixpQ0FBaUMsb0tBakJsQztZQUNWO2dCQUNDLE9BQU8sRUFBRSxpQkFBaUI7Z0JBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsaUNBQWlDLENBQUM7Z0JBQ2hFLEtBQUssRUFBRSxJQUFJO2FBQ1g7WUFDRDtnQkFDQyxPQUFPLEVBQUUsaUJBQWlCO2dCQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlDQUFpQyxDQUFDO2dCQUNoRSxLQUFLLEVBQUUsSUFBSTthQUNYO1lBQ0Q7Z0JBQ0MsT0FBTyxFQUFFLHVCQUF1QjtnQkFDaEMsUUFBUSxFQUFFLHNCQUFzQjthQUNoQztTQUNELGlEQzNCRiwyUkFFQTs7U0QyQmEsaUNBQWlDOzJGQUFqQyxpQ0FBaUM7a0JBdkI3QyxTQUFTOytCQUNDLDZCQUE2QixtQkFHdEIsdUJBQXVCLENBQUMsTUFBTSxjQUNuQyxJQUFJLGFBQ0w7d0JBQ1Y7NEJBQ0MsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsa0NBQWtDLENBQUM7NEJBQ2hFLEtBQUssRUFBRSxJQUFJO3lCQUNYO3dCQUNEOzRCQUNDLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLGtDQUFrQyxDQUFDOzRCQUNoRSxLQUFLLEVBQUUsSUFBSTt5QkFDWDt3QkFDRDs0QkFDQyxPQUFPLEVBQUUsdUJBQXVCOzRCQUNoQyxRQUFRLEVBQUUsc0JBQXNCO3lCQUNoQztxQkFDRDs7MEJBbUJDLE1BQU07MkJBQUMsdUJBQXVCOzswQkFDOUIsUUFBUTs7MEJBQ1IsUUFBUTs7MEJBRVIsTUFBTTsyQkFBQyx1QkFBdUI7OzBCQUM5QixJQUFJOzRDQXJCTyxPQUFPO3NCQUFuQixLQUFLO2dCQUdPLGFBQWE7c0JBQXpCLEtBQUs7Z0JBR08sVUFBVTtzQkFBdEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbmplY3QsIElucHV0LCBPbkRlc3Ryb3ksIE9wdGlvbmFsLCBTZWxmLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQUx1T3B0aW9uT3BlcmF0b3IsIEFMdU9wdGlvblNlbGVjdG9yLCBMdU9wdGlvblNlbGVjdEFsbENvbXBvbmVudCB9IGZyb20gJ0BsdWNjYS1mcm9udC9uZy9vcHRpb24nO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJTHVFc3RhYmxpc2htZW50IH0gZnJvbSAnLi4vLi4vZXN0YWJsaXNobWVudC5tb2RlbCc7XG5pbXBvcnQgeyBBTHVFc3RhYmxpc2htZW50U2VydmljZSwgTHVFc3RhYmxpc2htZW50U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2UvaW5kZXgnO1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICdsdS1lc3RhYmxpc2htZW50LXNlbGVjdC1hbGwnLFxuXHR0ZW1wbGF0ZVVybDogJy4vZXN0YWJsaXNobWVudC1zZWxlY3QtYWxsLmNvbXBvbmVudC5odG1sJyxcblx0c3R5bGVVcmxzOiBbJ2VzdGFibGlzaG1lbnQtc2VsZWN0LWFsbC5jb21wb25lbnQuc2NzcyddLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0cHJvdmlkZXJzOiBbXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQUx1T3B0aW9uT3BlcmF0b3IsXG5cdFx0XHR1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBMdUVzdGFibGlzaG1lbnRTZWxlY3RBbGxDb21wb25lbnQpLFxuXHRcdFx0bXVsdGk6IHRydWUsXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRwcm92aWRlOiBBTHVPcHRpb25TZWxlY3Rvcixcblx0XHRcdHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEx1RXN0YWJsaXNobWVudFNlbGVjdEFsbENvbXBvbmVudCksXG5cdFx0XHRtdWx0aTogdHJ1ZSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHByb3ZpZGU6IEFMdUVzdGFibGlzaG1lbnRTZXJ2aWNlLFxuXHRcdFx0dXNlQ2xhc3M6IEx1RXN0YWJsaXNobWVudFNlcnZpY2UsXG5cdFx0fSxcblx0XSxcbn0pXG5leHBvcnQgY2xhc3MgTHVFc3RhYmxpc2htZW50U2VsZWN0QWxsQ29tcG9uZW50IGV4dGVuZHMgTHVPcHRpb25TZWxlY3RBbGxDb21wb25lbnQ8SUx1RXN0YWJsaXNobWVudD4gaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXHRASW5wdXQoKSBzZXQgZmlsdGVycyhmaWx0ZXJzOiBzdHJpbmdbXSkge1xuXHRcdHRoaXMuX3NlcnZpY2UuZmlsdGVycyA9IGZpbHRlcnM7XG5cdH1cblx0QElucHV0KCkgc2V0IGFwcEluc3RhbmNlSWQoYXBwSW5zdGFuY2VJZDogbnVtYmVyKSB7XG5cdFx0dGhpcy5fc2VydmljZS5hcHBJbnN0YW5jZUlkID0gYXBwSW5zdGFuY2VJZDtcblx0fVxuXHRASW5wdXQoKSBzZXQgb3BlcmF0aW9ucyhvcGVyYXRpb25zOiBudW1iZXJbXSkge1xuXHRcdHRoaXMuX3NlcnZpY2Uub3BlcmF0aW9ucyA9IG9wZXJhdGlvbnM7XG5cdH1cblxuXHRsb2FkaW5nID0gZmFsc2U7XG5cdHByaXZhdGUgX3NlcnZpY2U6IEx1RXN0YWJsaXNobWVudFNlcnZpY2U7XG5cdHByaXZhdGUgX3N1YnMgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSByZWFkb25seSBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuXHRcdEBJbmplY3QoQUx1RXN0YWJsaXNobWVudFNlcnZpY2UpXG5cdFx0QE9wdGlvbmFsKClcblx0XHRAU2tpcFNlbGYoKVxuXHRcdGhvc3RTZXJ2aWNlOiBMdUVzdGFibGlzaG1lbnRTZXJ2aWNlLFxuXHRcdEBJbmplY3QoQUx1RXN0YWJsaXNobWVudFNlcnZpY2UpXG5cdFx0QFNlbGYoKVxuXHRcdHNlbGZTZXJ2aWNlOiBMdUVzdGFibGlzaG1lbnRTZXJ2aWNlLFxuXHQpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuX3NlcnZpY2UgPSBob3N0U2VydmljZSB8fCBzZWxmU2VydmljZTtcblx0fVxuXG5cdG92ZXJyaWRlIHNlbGVjdEFsbCgpIHtcblx0XHR0aGlzLmxvYWRpbmcgPSB0cnVlO1xuXHRcdGNvbnN0IHN1YiA9IHRoaXMuX3NlcnZpY2UuZ2V0QWxsKCkuc3Vic2NyaWJlKHtcblx0XHRcdG5leHQ6IChlc3RhYmxpc2htZW50cykgPT4ge1xuXHRcdFx0XHR0aGlzLm9uU2VsZWN0VmFsdWUubmV4dChbLi4uZXN0YWJsaXNobWVudHNdKTtcblx0XHRcdH0sXG5cdFx0XHRjb21wbGV0ZTogKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmxvYWRpbmcgPSBmYWxzZTtcblx0XHRcdFx0dGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuXHRcdFx0fSxcblx0XHR9KTtcblxuXHRcdHRoaXMuX3N1YnMuYWRkKHN1Yik7XG5cdH1cblxuXHRuZ09uRGVzdHJveSgpOiB2b2lkIHtcblx0XHR0aGlzLl9zdWJzLnVuc3Vic2NyaWJlKCk7XG5cdH1cbn1cbiIsIjxidXR0b24gdHlwZT1cImJ1dHRvblwiIChjbGljayk9XCJzZWxlY3RBbGwoKVwiIFtkaXNhYmxlZF09XCJsb2FkaW5nXCIgY2xhc3M9XCJsaW5rIHNlbGVjdEFsbC1idXR0b25cIj57eyBpbnRsLnNlbGVjdCB9fTwvYnV0dG9uPlxuPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgKGNsaWNrKT1cImRlc2VsZWN0QWxsKClcIiBbZGlzYWJsZWRdPVwibG9hZGluZ1wiIGNsYXNzPVwibGluayBzZWxlY3RBbGwtYnV0dG9uIHUtbWFyZ2luTGVmdFhTXCI+e3sgaW50bC5kZXNlbGVjdCB9fTwvYnV0dG9uPlxuIl19