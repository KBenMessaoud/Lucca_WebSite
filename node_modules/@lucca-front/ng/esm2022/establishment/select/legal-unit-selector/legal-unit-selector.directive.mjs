import { Directive, forwardRef, HostListener, Inject, Input, Optional, Self, SkipSelf } from '@angular/core';
import { ALuOptionSelector } from '@lucca-front/ng/option';
import { Subject, Subscription } from 'rxjs';
import { ALuEstablishmentService, LuEstablishmentService } from '../../service/index';
import * as i0 from "@angular/core";
import * as i1 from "../../service/index";
class LuLegalUnitSelectorDirective {
    set filters(filters) {
        this._service.filters = filters;
    }
    set appInstanceId(appId) {
        this._service.appInstanceId = appId;
    }
    set operations(ops) {
        this._service.operations = ops;
    }
    constructor(hostService, selfService) {
        this.multiple = true;
        this.onSelectValue = new Subject();
        this._subs = new Subscription();
        this._service = hostService || selfService;
    }
    onClick() {
        const sub = this._service.getAll([`legalUnitId=${this.legalUnit.id}`]).subscribe((establishments) => {
            if (this.shouldAdd(establishments)) {
                const selectedEstablishmentIds = new Set((this._values ?? []).map((ets) => ets.id));
                this.onSelectValue.next(Array.from([...(this._values ?? []), ...establishments.filter((ets) => !selectedEstablishmentIds.has(ets.id))]));
            }
            else {
                const establishmentIds = new Set(establishments.map((ets) => ets.id));
                this.onSelectValue.next((this._values ?? []).filter((ets) => !establishmentIds.has(ets.id)));
            }
        });
        this._subs.add(sub);
    }
    setValue(values) {
        this._values = values;
    }
    ngOnDestroy() {
        this._subs.unsubscribe();
    }
    shouldAdd(establishments) {
        const selectedCount = (this._values ?? []).filter((ets) => ets.legalUnitId === this.legalUnit.id).length;
        return establishments.length > selectedCount;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuLegalUnitSelectorDirective, deps: [{ token: ALuEstablishmentService, optional: true, skipSelf: true }, { token: ALuEstablishmentService, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuLegalUnitSelectorDirective, isStandalone: true, selector: "[luLegalUnitSelector]", inputs: { legalUnit: ["luLegalUnitSelector", "legalUnit"], filters: ["luLegalUnitSelectorFilters", "filters"], appInstanceId: ["luLegalUnitSelectorAppInstanceId", "appInstanceId"], operations: ["luLegalUnitSelectorOperations", "operations"] }, host: { listeners: { "click": "onClick()" } }, providers: [
            {
                provide: ALuOptionSelector,
                useExisting: forwardRef(() => LuLegalUnitSelectorDirective),
                multi: true,
            },
            {
                provide: ALuEstablishmentService,
                useClass: LuEstablishmentService,
            },
        ], ngImport: i0 }); }
}
export { LuLegalUnitSelectorDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuLegalUnitSelectorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luLegalUnitSelector]',
                    standalone: true,
                    providers: [
                        {
                            provide: ALuOptionSelector,
                            useExisting: forwardRef(() => LuLegalUnitSelectorDirective),
                            multi: true,
                        },
                        {
                            provide: ALuEstablishmentService,
                            useClass: LuEstablishmentService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.LuEstablishmentService, decorators: [{
                    type: Inject,
                    args: [ALuEstablishmentService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.LuEstablishmentService, decorators: [{
                    type: Inject,
                    args: [ALuEstablishmentService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { legalUnit: [{
                type: Input,
                args: ['luLegalUnitSelector']
            }], filters: [{
                type: Input,
                args: ['luLegalUnitSelectorFilters']
            }], appInstanceId: [{
                type: Input,
                args: ['luLegalUnitSelectorAppInstanceId']
            }], operations: [{
                type: Input,
                args: ['luLegalUnitSelectorOperations']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVnYWwtdW5pdC1zZWxlY3Rvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy9lc3RhYmxpc2htZW50L3NlbGVjdC9sZWdhbC11bml0LXNlbGVjdG9yL2xlZ2FsLXVuaXQtc2VsZWN0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFhLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxpQkFBaUIsRUFBcUIsTUFBTSx3QkFBd0IsQ0FBQztBQUM5RSxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUU3QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBRXRGLE1BZWEsNEJBQTRCO0lBUXhDLElBQXlDLE9BQU8sQ0FBQyxPQUFpQjtRQUNqRSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDakMsQ0FBQztJQUNELElBQStDLGFBQWEsQ0FBQyxLQUFhO1FBQ3pFLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztJQUNyQyxDQUFDO0lBQ0QsSUFBNEMsVUFBVSxDQUFDLEdBQWE7UUFDbkUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0lBQ2hDLENBQUM7SUFDRCxZQUlDLFdBQW1DLEVBR25DLFdBQW1DO1FBdkJwQyxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLGtCQUFhLEdBQUcsSUFBSSxPQUFPLEVBQXNCLENBQUM7UUFHMUMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFxQmxDLElBQUksQ0FBQyxRQUFRLEdB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Q0Q7NEJBQ0MsT0FBTyxFQUFFLHVCQUF1Qjs0QkFDaEMsUUFBUSxFQUFFLHNCQUFzQjt5QkFDaEM7cUJBQ0Q7aUJBQ0Q7OzBCQW1CRSxNQUFNOzJCQUFDLHVCQUF1Qjs7MEJBQzlCLFFBQVE7OzBCQUNSLFFBQVE7OzBCQUVSLE1BQU07MkJBQUMsdUJBQXVCOzswQkFDOUIsSUFBSTs0Q0FoQndCLFNBQVM7c0JBQXRDLEtBQUs7dUJBQUMscUJBQXFCO2dCQUNhLE9BQU87c0JBQS9DLEtBQUs7dUJBQUMsNEJBQTRCO2dCQUdZLGFBQWE7c0JBQTNELEtBQUs7dUJBQUMsa0NBQWtDO2dCQUdHLFVBQVU7c0JBQXJELEtBQUs7dUJBQUMsK0JBQStCO2dCQWdCdEMsT0FBTztzQkFETixZQUFZO3VCQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIGZvcndhcmRSZWYsIEhvc3RMaXN0ZW5lciwgSW5qZWN0LCBJbnB1dCwgT25EZXN0cm95LCBPcHRpb25hbCwgU2VsZiwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFMdU9wdGlvblNlbGVjdG9yLCBJTHVPcHRpb25TZWxlY3RvciB9IGZyb20gJ0BsdWNjYS1mcm9udC9uZy9vcHRpb24nO1xuaW1wb3J0IHsgU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJTHVFc3RhYmxpc2htZW50LCBJTHVMZWdhbFVuaXQgfSBmcm9tICcuLi8uLi9lc3RhYmxpc2htZW50Lm1vZGVsJztcbmltcG9ydCB7IEFMdUVzdGFibGlzaG1lbnRTZXJ2aWNlLCBMdUVzdGFibGlzaG1lbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZS9pbmRleCc7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1tsdUxlZ2FsVW5pdFNlbGVjdG9yXScsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG5cdHByb3ZpZGVyczogW1xuXHRcdHtcblx0XHRcdHByb3ZpZGU6IEFMdU9wdGlvblNlbGVjdG9yLFxuXHRcdFx0dXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTHVMZWdhbFVuaXRTZWxlY3RvckRpcmVjdGl2ZSksXG5cdFx0XHRtdWx0aTogdHJ1ZSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHByb3ZpZGU6IEFMdUVzdGFibGlzaG1lbnRTZXJ2aWNlLFxuXHRcdFx0dXNlQ2xhc3M6IEx1RXN0YWJsaXNobWVudFNlcnZpY2UsXG5cdFx0fSxcblx0XSxcbn0pXG5leHBvcnQgY2xhc3MgTHVMZWdhbFVuaXRTZWxlY3RvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIElMdU9wdGlvblNlbGVjdG9yPElMdUVzdGFibGlzaG1lbnQ+LCBPbkRlc3Ryb3kge1xuXHRtdWx0aXBsZSA9IHRydWU7XG5cdG9uU2VsZWN0VmFsdWUgPSBuZXcgU3ViamVjdDxJTHVFc3RhYmxpc2htZW50W10+KCk7XG5cdHByaXZhdGUgX3ZhbHVlczogSUx1RXN0YWJsaXNobWVudFtdO1xuXHRwcml2YXRlIF9zZXJ2aWNlOiBMdUVzdGFibGlzaG1lbnRTZXJ2aWNlO1xuXHRwcml2YXRlIF9zdWJzID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG5cdEBJbnB1dCgnbHVMZWdhbFVuaXRTZWxlY3RvcicpIGxlZ2FsVW5pdDogSUx1TGVnYWxVbml0O1xuXHRASW5wdXQoJ2x1TGVnYWxVbml0U2VsZWN0b3JGaWx0ZXJzJykgc2V0IGZpbHRlcnMoZmlsdGVyczogc3RyaW5nW10pIHtcblx0XHR0aGlzLl9zZXJ2aWNlLmZpbHRlcnMgPSBmaWx0ZXJzO1xuXHR9XG5cdEBJbnB1dCgnbHVMZWdhbFVuaXRTZWxlY3RvckFwcEluc3RhbmNlSWQnKSBzZXQgYXBwSW5zdGFuY2VJZChhcHBJZDogbnVtYmVyKSB7XG5cdFx0dGhpcy5fc2VydmljZS5hcHBJbnN0YW5jZUlkID0gYXBwSWQ7XG5cdH1cblx0QElucHV0KCdsdUxlZ2FsVW5pdFNlbGVjdG9yT3BlcmF0aW9ucycpIHNldCBvcGVyYXRpb25zKG9wczogbnVtYmVyW10pIHtcblx0XHR0aGlzLl9zZXJ2aWNlLm9wZXJhdGlvbnMgPSBvcHM7XG5cdH1cblx0Y29uc3RydWN0b3IoXG5cdFx0QEluamVjdChBTHVFc3RhYmxpc2htZW50U2VydmljZSlcblx0XHRAT3B0aW9uYWwoKVxuXHRcdEBTa2lwU2VsZigpXG5cdFx0aG9zdFNlcnZpY2U6IEx1RXN0YWJsaXNobWVudFNlcnZpY2UsXG5cdFx0QEluamVjdChBTHVFc3RhYmxpc2htZW50U2VydmljZSlcblx0XHRAU2VsZigpXG5cdFx0c2VsZlNlcnZpY2U6IEx1RXN0YWJsaXNobWVudFNlcnZpY2UsXG5cdCkge1xuXHRcdHRoaXMuX3NlcnZpY2UgPSBob3N0U2VydmljZSB8fCBzZWxmU2VydmljZTtcblx0fVxuXG5cdEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcblx0b25DbGljaygpOiB2b2lkIHtcblx0XHRjb25zdCBzdWIgPSB0aGlzLl9zZXJ2aWNlLmdldEFsbChbYGxlZ2FsVW5pdElkPSR7dGhpcy5sZWdhbFVuaXQuaWR9YF0pLnN1YnNjcmliZSgoZXN0YWJsaXNobWVudHMpID0+IHtcblx0XHRcdGlmICh0aGlzLnNob3VsZEFkZChlc3RhYmxpc2htZW50cykpIHtcblx0XHRcdFx0Y29uc3Qgc2VsZWN0ZWRFc3RhYmxpc2htZW50SWRzID0gbmV3IFNldDxudW1iZXI+KCh0aGlzLl92YWx1ZXMgPz8gW10pLm1hcCgoZXRzKSA9PiBldHMuaWQpKTtcblx0XHRcdFx0dGhpcy5vblNlbGVjdFZhbHVlLm5leHQoQXJyYXkuZnJvbShbLi4uKHRoaXMuX3ZhbHVlcyA/PyBbXSksIC4uLmVzdGFibGlzaG1lbnRzLmZpbHRlcigoZXRzKSA9PiAhc2VsZWN0ZWRFc3RhYmxpc2htZW50SWRzLmhhcyhldHMuaWQpKV0pKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnN0IGVzdGFibGlzaG1lbnRJZHMgPSBuZXcgU2V0PG51bWJlcj4oZXN0YWJsaXNobWVudHMubWFwKChldHMpID0+IGV0cy5pZCkpO1xuXHRcdFx0XHR0aGlzLm9uU2VsZWN0VmFsdWUubmV4dCgodGhpcy5fdmFsdWVzID8/IFtdKS5maWx0ZXIoKGV0cykgPT4gIWVzdGFibGlzaG1lbnRJZHMuaGFzKGV0cy5pZCkpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHR0aGlzLl9zdWJzLmFkZChzdWIpO1xuXHR9XG5cblx0c2V0VmFsdWUodmFsdWVzOiBJTHVFc3RhYmxpc2htZW50W10pOiB2b2lkIHtcblx0XHR0aGlzLl92YWx1ZXMgPSB2YWx1ZXM7XG5cdH1cblxuXHRuZ09uRGVzdHJveSgpIHtcblx0XHR0aGlzLl9zdWJzLnVuc3Vic2NyaWJlKCk7XG5cdH1cblxuXHRwcml2YXRlIHNob3VsZEFkZChlc3RhYmxpc2htZW50czogSUx1RXN0YWJsaXNobWVudFtdKTogYm9vbGVhbiB7XG5cdFx0Y29uc3Qgc2VsZWN0ZWRDb3VudCA9ICh0aGlzLl92YWx1ZXMgPz8gW10pLmZpbHRlcigoZXRzKSA9PiBldHMubGVnYWxVbml0SWQgPT09IHRoaXMubGVnYWxVbml0LmlkKS5sZW5ndGg7XG5cdFx0cmV0dXJuIGVzdGFibGlzaG1lbnRzLmxlbmd0aCA+IHNlbGVjdGVkQ291bnQ7XG5cdH1cbn1cbiJdfQ==