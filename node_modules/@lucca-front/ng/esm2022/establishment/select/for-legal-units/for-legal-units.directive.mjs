import { Directive, forwardRef } from '@angular/core';
import { ALuOptionOperator, LuForGroupsDirective } from '@lucca-front/ng/option';
import * as i0 from "@angular/core";
class LuForLegalUnitsDirective extends LuForGroupsDirective {
    constructor(_vcr, _cdr, _templateRef) {
        super(_vcr, _cdr, _templateRef);
        this._vcr = _vcr;
        this._cdr = _cdr;
        this._templateRef = _templateRef;
    }
    groupBy(items) {
        const groups = [];
        items.forEach((item) => {
            const legalUnit = item?.legalUnit;
            let group = groups.find((g) => g.key.id === legalUnit.id);
            if (!group) {
                group = { key: legalUnit, items: [] };
                groups.push(group);
            }
            group.items.push(item);
        });
        return groups;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForLegalUnitsDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.ChangeDetectorRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuForLegalUnitsDirective, isStandalone: true, selector: "[luForLegalUnits]", providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuForLegalUnitsDirective),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0 }); }
}
export { LuForLegalUnitsDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForLegalUnitsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luForLegalUnits]',
                    standalone: true,
                    providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuForLegalUnitsDirective),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }, { type: i0.TemplateRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yLWxlZ2FsLXVuaXRzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL2VzdGFibGlzaG1lbnQvc2VsZWN0L2Zvci1sZWdhbC11bml0cy9mb3ItbGVnYWwtdW5pdHMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBcUIsU0FBUyxFQUFFLFVBQVUsRUFBaUMsTUFBTSxlQUFlLENBQUM7QUFFeEcsT0FBTyxFQUFFLGlCQUFpQixFQUFxQixvQkFBb0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDOztBQUdwRyxNQVdhLHdCQUF5QixTQUFRLG9CQUFvRDtJQUNqRyxZQUNvQixJQUFzQixFQUN0QixJQUF1QixFQUN2QixZQUFzRjtRQUV6RyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztRQUpiLFNBQUksR0FBSixJQUFJLENBQWtCO1FBQ3RCLFNBQUksR0FBSixJQUFJLENBQW1CO1FBQ3ZCLGlCQUFZLEdBQVosWUFBWSxDQUEwRTtJQUcxRyxDQUFDO0lBRWtCLE9BQU8sQ0FBQyxLQUF5QjtRQUNuRCxNQUFNLE1BQU0sR0FBK0MsRUFBRSxDQUFDO1FBQzlELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUN0QixNQUFNLFNBQVMsR0FBRyxJQUFJLEVBQUUsU0FBUyxDQUFDO1lBQ2xDLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNYLEtBQUssR0FBRyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDO2dCQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ25CO1lBQ0QsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztJQUNmLENBQUM7OEdBckJXLHdCQUF3QjtrR0FBeEIsd0JBQXdCLGdFQVJ6QjtZQUNWO2dCQUNDLE9BQU8sRUFBRSxpQkFBaUI7Z0JBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsd0JBQXdCLENBQUM7Z0JBQ3ZELEtBQUssRUFBRSxJQUFJO2FBQ1g7U0FDRDs7U0FFVyx3QkFBd0I7MkZBQXhCLHdCQUF3QjtrQkFYcEMsU0FBUzttQkFBQztvQkFDVixRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixVQUFVLEVBQUUsSUFBSTtvQkFDaEIsU0FBUyxFQUFFO3dCQUNWOzRCQUNDLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLHlCQUF5QixDQUFDOzRCQUN2RCxLQUFLLEVBQUUsSUFBSTt5QkFDWDtxQkFDRDtpQkFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIGZvcndhcmRSZWYsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJTHVHcm91cCB9IGZyb20gJ0BsdWNjYS1mcm9udC9uZy9jb3JlJztcbmltcG9ydCB7IEFMdU9wdGlvbk9wZXJhdG9yLCBMdUZvckdyb3VwQ29udGV4dCwgTHVGb3JHcm91cHNEaXJlY3RpdmUgfSBmcm9tICdAbHVjY2EtZnJvbnQvbmcvb3B0aW9uJztcbmltcG9ydCB7IElMdUVzdGFibGlzaG1lbnQsIElMdUxlZ2FsVW5pdCB9IGZyb20gJy4uLy4uL2VzdGFibGlzaG1lbnQubW9kZWwnO1xuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdbbHVGb3JMZWdhbFVuaXRzXScsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG5cdHByb3ZpZGVyczogW1xuXHRcdHtcblx0XHRcdHByb3ZpZGU6IEFMdU9wdGlvbk9wZXJhdG9yLFxuXHRcdFx0dXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTHVGb3JMZWdhbFVuaXRzRGlyZWN0aXZlKSxcblx0XHRcdG11bHRpOiB0cnVlLFxuXHRcdH0sXG5cdF0sXG59KVxuZXhwb3J0IGNsYXNzIEx1Rm9yTGVnYWxVbml0c0RpcmVjdGl2ZSBleHRlbmRzIEx1Rm9yR3JvdXBzRGlyZWN0aXZlPElMdUVzdGFibGlzaG1lbnQsIElMdUxlZ2FsVW5pdD4ge1xuXHRwdWJsaWMgY29uc3RydWN0b3IoXG5cdFx0cHJvdGVjdGVkIG92ZXJyaWRlIF92Y3I6IFZpZXdDb250YWluZXJSZWYsXG5cdFx0cHJvdGVjdGVkIG92ZXJyaWRlIF9jZHI6IENoYW5nZURldGVjdG9yUmVmLFxuXHRcdHByb3RlY3RlZCBvdmVycmlkZSBfdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPEx1Rm9yR3JvdXBDb250ZXh0PElMdUdyb3VwPElMdUVzdGFibGlzaG1lbnQsIElMdUxlZ2FsVW5pdD4+Pixcblx0KSB7XG5cdFx0c3VwZXIoX3ZjciwgX2NkciwgX3RlbXBsYXRlUmVmKTtcblx0fVxuXG5cdHByb3RlY3RlZCBvdmVycmlkZSBncm91cEJ5KGl0ZW1zOiBJTHVFc3RhYmxpc2htZW50W10pOiBJTHVHcm91cDxJTHVFc3RhYmxpc2htZW50LCBJTHVMZWdhbFVuaXQ+W10ge1xuXHRcdGNvbnN0IGdyb3VwczogSUx1R3JvdXA8SUx1RXN0YWJsaXNobWVudCwgSUx1TGVnYWxVbml0PltdID0gW107XG5cdFx0aXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXHRcdFx0Y29uc3QgbGVnYWxVbml0ID0gaXRlbT8ubGVnYWxVbml0O1xuXHRcdFx0bGV0IGdyb3VwID0gZ3JvdXBzLmZpbmQoKGcpID0+IGcua2V5LmlkID09PSBsZWdhbFVuaXQuaWQpO1xuXHRcdFx0aWYgKCFncm91cCkge1xuXHRcdFx0XHRncm91cCA9IHsga2V5OiBsZWdhbFVuaXQsIGl0ZW1zOiBbXSB9O1xuXHRcdFx0XHRncm91cHMucHVzaChncm91cCk7XG5cdFx0XHR9XG5cdFx0XHRncm91cC5pdGVtcy5wdXNoKGl0ZW0pO1xuXHRcdH0pO1xuXHRcdHJldHVybiBncm91cHM7XG5cdH1cbn1cbiJdfQ==