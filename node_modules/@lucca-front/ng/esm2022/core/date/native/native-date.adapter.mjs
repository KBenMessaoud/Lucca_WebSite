import { formatDate, FormatWidth, getLocaleDateFormat } from '@angular/common';
import { Inject, Injectable, LOCALE_ID, Optional } from '@angular/core';
import { ALuDateAdapter } from '../date-adapter.class';
import { ELuDateGranularity } from '../date-granularity.enum';
import { luDefaultNativeDateAdapterOptions, LU_NATIVE_DATE_ADAPTER_OPTIONS } from './native-date.option';
import * as i0 from "@angular/core";
class LuNativeDateAdapter extends ALuDateAdapter {
    constructor(_locale, _options) {
        super();
        this._locale = _locale;
        this._options = _options;
        this._regex = /[/,.\-\s]/i;
        this._order = {
            date: 0,
            month: 1,
            year: 2,
        };
        this._options = this._options || luDefaultNativeDateAdapterOptions;
        this.initOrder();
    }
    initOrder() {
        const format = getLocaleDateFormat(this._locale, FormatWidth.Short);
        const groups = format.split(this._regex);
        groups.forEach((g, i) => {
            if (g.indexOf('d') !== -1) {
                this._order.date = i;
            }
            if (g.indexOf('M') !== -1) {
                this._order.month = i;
            }
            if (g.indexOf('y') !== -1) {
                this._order.year = i;
            }
        });
    }
    extract(text, granularity = ELuDateGranularity.day) {
        const groups = text.split(this._regex);
        let date = 1, month = 1, year = 1;
        switch (granularity) {
            case ELuDateGranularity.year:
                year = parseInt(groups[Math.max(this._order.year - 2, 0)], 10);
                break;
            case ELuDateGranularity.month:
                month = parseInt(groups[Math.max(this._order.month - 1, 0)], 10);
                year = parseInt(groups[Math.max(this._order.year - 1, 0)], 10) || new Date().getFullYear();
                break;
            case ELuDateGranularity.day:
            default:
                date = parseInt(groups[this._order.date], 10);
                month = parseInt(groups[this._order.month], 10);
                year = parseInt(groups[this._order.year], 10) || new Date().getFullYear();
        }
        return { date, month, year };
    }
    isParsable(text, granularity = ELuDateGranularity.day) {
        if (!text) {
            return false;
        }
        const groups = text.split(this._regex);
        const dayTextInvalid = granularity === ELuDateGranularity.day && groups.length !== 3;
        const monthTextInvalid = granularity === ELuDateGranularity.month && groups.length !== 2;
        const yearTextInvalid = granularity === ELuDateGranularity.year && groups.length !== 1;
        if (dayTextInvalid || monthTextInvalid || yearTextInvalid) {
            return false;
        }
        try {
            const { date, month, year } = this.extract(text, granularity);
            // When year is equal or greater than 10_000 ISO string goes from 2000-01-01 to +010000-01-01 which is not supported by backends
            if (year >= 10000) {
                return false;
            }
            let d;
            if (this._options.useUtc) {
                d = new Date(Date.UTC(year, month - 1, date));
            }
            else {
                d = new Date(year, month - 1, date);
            }
            // checking if its a valid date
            // https://stackoverflow.com/questions/1353684/detecting-an-invalid-date-date-instance-in-javascript
            if (!(d instanceof Date)) {
                return false;
            }
            if (isNaN(d.getTime())) {
                return false;
            }
            // d is a valid date, but
            // as i can write new Date(1234, 56, 78) and mr javascript accepts it
            // i check now that the generated date has the same year/month/date as what i entered
            if (this._options.useUtc) {
                if (d.getUTCFullYear() !== year) {
                    return false;
                }
                if (d.getUTCMonth() !== month - 1) {
                    return false;
                }
                if (d.getUTCDate() !== date) {
                    return false;
                }
            }
            else {
                if (d.getFullYear() !== year) {
                    return false;
                }
                if (d.getMonth() !== month - 1) {
                    return false;
                }
                if (d.getDate() !== date) {
                    return false;
                }
            }
            return true;
        }
        catch {
            return false;
        }
    }
    parse(text, granularity = ELuDateGranularity.day) {
        if (!text) {
            return undefined;
        }
        if (!this.isParsable(text, granularity)) {
            return this.forgeInvalid();
        }
        const { date, month, year } = this.extract(text, granularity);
        return this.forge(year, month, date);
    }
    format(d, format) {
        if (this._options.useUtc) {
            return formatDate(d, format, this._locale, 'UTC');
        }
        else {
            return formatDate(d, format, this._locale);
        }
    }
    forge(year, month, date) {
        if (this._options.useUtc) {
            return new Date(Date.UTC(year, month - 1, date)); // month-1 cuz 0 -> january
        }
        else {
            return new Date(year, month - 1, date); // month-1 cuz 0 -> january
        }
    }
    forgeToday() {
        if (this._options.useUtc) {
            const nonUTCToday = new Date();
            return new Date(Date.UTC(nonUTCToday.getFullYear(), nonUTCToday.getMonth(), nonUTCToday.getDate()));
        }
        else {
            const today = new Date();
            return new Date(today.getFullYear(), today.getMonth(), today.getDate());
        }
    }
    forgeInvalid() {
        return new Date('Invalid Date');
    }
    isValid(d) {
        if (!(d instanceof Date)) {
            return false;
        }
        if (isNaN(d.getTime())) {
            return false;
        }
        return true;
    }
    clone(d) {
        return new Date(d);
    }
    getYear(d) {
        if (this._options.useUtc) {
            return d.getUTCFullYear();
        }
        else {
            return d.getFullYear();
        }
    }
    getMonth(d) {
        if (this._options.useUtc) {
            return d.getUTCMonth() + 1;
        }
        else {
            return d.getMonth() + 1;
        }
    }
    getDate(d) {
        if (this._options.useUtc) {
            return d.getUTCDate();
        }
        else {
            return d.getDate();
        }
    }
    getDay(d) {
        if (this._options.useUtc) {
            return d.getUTCDay();
        }
        else {
            return d.getDay();
        }
    }
    add(d, count, granularity) {
        let year = this.getYear(d);
        let month = this.getMonth(d);
        let date = this.getDate(d);
        switch (granularity) {
            case ELuDateGranularity.decade:
                year += 10 * count;
                break;
            case ELuDateGranularity.year:
                year += count;
                break;
            case ELuDateGranularity.month:
                month += count;
                break;
            case ELuDateGranularity.day:
                date += count;
                break;
        }
        return this.forge(year, month, date);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuNativeDateAdapter, deps: [{ token: LOCALE_ID }, { token: LU_NATIVE_DATE_ADAPTER_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuNativeDateAdapter }); }
}
export { LuNativeDateAdapter };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuNativeDateAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LU_NATIVE_DATE_ADAPTER_OPTIONS]
                }, {
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,