import { Injectable, Inject, LOCALE_ID } from '@angular/core';
import { LuNativeDateAdapter } from '../native/index';
import { ALuDateAdapter } from '../date-adapter.class';
import * as i0 from "@angular/core";
/** bind to a string with iso 26001 format YYYY-MM-DD */
class LuStringDateAdapter extends ALuDateAdapter {
    constructor(_locale) {
        super();
        this._locale = _locale;
        this._nativeAdapter = new LuNativeDateAdapter(this._locale, {
            useUtc: true,
        });
    }
    forge(year, month, date) {
        return this.dateToString(this._nativeAdapter.forge(year, month, date));
    }
    forgeToday() {
        return this.dateToString(this._nativeAdapter.forgeToday());
    }
    forgeInvalid() {
        return 'Invalid Date';
    }
    isValid(d) {
        return this._nativeAdapter.isValid(this.stringToDate(d));
    }
    compare(a, b, granularity) {
        const da = this.stringToDate(a);
        const db = this.stringToDate(b);
        return this._nativeAdapter.compare(da, db, granularity);
    }
    isParsable(text) {
        return this._nativeAdapter.isParsable(text);
    }
    parse(text, granularity) {
        return this.dateToString(this._nativeAdapter.parse(text, granularity));
    }
    format(d, format) {
        return this._nativeAdapter.format(this.stringToDate(d), format);
    }
    clone(d) {
        return `${d}`;
    }
    getYear(d) {
        return this._nativeAdapter.getYear(this.stringToDate(d));
    }
    getMonth(d) {
        return this._nativeAdapter.getMonth(this.stringToDate(d));
    }
    getDate(d) {
        return this._nativeAdapter.getDate(this.stringToDate(d));
    }
    getDay(d) {
        return this._nativeAdapter.getDay(this.stringToDate(d));
    }
    add(d, count, granularity) {
        return this.dateToString(this._nativeAdapter.add(this.stringToDate(d), count, granularity));
    }
    stringToDate(s) {
        return new Date(`${s}T00:00:00Z`);
    }
    dateToString(d) {
        let result;
        if (d === undefined) {
            result = undefined;
        }
        else if (!this._nativeAdapter.isValid(d)) {
            result = this.forgeInvalid();
        }
        else {
            result = d.toISOString().substring(0, 10);
        }
        return result;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuStringDateAdapter, deps: [{ token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuStringDateAdapter }); }
}
export { LuStringDateAdapter };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuStringDateAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLWRhdGUuYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL2NvcmUvZGF0ZS9zdHJpbmcvc3RyaW5nLWRhdGUuYWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDOztBQUl2RCx3REFBd0Q7QUFDeEQsTUFDYSxtQkFBb0IsU0FBUSxjQUFzQjtJQU05RCxZQUF1QyxPQUFlO1FBQ3JELEtBQUssRUFBRSxDQUFDO1FBRDhCLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFFckQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLG1CQUFtQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDM0QsTUFBTSxFQUFFLElBQUk7U0FDWixDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLElBQVksRUFBRSxLQUFhLEVBQUUsSUFBWTtRQUM5QyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxVQUFVO1FBQ1QsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQsWUFBWTtRQUNYLE9BQU8sY0FBYyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxPQUFPLENBQUMsQ0FBUztRQUNoQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FB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TUFBTTsyQkFBQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBMT0NBTEVfSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEx1TmF0aXZlRGF0ZUFkYXB0ZXIgfSBmcm9tICcuLi9uYXRpdmUvaW5kZXgnO1xuaW1wb3J0IHsgQUx1RGF0ZUFkYXB0ZXIgfSBmcm9tICcuLi9kYXRlLWFkYXB0ZXIuY2xhc3MnO1xuaW1wb3J0IHsgRUx1RGF0ZUdyYW51bGFyaXR5IH0gZnJvbSAnLi4vZGF0ZS1ncmFudWxhcml0eS5lbnVtJztcbmltcG9ydCB7IElMdURhdGVBZGFwdGVyIH0gZnJvbSAnLi4vZGF0ZS1hZGFwdGVyLmludGVyZmFjZSc7XG5cbi8qKiBiaW5kIHRvIGEgc3RyaW5nIHdpdGggaXNvIDI2MDAxIGZvcm1hdCBZWVlZLU1NLUREICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTHVTdHJpbmdEYXRlQWRhcHRlciBleHRlbmRzIEFMdURhdGVBZGFwdGVyPHN0cmluZz4gaW1wbGVtZW50cyBJTHVEYXRlQWRhcHRlcjxzdHJpbmc+IHtcblx0Ly8gaSdtIGdvaW5nIHRvIGltcGxlbWVudCB0aGlzIGJ5IGRvaW5nIHNvbWUgaW5oZXJpdGFuY2UgYnkgY29tcG9zaXRpb25cblx0Ly8gaSdsbCBqdXN0IHVzZSB0aGUgbmF0aXZlIGRhdGUgYWRhcHRlciBhbmQganVzdCBwYXJzZS9mb3JtYXQgdG8gaW50ZXJmYWNlIGl0IHdpdGggYSBzdHJpbmdcblxuXHRwcml2YXRlIF9uYXRpdmVBZGFwdGVyOiBMdU5hdGl2ZURhdGVBZGFwdGVyO1xuXG5cdGNvbnN0cnVjdG9yKEBJbmplY3QoTE9DQUxFX0lEKSBwcml2YXRlIF9sb2NhbGU6IHN0cmluZykge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5fbmF0aXZlQWRhcHRlciA9IG5ldyBMdU5hdGl2ZURhdGVBZGFwdGVyKHRoaXMuX2xvY2FsZSwge1xuXHRcdFx0dXNlVXRjOiB0cnVlLFxuXHRcdH0pO1xuXHR9XG5cblx0Zm9yZ2UoeWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyLCBkYXRlOiBudW1iZXIpOiBzdHJpbmcge1xuXHRcdHJldHVybiB0aGlzLmRhdGVUb1N0cmluZyh0aGlzLl9uYXRpdmVBZGFwdGVyLmZvcmdlKHllYXIsIG1vbnRoLCBkYXRlKSk7XG5cdH1cblxuXHRmb3JnZVRvZGF5KCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMuZGF0ZVRvU3RyaW5nKHRoaXMuX25hdGl2ZUFkYXB0ZXIuZm9yZ2VUb2RheSgpKTtcblx0fVxuXG5cdGZvcmdlSW52YWxpZCgpOiBzdHJpbmcge1xuXHRcdHJldHVybiAnSW52YWxpZCBEYXRlJztcblx0fVxuXG5cdGlzVmFsaWQoZDogc3RyaW5nKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuX25hdGl2ZUFkYXB0ZXIuaXNWYWxpZCh0aGlzLnN0cmluZ1RvRGF0ZShkKSk7XG5cdH1cblxuXHRvdmVycmlkZSBjb21wYXJlKGE6IHN0cmluZywgYjogc3RyaW5nLCBncmFudWxhcml0eTogRUx1RGF0ZUdyYW51bGFyaXR5KTogbnVtYmVyIHtcblx0XHRjb25zdCBkYSA9IHRoaXMuc3RyaW5nVG9EYXRlKGEpO1xuXHRcdGNvbnN0IGRiID0gdGhpcy5zdHJpbmdUb0RhdGUoYik7XG5cblx0XHRyZXR1cm4gdGhpcy5fbmF0aXZlQWRhcHRlci5jb21wYXJlKGRhLCBkYiwgZ3JhbnVsYXJpdHkpO1xuXHR9XG5cblx0aXNQYXJzYWJsZSh0ZXh0OiBzdHJpbmcpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5fbmF0aXZlQWRhcHRlci5pc1BhcnNhYmxlKHRleHQpO1xuXHR9XG5cblx0cGFyc2UodGV4dDogc3RyaW5nLCBncmFudWxhcml0eTogRUx1RGF0ZUdyYW51bGFyaXR5KTogc3RyaW5nIHtcblx0XHRyZXR1cm4gdGhpcy5kYXRlVG9TdHJpbmcodGhpcy5fbmF0aXZlQWRhcHRlci5wYXJzZSh0ZXh0LCBncmFudWxhcml0eSkpO1xuXHR9XG5cblx0Zm9ybWF0KGQ6IHN0cmluZywgZm9ybWF0OiBzdHJpbmcpOiBzdHJpbmcge1xuXHRcdHJldHVybiB0aGlzLl9uYXRpdmVBZGFwdGVyLmZvcm1hdCh0aGlzLnN0cmluZ1RvRGF0ZShkKSwgZm9ybWF0KTtcblx0fVxuXG5cdGNsb25lKGQ6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIGAke2R9YDtcblx0fVxuXG5cdGdldFllYXIoZDogc3RyaW5nKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdGhpcy5fbmF0aXZlQWRhcHRlci5nZXRZZWFyKHRoaXMuc3RyaW5nVG9EYXRlKGQpKTtcblx0fVxuXG5cdGdldE1vbnRoKGQ6IHN0cmluZyk6IG51bWJlciB7XG5cdFx0cmV0dXJuIHRoaXMuX25hdGl2ZUFkYXB0ZXIuZ2V0TW9udGgodGhpcy5zdHJpbmdUb0RhdGUoZCkpO1xuXHR9XG5cblx0Z2V0RGF0ZShkOiBzdHJpbmcpOiBudW1iZXIge1xuXHRcdHJldHVybiB0aGlzLl9uYXRpdmVBZGFwdGVyLmdldERhdGUodGhpcy5zdHJpbmdUb0RhdGUoZCkpO1xuXHR9XG5cblx0Z2V0RGF5KGQ6IHN0cmluZyk6IG51bWJlciB7XG5cdFx0cmV0dXJuIHRoaXMuX25hdGl2ZUFkYXB0ZXIuZ2V0RGF5KHRoaXMuc3RyaW5nVG9EYXRlKGQpKTtcblx0fVxuXG5cdGFkZChkOiBzdHJpbmcsIGNvdW50OiBudW1iZXIsIGdyYW51bGFyaXR5OiBFTHVEYXRlR3JhbnVsYXJpdHkpOiBzdHJpbmcge1xuXHRcdHJldHVybiB0aGlzLmRhdGVUb1N0cmluZyh0aGlzLl9uYXRpdmVBZGFwdGVyLmFkZCh0aGlzLnN0cmluZ1RvRGF0ZShkKSwgY291bnQsIGdyYW51bGFyaXR5KSk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgc3RyaW5nVG9EYXRlKHM6IHN0cmluZyk6IERhdGUge1xuXHRcdHJldHVybiBuZXcgRGF0ZShgJHtzfVQwMDowMDowMFpgKTtcblx0fVxuXG5cdHByb3RlY3RlZCBkYXRlVG9TdHJpbmcoZDogRGF0ZSk6IHN0cmluZyB7XG5cdFx0bGV0IHJlc3VsdDogc3RyaW5nO1xuXG5cdFx0aWYgKGQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSBpZiAoIXRoaXMuX25hdGl2ZUFkYXB0ZXIuaXNWYWxpZChkKSkge1xuXHRcdFx0cmVzdWx0ID0gdGhpcy5mb3JnZUludmFsaWQoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gZC50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLCAxMCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxufVxuIl19