import { ELuDateGranularity } from './date-granularity.enum';
export class ALuDateAdapter {
    compare(a, b, granularity) {
        if (!a || !b || !this.isValid(a) || !this.isValid(b)) {
            throw new Error('you must provide valid and not null dates to be compared');
        }
        const aDecade = Math.floor(this.getYear(a) / 10);
        const bDecade = Math.floor(this.getYear(b) / 10);
        if (aDecade < bDecade) {
            return -1;
        }
        if (aDecade > bDecade) {
            return 1;
        }
        if (granularity === ELuDateGranularity.decade) {
            return 0;
        }
        const aYear = this.getYear(a);
        const bYear = this.getYear(b);
        if (aYear < bYear) {
            return -1;
        }
        if (aYear > bYear) {
            return 1;
        }
        if (granularity === ELuDateGranularity.year) {
            return 0;
        }
        const aMonth = this.getMonth(a);
        const bMonth = this.getMonth(b);
        if (aMonth < bMonth) {
            return -1;
        }
        if (aMonth > bMonth) {
            return 1;
        }
        if (granularity === ELuDateGranularity.month) {
            return 0;
        }
        const aDate = this.getDate(a);
        const bDate = this.getDate(b);
        if (aDate < bDate) {
            return -1;
        }
        if (aDate > bDate) {
            return 1;
        }
        if (granularity === ELuDateGranularity.day) {
            return 0;
        }
        return 0;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1hZGFwdGVyLmNsYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvY29yZS9kYXRlL2RhdGUtYWRhcHRlci5jbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUU3RCxNQUFNLE9BQWdCLGNBQWM7SUFLbkMsT0FBTyxDQUFDLENBQUksRUFBRSxDQUFJLEVBQUUsV0FBK0I7UUFDbEQsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3JELE1BQU0sSUFBSSxLQUFLLENBQUMsMERBQTBELENBQUMsQ0FBQztTQUM1RTtRQUNELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNqRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDakQsSUFBSSxPQUFPLEdBQUcsT0FBTyxFQUFFO1lBQ3RCLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDVjtRQUNELElBQUksT0FBTyxHQUFHLE9BQU8sRUFBRTtZQUN0QixPQUFPLENBQUMsQ0FBQztTQUNUO1FBQ0QsSUFBSSxXQUFXLEtBQUssa0JBQWtCLENBQUMsTUFBTSxFQUFFO1lBQzlDLE9BQU8sQ0FBQyxDQUFDO1NBQ1Q7UUFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxLQUFLLEdBQUcsS0FBSyxFQUFFO1lBQ2xCLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDVjtRQUNELElBQUksS0FBSyxHQUFHLEtBQUssRUFBRTtZQUNsQixPQUFPLENBQUMsQ0FBQztTQUNUO1FBQ0QsSUFBSSxXQUFXLEtBQUssa0JBQWtCLENBQUMsSUFBSSxFQUFFO1lBQzVDLE9BQU8sQ0FBQyxDQUFDO1NBQ1Q7UUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsSUFBSSxNQUFNLEdBQUcsTUFBTSxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDVjtRQUNELElBQUksTUFBTSxHQUFHLE1BQU0sRUFBRTtZQUNwQixPQUFPLENBQUMsQ0FBQztTQUNUO1FBQ0QsSUFBSSxXQUFXLEtBQUssa0JBQWtCLENBQUMsS0FBSyxFQUFFO1lBQzdDLE9BQU8sQ0FBQyxDQUFDO1NBQ1Q7UUFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxLQUFLLEdBQUcsS0FBSyxFQUFFO1lBQ2xCLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDVjtRQUNELElBQUksS0FBSyxHQUFHLEtBQUssRUFBRTtZQUNsQixPQUFPLENBQUMsQ0FBQztTQUNUO1FBQ0QsSUFBSSxXQUFXLEtBQUssa0JBQWtCLENBQUMsR0FBRyxFQUFFO1lBQzNDLE9BQU8sQ0FBQyxDQUFDO1NBQ1Q7UUFFRCxPQUFPLENBQUMsQ0FBQztJQUNWLENBQUM7Q0FZRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElMdURhdGVBZGFwdGVyIH0gZnJvbSAnLi9kYXRlLWFkYXB0ZXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IEVMdURhdGVHcmFudWxhcml0eSB9IGZyb20gJy4vZGF0ZS1ncmFudWxhcml0eS5lbnVtJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFMdURhdGVBZGFwdGVyPEQ+IGltcGxlbWVudHMgSUx1RGF0ZUFkYXB0ZXI8RD4ge1xuXHRhYnN0cmFjdCBmb3JnZSh5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXIsIGRhdGU6IG51bWJlcik6IEQ7XG5cdGFic3RyYWN0IGZvcmdlVG9kYXkoKTogRDtcblx0YWJzdHJhY3QgZm9yZ2VJbnZhbGlkKCk6IEQ7XG5cdGFic3RyYWN0IGlzVmFsaWQoZDogRCk6IGJvb2xlYW47XG5cdGNvbXBhcmUoYTogRCwgYjogRCwgZ3JhbnVsYXJpdHk6IEVMdURhdGVHcmFudWxhcml0eSk6IG51bWJlciB7XG5cdFx0aWYgKCFhIHx8ICFiIHx8ICF0aGlzLmlzVmFsaWQoYSkgfHwgIXRoaXMuaXNWYWxpZChiKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCd5b3UgbXVzdCBwcm92aWRlIHZhbGlkIGFuZCBub3QgbnVsbCBkYXRlcyB0byBiZSBjb21wYXJlZCcpO1xuXHRcdH1cblx0XHRjb25zdCBhRGVjYWRlID0gTWF0aC5mbG9vcih0aGlzLmdldFllYXIoYSkgLyAxMCk7XG5cdFx0Y29uc3QgYkRlY2FkZSA9IE1hdGguZmxvb3IodGhpcy5nZXRZZWFyKGIpIC8gMTApO1xuXHRcdGlmIChhRGVjYWRlIDwgYkRlY2FkZSkge1xuXHRcdFx0cmV0dXJuIC0xO1xuXHRcdH1cblx0XHRpZiAoYURlY2FkZSA+IGJEZWNhZGUpIHtcblx0XHRcdHJldHVybiAxO1xuXHRcdH1cblx0XHRpZiAoZ3JhbnVsYXJpdHkgPT09IEVMdURhdGVHcmFudWxhcml0eS5kZWNhZGUpIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdGNvbnN0IGFZZWFyID0gdGhpcy5nZXRZZWFyKGEpO1xuXHRcdGNvbnN0IGJZZWFyID0gdGhpcy5nZXRZZWFyKGIpO1xuXHRcdGlmIChhWWVhciA8IGJZZWFyKSB7XG5cdFx0XHRyZXR1cm4gLTE7XG5cdFx0fVxuXHRcdGlmIChhWWVhciA+IGJZZWFyKSB7XG5cdFx0XHRyZXR1cm4gMTtcblx0XHR9XG5cdFx0aWYgKGdyYW51bGFyaXR5ID09PSBFTHVEYXRlR3JhbnVsYXJpdHkueWVhcikge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Y29uc3QgYU1vbnRoID0gdGhpcy5nZXRNb250aChhKTtcblx0XHRjb25zdCBiTW9udGggPSB0aGlzLmdldE1vbnRoKGIpO1xuXHRcdGlmIChhTW9udGggPCBiTW9udGgpIHtcblx0XHRcdHJldHVybiAtMTtcblx0XHR9XG5cdFx0aWYgKGFNb250aCA+IGJNb250aCkge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fVxuXHRcdGlmIChncmFudWxhcml0eSA9PT0gRUx1RGF0ZUdyYW51bGFyaXR5Lm1vbnRoKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRjb25zdCBhRGF0ZSA9IHRoaXMuZ2V0RGF0ZShhKTtcblx0XHRjb25zdCBiRGF0ZSA9IHRoaXMuZ2V0RGF0ZShiKTtcblx0XHRpZiAoYURhdGUgPCBiRGF0ZSkge1xuXHRcdFx0cmV0dXJuIC0xO1xuXHRcdH1cblx0XHRpZiAoYURhdGUgPiBiRGF0ZSkge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fVxuXHRcdGlmIChncmFudWxhcml0eSA9PT0gRUx1RGF0ZUdyYW51bGFyaXR5LmRheSkge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIDA7XG5cdH1cblx0YWJzdHJhY3QgaXNQYXJzYWJsZSh0ZXh0OiBzdHJpbmcsIGdyYW51bGFyaXR5PzogRUx1RGF0ZUdyYW51bGFyaXR5KTogYm9vbGVhbjtcblx0YWJzdHJhY3QgcGFyc2UodGV4dDogc3RyaW5nLCBncmFudWxhcml0eT86IEVMdURhdGVHcmFudWxhcml0eSk6IEQ7XG5cdGFic3RyYWN0IGZvcm1hdChkOiBELCBmb3JtYXQ6IHN0cmluZyk6IHN0cmluZztcblx0YWJzdHJhY3QgY2xvbmUoZDogRCk6IEQ7XG5cblx0YWJzdHJhY3QgZ2V0WWVhcihkOiBEKTogbnVtYmVyO1xuXHRhYnN0cmFjdCBnZXRNb250aChkOiBEKTogbnVtYmVyO1xuXHRhYnN0cmFjdCBnZXREYXRlKGQ6IEQpOiBudW1iZXI7XG5cdGFic3RyYWN0IGdldERheShkOiBEKTogbnVtYmVyO1xuXG5cdGFic3RyYWN0IGFkZChkOiBELCBjb3VudDogbnVtYmVyLCBncmFudWxhcml0eTogRUx1RGF0ZUdyYW51bGFyaXR5KTogRDtcbn1cbiJdfQ==