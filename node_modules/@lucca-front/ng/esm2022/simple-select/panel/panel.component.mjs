import { A11yModule, ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { AsyncPipe, NgFor, NgIf } from '@angular/common';
import { ChangeDetectionStrategy, Component, HostListener, inject, ViewChild, ViewChildren } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { getIntl } from '@lucca-front/ng/core';
import { LuSelectPanelRef, SELECT_ID, ɵLuOptionComponent } from '@lucca-front/ng/core-select';
import { asyncScheduler, filter, map, observeOn, take, takeUntil } from 'rxjs';
import { SIMPLE_SELECT_PANEL_DATA } from '../select.model';
import { LU_SIMPLE_SELECT_TRANSLATIONS } from '../select.translate';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
import * as i2 from "@angular/forms";
class LuSelectPanelComponent {
    constructor() {
        this.panelData = inject(SIMPLE_SELECT_PANEL_DATA);
        this.panelRef = inject(LuSelectPanelRef);
        this.selectId = inject(SELECT_ID);
        this.intl = getIntl(LU_SIMPLE_SELECT_TRANSLATIONS);
        this.options$ = this.panelData.options$;
        this.loading$ = this.panelData.loading$;
        this.optionComparer = this.panelData.optionComparer;
        this.initialValue = this.panelData.initialValue;
        this.optionTpl = this.panelData.optionTpl;
        this.searchable = this.panelData.searchable;
        this.search = null;
    }
    set searchInput(input) {
        if (!input) {
            return;
        }
        setTimeout(() => input.nativeElement.focus());
    }
    get selected() {
        return this.keyManager?.activeItem?.option;
    }
    onScroll(evt) {
        if (!(evt.target instanceof HTMLElement)) {
            return;
        }
        if (evt.target.scrollTop === 0) {
            this.panelRef.previousPage.emit();
        }
        if (evt.target.scrollHeight - evt.target.scrollTop - evt.target.clientHeight < 1) {
            this.panelRef.nextPage.emit();
        }
    }
    ngAfterViewInit() {
        if (!this.optionsQL) {
            return;
        }
        this.keyManager = new ActiveDescendantKeyManager(this.optionsQL).withHomeAndEnd();
        if (this.initialValue) {
            this.options$
                ?.pipe(observeOn(asyncScheduler), map((options) => options.findIndex((o) => this.optionComparer(o, this.initialValue))), filter((index) => index !== -1), take(1), takeUntil(this.panelRef.closed))
                .subscribe((selectedIndex) => this.keyManager.setActiveItem(selectedIndex));
        }
        this.keyManager.change
            .pipe(map(() => this.keyManager.activeItem?.id), takeUntil(this.panelRef.closed))
            .subscribe((activeDescendant) => this.panelRef.activeOptionIdChanged.emit(activeDescendant));
    }
    onKeyDown($event) {
        switch ($event.key) {
            case 'Escape':
            case 'Tab':
                return this.panelRef.close();
            case 'Enter':
                return this.panelRef.emitValue(this.selected);
            default:
                this.keyManager?.onKeydown($event);
        }
    }
    updateClue(clue) {
        this.search = clue;
        this.panelRef.clueChanged.emit(clue);
        setTimeout(() => this.keyManager.setFirstItemActive());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSelectPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuSelectPanelComponent, isStandalone: true, selector: "lu-select-panel", host: { listeners: { "keydown": "onKeyDown($event)" } }, viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true }, { propertyName: "optionsQL", predicate: ɵLuOptionComponent, descendants: true }], ngImport: i0, template: "<div\n\tclass=\"lu-picker-panel lu-option-picker-panel\"\n\trole=\"dialog\"\n\tcdkTrapFocus\n\t*ngIf=\"{ options: options$ | async } as ctx\"\n\t[cdkTrapFocusAutoCapture]=\"true\"\n>\n\t<div class=\"lu-picker-content\" [class.is-loading]=\"loading$ | async\" tabindex=\"0\" (scroll)=\"onScroll($event)\">\n\t\t<ng-container *ngIf=\"searchable\">\n\t\t\t<div class=\"panel-search textfield mod-search\">\n\t\t\t\t<input #searchInput class=\"textfield-input\" [ngModel]=\"search\" (ngModelChange)=\"updateClue($event)\" />\n\t\t\t</div>\n\n\t\t\t<div class=\"optionPlaceholder\" *ngIf=\"search && !ctx.options?.length\">\n\t\t\t\t<p class=\"optionPlaceholder-content u-marginBottom0\">{{ intl.emptyResults }}</p>\n\t\t\t\t<button type=\"button\" class=\"link\" (click)=\"updateClue(null); searchInput.focus()\">{{ intl.clearSearch }}</button>\n\t\t\t</div>\n\t\t</ng-container>\n\t\t<div class=\"lu-picker-content-option\">\n\t\t\t<lu-select-option\n\t\t\t\t*ngFor=\"let option of ctx.options; let index = index\"\n\t\t\t\t[option]=\"option\"\n\t\t\t\t[optionTpl]=\"optionTpl\"\n\t\t\t\t[optionIndex]=\"index\"\n\t\t\t\t[scrollIntoViewOptions]=\"{ block: 'center' }\"\n\t\t\t\t[isSelected]=\"option === selected\"\n\t\t\t\t(click)=\"panelRef.emitValue(option)\"\n\t\t\t></lu-select-option>\n\t\t</div>\n\n\t\t<div *ngIf=\"loading$ | async\" class=\"panel-loading loading lu-picker-loading\"></div>\n\t</div>\n</div>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}.optionPlaceholder{display:block;padding:var(--components-options-item-padding-vertical) var(--components-options-item-padding-horizontal);font-style:italic;color:var(--palettes-grey-600)}.panel-search{position:sticky;top:0;box-shadow:0 -4px 0 var(--spacings-XS) var(--colors-white-color)}.panel-loading:after{box-shadow:0 0 0 .25rem var(--colors-white-color),inset 0 0 0 .5rem var(--colors-white-color)}\n"], dependencies: [{ kind: "ngmodule", type: A11yModule }, { kind: "directive", type: i1.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }, { kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: ɵLuOptionComponent, selector: "lu-select-option", inputs: ["optionTpl", "isSelected", "option", "optionIndex", "scrollIntoViewOptions"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuSelectPanelComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSelectPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-select-panel', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [A11yModule, AsyncPipe, FormsModule, NgIf, NgFor, ɵLuOptionComponent], template: "<div\n\tclass=\"lu-picker-panel lu-option-picker-panel\"\n\trole=\"dialog\"\n\tcdkTrapFocus\n\t*ngIf=\"{ options: options$ | async } as ctx\"\n\t[cdkTrapFocusAutoCapture]=\"true\"\n>\n\t<div class=\"lu-picker-content\" [class.is-loading]=\"loading$ | async\" tabindex=\"0\" (scroll)=\"onScroll($event)\">\n\t\t<ng-container *ngIf=\"searchable\">\n\t\t\t<div class=\"panel-search textfield mod-search\">\n\t\t\t\t<input #searchInput class=\"textfield-input\" [ngModel]=\"search\" (ngModelChange)=\"updateClue($event)\" />\n\t\t\t</div>\n\n\t\t\t<div class=\"optionPlaceholder\" *ngIf=\"search && !ctx.options?.length\">\n\t\t\t\t<p class=\"optionPlaceholder-content u-marginBottom0\">{{ intl.emptyResults }}</p>\n\t\t\t\t<button type=\"button\" class=\"link\" (click)=\"updateClue(null); searchInput.focus()\">{{ intl.clearSearch }}</button>\n\t\t\t</div>\n\t\t</ng-container>\n\t\t<div class=\"lu-picker-content-option\">\n\t\t\t<lu-select-option\n\t\t\t\t*ngFor=\"let option of ctx.options; let index = index\"\n\t\t\t\t[option]=\"option\"\n\t\t\t\t[optionTpl]=\"optionTpl\"\n\t\t\t\t[optionIndex]=\"index\"\n\t\t\t\t[scrollIntoViewOptions]=\"{ block: 'center' }\"\n\t\t\t\t[isSelected]=\"option === selected\"\n\t\t\t\t(click)=\"panelRef.emitValue(option)\"\n\t\t\t></lu-select-option>\n\t\t</div>\n\n\t\t<div *ngIf=\"loading$ | async\" class=\"panel-loading loading lu-picker-loading\"></div>\n\t</div>\n</div>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}.optionPlaceholder{display:block;padding:var(--components-options-item-padding-vertical) var(--components-options-item-padding-horizontal);font-style:italic;color:var(--palettes-grey-600)}.panel-search{position:sticky;top:0;box-shadow:0 -4px 0 var(--spacings-XS) var(--colors-white-color)}.panel-loading:after{box-shadow:0 0 0 .25rem var(--colors-white-color),inset 0 0 0 .5rem var(--colors-white-color)}\n"] }]
        }], propDecorators: { searchInput: [{
                type: ViewChild,
                args: ['searchInput']
            }], optionsQL: [{
                type: ViewChildren,
                args: [ɵLuOptionComponent]
            }], onKeyDown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,