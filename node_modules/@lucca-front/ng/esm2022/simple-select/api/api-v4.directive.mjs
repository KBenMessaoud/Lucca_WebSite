import { HttpClient } from '@angular/common/http';
import { Directive, inject, Input } from '@angular/core';
import { BehaviorSubject, combineLatest, map, ReplaySubject, switchMap, take } from 'rxjs';
import { ALuSimpleSelectApiDirective } from './api.directive';
import * as i0 from "@angular/core";
class LuSimpleSelectApiV4Directive extends ALuSimpleSelectApiDirective {
    constructor() {
        super(...arguments);
        this.url$ = new ReplaySubject(1);
        this.sort$ = new BehaviorSubject('+name');
        this.filters$ = new BehaviorSubject({});
        this.httpClient = inject(HttpClient);
        this.params$ = combineLatest([this.filters$, this.sort$, this.clue$]).pipe(map(([filters, sort, clue]) => ({
            ...filters,
            ...(sort ? { sort } : {}),
            ...(clue ? { search: clue } : {}),
        })));
        this.optionComparer = (a, b) => a.id === b.id;
    }
    set apiV4(value) {
        this.url$.next(value);
    }
    set sort(value) {
        this.sort$.next(value);
    }
    set filters(value) {
        this.filters$.next(value);
    }
    getOptions(params, page) {
        return this.url$.pipe(take(1), switchMap((url) => this.httpClient.get(url, {
            params: {
                ...params,
                page: page + 1,
                limit: this.pageSize,
            },
        })), map((res) => (Array.isArray(res) ? res : res?.items) ?? []));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSimpleSelectApiV4Directive, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuSimpleSelectApiV4Directive, isStandalone: true, selector: "lu-simple-select[apiV4],lu-multi-select[apiV4]", inputs: { apiV4: "apiV4", sort: "sort", filters: "filters" }, usesInheritance: true, ngImport: i0 }); }
}
export { LuSimpleSelectApiV4Directive };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSimpleSelectApiV4Directive, decorators: [{
            type: Directive,
            args: [{
                    // The attribute is already prefixed with "lu-simple-select"
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: 'lu-simple-select[apiV4],lu-multi-select[apiV4]',
                    standalone: true,
                }]
        }], propDecorators: { apiV4: [{
                type: Input
            }], sort: [{
                type: Input
            }], filters: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLXY0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL3NpbXBsZS1zZWxlY3QvYXBpL2FwaS12NC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RCxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxHQUFHLEVBQWMsYUFBYSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkcsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0saUJBQWlCLENBQUM7O0FBRTlELE1BTWEsNEJBQW1ELFNBQVEsMkJBQThCO0lBTnRHOztRQXNCVyxTQUFJLEdBQUcsSUFBSSxhQUFhLENBQVMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsVUFBSyxHQUFHLElBQUksZUFBZSxDQUFnQixPQUFPLENBQUMsQ0FBQztRQUNwRCxhQUFRLEdBQUcsSUFBSSxlQUFlLENBQTRDLEVBQUUsQ0FBQyxDQUFDO1FBRTlFLGVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFdkIsWUFBTyxHQUFHLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3ZGLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUMvQixHQUFHLE9BQU87WUFDVixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDekIsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUNqQyxDQUFDLENBQUMsQ0FDSCxDQUFDO1FBa0JpQixtQkFBYyxHQUFHLENBQUMsQ0FBSSxFQUFFLENBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO0tBQ2xFO0lBOUNBLElBQ1csS0FBSyxDQUFDLEtBQWE7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQ1csSUFBSSxDQUFDLEtBQW9CO1FBQ25DLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUNXLE9BQU8sQ0FBQyxLQUFnRDtRQUNsRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBZ0JrQixVQUFVLENBQUMsTUFBaUQsRUFBRSxJQUFZO1FBQzVGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ3BCLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUNqQixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBdUIsR0FBRyxFQUFFO1lBQzlDLE1BQU0sRUFBRTtnQkFDUCxHQUFHLE1BQU07Z0JBQ1QsSUFBSSxFQUFFLElBQUksR0FBRyxDQUFDO2dCQUNkLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUTthQUNwQjtTQUNELENBQUMsQ0FDRixFQUNELEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FDM0QsQ0FBQztJQUNILENBQUM7OEdBNUNXLDRCQUE0QjtrR0FBNUIsNEJBQTRCOztTQUE1Qiw0QkFBNEI7MkZBQTVCLDRCQUE0QjtrQkFOeEMsU0FBUzttQkFBQztvQkFDViw0REFBNEQ7b0JBQzVELDhEQUE4RDtvQkFDOUQsUUFBUSxFQUFFLGdEQUFnRDtvQkFDMUQsVUFBVSxFQUFFLElBQUk7aUJBQ2hCOzhCQUdXLEtBQUs7c0JBRGYsS0FBSztnQkFNSyxJQUFJO3NCQURkLEtBQUs7Z0JBTUssT0FBTztzQkFEakIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIGluamVjdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElMdUFwaUl0ZW0gfSBmcm9tICdAbHVjY2EtZnJvbnQvbmcvYXBpJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgY29tYmluZUxhdGVzdCwgbWFwLCBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0LCBzd2l0Y2hNYXAsIHRha2UgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFMdVNpbXBsZVNlbGVjdEFwaURpcmVjdGl2ZSB9IGZyb20gJy4vYXBpLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuXHQvLyBUaGUgYXR0cmlidXRlIGlzIGFscmVhZHkgcHJlZml4ZWQgd2l0aCBcImx1LXNpbXBsZS1zZWxlY3RcIlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L2RpcmVjdGl2ZS1zZWxlY3RvclxuXHRzZWxlY3RvcjogJ2x1LXNpbXBsZS1zZWxlY3RbYXBpVjRdLGx1LW11bHRpLXNlbGVjdFthcGlWNF0nLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxufSlcbmV4cG9ydCBjbGFzcyBMdVNpbXBsZVNlbGVjdEFwaVY0RGlyZWN0aXZlPFQgZXh0ZW5kcyBJTHVBcGlJdGVtPiBleHRlbmRzIEFMdVNpbXBsZVNlbGVjdEFwaURpcmVjdGl2ZTxUPiB7XG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBzZXQgYXBpVjQodmFsdWU6IHN0cmluZykge1xuXHRcdHRoaXMudXJsJC5uZXh0KHZhbHVlKTtcblx0fVxuXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBzZXQgc29ydCh2YWx1ZTogc3RyaW5nIHwgbnVsbCkge1xuXHRcdHRoaXMuc29ydCQubmV4dCh2YWx1ZSk7XG5cdH1cblxuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IGZpbHRlcnModmFsdWU6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4+KSB7XG5cdFx0dGhpcy5maWx0ZXJzJC5uZXh0KHZhbHVlKTtcblx0fVxuXG5cdHByb3RlY3RlZCB1cmwkID0gbmV3IFJlcGxheVN1YmplY3Q8c3RyaW5nPigxKTtcblx0cHJvdGVjdGVkIHNvcnQkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxzdHJpbmcgfCBudWxsPignK25hbWUnKTtcblx0cHJvdGVjdGVkIGZpbHRlcnMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuPj4oe30pO1xuXG5cdHByb3RlY3RlZCBodHRwQ2xpZW50ID0gaW5qZWN0KEh0dHBDbGllbnQpO1xuXG5cdHByb3RlY3RlZCBvdmVycmlkZSBwYXJhbXMkID0gY29tYmluZUxhdGVzdChbdGhpcy5maWx0ZXJzJCwgdGhpcy5zb3J0JCwgdGhpcy5jbHVlJF0pLnBpcGUoXG5cdFx0bWFwKChbZmlsdGVycywgc29ydCwgY2x1ZV0pID0+ICh7XG5cdFx0XHQuLi5maWx0ZXJzLFxuXHRcdFx0Li4uKHNvcnQgPyB7IHNvcnQgfSA6IHt9KSxcblx0XHRcdC4uLihjbHVlID8geyBzZWFyY2g6IGNsdWUgfSA6IHt9KSxcblx0XHR9KSksXG5cdCk7XG5cblx0cHJvdGVjdGVkIG92ZXJyaWRlIGdldE9wdGlvbnMocGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuPiwgcGFnZTogbnVtYmVyKTogT2JzZXJ2YWJsZTxUW10+IHtcblx0XHRyZXR1cm4gdGhpcy51cmwkLnBpcGUoXG5cdFx0XHR0YWtlKDEpLFxuXHRcdFx0c3dpdGNoTWFwKCh1cmwpID0+XG5cdFx0XHRcdHRoaXMuaHR0cENsaWVudC5nZXQ8VFtdIHwgeyBpdGVtczogVFtdIH0+KHVybCwge1xuXHRcdFx0XHRcdHBhcmFtczoge1xuXHRcdFx0XHRcdFx0Li4ucGFyYW1zLFxuXHRcdFx0XHRcdFx0cGFnZTogcGFnZSArIDEsXG5cdFx0XHRcdFx0XHRsaW1pdDogdGhpcy5wYWdlU2l6ZSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9KSxcblx0XHRcdCksXG5cdFx0XHRtYXAoKHJlcykgPT4gKEFycmF5LmlzQXJyYXkocmVzKSA/IHJlcyA6IHJlcz8uaXRlbXMpID8/IFtdKSxcblx0XHQpO1xuXHR9XG5cblx0cHJvdGVjdGVkIG92ZXJyaWRlIG9wdGlvbkNvbXBhcmVyID0gKGE6IFQsIGI6IFQpID0+IGEuaWQgPT09IGIuaWQ7XG59XG4iXX0=