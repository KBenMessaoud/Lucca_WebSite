import { Directive, inject } from '@angular/core';
import { ALuSelectInputComponent } from '@lucca-front/ng/core-select';
import { BehaviorSubject, catchError, combineLatest, concatMap, debounceTime, of, scan, startWith, Subject, switchMap, takeUntil, takeWhile, tap } from 'rxjs';
import * as i0 from "@angular/core";
export const MAGIC_PAGE_SIZE = 20;
export const MAGIC_DEBOUNCE_DURATION = 250;
class ALuSimpleSelectApiDirective {
    constructor() {
        this.destroy$ = new Subject();
        this.pageSize = MAGIC_PAGE_SIZE;
        this.debounceDuration = MAGIC_DEBOUNCE_DURATION;
        this.select = inject(ALuSelectInputComponent);
        this.page$ = this.select.nextPage.pipe(scan((page) => page + 1, 0), startWith(0));
        this.clue$ = this.select.clueChange.pipe(startWith(''), debounceTime(this.debounceDuration));
        this.loading$ = new BehaviorSubject(false);
    }
    ngOnInit() {
        this.select.optionComparer = this.optionComparer;
        this.buildOptions().pipe(takeUntil(this.destroy$)).subscribe(this.select.options$);
        this.loading$.pipe(debounceTime(0), takeUntil(this.destroy$)).subscribe(this.select.loading$);
    }
    buildOptions() {
        return combineLatest([this.params$.pipe(debounceTime(0)), this.select.isPanelOpen$]).pipe(switchMap(([params, isOpened]) => isOpened
            ? this.page$.pipe(concatMap((page) => {
                this.loading$.next(true);
                return this.getOptions(params, page).pipe(catchError(() => of([])), tap(() => this.loading$.next(false)));
            }), takeWhile((items) => items.length === this.pageSize, true), scan((acc, items) => [...acc, ...items], []))
            : of([])));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuSimpleSelectApiDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: ALuSimpleSelectApiDirective, ngImport: i0 }); }
}
export { ALuSimpleSelectApiDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuSimpleSelectApiDirective, decorators: [{
            type: Directive
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL3NpbXBsZS1zZWxlY3QvYXBpL2FwaS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFjLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBRTNLLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUM7QUFDbEMsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsR0FBRyxDQUFDO0FBRTNDLE1BQ3NCLDJCQUEyQjtJQURqRDtRQUVXLGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBQy9CLGFBQVEsR0FBRyxlQUFlLENBQUM7UUFDM0IscUJBQWdCLEdBQUcsdUJBQXVCLENBQUM7UUFFM0MsV0FBTSxHQUFHLE1BQU0sQ0FBNEMsdUJBQXVCLENBQUMsQ0FBQztRQUVwRixVQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUMxQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQzNCLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FDWixDQUFDO1FBRVEsVUFBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFpQnhGLGFBQVEsR0FBRyxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQStCaEQ7SUE5Qk8sUUFBUTtRQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDakQsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBRVMsWUFBWTtRQUNyQixPQUFPLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3hGLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FDaEMsUUFBUTtZQUNQLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDZixTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3pCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUN4QyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQWUsQ0FBQyxDQUFDLEVBQ3JDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUNwQyxDQUFDO1lBQ0gsQ0FBQyxDQUFDLEVBQ0YsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQzFELElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxFQUFlLENBQUMsQ0FDeEQ7WUFDSCxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQWUsQ0FBQyxDQUN0QixDQUNELENBQUM7SUFDSCxDQUFDO0lBRU0sV0FBVztRQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDMUIsQ0FBQzs4R0EzRG9CLDJCQUEyQjtrR0FBM0IsMkJBQTJCOztTQUEzQiwyQkFBMkI7MkZBQTNCLDJCQUEyQjtrQkFEaEQsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgaW5qZWN0LCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQUx1U2VsZWN0SW5wdXRDb21wb25lbnQgfSBmcm9tICdAbHVjY2EtZnJvbnQvbmcvY29yZS1zZWxlY3QnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBjYXRjaEVycm9yLCBjb21iaW5lTGF0ZXN0LCBjb25jYXRNYXAsIGRlYm91bmNlVGltZSwgT2JzZXJ2YWJsZSwgb2YsIHNjYW4sIHN0YXJ0V2l0aCwgU3ViamVjdCwgc3dpdGNoTWFwLCB0YWtlVW50aWwsIHRha2VXaGlsZSwgdGFwIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBjb25zdCBNQUdJQ19QQUdFX1NJWkUgPSAyMDtcbmV4cG9ydCBjb25zdCBNQUdJQ19ERUJPVU5DRV9EVVJBVElPTiA9IDI1MDtcblxuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQUx1U2ltcGxlU2VsZWN0QXBpRGlyZWN0aXZlPFRPcHRpb24sIFRQYXJhbXMgPSBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuPj4gaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCB7XG5cdHByb3RlY3RlZCBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cdHByb3RlY3RlZCBwYWdlU2l6ZSA9IE1BR0lDX1BBR0VfU0laRTtcblx0cHJvdGVjdGVkIGRlYm91bmNlRHVyYXRpb24gPSBNQUdJQ19ERUJPVU5DRV9EVVJBVElPTjtcblxuXHRwcm90ZWN0ZWQgc2VsZWN0ID0gaW5qZWN0PEFMdVNlbGVjdElucHV0Q29tcG9uZW50PFRPcHRpb24sIHVua25vd24+PihBTHVTZWxlY3RJbnB1dENvbXBvbmVudCk7XG5cblx0cHJvdGVjdGVkIHBhZ2UkID0gdGhpcy5zZWxlY3QubmV4dFBhZ2UucGlwZShcblx0XHRzY2FuKChwYWdlKSA9PiBwYWdlICsgMSwgMCksXG5cdFx0c3RhcnRXaXRoKDApLFxuXHQpO1xuXG5cdHByb3RlY3RlZCBjbHVlJCA9IHRoaXMuc2VsZWN0LmNsdWVDaGFuZ2UucGlwZShzdGFydFdpdGgoJycpLCBkZWJvdW5jZVRpbWUodGhpcy5kZWJvdW5jZUR1cmF0aW9uKSk7XG5cblx0LyoqXG5cdCAqIENyZWF0ZSBhbiBvYmplY3QgdGhhdCB3aWxsIGJlIHVzZWQgYXMgcGFyYW1zIGZvciB0aGUgYXBpIGNhbGxcblx0ICovXG5cdHByb3RlY3RlZCBhYnN0cmFjdCBwYXJhbXMkOiBPYnNlcnZhYmxlPFRQYXJhbXM+O1xuXG5cdC8qKlxuXHQgKiBDb21wYXJlIHR3byBvcHRpb25zIHRvIGtub3cgaWYgdGhleSBhcmUgdGhlIHNhbWUuIEZvciBleGFtcGxlLCBjb21wYXJlIGJ5IGlkIG9yIGJ5IEpTT05cblx0ICovXG5cdHByb3RlY3RlZCBhYnN0cmFjdCBvcHRpb25Db21wYXJlcjogKGE6IFRPcHRpb24sIGI6IFRPcHRpb24pID0+IGJvb2xlYW47XG5cblx0LyoqXG5cdCAqIFJldHVybiB0aGUgb3B0aW9ucyBmb3IgdGhlIGdpdmVuIHBhcmFtcyBhbmQgcGFnZVxuXHQgKi9cblx0cHJvdGVjdGVkIGFic3RyYWN0IGdldE9wdGlvbnMocGFyYW1zOiBUUGFyYW1zLCBwYWdlOiBudW1iZXIpOiBPYnNlcnZhYmxlPFRPcHRpb25bXT47XG5cblx0cHJvdGVjdGVkIGxvYWRpbmckID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG5cdHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcblx0XHR0aGlzLnNlbGVjdC5vcHRpb25Db21wYXJlciA9IHRoaXMub3B0aW9uQ29tcGFyZXI7XG5cdFx0dGhpcy5idWlsZE9wdGlvbnMoKS5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSkuc3Vic2NyaWJlKHRoaXMuc2VsZWN0Lm9wdGlvbnMkKTtcblx0XHR0aGlzLmxvYWRpbmckLnBpcGUoZGVib3VuY2VUaW1lKDApLCB0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZSh0aGlzLnNlbGVjdC5sb2FkaW5nJCk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgYnVpbGRPcHRpb25zKCk6IE9ic2VydmFibGU8VE9wdGlvbltdPiB7XG5cdFx0cmV0dXJuIGNvbWJpbmVMYXRlc3QoW3RoaXMucGFyYW1zJC5waXBlKGRlYm91bmNlVGltZSgwKSksIHRoaXMuc2VsZWN0LmlzUGFuZWxPcGVuJF0pLnBpcGUoXG5cdFx0XHRzd2l0Y2hNYXAoKFtwYXJhbXMsIGlzT3BlbmVkXSkgPT5cblx0XHRcdFx0aXNPcGVuZWRcblx0XHRcdFx0XHQ/IHRoaXMucGFnZSQucGlwZShcblx0XHRcdFx0XHRcdFx0Y29uY2F0TWFwKChwYWdlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5sb2FkaW5nJC5uZXh0KHRydWUpO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmdldE9wdGlvbnMocGFyYW1zLCBwYWdlKS5waXBlKFxuXHRcdFx0XHRcdFx0XHRcdFx0Y2F0Y2hFcnJvcigoKSA9PiBvZihbXSBhcyBUT3B0aW9uW10pKSxcblx0XHRcdFx0XHRcdFx0XHRcdHRhcCgoKSA9PiB0aGlzLmxvYWRpbmckLm5leHQoZmFsc2UpKSxcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9KSxcblx0XHRcdFx0XHRcdFx0dGFrZVdoaWxlKChpdGVtcykgPT4gaXRlbXMubGVuZ3RoID09PSB0aGlzLnBhZ2VTaXplLCB0cnVlKSxcblx0XHRcdFx0XHRcdFx0c2NhbigoYWNjLCBpdGVtcykgPT4gWy4uLmFjYywgLi4uaXRlbXNdLCBbXSBhcyBUT3B0aW9uW10pLFxuXHRcdFx0XHRcdCAgKVxuXHRcdFx0XHRcdDogb2YoW10gYXMgVE9wdGlvbltdKSxcblx0XHRcdCksXG5cdFx0KTtcblx0fVxuXG5cdHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcblx0XHR0aGlzLmRlc3Ryb3kkLm5leHQoKTtcblx0XHR0aGlzLmRlc3Ryb3kkLmNvbXBsZXRlKCk7XG5cdH1cbn1cbiJdfQ==