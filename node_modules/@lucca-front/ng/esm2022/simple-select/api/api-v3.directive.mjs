import { HttpClient } from '@angular/common/http';
import { Directive, inject, Input } from '@angular/core';
import { BehaviorSubject, combineLatest, map, ReplaySubject, switchMap, take } from 'rxjs';
import { ALuSimpleSelectApiDirective } from './api.directive';
import * as i0 from "@angular/core";
class LuSimpleSelectApiV3Directive extends ALuSimpleSelectApiDirective {
    constructor() {
        super(...arguments);
        this.url$ = new ReplaySubject(1);
        this.fields$ = new BehaviorSubject('id,name');
        this.orderBy$ = new BehaviorSubject('name,asc');
        this.filters$ = new BehaviorSubject({});
        this.httpClient = inject(HttpClient);
        this.params$ = combineLatest([this.fields$, this.filters$, this.orderBy$, this.clue$]).pipe(map(([fields, filters, orderBy, clue]) => ({
            ...filters,
            fields,
            ...(orderBy ? { orderBy } : {}),
            ...(clue ? { name: `like,${clue}` } : {}),
        })));
        this.optionComparer = (a, b) => a.id === b.id;
    }
    set apiV3(value) {
        this.url$.next(value);
    }
    set fields(value) {
        this.fields$.next(value);
    }
    set orderBy(value) {
        this.orderBy$.next(value);
    }
    set filters(value) {
        this.filters$.next(value);
    }
    getOptions(params, page) {
        return this.url$.pipe(take(1), switchMap((url) => this.httpClient.get(url, {
            params: {
                ...params,
                paging: `${page * this.pageSize},${this.pageSize}`,
            },
        })), map((res) => res.data.items));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSimpleSelectApiV3Directive, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuSimpleSelectApiV3Directive, isStandalone: true, selector: "lu-simple-select[apiV3],lu-multi-select[apiV3]", inputs: { apiV3: "apiV3", fields: "fields", orderBy: "orderBy", filters: "filters" }, usesInheritance: true, ngImport: i0 }); }
}
export { LuSimpleSelectApiV3Directive };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSimpleSelectApiV3Directive, decorators: [{
            type: Directive,
            args: [{
                    // The attribute is already prefixed with "lu-simple-select"
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: 'lu-simple-select[apiV3],lu-multi-select[apiV3]',
                    standalone: true,
                }]
        }], propDecorators: { apiV3: [{
                type: Input
            }], fields: [{
                type: Input
            }], orderBy: [{
                type: Input
            }], filters: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLXYzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL3NpbXBsZS1zZWxlY3QvYXBpL2FwaS12My5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RCxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxHQUFHLEVBQWMsYUFBYSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkcsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0saUJBQWlCLENBQUM7O0FBRTlELE1BTWEsNEJBQW1ELFNBQVEsMkJBQThCO0lBTnRHOztRQTJCVyxTQUFJLEdBQUcsSUFBSSxhQUFhLENBQVMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsWUFBTyxHQUFHLElBQUksZUFBZSxDQUFTLFNBQVMsQ0FBQyxDQUFDO1FBQ2pELGFBQVEsR0FBRyxJQUFJLGVBQWUsQ0FBZ0IsVUFBVSxDQUFDLENBQUM7UUFDMUQsYUFBUSxHQUFHLElBQUksZUFBZSxDQUE0QyxFQUFFLENBQUMsQ0FBQztRQUU5RSxlQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXZCLFlBQU8sR0FBRyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3hHLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDMUMsR0FBRyxPQUFPO1lBQ1YsTUFBTTtZQUNOLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUMvQixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUN6QyxDQUFDLENBQUMsQ0FDSCxDQUFDO1FBaUJpQixtQkFBYyxHQUFHLENBQUMsQ0FBSSxFQUFFLENBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO0tBQ2xFO0lBcERBLElBQ1csS0FBSyxDQUFDLEtBQWE7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQ1csTUFBTSxDQUFDLEtBQWE7UUFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQ1csT0FBTyxDQUFDLEtBQW9CO1FBQ3RDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUNXLE9BQU8sQ0FBQyxLQUFnRDtRQUNsRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBa0JrQixVQUFVLENBQUMsTUFBaUQsRUFBRSxJQUFZO1FBQzVGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ3BCLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUNqQixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBOEIsR0FBRyxFQUFFO1lBQ3JELE1BQU0sRUFBRTtnQkFDUCxHQUFHLE1BQU07Z0JBQ1QsTUFBTSxFQUFFLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTthQUNsRDtTQUNELENBQUMsQ0FDRixFQUNELEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FDNUIsQ0FBQztJQUNILENBQUM7OEdBbERXLDRCQUE0QjtrR0FBNUIsNEJBQTRCOztTQUE1Qiw0QkFBNEI7MkZBQTVCLDRCQUE0QjtrQkFOeEMsU0FBUzttQkFBQztvQkFDViw0REFBNEQ7b0JBQzVELDhEQUE4RDtvQkFDOUQsUUFBUSxFQUFFLGdEQUFnRDtvQkFDMUQsVUFBVSxFQUFFLElBQUk7aUJBQ2hCOzhCQUdXLEtBQUs7c0JBRGYsS0FBSztnQkFNSyxNQUFNO3NCQURoQixLQUFLO2dCQU1LLE9BQU87c0JBRGpCLEtBQUs7Z0JBTUssT0FBTztzQkFEakIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIGluamVjdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElMdUFwaUNvbGxlY3Rpb25SZXNwb25zZSwgSUx1QXBpSXRlbSB9IGZyb20gJ0BsdWNjYS1mcm9udC9uZy9hcGknO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBjb21iaW5lTGF0ZXN0LCBtYXAsIE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QsIHN3aXRjaE1hcCwgdGFrZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQUx1U2ltcGxlU2VsZWN0QXBpRGlyZWN0aXZlIH0gZnJvbSAnLi9hcGkuZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG5cdC8vIFRoZSBhdHRyaWJ1dGUgaXMgYWxyZWFkeSBwcmVmaXhlZCB3aXRoIFwibHUtc2ltcGxlLXNlbGVjdFwiXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvZGlyZWN0aXZlLXNlbGVjdG9yXG5cdHNlbGVjdG9yOiAnbHUtc2ltcGxlLXNlbGVjdFthcGlWM10sbHUtbXVsdGktc2VsZWN0W2FwaVYzXScsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG59KVxuZXhwb3J0IGNsYXNzIEx1U2ltcGxlU2VsZWN0QXBpVjNEaXJlY3RpdmU8VCBleHRlbmRzIElMdUFwaUl0ZW0+IGV4dGVuZHMgQUx1U2ltcGxlU2VsZWN0QXBpRGlyZWN0aXZlPFQ+IHtcblx0QElucHV0KClcblx0cHVibGljIHNldCBhcGlWMyh2YWx1ZTogc3RyaW5nKSB7XG5cdFx0dGhpcy51cmwkLm5leHQodmFsdWUpO1xuXHR9XG5cblx0QElucHV0KClcblx0cHVibGljIHNldCBmaWVsZHModmFsdWU6IHN0cmluZykge1xuXHRcdHRoaXMuZmllbGRzJC5uZXh0KHZhbHVlKTtcblx0fVxuXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBzZXQgb3JkZXJCeSh2YWx1ZTogc3RyaW5nIHwgbnVsbCkge1xuXHRcdHRoaXMub3JkZXJCeSQubmV4dCh2YWx1ZSk7XG5cdH1cblxuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IGZpbHRlcnModmFsdWU6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4+KSB7XG5cdFx0dGhpcy5maWx0ZXJzJC5uZXh0KHZhbHVlKTtcblx0fVxuXG5cdHByb3RlY3RlZCB1cmwkID0gbmV3IFJlcGxheVN1YmplY3Q8c3RyaW5nPigxKTtcblx0cHJvdGVjdGVkIGZpZWxkcyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4oJ2lkLG5hbWUnKTtcblx0cHJvdGVjdGVkIG9yZGVyQnkkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxzdHJpbmcgfCBudWxsPignbmFtZSxhc2MnKTtcblx0cHJvdGVjdGVkIGZpbHRlcnMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuPj4oe30pO1xuXG5cdHByb3RlY3RlZCBodHRwQ2xpZW50ID0gaW5qZWN0KEh0dHBDbGllbnQpO1xuXG5cdHByb3RlY3RlZCBvdmVycmlkZSBwYXJhbXMkID0gY29tYmluZUxhdGVzdChbdGhpcy5maWVsZHMkLCB0aGlzLmZpbHRlcnMkLCB0aGlzLm9yZGVyQnkkLCB0aGlzLmNsdWUkXSkucGlwZShcblx0XHRtYXAoKFtmaWVsZHMsIGZpbHRlcnMsIG9yZGVyQnksIGNsdWVdKSA9PiAoe1xuXHRcdFx0Li4uZmlsdGVycyxcblx0XHRcdGZpZWxkcyxcblx0XHRcdC4uLihvcmRlckJ5ID8geyBvcmRlckJ5IH0gOiB7fSksXG5cdFx0XHQuLi4oY2x1ZSA/IHsgbmFtZTogYGxpa2UsJHtjbHVlfWAgfSA6IHt9KSxcblx0XHR9KSksXG5cdCk7XG5cblx0cHJvdGVjdGVkIG92ZXJyaWRlIGdldE9wdGlvbnMocGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuPiwgcGFnZTogbnVtYmVyKTogT2JzZXJ2YWJsZTxUW10+IHtcblx0XHRyZXR1cm4gdGhpcy51cmwkLnBpcGUoXG5cdFx0XHR0YWtlKDEpLFxuXHRcdFx0c3dpdGNoTWFwKCh1cmwpID0+XG5cdFx0XHRcdHRoaXMuaHR0cENsaWVudC5nZXQ8SUx1QXBpQ29sbGVjdGlvblJlc3BvbnNlPFQ+Pih1cmwsIHtcblx0XHRcdFx0XHRwYXJhbXM6IHtcblx0XHRcdFx0XHRcdC4uLnBhcmFtcyxcblx0XHRcdFx0XHRcdHBhZ2luZzogYCR7cGFnZSAqIHRoaXMucGFnZVNpemV9LCR7dGhpcy5wYWdlU2l6ZX1gLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0pLFxuXHRcdFx0KSxcblx0XHRcdG1hcCgocmVzKSA9PiByZXMuZGF0YS5pdGVtcyksXG5cdFx0KTtcblx0fVxuXG5cdHByb3RlY3RlZCBvdmVycmlkZSBvcHRpb25Db21wYXJlciA9IChhOiBULCBiOiBUKSA9PiBhLmlkID09PSBiLmlkO1xufVxuIl19