import { Overlay, OverlayPositionBuilder, ScrollStrategyOptions } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { ElementRef, inject, Injectable, Injector } from '@angular/core';
import { LuSelectPanelRef } from '@lucca-front/ng/core-select';
import { takeUntil } from 'rxjs';
import { LuSelectPanelComponent } from '../panel';
import { SIMPLE_SELECT_PANEL_DATA } from '../select.model';
import * as i0 from "@angular/core";
class SelectPanelRef extends LuSelectPanelRef {
    constructor(overlayRef, parentInjector, panelData) {
        super();
        this.overlayRef = overlayRef;
        const injector = Injector.create({
            providers: [
                { provide: LuSelectPanelRef, useValue: this },
                { provide: SIMPLE_SELECT_PANEL_DATA, useValue: panelData },
            ],
            parent: parentInjector,
        });
        this.portalRef = new ComponentPortal(LuSelectPanelComponent, undefined, injector);
        this.panelRef = overlayRef.attach(this.portalRef);
        this.instance = this.panelRef.instance;
        overlayRef
            .backdropClick()
            .pipe(takeUntil(this.closed))
            .subscribe(() => this.close());
    }
    emitValue(value) {
        this.valueChanged.emit(value);
        this.close();
    }
    close() {
        super.close();
        this.panelRef.destroy();
        this.overlayRef.detach();
    }
}
class LuSimpleSelectPanelRefFactory {
    constructor() {
        this.overlay = inject(Overlay);
        this.elementRef = inject(ElementRef);
        this.positionBuilder = inject(OverlayPositionBuilder);
        this.scrollStrategies = inject(ScrollStrategyOptions);
        this.parentInjector = inject(Injector);
    }
    buildPanelRef(panelData, overlayConfigOverride = {}) {
        const overlayConfig = this.buildOverlayConfig(overlayConfigOverride);
        const overlayRef = this.overlay.create(overlayConfig);
        return new SelectPanelRef(overlayRef, this.parentInjector, panelData);
    }
    buildOverlayConfig(overlayConfigOverride = {}) {
        const overlayConfig = overlayConfigOverride || {};
        overlayConfig.positionStrategy = this.positionBuilder.flexibleConnectedTo(this.elementRef).withPositions([
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top',
            },
            {
                originX: 'end',
                originY: 'bottom',
                overlayX: 'end',
                overlayY: 'top',
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom',
            },
            {
                originX: 'end',
                originY: 'top',
                overlayX: 'end',
                overlayY: 'bottom',
            },
        ]);
        overlayConfig.scrollStrategy = this.scrollStrategies.reposition();
        overlayConfig.minWidth = this.elementRef.nativeElement.clientWidth;
        overlayConfig.maxHeight = '100vh';
        overlayConfig.maxWidth = '100vw';
        return overlayConfig;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSimpleSelectPanelRefFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSimpleSelectPanelRefFactory }); }
}
export { LuSimpleSelectPanelRefFactory };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSimpleSelectPanelRefFactory, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwtcmVmLmZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy9zaW1wbGUtc2VsZWN0L2lucHV0L3BhbmVsLXJlZi5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQWlCLHNCQUFzQixFQUFjLHFCQUFxQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekgsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBZ0IsVUFBVSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xELE9BQU8sRUFBNEIsd0JBQXdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFFckYsTUFBTSxjQUFrQixTQUFRLGdCQUFzQjtJQUtyRCxZQUFvQixVQUFzQixFQUFFLGNBQXdCLEVBQUUsU0FBc0M7UUFDM0csS0FBSyxFQUFFLENBQUM7UUFEVyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBR3pDLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDaEMsU0FBUyxFQUFFO2dCQUNWLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7Z0JBQzdDLEVBQUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUU7YUFDMUQ7WUFDRCxNQUFNLEVBQUUsY0FBYztTQUN0QixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksZUFBZSxDQUE0QixzQkFBc0IsRUFBRSxTQUFT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QUM7UUFFakMsT0FBTyxhQUFhLENBQUM7SUFDdEIsQ0FBQzs4R0FoRFcsNkJBQTZCO2tIQUE3Qiw2QkFBNkI7O1NBQTdCLDZCQUE2QjsyRkFBN0IsNkJBQTZCO2tCQUR6QyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3ZlcmxheSwgT3ZlcmxheUNvbmZpZywgT3ZlcmxheVBvc2l0aW9uQnVpbGRlciwgT3ZlcmxheVJlZiwgU2Nyb2xsU3RyYXRlZ3lPcHRpb25zIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tcG9uZW50UG9ydGFsIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XG5pbXBvcnQgeyBDb21wb25lbnRSZWYsIEVsZW1lbnRSZWYsIGluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEx1U2VsZWN0UGFuZWxSZWYgfSBmcm9tICdAbHVjY2EtZnJvbnQvbmcvY29yZS1zZWxlY3QnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBMdVNlbGVjdFBhbmVsQ29tcG9uZW50IH0gZnJvbSAnLi4vcGFuZWwnO1xuaW1wb3J0IHsgSUx1U2ltcGxlU2VsZWN0UGFuZWxEYXRhLCBTSU1QTEVfU0VMRUNUX1BBTkVMX0RBVEEgfSBmcm9tICcuLi9zZWxlY3QubW9kZWwnO1xuXG5jbGFzcyBTZWxlY3RQYW5lbFJlZjxUPiBleHRlbmRzIEx1U2VsZWN0UGFuZWxSZWY8VCwgVD4ge1xuXHRpbnN0YW5jZTogTHVTZWxlY3RQYW5lbENvbXBvbmVudDxUPjtcblx0cHJpdmF0ZSBwYW5lbFJlZjogQ29tcG9uZW50UmVmPEx1U2VsZWN0UGFuZWxDb21wb25lbnQ8VD4+O1xuXHRwcml2YXRlIHBvcnRhbFJlZjogQ29tcG9uZW50UG9ydGFsPEx1U2VsZWN0UGFuZWxDb21wb25lbnQ8VD4+O1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgb3ZlcmxheVJlZjogT3ZlcmxheVJlZiwgcGFyZW50SW5qZWN0b3I6IEluamVjdG9yLCBwYW5lbERhdGE6IElMdVNpbXBsZVNlbGVjdFBhbmVsRGF0YTxUPikge1xuXHRcdHN1cGVyKCk7XG5cblx0XHRjb25zdCBpbmplY3RvciA9IEluamVjdG9yLmNyZWF0ZSh7XG5cdFx0XHRwcm92aWRlcnM6IFtcblx0XHRcdFx0eyBwcm92aWRlOiBMdVNlbGVjdFBhbmVsUmVmLCB1c2VWYWx1ZTogdGhpcyB9LFxuXHRcdFx0XHR7IHByb3ZpZGU6IFNJTVBMRV9TRUxFQ1RfUEFORUxfREFUQSwgdXNlVmFsdWU6IHBhbmVsRGF0YSB9LFxuXHRcdFx0XSxcblx0XHRcdHBhcmVudDogcGFyZW50SW5qZWN0b3IsXG5cdFx0fSk7XG5cblx0XHR0aGlzLnBvcnRhbFJlZiA9IG5ldyBDb21wb25lbnRQb3J0YWw8THVTZWxlY3RQYW5lbENvbXBvbmVudDxUPj4oTHVTZWxlY3RQYW5lbENvbXBvbmVudCwgdW5kZWZpbmVkLCBpbmplY3Rvcik7XG5cdFx0dGhpcy5wYW5lbFJlZiA9IG92ZXJsYXlSZWYuYXR0YWNoKHRoaXMucG9ydGFsUmVmKTtcblx0XHR0aGlzLmluc3RhbmNlID0gdGhpcy5wYW5lbFJlZi5pbnN0YW5jZTtcblxuXHRcdG92ZXJsYXlSZWZcblx0XHRcdC5iYWNrZHJvcENsaWNrKClcblx0XHRcdC5waXBlKHRha2VVbnRpbCh0aGlzLmNsb3NlZCkpXG5cdFx0XHQuc3Vic2NyaWJlKCgpID0+IHRoaXMuY2xvc2UoKSk7XG5cdH1cblxuXHRlbWl0VmFsdWUodmFsdWU6IFQpOiB2b2lkIHtcblx0XHR0aGlzLnZhbHVlQ2hhbmdlZC5lbWl0KHZhbHVlKTtcblx0XHR0aGlzLmNsb3NlKCk7XG5cdH1cblxuXHRvdmVycmlkZSBjbG9zZSgpOiB2b2lkIHtcblx0XHRzdXBlci5jbG9zZSgpO1xuXHRcdHRoaXMucGFuZWxSZWYuZGVzdHJveSgpO1xuXHRcdHRoaXMub3ZlcmxheVJlZi5kZXRhY2goKTtcblx0fVxufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTHVTaW1wbGVTZWxlY3RQYW5lbFJlZkZhY3Rvcnkge1xuXHRwcm90ZWN0ZWQgb3ZlcmxheSA9IGluamVjdChPdmVybGF5KTtcblx0cHJvdGVjdGVkIGVsZW1lbnRSZWYgPSBpbmplY3Q8RWxlbWVudFJlZjxIVE1MRWxlbWVudD4+KEVsZW1lbnRSZWYpO1xuXHRwcm90ZWN0ZWQgcG9zaXRpb25CdWlsZGVyID0gaW5qZWN0KE92ZXJsYXlQb3NpdGlvbkJ1aWxkZXIpO1xuXHRwcm90ZWN0ZWQgc2Nyb2xsU3RyYXRlZ2llcyA9IGluamVjdChTY3JvbGxTdHJhdGVneU9wdGlvbnMpO1xuXHRwcm90ZWN0ZWQgcGFyZW50SW5qZWN0b3IgPSBpbmplY3QoSW5qZWN0b3IpO1xuXG5cdGJ1aWxkUGFuZWxSZWY8VD4ocGFuZWxEYXRhOiBJTHVTaW1wbGVTZWxlY3RQYW5lbERhdGE8VD4sIG92ZXJsYXlDb25maWdPdmVycmlkZTogT3ZlcmxheUNvbmZpZyA9IHt9KTogTHVTZWxlY3RQYW5lbFJlZjxULCBUPiB7XG5cdFx0Y29uc3Qgb3ZlcmxheUNvbmZpZyA9IHRoaXMuYnVpbGRPdmVybGF5Q29uZmlnKG92ZXJsYXlDb25maWdPdmVycmlkZSk7XG5cdFx0Y29uc3Qgb3ZlcmxheVJlZiA9IHRoaXMub3ZlcmxheS5jcmVhdGUob3ZlcmxheUNvbmZpZyk7XG5cblx0XHRyZXR1cm4gbmV3IFNlbGVjdFBhbmVsUmVmKG92ZXJsYXlSZWYsIHRoaXMucGFyZW50SW5qZWN0b3IsIHBhbmVsRGF0YSk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgYnVpbGRPdmVybGF5Q29uZmlnKG92ZXJsYXlDb25maWdPdmVycmlkZTogT3ZlcmxheUNvbmZpZyA9IHt9KTogT3ZlcmxheUNvbmZpZyB7XG5cdFx0Y29uc3Qgb3ZlcmxheUNvbmZpZzogT3ZlcmxheUNvbmZpZyA9IG92ZXJsYXlDb25maWdPdmVycmlkZSB8fCB7fTtcblx0XHRvdmVybGF5Q29uZmlnLnBvc2l0aW9uU3RyYXRlZ3kgPSB0aGlzLnBvc2l0aW9uQnVpbGRlci5mbGV4aWJsZUNvbm5lY3RlZFRvKHRoaXMuZWxlbWVudFJlZikud2l0aFBvc2l0aW9ucyhbXG5cdFx0XHR7XG5cdFx0XHRcdG9yaWdpblg6ICdzdGFydCcsXG5cdFx0XHRcdG9yaWdpblk6ICdib3R0b20nLFxuXHRcdFx0XHRvdmVybGF5WDogJ3N0YXJ0Jyxcblx0XHRcdFx0b3ZlcmxheVk6ICd0b3AnLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0b3JpZ2luWDogJ2VuZCcsXG5cdFx0XHRcdG9yaWdpblk6ICdib3R0b20nLFxuXHRcdFx0XHRvdmVybGF5WDogJ2VuZCcsXG5cdFx0XHRcdG92ZXJsYXlZOiAndG9wJyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG9yaWdpblg6ICdzdGFydCcsXG5cdFx0XHRcdG9yaWdpblk6ICd0b3AnLFxuXHRcdFx0XHRvdmVybGF5WDogJ3N0YXJ0Jyxcblx0XHRcdFx0b3ZlcmxheVk6ICdib3R0b20nLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0b3JpZ2luWDogJ2VuZCcsXG5cdFx0XHRcdG9yaWdpblk6ICd0b3AnLFxuXHRcdFx0XHRvdmVybGF5WDogJ2VuZCcsXG5cdFx0XHRcdG92ZXJsYXlZOiAnYm90dG9tJyxcblx0XHRcdH0sXG5cdFx0XSk7XG5cdFx0b3ZlcmxheUNvbmZpZy5zY3JvbGxTdHJhdGVneSA9IHRoaXMuc2Nyb2xsU3RyYXRlZ2llcy5yZXBvc2l0aW9uKCk7XG5cdFx0b3ZlcmxheUNvbmZpZy5taW5XaWR0aCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsaWVudFdpZHRoO1xuXHRcdG92ZXJsYXlDb25maWcubWF4SGVpZ2h0ID0gJzEwMHZoJztcblx0XHRvdmVybGF5Q29uZmlnLm1heFdpZHRoID0gJzEwMHZ3JztcblxuXHRcdHJldHVybiBvdmVybGF5Q29uZmlnO1xuXHR9XG59XG4iXX0=