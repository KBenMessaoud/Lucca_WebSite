import { ComponentPortal } from '@angular/cdk/portal';
import { ApplicationRef, ChangeDetectionStrategy, inject, Injectable, Injector } from '@angular/core';
import { LuModalPanelComponent, LuModalPanelComponentDefaultCD } from './modal-panel.component';
import { ALuModalRef } from './modal-ref.model';
import { LU_MODAL_DATA } from './modal.token';
import { setAriaHiddenOnApplicationRoot } from './modal.utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
class LuModalRef extends ALuModalRef {
    constructor(_overlay, _injector, _component, _config, _applicationRef) {
        super(_overlay, _injector, _component, _config);
        this._overlay = _overlay;
        this._injector = _injector;
        this._component = _component;
        this._config = _config;
        this._applicationRef = _applicationRef;
    }
    _openPopup(data) {
        const injector = Injector.create({
            providers: [
                { provide: ALuModalRef, useValue: this },
                { provide: LU_MODAL_DATA, useValue: data },
            ],
            parent: this._injector,
        });
        const containerPortal = new ComponentPortal(this._config.changeDetection === ChangeDetectionStrategy.OnPush ? LuModalPanelComponent : LuModalPanelComponentDefaultCD, undefined, injector);
        this._containerRef = this._overlayRef.attach(containerPortal);
        const panel = this._containerRef.instance;
        this._componentRef = panel.attachInnerComponent(this._component, injector);
        setAriaHiddenOnApplicationRoot(this._applicationRef, true);
    }
    _closePopup() {
        this._componentRef.destroy();
        this._containerRef.destroy();
        setAriaHiddenOnApplicationRoot(this._applicationRef, false);
    }
    _getOverlayPanelClasses() {
        const classes = super._getOverlayPanelClasses();
        if (this.modalClasses.overlayPane) {
            classes.push(this.modalClasses.overlayPane);
        }
        return classes;
    }
}
class LuModalRefFactory {
    constructor(_overlay, _injector) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._applicationRef = inject(ApplicationRef);
    }
    forge(component, config) {
        return new LuModalRef(this._overlay, this._injector, component, config, this._applicationRef);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuModalRefFactory, deps: [{ token: i1.Overlay }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuModalRefFactory }); }
}
export { LuModalRefFactory };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuModalRefFactory, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtcmVmLmZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy9tb2RhbC9tb2RhbC1yZWYuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGNBQWMsRUFBRSx1QkFBdUIsRUFBZ0IsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHcEgsT0FBTyxFQUEwQixxQkFBcUIsRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3hILE9BQU8sRUFBRSxXQUFXLEVBQWUsTUFBTSxtQkFBbUIsQ0FBQztBQUU3RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlDLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBRS9ELE1BQU0sVUFBMkgsU0FBUSxXQUF1QjtJQUUvSixZQUNvQixRQUFpQixFQUNqQixTQUFtQixFQUNuQixVQUE0QixFQUM1QixPQUFVLEVBQ25CLGVBQStCO1FBRXpDLEtBQUssQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQU43QixhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQ2pCLGNBQVMsR0FBVCxTQUFTLENBQVU7UUFDbkIsZUFBVSxHQUFWLFVBQVUsQ0FBa0I7UUFDNUIsWUFBTyxHQUFQLE9BQU8sQ0FBRztRQUNuQixvQkFBZSxHQUFmLGVBQWUsQ0FBZ0I7SUFHMUMsQ0FBQztJQUNrQixVQUFVLENBQUMsSUFBUTtRQUNyQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQ2hDLFNBQVMsRUFBRTtnQkFDVixFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtnQkFDeEMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7YUFDMUM7WUFDRCxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVM7U0FDdEIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxlQUFlLEdBQUcsSUFBSSxlQUFlLENBQzFDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxLQUFLLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLDhCQUE4QixFQUN4SCxTQUFTLEVBQ1QsUUFBUSxDQUNSLENBQUM7UUFDRixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUE0QixlQUFlLENBQUMsQ0FBQztRQUN6RixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUMxQyxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzNFLDhCQUE4QixDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUNrQixXQUFXO1FBQzdCLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUM3Qiw4QkFBOEIsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFa0IsdUJBQXVCO1FBQ3pDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1FBRWhELElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUU7WUFDbEMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzVDO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDaEIsQ0FBQztDQUNEO0FBRUQsTUFDYSxpQkFBaUI7SUFHN0IsWUFBc0IsUUFBaUIsRUFBWSxTQUFtQjtRQUFoRCxhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQVksY0FBUyxHQUFULFNBQVMsQ0FBVTtRQUY1RCxvQkFBZSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUVzQixDQUFDO0lBQzFFLEtBQUssQ0FBMkQsU0FBMkIsRUFBRSxNQUFTO1FBQ3JHLE9BQU8sSUFBSSxVQUFVLENBQVUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3hHLENBQUM7OEdBTlcsaUJBQWlCO2tIQUFqQixpQkFBaUI7O1NBQWpCLGlCQUFpQjsyRkFBakIsaUJBQWlCO2tCQUQ3QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50VHlwZSwgT3ZlcmxheSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IENvbXBvbmVudFBvcnRhbCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wb3J0YWwnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25SZWYsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnRSZWYsIGluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElMdVBvcHVwUmVmRmFjdG9yeSB9IGZyb20gJ0BsdWNjYS1mcm9udC9uZy9wb3B1cCc7XG5pbXBvcnQgeyBMdU1vZGFsQ29uZmlnIH0gZnJvbSAnLi9tb2RhbC1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgQUx1TW9kYWxQYW5lbENvbXBvbmVudCwgTHVNb2RhbFBhbmVsQ29tcG9uZW50LCBMdU1vZGFsUGFuZWxDb21wb25lbnREZWZhdWx0Q0QgfSBmcm9tICcuL21vZGFsLXBhbmVsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBTHVNb2RhbFJlZiwgSUx1TW9kYWxSZWYgfSBmcm9tICcuL21vZGFsLXJlZi5tb2RlbCc7XG5pbXBvcnQgeyBJTHVNb2RhbENvbnRlbnQgfSBmcm9tICcuL21vZGFsLm1vZGVsJztcbmltcG9ydCB7IExVX01PREFMX0RBVEEgfSBmcm9tICcuL21vZGFsLnRva2VuJztcbmltcG9ydCB7IHNldEFyaWFIaWRkZW5PbkFwcGxpY2F0aW9uUm9vdCB9IGZyb20gJy4vbW9kYWwudXRpbHMnO1xuXG5jbGFzcyBMdU1vZGFsUmVmPFQgZXh0ZW5kcyBJTHVNb2RhbENvbnRlbnQgPSBJTHVNb2RhbENvbnRlbnQsIEQgPSB1bmtub3duLCBSID0gdW5rbm93biwgQyBleHRlbmRzIEx1TW9kYWxDb25maWcgPSBMdU1vZGFsQ29uZmlnPiBleHRlbmRzIEFMdU1vZGFsUmVmPFQsIEQsIFIsIEM+IGltcGxlbWVudHMgSUx1TW9kYWxSZWY8RCwgUj4ge1xuXHRwcm90ZWN0ZWQgX2NvbnRhaW5lclJlZjogQ29tcG9uZW50UmVmPEFMdU1vZGFsUGFuZWxDb21wb25lbnQ8VD4+O1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcm90ZWN0ZWQgb3ZlcnJpZGUgX292ZXJsYXk6IE92ZXJsYXksXG5cdFx0cHJvdGVjdGVkIG92ZXJyaWRlIF9pbmplY3RvcjogSW5qZWN0b3IsXG5cdFx0cHJvdGVjdGVkIG92ZXJyaWRlIF9jb21wb25lbnQ6IENvbXBvbmVudFR5cGU8VD4sXG5cdFx0cHJvdGVjdGVkIG92ZXJyaWRlIF9jb25maWc6IEMsXG5cdFx0cHJvdGVjdGVkIF9hcHBsaWNhdGlvblJlZjogQXBwbGljYXRpb25SZWYsXG5cdCkge1xuXHRcdHN1cGVyKF9vdmVybGF5LCBfaW5qZWN0b3IsIF9jb21wb25lbnQsIF9jb25maWcpO1xuXHR9XG5cdHByb3RlY3RlZCBvdmVycmlkZSBfb3BlblBvcHVwKGRhdGE/OiBEKSB7XG5cdFx0Y29uc3QgaW5qZWN0b3IgPSBJbmplY3Rvci5jcmVhdGUoe1xuXHRcdFx0cHJvdmlkZXJzOiBbXG5cdFx0XHRcdHsgcHJvdmlkZTogQUx1TW9kYWxSZWYsIHVzZVZhbHVlOiB0aGlzIH0sXG5cdFx0XHRcdHsgcHJvdmlkZTogTFVfTU9EQUxfREFUQSwgdXNlVmFsdWU6IGRhdGEgfSxcblx0XHRcdF0sXG5cdFx0XHRwYXJlbnQ6IHRoaXMuX2luamVjdG9yLFxuXHRcdH0pO1xuXG5cdFx0Y29uc3QgY29udGFpbmVyUG9ydGFsID0gbmV3IENvbXBvbmVudFBvcnRhbDxBTHVNb2RhbFBhbmVsQ29tcG9uZW50PFQ+Pihcblx0XHRcdHRoaXMuX2NvbmZpZy5jaGFuZ2VEZXRlY3Rpb24gPT09IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCA/IEx1TW9kYWxQYW5lbENvbXBvbmVudCA6IEx1TW9kYWxQYW5lbENvbXBvbmVudERlZmF1bHRDRCxcblx0XHRcdHVuZGVmaW5lZCxcblx0XHRcdGluamVjdG9yLFxuXHRcdCk7XG5cdFx0dGhpcy5fY29udGFpbmVyUmVmID0gdGhpcy5fb3ZlcmxheVJlZi5hdHRhY2g8QUx1TW9kYWxQYW5lbENvbXBvbmVudDxUPj4oY29udGFpbmVyUG9ydGFsKTtcblx0XHRjb25zdCBwYW5lbCA9IHRoaXMuX2NvbnRhaW5lclJlZi5pbnN0YW5jZTtcblx0XHR0aGlzLl9jb21wb25lbnRSZWYgPSBwYW5lbC5hdHRhY2hJbm5lckNvbXBvbmVudCh0aGlzLl9jb21wb25lbnQsIGluamVjdG9yKTtcblx0XHRzZXRBcmlhSGlkZGVuT25BcHBsaWNhdGlvblJvb3QodGhpcy5fYXBwbGljYXRpb25SZWYsIHRydWUpO1xuXHR9XG5cdHByb3RlY3RlZCBvdmVycmlkZSBfY2xvc2VQb3B1cCgpIHtcblx0XHR0aGlzLl9jb21wb25lbnRSZWYuZGVzdHJveSgpO1xuXHRcdHRoaXMuX2NvbnRhaW5lclJlZi5kZXN0cm95KCk7XG5cdFx0c2V0QXJpYUhpZGRlbk9uQXBwbGljYXRpb25Sb290KHRoaXMuX2FwcGxpY2F0aW9uUmVmLCBmYWxzZSk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgb3ZlcnJpZGUgX2dldE92ZXJsYXlQYW5lbENsYXNzZXMoKTogc3RyaW5nW10ge1xuXHRcdGNvbnN0IGNsYXNzZXMgPSBzdXBlci5fZ2V0T3ZlcmxheVBhbmVsQ2xhc3NlcygpO1xuXG5cdFx0aWYgKHRoaXMubW9kYWxDbGFzc2VzLm92ZXJsYXlQYW5lKSB7XG5cdFx0XHRjbGFzc2VzLnB1c2godGhpcy5tb2RhbENsYXNzZXMub3ZlcmxheVBhbmUpO1xuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzO1xuXHR9XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMdU1vZGFsUmVmRmFjdG9yeSBpbXBsZW1lbnRzIElMdVBvcHVwUmVmRmFjdG9yeTxJTHVNb2RhbENvbnRlbnQsIEx1TW9kYWxDb25maWc+IHtcblx0cHJvdGVjdGVkIF9hcHBsaWNhdGlvblJlZiA9IGluamVjdChBcHBsaWNhdGlvblJlZik7XG5cblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIF9vdmVybGF5OiBPdmVybGF5LCBwcm90ZWN0ZWQgX2luamVjdG9yOiBJbmplY3Rvcikge31cblx0Zm9yZ2U8VCBleHRlbmRzIElMdU1vZGFsQ29udGVudCwgQyBleHRlbmRzIEx1TW9kYWxDb25maWcsIEQsIFI+KGNvbXBvbmVudDogQ29tcG9uZW50VHlwZTxUPiwgY29uZmlnOiBDKSB7XG5cdFx0cmV0dXJuIG5ldyBMdU1vZGFsUmVmPFQsIEQsIFI+KHRoaXMuX292ZXJsYXksIHRoaXMuX2luamVjdG9yLCBjb21wb25lbnQsIGNvbmZpZywgdGhpcy5fYXBwbGljYXRpb25SZWYpO1xuXHR9XG59XG4iXX0=