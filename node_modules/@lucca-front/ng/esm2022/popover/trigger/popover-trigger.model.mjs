import { isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';
import { OverlayConfig, } from '@angular/cdk/overlay';
import { TemplatePortal } from '@angular/cdk/portal';
import { generateId } from '@lucca-front/ng/core';
import { Subject, Subscription, timer } from 'rxjs';
import { debounce, distinctUntilChanged, map } from 'rxjs/operators';
// tslint:disable-next-line: max-line-length
export class ALuPopoverTrigger {
    /** References the popover instance that the trigger is associated with. */
    get panel() {
        return this._panel;
    }
    set panel(p) {
        this._panel = p;
    }
    /** References the popover target instance that the trigger is associated with. */
    get target() {
        return this._target;
    }
    set target(t) {
        this._target = t;
    }
    get triggerEvent() {
        return this._triggerEvent;
    }
    set triggerEvent(te) {
        this._triggerEvent = te;
        if (te === 'hover' || te === 'focus') {
            if (this._hoveredSubscription) {
                this._hoveredSubscription.unsubscribe();
            }
            this._hoveredSubscription = this._hovered$
                .pipe(distinctUntilChanged(), debounce((h) => (h ? timer(this.enterDelay) : timer(this.leaveDelay))))
                .subscribe((h) => (h ? this.openPopover() : this.closePopover()));
        }
    }
    get enterDelay() {
        return this._enterDelay;
    }
    set enterDelay(d) {
        this._enterDelay = d;
    }
    get leaveDelay() {
        return this._leaveDelay;
    }
    set leaveDelay(d) {
        this._leaveDelay = d;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(d) {
        this._disabled = d;
    }
    get whenEllipsis() {
        return this._whenEllipsis;
    }
    set whenEllipsis(we) {
        this._whenEllipsis = we;
    }
    constructor(_overlay, _elementRef, _viewContainerRef) {
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._overlayRef = null;
        this._popoverOpen = false;
        this._hovered$ = new Subject();
        // tracking input type is necessary so it's possible to only auto-focus
        // the first item of the list when the popover is opened via the keyboard
        this._openedByMouse = false;
        this._triggerEvent = 'click';
        this._enterDelay = 50;
        this._leaveDelay = 50;
        this._disabled = false;
        this._whenEllipsis = false;
        this._triggerId = `popoverTrigger_${generateId()}`;
        this._panelId = `popoverPanel_${generateId()}`;
    }
    onClick() {
        if (this.triggerEvent === 'click' && !this.disabled) {
            this.togglePopover();
        }
    }
    onMouseEnter() {
        if (this.triggerEvent === 'hover' || this.triggerEvent === 'focus') {
            this._hovered$.next(true);
        }
    }
    onMouseLeave() {
        if (this.triggerEvent === 'hover' || this.triggerEvent === 'focus') {
            this._hovered$.next(false);
        }
    }
    onFocus() {
        if (this.triggerEvent === 'hover' || this.triggerEvent === 'focus') {
            this.openPopover();
        }
    }
    onBlur() {
        if (this.triggerEvent === 'hover' || this.triggerEvent === 'focus') {
            this.closePopover();
        }
    }
    /** Toggles the popover between the open and closed states. */
    togglePopover() {
        return this._popoverOpen ? this.closePopover() : this.openPopover();
    }
    /** Opens the popover. */
    openPopover() {
        if (!this._popoverOpen && !this._disabled && (!this._whenEllipsis || this._hasEllipsis())) {
            this._createOverlay();
            this._attachPortalToOverlay();
            /** Only subscribe to overlay detachments if trigger event is hover or focus */
            if (this.triggerEvent === 'hover' || this.triggerEvent === 'focus') {
                this._subscribeToOverlayDetachments();
            }
            /** Only subscribe to backdrop if trigger event is click */
            if (this.triggerEvent === 'click') {
                this._subscribeToBackdrop();
            }
            /** Only subscribe to mouse enter/leave of the panel if trigger = hover */
            this._initPopover();
            this._emitOpen();
        }
    }
    /** Closes the popover. */
    closePopover() {
        if (this._overlayRef) {
            /** Overlay can still be attached if close has been triggered by mouse leave. */
            if (this._overlayRef.hasAttached()) {
                this._overlayRef.detach();
            }
            /** unsubscribe to backdrop click if it was defined */
            if (this._backdropSubscription) {
                // if (this.popover.triggerEvent === 'click') {
                this._backdropSubscription.unsubscribe();
            }
            this._resetPopover();
            this._emitClose();
        }
    }
    /** Removes the popover from the DOM. */
    destroyPopover() {
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
            this._cleanUpSubscriptions();
        }
    }
    /** Focuses the popover trigger. */
    focus() {
        this._elementRef.nativeElement.focus();
    }
    _handleMousedown(event) {
        if (!isFakeMousedownFromScreenReader(event)) {
            this._openedByMouse = true;
        }
    }
    /** The text direction of the containing app. */
    get dir() {
        // return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
        return 'ltr';
    }
    /** Return if the popover main positionning is vertical */
    get isVerticallyPositionned() {
        const position = this.target.position;
        return position === 'below' || position === 'above';
    }
    _attachPortalToOverlay() {
        this._overlayRef.attach(this._portal);
    }
    _getPanelScrollStrategy() {
        return this.panel.scrollStrategy;
    }
    /**
     * This method ensures that the popover
     */
    _subscribeToPanelEvents() {
        if (this._overlayRef) {
            this._panelEventsSubscriptions = new Subscription();
            if (this.triggerEvent === 'hover' || this.triggerEvent === 'focus') {
                this._panelEventsSubscriptions.add(this.panel.hovered.subscribe((hovered) => {
                    this._hovered$.next(hovered);
                }));
            }
            this._panelEventsSubscriptions.add(this.panel.close.subscribe(() => {
                this.closePopover();
            }));
            this._panelEventsSubscriptions.add(this.panel.open.subscribe(() => {
                this.openPopover();
            }));
        }
    }
    /**
     * This method ensures that the popover closes when the overlay has been detached
     * Detach can occur if we scroll while popover is opened
     */
    _subscribeToOverlayDetachments() {
        if (this._overlayRef) {
            this._overlayDetachmentsSubscription = this._overlayRef.detachments().subscribe(() => {
                this._hovered$.next(false);
            });
        }
    }
    /**
     * This method ensures that the popover closes when the overlay backdrop is clicked.
     * We do not use first() here because doing so would not catch clicks from within
     * the popover, and it would fail to unsubscribe properly. Instead, we unsubscribe
     * explicitly when the popover is closed or destroyed.
     */
    _subscribeToBackdrop() {
        if (this._overlayRef) {
            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {
                this.closePopover();
            });
        }
    }
    /**
     * This method sets the popover state to open and focuses the first item if
     * the popover was opened via the keyboard.
     */
    _initPopover() {
        this._setIsPopoverOpen(true);
        this.panel.panelId = this._panelId;
        this.panel.triggerId = this._triggerId;
        this.panel.keydownEvents$ = this._overlayRef.keydownEvents();
        this._subscribeToPanelEvents();
    }
    /**
     * This method resets the popover when it's closed, most importantly restoring
     * focus to the popover trigger if the popover was opened via the keyboard.
     */
    _resetPopover() {
        this._setIsPopoverOpen(false);
        // Focus only needs to be reset to the host element if the popover was opened
        // by the keyboard and manually shifted to the first popover item.
        if (!this._openedByMouse && this.triggerEvent === 'click') {
            this.focus();
        }
        this._openedByMouse = false;
    }
    /** set state rather than toggle to support triggers sharing a popover */
    _setIsPopoverOpen(isOpen) {
        this._popoverOpen = isOpen;
        // tell the panel it's opening/closing
        isOpen ? this.panel.onOpen() : this.panel.onClose();
    }
    /**
     *  This method checks that a valid instance of MdPopover has been passed into
     *  mdPopoverTriggerFor. If not, an exception is thrown.
     */
    _checkPanel() {
        if (!this.panel) {
            throw Error(`lu-popover-trigger: must pass in a lu-popover instance.
      Example:
      <lu-popover #popover="LuPopover"></lu-popover>
      <button type="button" [luPopover]="popover"></button>`);
        }
    }
    _checkTarget() {
        if (!this.target) {
            throw Error(`lu-popover-trigger: must pass in a popover target instance.`);
        }
    }
    /**
     *  This method creates the overlay from the provided popover's template and saves its
     *  OverlayRef so that it can be attached to the DOM when openPopover is called.
     */
    _createOverlay() {
        if (!this._overlayRef) {
            this._portal = new TemplatePortal(this.panel.templateRef, this._viewContainerRef);
            const config = this._getOverlayConfig();
            this._subscribeToPositions(config.positionStrategy);
            this._overlayRef = this._overlay.create(config);
        }
        return this._overlayRef;
    }
    /**
     * This method builds the configuration object needed to create the overlay, the OverlayConfig.
     * @returns OverlayConfig
     */
    _getOverlayConfig() {
        const overlayState = new OverlayConfig();
        overlayState.positionStrategy = this._getPosition();
        /** Display overlay backdrop if trigger event is click */
        if (this.triggerEvent === 'click') {
            overlayState.hasBackdrop = true;
            overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';
        }
        overlayState.direction = this.dir;
        const scrollStrategy = this._getPanelScrollStrategy();
        switch (scrollStrategy) {
            case 'block':
                overlayState.scrollStrategy = this._overlay.scrollStrategies.block();
                break;
            case 'close':
                overlayState.scrollStrategy = this._overlay.scrollStrategies.close();
                break;
            default:
                overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();
                break;
        }
        return overlayState;
    }
    /**
     * Listens to changes in the position of the overlay and sets the correct classes
     * on the popover based on the new position. This ensures the animation origin is always
     * correct, even if a fallback position is used for the overlay.
     */
    _subscribeToPositions(position) {
        this._positionSubscription = position.positionChanges
            .pipe(map((c) => c.connectionPair), distinctUntilChanged())
            .subscribe((connectionPair) => {
            this.panel.setPositionClasses(connectionPair.overlayX, connectionPair.overlayY);
        });
    }
    /**
     * This method builds the position strategy for the overlay, so the popover is properly connected
     * to the trigger.
     * @returns FlexibleConnectedPositionStrategy
     */
    _getPosition() {
        /**
         * For overriding position element, when LuPopoverTargetAt has a valid element reference.
         * Useful for sticking popover to parent element and offsetting arrow to trigger element.
         * If undefined defaults to the trigger element reference.
         */
        const element = this.target.elementRef;
        // if (typeof this.targetElement !== 'undefined' && this.popover) {
        // 	this.popover.containerPositioning = true;
        // 	element = this.targetElement._elementRef;
        // }
        const connectionPosition = {
            originX: 'start',
            originY: 'top',
        };
        // Position
        const position = this.target.position;
        const overlap = this.target.overlap;
        if (position === 'above') {
            connectionPosition.originY = overlap ? 'bottom' : 'top';
        }
        else if (position === 'below') {
            connectionPosition.originY = overlap ? 'top' : 'bottom';
        }
        else if (position === 'before') {
            connectionPosition.originX = overlap ? 'end' : 'start';
        }
        else if (position === 'after') {
            connectionPosition.originX = overlap ? 'start' : 'end';
        }
        // Alignment
        const alignment = this.target.alignment;
        if (this.isVerticallyPositionned) {
            if (alignment === 'left') {
                connectionPosition.originX = 'start';
            }
            else if (alignment === 'right') {
                connectionPosition.originX = 'end';
            }
            else {
                connectionPosition.originX = 'center';
            }
        }
        else {
            if (alignment === 'top') {
                connectionPosition.originY = 'top';
            }
            else if (alignment === 'bottom') {
                connectionPosition.originY = 'bottom';
            }
            else {
                connectionPosition.originY = 'center';
            }
        }
        const overlayPosition = {
            overlayX: 'start',
            overlayY: 'top',
        };
        if (overlap) {
            overlayPosition.overlayX = connectionPosition.originX;
            overlayPosition.overlayY = connectionPosition.originY;
        }
        else if (this.isVerticallyPositionned) {
            overlayPosition.overlayX = connectionPosition.originX;
            overlayPosition.overlayY = position === 'above' ? 'bottom' : 'top';
        }
        else {
            overlayPosition.overlayX = position === 'before' ? 'end' : 'start';
            overlayPosition.overlayY = connectionPosition.originY;
        }
        return this._overlay
            .position()
            .flexibleConnectedTo(element)
            .withPositions([
            {
                originX: connectionPosition.originX,
                originY: connectionPosition.originY,
                overlayX: overlayPosition.overlayX,
                overlayY: overlayPosition.overlayY,
            },
            {
                originX: connectionPosition.originX,
                originY: this._invertVerticalPos(connectionPosition.originY),
                overlayX: overlayPosition.overlayX,
                overlayY: this._invertVerticalPos(overlayPosition.overlayY),
            },
            {
                originX: this._invertHorizontalPos(connectionPosition.originX),
                originY: connectionPosition.originY,
                overlayX: this._invertHorizontalPos(overlayPosition.overlayX),
                overlayY: overlayPosition.overlayY,
            },
            {
                originX: this._invertHorizontalPos(connectionPosition.originX),
                originY: this._invertVerticalPos(connectionPosition.originY),
                overlayX: this._invertHorizontalPos(overlayPosition.overlayX),
                overlayY: this._invertVerticalPos(overlayPosition.overlayY),
            },
        ])
            .withDefaultOffsetX(this.target.offsetX)
            .withDefaultOffsetY(this.target.offsetY);
    }
    _invertVerticalPos(y) {
        if (y === 'top') {
            y = 'bottom';
        }
        else if (y === 'bottom') {
            y = 'top';
        }
        return y;
    }
    _invertHorizontalPos(x) {
        if (x === 'end') {
            x = 'start';
        }
        else if (x === 'start') {
            x = 'end';
        }
        return x;
    }
    _cleanUpSubscriptions() {
        if (this._backdropSubscription) {
            this._backdropSubscription.unsubscribe();
        }
        if (this._positionSubscription) {
            this._positionSubscription.unsubscribe();
        }
        if (this._hoveredSubscription) {
            this._hoveredSubscription.unsubscribe();
        }
        if (this._panelEventsSubscriptions) {
            this._panelEventsSubscriptions.unsubscribe();
        }
        if (this._overlayDetachmentsSubscription) {
            this._overlayDetachmentsSubscription.unsubscribe();
        }
    }
    _hasEllipsis() {
        if (!(this._elementRef.nativeElement instanceof HTMLElement)) {
            return false;
        }
        const { scrollWidth, scrollHeight, clientWidth, clientHeight } = this._elementRef.nativeElement;
        const textClampedByWidth = scrollWidth > clientWidth;
        const textClampedByHeight = scrollHeight > clientHeight;
        return textClampedByWidth || textClampedByHeight;
    }
}
//# sourceMappingURL=data:application/json;base64,