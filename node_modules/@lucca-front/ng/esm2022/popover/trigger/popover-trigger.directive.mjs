import { Directive, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';
import { LuPopoverTarget } from '../target/index';
import { ALuPopoverTrigger } from './popover-trigger.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
/**
 * This directive is intended to be used in conjunction with an lu-popover tag.  It is
 * responsible for toggling the display of the provided popover instance.
 */
class LuPopoverTriggerDirective extends ALuPopoverTrigger {
    /** References the popover instance that the trigger is associated with. */
    set inputPanel(p) {
        this.panel = p;
    }
    /** References the popover target instance that the trigger is associated with. */
    set inputTarget(t) {
        this.target = t;
    }
    /** References the popover target instance that the trigger is associated with. */
    set inputTriggerEvent(te) {
        this.triggerEvent = te;
    }
    /** how you want to position the panel relative to the target, allowed values: above, below, before, after */
    set inputPosition(pos) {
        this.target.position = pos;
    }
    /** how the panel will be align with the target, allowed values: top, bottom, left, right */
    set inputAlignment(al) {
        this.target.alignment = al;
    }
    /** when trigger = hover, delay before the popover panel appears */
    set inputEnterDelay(d) {
        this.enterDelay = d;
    }
    /** when trigger = hover, delay before the popover panel disappears */
    set inputLeaveDelay(d) {
        this.leaveDelay = d;
    }
    /** disable popover apparition */
    set inputDisabled(d) {
        this.disabled = d;
    }
    /** set to true if you want the panel to appear on top of the target */
    set inputOverlap(ov) {
        this.target.overlap = ov;
    }
    set inputOffsetX(ox) {
        this.target.offsetX = ox;
    }
    set inputOffsetY(oy) {
        this.target.offsetY = oy;
    }
    /** accessibility attribute - dont override */
    get _attrAriaExpanded() {
        return this._popoverOpen;
    }
    /** accessibility attribute - dont override */
    get _attrId() {
        return this._triggerId;
    }
    /** accessibility attribute - dont override */
    get _attrAriaControls() {
        return this._panelId;
    }
    constructor(_overlay, _elementRef, _viewContainerRef) {
        super(_overlay, _elementRef, _viewContainerRef);
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        /** Event emitted when the associated popover is opened. */
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onOpen = new EventEmitter();
        /** Event emitted when the associated popover is closed. */
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onClose = new EventEmitter();
        this.target = new LuPopoverTarget();
        this.target.elementRef = this._elementRef;
        this._triggerId = this._elementRef.nativeElement.getAttribute('id') || this._triggerId;
    }
    onClick() {
        super.onClick();
    }
    onMouseEnter() {
        super.onMouseEnter();
    }
    onMouseLeave() {
        super.onMouseLeave();
    }
    onFocus() {
        super.onFocus();
    }
    onBlur() {
        super.onBlur();
    }
    ngAfterViewInit() {
        this._checkPanel();
        this._checkTarget();
    }
    ngOnDestroy() {
        this._cleanUpSubscriptions();
        if (this._popoverOpen) {
            this.closePopover();
        }
        this.destroyPopover();
    }
    _emitOpen() {
        this.onOpen.emit();
    }
    _emitClose() {
        this.onClose.emit();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuPopoverTriggerDirective, deps: [{ token: i1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuPopoverTriggerDirective, isStandalone: true, selector: "[luPopover]", inputs: { inputPanel: ["luPopover", "inputPanel"], inputTarget: ["luPopoverTarget", "inputTarget"], inputTriggerEvent: ["luPopoverTrigger", "inputTriggerEvent"], inputPosition: ["luPopoverPosition", "inputPosition"], inputAlignment: ["luPopoverAlignment", "inputAlignment"], inputEnterDelay: ["luPopoverEnterDelay", "inputEnterDelay"], inputLeaveDelay: ["luPopoverLeaveDelay", "inputLeaveDelay"], inputDisabled: ["luPopoverDisabled", "inputDisabled"], inputOverlap: ["luPopoverOverlap", "inputOverlap"], inputOffsetX: ["luPopoverOffsetX", "inputOffsetX"], inputOffsetY: ["luPopoverOffsetY", "inputOffsetY"] }, outputs: { onOpen: "luPopoverOnOpen", onClose: "luPopoverOnClose" }, host: { listeners: { "click": "onClick()", "mouseenter": "onMouseEnter()", "mouseleave": "onMouseLeave()", "focus": "onFocus()", "blur": "onBlur()" }, properties: { "attr.aria-expanded": "this._attrAriaExpanded", "attr.id": "this._attrId", "attr.aria-controls": "this._attrAriaControls" } }, exportAs: ["LuPopoverTrigger"], usesInheritance: true, ngImport: i0 }); }
}
export { LuPopoverTriggerDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuPopoverTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luPopover]',
                    exportAs: 'LuPopoverTrigger',
                    standalone: true,
                }]
        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }]; }, propDecorators: { inputPanel: [{
                type: Input,
                args: ['luPopover']
            }], inputTarget: [{
                type: Input,
                args: ['luPopoverTarget']
            }], inputTriggerEvent: [{
                type: Input,
                args: ['luPopoverTrigger']
            }], onOpen: [{
                type: Output,
                args: ['luPopoverOnOpen']
            }], onClose: [{
                type: Output,
                args: ['luPopoverOnClose']
            }], inputPosition: [{
                type: Input,
                args: ['luPopoverPosition']
            }], inputAlignment: [{
                type: Input,
                args: ['luPopoverAlignment']
            }], inputEnterDelay: [{
                type: Input,
                args: ['luPopoverEnterDelay']
            }], inputLeaveDelay: [{
                type: Input,
                args: ['luPopoverLeaveDelay']
            }], inputDisabled: [{
                type: Input,
                args: ['luPopoverDisabled']
            }], inputOverlap: [{
                type: Input,
                args: ['luPopoverOverlap']
            }], inputOffsetX: [{
                type: Input,
                args: ['luPopoverOffsetX']
            }], inputOffsetY: [{
                type: Input,
                args: ['luPopoverOffsetY']
            }], _attrAriaExpanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }], _attrId: [{
                type: HostBinding,
                args: ['attr.id']
            }], _attrAriaControls: [{
                type: HostBinding,
                args: ['attr.aria-controls']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }], onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }], onFocus: [{
                type: HostListener,
                args: ['focus']
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }] } });
//# sourceMappingURL=data:application/json;base64,