import { A11yModule } from '@angular/cdk/a11y';
import { OverlayModule } from '@angular/cdk/overlay';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { luTransformPopover } from '../animation/index';
import { ALuPopoverPanel } from './popover-panel.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/a11y";
// import { standardPopoverTemplate } from './popover.template';
class LuPopoverPanelComponent extends ALuPopoverPanel {
    /** Template to Use for the popover */
    get template() {
        return this._template;
    }
    set template(value) {
        this._template = value;
    }
    /** Template context to use for the popover when created using a template */
    get templateContext() {
        return this._templateContext;
    }
    set templateContext(value) {
        this._templateContext = value;
    }
    /**
     * Popover container close on click
     * default: false
     */
    set inputCloseOnClick(v) {
        this.closeOnClick = v;
    }
    /**
     * Popover focus trap using cdkTrapFocus
     * default: false
     */
    set inputTrapFocus(v) {
        this.trapFocus = v;
    }
    /**
     * Popover scrollStrategy
     * default: reposition
     */
    set inputScrollStrategy(v) {
        this.scrollStrategy = v;
    }
    /**
     * This method takes classes set on the host lu-popover element and applies them on the
     * popover template that displays in the overlay container.  Otherwise, it's difficult
     * to style the containing popover from outside the component.
     * @param classes list of class names
     */
    set inputPanelClasses(classes) {
        this.panelClasses = classes;
    }
    /**
     * This method takes classes set on the host lu-popover element and applies them on the
     * popover template that displays in the overlay container. Otherwise, it's difficult
     * to style the containing popover from outside the component.
     * @param classes list of class names
     */
    set inputContentClasses(classes) {
        this.contentClasses = classes;
    }
    set vcTemplateRef(tr) {
        this.templateRef = tr;
    }
    constructor() {
        super();
        /** Event emitted when the popover is closed. */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.close = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.open = new EventEmitter();
        this.hovered = new EventEmitter();
    }
    ngOnDestroy() {
        this.onClose();
        this.close.complete();
    }
    _emitCloseEvent() {
        this.close.emit();
    }
    _emitOpenEvent() {
        this.open.emit();
    }
    _emitHoveredEvent(hovered) {
        this.hovered.emit(hovered);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuPopoverPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuPopoverPanelComponent, isStandalone: true, selector: "lu-popover", inputs: { template: "template", templateContext: ["template-context", "templateContext"], inputCloseOnClick: ["close-on-click", "inputCloseOnClick"], inputTrapFocus: ["trap-focus", "inputTrapFocus"], inputScrollStrategy: ["scroll-strategy", "inputScrollStrategy"], inputPanelClasses: ["panel-classes", "inputPanelClasses"], inputContentClasses: ["content-classes", "inputContentClasses"] }, outputs: { close: "close", open: "open", hovered: "hovered" }, viewQueries: [{ propertyName: "vcTemplateRef", first: true, predicate: TemplateRef, descendants: true, static: true }], exportAs: ["LuPopoverPanel"], usesInheritance: true, ngImport: i0, template: "<ng-template>\n\t<div\n\t\tclass=\"lu-popover-panel\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t(keydown)=\"_handleKeydown($event)\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t\t[attr.id]=\"panelId\"\n\t\t[attr.aria-labelledby]=\"triggerId\"\n\t\t[@transformPopover]=\"'enter'\"\n\t>\n\t\t<div class=\"lu-popover-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\">\n\t\t\t<ng-content></ng-content><ng-container *ngTemplateOutlet=\"template; context: templateContext\"></ng-container>\n\t\t</div>\n\t</div>\n</ng-template>\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "ngmodule", type: OverlayModule }, { kind: "ngmodule", type: A11yModule }, { kind: "directive", type: i2.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }], animations: [luTransformPopover], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuPopoverPanelComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuPopoverPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-popover', changeDetection: ChangeDetectionStrategy.OnPush, animations: [luTransformPopover], standalone: true, imports: [CommonModule, OverlayModule, A11yModule], exportAs: 'LuPopoverPanel', template: "<ng-template>\n\t<div\n\t\tclass=\"lu-popover-panel\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t(keydown)=\"_handleKeydown($event)\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t\t[attr.id]=\"panelId\"\n\t\t[attr.aria-labelledby]=\"triggerId\"\n\t\t[@transformPopover]=\"'enter'\"\n\t>\n\t\t<div class=\"lu-popover-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\">\n\t\t\t<ng-content></ng-content><ng-container *ngTemplateOutlet=\"template; context: templateContext\"></ng-container>\n\t\t</div>\n\t</div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return []; }, propDecorators: { template: [{
                type: Input
            }], templateContext: [{
                type: Input,
                args: ['template-context']
            }], inputCloseOnClick: [{
                type: Input,
                args: ['close-on-click']
            }], inputTrapFocus: [{
                type: Input,
                args: ['trap-focus']
            }], inputScrollStrategy: [{
                type: Input,
                args: ['scroll-strategy']
            }], inputPanelClasses: [{
                type: Input,
                args: ['panel-classes']
            }], inputContentClasses: [{
                type: Input,
                args: ['content-classes']
            }], close: [{
                type: Output
            }], open: [{
                type: Output
            }], hovered: [{
                type: Output
            }], vcTemplateRef: [{
                type: ViewChild,
                args: [TemplateRef, { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,