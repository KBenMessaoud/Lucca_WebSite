/**
 * abstract class for basic implementation of a popover panel
 */
export class ALuPopoverPanel {
    constructor() {
        this._closeOnClick = false;
        this._trapFocus = false;
        this._scrollStrategy = 'reposition';
        this._positionClassesMap = {};
        this._panelClasses = '';
        this._contentClasses = '';
    }
    get isOpen() {
        return this._isOpen;
    }
    get closeOnClick() {
        return this._closeOnClick;
    }
    set closeOnClick(coc) {
        this._closeOnClick = coc;
    }
    get trapFocus() {
        return this._trapFocus;
    }
    set trapFocus(tf) {
        this._trapFocus = tf;
    }
    get scrollStrategy() {
        return this._scrollStrategy;
    }
    set scrollStrategy(ss) {
        this._scrollStrategy = ss;
    }
    get templateRef() {
        return this._templateRef;
    }
    set templateRef(tr) {
        this._templateRef = tr;
    }
    get panelClasses() {
        return this._panelClasses;
    }
    set panelClasses(cl) {
        this._panelClasses = cl;
    }
    get panelClassesMap() {
        const map = this._panelClasses
            .split(' ')
            .filter((c) => !!c)
            .reduce((obj, className) => {
            obj[className] = true;
            return obj;
        }, {});
        // also add position classes
        return { ...map, ...this._positionClassesMap };
    }
    get contentClasses() {
        return this._contentClasses;
    }
    set contentClasses(cl) {
        this._contentClasses = cl;
    }
    get contentClassesMap() {
        return this._contentClasses.split(' ').reduce((obj, className) => {
            obj[className] = true;
            return obj;
        }, {});
    }
    get overlayPaneClass() {
        return this._overlayPaneClass;
    }
    set overlayPaneClass(opc) {
        this._overlayPaneClass = opc;
    }
    set keydownEvents$(evt$) {
        if (!this._keydownEventsSub) {
            this._keydownEventsSub = evt$.subscribe((e) => this._handleKeydown(e));
        }
    }
    setPositionClasses(posX, posY) {
        this._positionClassesMap['is-before'] = posX === 'end';
        this._positionClassesMap['is-after'] = posX === 'start';
        this._positionClassesMap['is-above'] = posY === 'bottom';
        this._positionClassesMap['is-below'] = posY === 'top';
    }
    onClick() {
        if (this.closeOnClick) {
            this._emitCloseEvent();
        }
    }
    onOpen() {
        this._isOpen = true;
    }
    onClose() {
        this._isOpen = false;
    }
    /**
     * TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.
     * https://github.com/angular/material2/pull/5493#issuecomment-313085323
     */
    /** Disables close of popover when leaving trigger element and mouse over the popover */
    onMouseOver() {
        this._emitHoveredEvent(true);
    }
    /** Enables close of popover when mouse leaving popover element */
    onMouseLeave() {
        this._emitHoveredEvent(false);
    }
    /** does nothing but must be overridable */
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    onMouseDown() { }
    _handleKeydown(event) {
        switch (event.key) {
            case 'Escape':
                this._emitCloseEvent();
                return;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,