export class ALuPopoverTarget {
    constructor() {
        this._position = 'below';
        this._alignment = 'center';
        this._overlap = false;
        this._offsetX = 0;
        this._offsetY = 0;
    }
    /** the element used to position the panel */
    get elementRef() {
        return this._elementRef;
    }
    set elementRef(ref) {
        this._elementRef = ref;
    }
    /** how you want to position the panel relative to the target, allowed values: above, below, before, after */
    get position() {
        return this._position;
    }
    set position(position) {
        if (position !== 'above' && position !== 'below' && position !== 'after' && position !== 'before') {
            throw Error(`LuPopoverPosition value must be 'above', 'below', 'before' or 'after'. Got "${position}".
      Example: <lu-popover [position]="'before'" #popover="LuPopover"></lu-popover>`);
        }
        this._position = position;
        // this.setPositionClasses(this._position, this._alignment);
    }
    /** how the panel will be align with the target, allowed values: top, bottom, left, right */
    get alignment() {
        return this._alignment;
    }
    set alignment(alignment) {
        if (alignment !== 'center' && alignment !== 'top' && alignment !== 'bottom' && alignment !== 'right' && alignment !== 'left') {
            throw Error(`LuPopoverAlignment value must be 'top', 'bottom', 'right' or 'left'. Got "${alignment}".
      Example: <lu-popover [position]="above" [alignment]="left" #popover="LuPopover"></lu-popover>`);
        }
        this._alignment = alignment;
        // this.setPositionClasses(this._position, this._alignment);
    }
    /** set to true if you want the panel to appear on top of the target */
    get overlap() {
        return this._overlap;
    }
    set overlap(ot) {
        this._overlap = ot;
    }
    get offsetX() {
        return this._offsetX;
    }
    set offsetX(ox) {
        this._offsetX = ox;
    }
    get offsetY() {
        return this._offsetY;
    }
    set offsetY(oy) {
        this._offsetY = oy;
    }
}
export class LuPopoverTarget extends ALuPopoverTarget {
    constructor() {
        super();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci10YXJnZXQubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy9wb3BvdmVyL3RhcmdldC9wb3BvdmVyLXRhcmdldC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQkEsTUFBTSxPQUFnQixnQkFBZ0I7SUFBdEM7UUFVVyxjQUFTLEdBQXNCLE9BQU8sQ0FBQztRQWN2QyxlQUFVLEdBQXVCLFFBQVEsQ0FBQztRQWMxQyxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBU2pCLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFRYixhQUFRLEdBQUcsQ0FBQyxDQUFDO0lBT3hCLENBQUM7SUE1REEsNkNBQTZDO0lBQzdDLElBQUksVUFBVTtRQUNiLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUN6QixDQUFDO0lBQ0QsSUFBSSxVQUFVLENBQUMsR0FBZTtRQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztJQUN4QixDQUFDO0lBR0QsNkdBQTZHO0lBQzdHLElBQUksUUFBUTtRQUNYLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN2QixDQUFDO0lBQ0QsSUFBSSxRQUFRLENBQUMsUUFBb0M7UUFDaEQsSUFBSSxRQUFRLEtBQUssT0FBTyxJQUFJLFFBQVEsS0FBSyxPQUFPLElBQUksUUFBUSxLQUFLLE9BQU8sSUFBSSxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ2xHLE1BQU0sS0FBSyxDQUFDLCtFQUErRSxRQUFRO29GQUNsQixDQUFDLENBQUM7U0FDbkY7UUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQiw0REFBNEQ7SUFDN0QsQ0FBQztJQUdELDRGQUE0RjtJQUM1RixJQUFJLFNBQVM7UUFDWixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDeEIsQ0FBQztJQUNELElBQUksU0FBUyxDQUFDLFNBQXNDO1FBQ25ELElBQUksU0FBUyxLQUFLLFFBQVEsSUFBSSxTQUFTLEtBQUssS0FBSyxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksU0FBUyxLQUFLLE9BQU8sSUFBSSxTQUFTLEtBQUssTUFBTSxFQUFFO1lBQzdILE1BQU0sS0FBSyxDQUFDLDZFQUE2RSxTQUFTO29HQUNELENBQUMsQ0FBQztTQUNuRztRQUNELElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBQzVCLDREQUE0RDtJQUM3RCxDQUFDO0lBR0QsdUVBQXVFO0lBQ3ZFLElBQUksT0FBTztRQUNWLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN0QixDQUFDO0lBQ0QsSUFBSSxPQUFPLENBQUMsRUFBVztRQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBR0QsSUFBSSxPQUFPO1FBQ1YsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3RCLENBQUM7SUFDRCxJQUFJLE9BQU8sQ0FBQyxFQUFVO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFHRCxJQUFJLE9BQU87UUFDVixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdEIsQ0FBQztJQUNELElBQUksT0FBTyxDQUFDLEVBQVU7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDcEIsQ0FBQztDQUNEO0FBRUQsTUFBTSxPQUFPLGVBQWdCLFNBQVEsZ0JBQWdCO0lBQ3BEO1FBQ0MsS0FBSyxFQUFFLENBQUM7SUFDVCxDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCB0eXBlIEx1UG9wb3ZlclBvc2l0aW9uID0gJ2Fib3ZlJyB8ICdiZWxvdycgfCAnYmVmb3JlJyB8ICdhZnRlcic7XG5leHBvcnQgdHlwZSBMdVBvcG92ZXJBbGlnbm1lbnQgPSAndG9wJyB8ICdib3R0b20nIHwgJ2xlZnQnIHwgJ3JpZ2h0JyB8ICdjZW50ZXInO1xuXG4vKipcbiAqIGFuY2hvciBmb3IgYSBwb3BvdmVyIHBhbmVsXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUx1UG9wb3ZlclRhcmdldCB7XG5cdC8qKiBob3cgdGhlIHBhbmVsIHdpbGwgYmUgYWxpZ24gd2l0aCB0aGUgdGFyZ2V0LCBhbGxvd2VkIHZhbHVlczogdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0ICovXG5cdGFsaWdubWVudDogTHVQb3BvdmVyQWxpZ25tZW50O1xuXHQvKiogdGhlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcGFuZWwgKi9cblx0ZWxlbWVudFJlZjogRWxlbWVudFJlZjtcblx0Ly8gLyoqIHNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRoZSBwYW5lbCB0byBhcHBlYXIgb24gdG9wIG9mIHRoZSB0YXJnZXQgKi9cblx0b3ZlcmxhcDogYm9vbGVhbjtcblx0LyoqIGhvdyB5b3Ugd2FudCB0byBwb3NpdGlvbiB0aGUgcGFuZWwgcmVsYXRpdmUgdG8gdGhlIHRhcmdldCwgYWxsb3dlZCB2YWx1ZXM6IGFib3ZlLCBiZWxvdywgYmVmb3JlLCBhZnRlciAqL1xuXHRwb3NpdGlvbjogTHVQb3BvdmVyUG9zaXRpb247XG5cblx0b2Zmc2V0WDogbnVtYmVyO1xuXHRvZmZzZXRZOiBudW1iZXI7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBTHVQb3BvdmVyVGFyZ2V0IGltcGxlbWVudHMgSUx1UG9wb3ZlclRhcmdldCB7XG5cdHByb3RlY3RlZCBfZWxlbWVudFJlZjogRWxlbWVudFJlZjtcblx0LyoqIHRoZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBhbmVsICovXG5cdGdldCBlbGVtZW50UmVmKCkge1xuXHRcdHJldHVybiB0aGlzLl9lbGVtZW50UmVmO1xuXHR9XG5cdHNldCBlbGVtZW50UmVmKHJlZjogRWxlbWVudFJlZikge1xuXHRcdHRoaXMuX2VsZW1lbnRSZWYgPSByZWY7XG5cdH1cblxuXHRwcm90ZWN0ZWQgX3Bvc2l0aW9uOiBMdVBvcG92ZXJQb3NpdGlvbiA9ICdiZWxvdyc7XG5cdC8qKiBob3cgeW91IHdhbnQgdG8gcG9zaXRpb24gdGhlIHBhbmVsIHJlbGF0aXZlIHRvIHRoZSB0YXJnZXQsIGFsbG93ZWQgdmFsdWVzOiBhYm92ZSwgYmVsb3csIGJlZm9yZSwgYWZ0ZXIgKi9cblx0Z2V0IHBvc2l0aW9uKCk6IEx1UG9wb3ZlclBvc2l0aW9uIHtcblx0XHRyZXR1cm4gdGhpcy5fcG9zaXRpb247XG5cdH1cblx0c2V0IHBvc2l0aW9uKHBvc2l0aW9uOiBMdVBvcG92ZXJQb3NpdGlvbiB8IHN0cmluZykge1xuXHRcdGlmIChwb3NpdGlvbiAhPT0gJ2Fib3ZlJyAmJiBwb3NpdGlvbiAhPT0gJ2JlbG93JyAmJiBwb3NpdGlvbiAhPT0gJ2FmdGVyJyAmJiBwb3NpdGlvbiAhPT0gJ2JlZm9yZScpIHtcblx0XHRcdHRocm93IEVycm9yKGBMdVBvcG92ZXJQb3NpdGlvbiB2YWx1ZSBtdXN0IGJlICdhYm92ZScsICdiZWxvdycsICdiZWZvcmUnIG9yICdhZnRlcicuIEdvdCBcIiR7cG9zaXRpb259XCIuXG4gICAgICBFeGFtcGxlOiA8bHUtcG9wb3ZlciBbcG9zaXRpb25dPVwiJ2JlZm9yZSdcIiAjcG9wb3Zlcj1cIkx1UG9wb3ZlclwiPjwvbHUtcG9wb3Zlcj5gKTtcblx0XHR9XG5cdFx0dGhpcy5fcG9zaXRpb24gPSBwb3NpdGlvbjtcblx0XHQvLyB0aGlzLnNldFBvc2l0aW9uQ2xhc3Nlcyh0aGlzLl9wb3NpdGlvbiwgdGhpcy5fYWxpZ25tZW50KTtcblx0fVxuXG5cdHByb3RlY3RlZCBfYWxpZ25tZW50OiBMdVBvcG92ZXJBbGlnbm1lbnQgPSAnY2VudGVyJztcblx0LyoqIGhvdyB0aGUgcGFuZWwgd2lsbCBiZSBhbGlnbiB3aXRoIHRoZSB0YXJnZXQsIGFsbG93ZWQgdmFsdWVzOiB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQgKi9cblx0Z2V0IGFsaWdubWVudCgpOiBMdVBvcG92ZXJBbGlnbm1lbnQge1xuXHRcdHJldHVybiB0aGlzLl9hbGlnbm1lbnQ7XG5cdH1cblx0c2V0IGFsaWdubWVudChhbGlnbm1lbnQ6IEx1UG9wb3ZlckFsaWdubWVudCB8IHN0cmluZykge1xuXHRcdGlmIChhbGlnbm1lbnQgIT09ICdjZW50ZXInICYmIGFsaWdubWVudCAhPT0gJ3RvcCcgJiYgYWxpZ25tZW50ICE9PSAnYm90dG9tJyAmJiBhbGlnbm1lbnQgIT09ICdyaWdodCcgJiYgYWxpZ25tZW50ICE9PSAnbGVmdCcpIHtcblx0XHRcdHRocm93IEVycm9yKGBMdVBvcG92ZXJBbGlnbm1lbnQgdmFsdWUgbXVzdCBiZSAndG9wJywgJ2JvdHRvbScsICdyaWdodCcgb3IgJ2xlZnQnLiBHb3QgXCIke2FsaWdubWVudH1cIi5cbiAgICAgIEV4YW1wbGU6IDxsdS1wb3BvdmVyIFtwb3NpdGlvbl09XCJhYm92ZVwiIFthbGlnbm1lbnRdPVwibGVmdFwiICNwb3BvdmVyPVwiTHVQb3BvdmVyXCI+PC9sdS1wb3BvdmVyPmApO1xuXHRcdH1cblx0XHR0aGlzLl9hbGlnbm1lbnQgPSBhbGlnbm1lbnQ7XG5cdFx0Ly8gdGhpcy5zZXRQb3NpdGlvbkNsYXNzZXModGhpcy5fcG9zaXRpb24sIHRoaXMuX2FsaWdubWVudCk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgX292ZXJsYXAgPSBmYWxzZTtcblx0LyoqIHNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRoZSBwYW5lbCB0byBhcHBlYXIgb24gdG9wIG9mIHRoZSB0YXJnZXQgKi9cblx0Z2V0IG92ZXJsYXAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX292ZXJsYXA7XG5cdH1cblx0c2V0IG92ZXJsYXAob3Q6IGJvb2xlYW4pIHtcblx0XHR0aGlzLl9vdmVybGFwID0gb3Q7XG5cdH1cblxuXHRwcm90ZWN0ZWQgX29mZnNldFggPSAwO1xuXHRnZXQgb2Zmc2V0WCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fb2Zmc2V0WDtcblx0fVxuXHRzZXQgb2Zmc2V0WChveDogbnVtYmVyKSB7XG5cdFx0dGhpcy5fb2Zmc2V0WCA9IG94O1xuXHR9XG5cblx0cHJvdGVjdGVkIF9vZmZzZXRZID0gMDtcblx0Z2V0IG9mZnNldFkoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX29mZnNldFk7XG5cdH1cblx0c2V0IG9mZnNldFkob3k6IG51bWJlcikge1xuXHRcdHRoaXMuX29mZnNldFkgPSBveTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgTHVQb3BvdmVyVGFyZ2V0IGV4dGVuZHMgQUx1UG9wb3ZlclRhcmdldCB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cdH1cbn1cbiJdfQ==