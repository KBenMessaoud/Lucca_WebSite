import { Directive, Input } from '@angular/core';
import { ALuPopoverTarget } from './popover-target.model';
import * as i0 from "@angular/core";
class LuPopoverTargetDirective extends ALuPopoverTarget {
    constructor(ref) {
        super();
        this.elementRef = ref;
    }
    /** how you want to position the panel relative to the target, allowed values: above, below, before, after */
    set inputPosition(pos) {
        this.position = pos;
    }
    /** how the panel will be align with the target, allowed values: top, bottom, left, right */
    set inputAlignment(al) {
        this.alignment = al;
    }
    /** set to true if you want the panel to appear on top of the target */
    set inputOverlap(ov) {
        this.overlap = ov;
    }
    set inputOffsetX(ox) {
        this.offsetX = ox;
    }
    set inputOffsetY(oy) {
        this.offsetY = oy;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuPopoverTargetDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuPopoverTargetDirective, isStandalone: true, selector: "[luPopoverTarget]", inputs: { inputPosition: ["luPopoverPosition", "inputPosition"], inputAlignment: ["luPopoverAlignment", "inputAlignment"], inputOverlap: ["luPopoverOverlap", "inputOverlap"], inputOffsetX: ["luPopoverOffsetX", "inputOffsetX"], inputOffsetY: ["luPopoverOffsetY", "inputOffsetY"] }, exportAs: ["LuPopoverTarget"], usesInheritance: true, ngImport: i0 }); }
}
export { LuPopoverTargetDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuPopoverTargetDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luPopoverTarget]',
                    exportAs: 'LuPopoverTarget',
                    standalone: true,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { inputPosition: [{
                type: Input,
                args: ['luPopoverPosition']
            }], inputAlignment: [{
                type: Input,
                args: ['luPopoverAlignment']
            }], inputOverlap: [{
                type: Input,
                args: ['luPopoverOverlap']
            }], inputOffsetX: [{
                type: Input,
                args: ['luPopoverOffsetX']
            }], inputOffsetY: [{
                type: Input,
                args: ['luPopoverOffsetY']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci10YXJnZXQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvcG9wb3Zlci90YXJnZXQvcG9wb3Zlci10YXJnZXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWMsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxnQkFBZ0IsRUFBeUMsTUFBTSx3QkFBd0IsQ0FBQzs7QUFFakcsTUFLYSx3QkFBeUIsU0FBUSxnQkFBZ0I7SUFDN0QsWUFBWSxHQUFlO1FBQzFCLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7SUFDdkIsQ0FBQztJQUNELDZHQUE2RztJQUM3RyxJQUFnQyxhQUFhLENBQUMsR0FBc0I7UUFDbkUsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUM7SUFDckIsQ0FBQztJQUNELDRGQUE0RjtJQUM1RixJQUFpQyxjQUFjLENBQUMsRUFBc0I7UUFDckUsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUNELHVFQUF1RTtJQUN2RSxJQUErQixZQUFZLENBQUMsRUFBVztRQUN0RCxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBK0IsWUFBWSxDQUFDLEVBQVU7UUFDckQsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUNELElBQStCLFlBQVksQ0FBQyxFQUFVO1FBQ3JELElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ25CLENBQUM7OEdBdkJXLHdCQUF3QjtrR0FBeEIsd0JBQXdCOztTQUF4Qix3QkFBd0I7MkZBQXhCLHdCQUF3QjtrQkFMcEMsU0FBUzttQkFBQztvQkFDVixRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixVQUFVLEVBQUUsSUFBSTtpQkFDaEI7aUdBT2dDLGFBQWE7c0JBQTVDLEtBQUs7dUJBQUMsbUJBQW1CO2dCQUlPLGNBQWM7c0JBQTlDLEtBQUs7dUJBQUMsb0JBQW9CO2dCQUlJLFlBQVk7c0JBQTFDLEtBQUs7dUJBQUMsa0JBQWtCO2dCQUlNLFlBQVk7c0JBQTFDLEtBQUs7dUJBQUMsa0JBQWtCO2dCQUdNLFlBQVk7c0JBQTFDLEtBQUs7dUJBQUMsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQUx1UG9wb3ZlclRhcmdldCwgTHVQb3BvdmVyQWxpZ25tZW50LCBMdVBvcG92ZXJQb3NpdGlvbiB9IGZyb20gJy4vcG9wb3Zlci10YXJnZXQubW9kZWwnO1xuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdbbHVQb3BvdmVyVGFyZ2V0XScsXG5cdGV4cG9ydEFzOiAnTHVQb3BvdmVyVGFyZ2V0Jyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgTHVQb3BvdmVyVGFyZ2V0RGlyZWN0aXZlIGV4dGVuZHMgQUx1UG9wb3ZlclRhcmdldCB7XG5cdGNvbnN0cnVjdG9yKHJlZjogRWxlbWVudFJlZikge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5lbGVtZW50UmVmID0gcmVmO1xuXHR9XG5cdC8qKiBob3cgeW91IHdhbnQgdG8gcG9zaXRpb24gdGhlIHBhbmVsIHJlbGF0aXZlIHRvIHRoZSB0YXJnZXQsIGFsbG93ZWQgdmFsdWVzOiBhYm92ZSwgYmVsb3csIGJlZm9yZSwgYWZ0ZXIgKi9cblx0QElucHV0KCdsdVBvcG92ZXJQb3NpdGlvbicpIHNldCBpbnB1dFBvc2l0aW9uKHBvczogTHVQb3BvdmVyUG9zaXRpb24pIHtcblx0XHR0aGlzLnBvc2l0aW9uID0gcG9zO1xuXHR9XG5cdC8qKiBob3cgdGhlIHBhbmVsIHdpbGwgYmUgYWxpZ24gd2l0aCB0aGUgdGFyZ2V0LCBhbGxvd2VkIHZhbHVlczogdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0ICovXG5cdEBJbnB1dCgnbHVQb3BvdmVyQWxpZ25tZW50Jykgc2V0IGlucHV0QWxpZ25tZW50KGFsOiBMdVBvcG92ZXJBbGlnbm1lbnQpIHtcblx0XHR0aGlzLmFsaWdubWVudCA9IGFsO1xuXHR9XG5cdC8qKiBzZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0aGUgcGFuZWwgdG8gYXBwZWFyIG9uIHRvcCBvZiB0aGUgdGFyZ2V0ICovXG5cdEBJbnB1dCgnbHVQb3BvdmVyT3ZlcmxhcCcpIHNldCBpbnB1dE92ZXJsYXAob3Y6IGJvb2xlYW4pIHtcblx0XHR0aGlzLm92ZXJsYXAgPSBvdjtcblx0fVxuXG5cdEBJbnB1dCgnbHVQb3BvdmVyT2Zmc2V0WCcpIHNldCBpbnB1dE9mZnNldFgob3g6IG51bWJlcikge1xuXHRcdHRoaXMub2Zmc2V0WCA9IG94O1xuXHR9XG5cdEBJbnB1dCgnbHVQb3BvdmVyT2Zmc2V0WScpIHNldCBpbnB1dE9mZnNldFkob3k6IG51bWJlcikge1xuXHRcdHRoaXMub2Zmc2V0WSA9IG95O1xuXHR9XG59XG4iXX0=