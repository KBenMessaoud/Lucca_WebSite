import { ComponentPortal } from '@angular/cdk/portal';
import { Directive, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';
import { ALuPopoverTrigger, LuPopoverTarget } from '@lucca-front/ng/popover';
import { LuTooltipPanelComponent } from '../panel/tooltip-panel.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
class LuTooltipTriggerDirective extends ALuPopoverTrigger {
    set tooltipContent(c) {
        if (this.panel) {
            this.panel.content = c;
        }
        this._tooltipContent = c;
    }
    /** when trigger = hover, delay before the popover panel appears, default 300ms */
    set inputEnterDelay(d) {
        this.enterDelay = d;
    }
    /** when trigger = hover, delay before the popover panel disappears, default 100ms */
    set inputLeaveDelay(d) {
        this.leaveDelay = d;
    }
    /** disable popover apparition */
    set inputDisabled(d) {
        this.disabled = d;
        if (this._handleTabindex) {
            this._setTabindex(d ? null : 0);
        }
    }
    set inputPosition(pos) {
        this.target.position = pos;
    }
    set inputWhenEllipsis(we) {
        this.whenEllipsis = we;
    }
    onMouseEnter() {
        super.onMouseEnter();
    }
    onMouseLeave() {
        super.onMouseLeave();
    }
    onFocus() {
        super.onFocus();
    }
    onBlur() {
        super.onBlur();
    }
    // @HostBinding('attr.tabindex') tabindex;
    // private set tabindex(i: number = null) {
    // }
    /** accessibility attribute - dont override */
    get _attrId() {
        return this._triggerId;
    }
    /** accessibility attribute - dont override */
    get _attrAriaDescribedBy() {
        return this._panelId;
    }
    constructor(_overlay, _elementRef, _viewContainerRef) {
        super(_overlay, _elementRef, _viewContainerRef);
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        // FIXME output native
        /** Event emitted when the associated popover is opened. */
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onOpen = new EventEmitter();
        /** Event emitted when the associated popover is closed. */
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onClose = new EventEmitter();
        this._handleTabindex = false;
        this._tooltipContent = '';
        this.target = new LuPopoverTarget();
        this.target.elementRef = this._elementRef;
        this._triggerId = this._elementRef.nativeElement.getAttribute('id') || this._triggerId;
        this.triggerEvent = 'hover';
        this.target.position = 'above';
        this.enterDelay = 300;
        this.leaveDelay = 100;
        this._handleTabindex = this._shouldHandleTabindex();
        if (this._handleTabindex) {
            this._setTabindex(0);
        }
    }
    ngAfterViewInit() {
        this._checkTarget();
    }
    ngOnDestroy() {
        this._cleanUpSubscriptions();
        if (this._popoverOpen) {
            this.closePopover();
        }
        this.destroyPopover();
    }
    _emitOpen() {
        this.onOpen.emit();
    }
    _emitClose() {
        this.onClose.emit();
    }
    _createOverlay() {
        if (!this._overlayRef) {
            this._portal = new ComponentPortal(LuTooltipPanelComponent, this._viewContainerRef);
            const config = this._getOverlayConfig();
            this._subscribeToPositions(config.positionStrategy);
            this._overlayRef = this._overlay.create(config);
        }
        return this._overlayRef;
    }
    _attachPortalToOverlay() {
        const componentRef = this._overlayRef.attach(this._portal);
        this._panel = componentRef.instance;
        this._panel.content = this._tooltipContent;
    }
    _getPanelScrollStrategy() {
        return 'close';
    }
    _shouldHandleTabindex() {
        const tag = this._elementRef.nativeElement.tagName?.toLowerCase();
        // https://allyjs.io/data-tables/focusable.html
        // i'm choosing to not support area and iframe, dont @ me
        const nativelyFocusableTags = ['a', 'button', 'input', 'select', 'textarea'];
        const isNatevelyFocusableTag = nativelyFocusableTags.includes(tag);
        const hasATabIndex = this._elementRef.nativeElement.getAttribute('tabindex') !== null;
        return !isNatevelyFocusableTag && !hasATabIndex;
    }
    _setTabindex(i = null) {
        this._elementRef.nativeElement.setAttribute('tabindex', `${i}`);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipTriggerDirective, deps: [{ token: i1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuTooltipTriggerDirective, isStandalone: true, selector: "[luTooltip]", inputs: { tooltipContent: ["luTooltip", "tooltipContent"], inputEnterDelay: ["luTooltipEnterDelay", "inputEnterDelay"], inputLeaveDelay: ["luTooltipLeaveDelay", "inputLeaveDelay"], inputDisabled: ["luTooltipDisabled", "inputDisabled"], inputPosition: ["luTooltipPosition", "inputPosition"], inputWhenEllipsis: ["luTooltipWhenEllipsis", "inputWhenEllipsis"] }, outputs: { onOpen: "luTooltipOnOpen", onClose: "luTooltipOnClose" }, host: { listeners: { "mouseenter": "onMouseEnter()", "mouseleave": "onMouseLeave()", "focus": "onFocus()", "blur": "onBlur()" }, properties: { "attr.id": "this._attrId", "attr.aria-describedby": "this._attrAriaDescribedBy" } }, usesInheritance: true, ngImport: i0 }); }
}
export { LuTooltipTriggerDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luTooltip]',
                    standalone: true,
                }]
        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }]; }, propDecorators: { tooltipContent: [{
                type: Input,
                args: ['luTooltip']
            }], inputEnterDelay: [{
                type: Input,
                args: ['luTooltipEnterDelay']
            }], inputLeaveDelay: [{
                type: Input,
                args: ['luTooltipLeaveDelay']
            }], inputDisabled: [{
                type: Input,
                args: ['luTooltipDisabled']
            }], inputPosition: [{
                type: Input,
                args: ['luTooltipPosition']
            }], inputWhenEllipsis: [{
                type: Input,
                args: ['luTooltipWhenEllipsis']
            }], onOpen: [{
                type: Output,
                args: ['luTooltipOnOpen']
            }], onClose: [{
                type: Output,
                args: ['luTooltipOnClose']
            }], onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }], onFocus: [{
                type: HostListener,
                args: ['focus']
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }], _attrId: [{
                type: HostBinding,
                args: ['attr.id']
            }], _attrAriaDescribedBy: [{
                type: HostBinding,
                args: ['attr.aria-describedby']
            }] } });
//# sourceMappingURL=data:application/json;base64,