import { ChangeDetectionStrategy, Component, forwardRef, HostBinding } from '@angular/core';
import { getIntl } from '@lucca-front/ng/core';
import { Subject } from 'rxjs';
import { tap } from 'rxjs/operators';
import { ALuTreeOptionOperator } from '../../operator/index';
import { ALuTreeOptionSelector } from '../tree-option-selector.model';
import { LU_OPTION_SELECT_ALL_TRANSLATIONS } from './select-all.translate';
import * as i0 from "@angular/core";
class LuTreeOptionSelectAllComponent extends ALuTreeOptionOperator {
    constructor() {
        super(...arguments);
        this.multiple = true;
        this.onSelectValue = new Subject();
        this.fixed = true;
        this.intl = getIntl(LU_OPTION_SELECT_ALL_TRANSLATIONS);
    }
    set inOptions$(in$) {
        this.outOptions$ = in$.pipe(tap((options) => (this.flatOptions = this.flattenTree(options))));
    }
    selectAll() {
        this.onSelectValue.next([...this.flatOptions]);
    }
    deselectAll() {
        this.onSelectValue.next([]);
    }
    setValue(values) {
        this._values = values;
    }
    flattenTree(tree = []) {
        return tree.map((t) => [t.value, ...this.flattenTree(t.children)]).reduce((agg, cur) => [...agg, ...cur], []);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSelectAllComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuTreeOptionSelectAllComponent, isStandalone: true, selector: "lu-tree-option-select-all", host: { properties: { "class.position-fixed": "this.fixed" } }, providers: [
            {
                provide: ALuTreeOptionOperator,
                useExisting: forwardRef(() => LuTreeOptionSelectAllComponent),
                multi: true,
            },
            {
                provide: ALuTreeOptionSelector,
                useExisting: forwardRef(() => LuTreeOptionSelectAllComponent),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0, template: "<button type=\"button\" (click)=\"selectAll()\" class=\"link selectAll-button\">{{ intl.select }}</button>\n<button type=\"button\" (click)=\"deselectAll()\" class=\"link selectAll-button u-marginLeftXS\">{{ intl.deselect }}</button>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host .selectAll-button{color:var(--palettes-grey-600);font-size:var(--sizes-S-fontSize);outline:none}:host .selectAll-button:hover{color:var(--palettes-grey-800)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuTreeOptionSelectAllComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSelectAllComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-tree-option-select-all', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [
                        {
                            provide: ALuTreeOptionOperator,
                            useExisting: forwardRef(() => LuTreeOptionSelectAllComponent),
                            multi: true,
                        },
                        {
                            provide: ALuTreeOptionSelector,
                            useExisting: forwardRef(() => LuTreeOptionSelectAllComponent),
                            multi: true,
                        },
                    ], template: "<button type=\"button\" (click)=\"selectAll()\" class=\"link selectAll-button\">{{ intl.select }}</button>\n<button type=\"button\" (click)=\"deselectAll()\" class=\"link selectAll-button u-marginLeftXS\">{{ intl.deselect }}</button>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host .selectAll-button{color:var(--palettes-grey-600);font-size:var(--sizes-S-fontSize);outline:none}:host .selectAll-button:hover{color:var(--palettes-grey-800)}\n"] }]
        }], propDecorators: { fixed: [{
                type: HostBinding,
                args: ['class.position-fixed']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1zZWxlY3QtYWxsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL29wdGlvbi9zZWxlY3Rvci9hbGwvdHJlZS1zZWxlY3QtYWxsLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL29wdGlvbi9zZWxlY3Rvci9hbGwvc2VsZWN0LWFsbC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLE9BQU8sRUFBVyxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzdELE9BQU8sRUFBRSxxQkFBcUIsRUFBeUIsTUFBTSwrQkFBK0IsQ0FBQztBQUM3RixPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7QUFFM0UsTUFtQmEsOEJBQWtDLFNBQVEscUJBQXdCO0lBbkIvRTs7UUFvQkMsYUFBUSxHQUFHLElBQUksQ0FBQztRQUNoQixrQkFBYSxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7UUFHRixVQUFLLEdBQUcsSUFBSSxDQUFDO1FBTzNDLFNBQUksR0FBRyxPQUFPLENBQUMsaUNBQWlDLENBQUMsQ0FBQztLQWV6RDtJQW5CQSxJQUFJLFVBQVUsQ0FBQyxHQUE2QjtRQUMzQyxJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBSUQsU0FBUztRQUNSLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBQ0QsV0FBVztRQUNWLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFDRCxRQUFRLENBQUMsTUFBZTtRQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQWEsQ0FBQztJQUM5QixDQUFDO0lBRU8sV0FBVyxDQUFDLE9BQXFCLEVBQUU7UUFDMUMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQy9HLENBQUM7OEdBMUJXLDhCQUE4QjtrR0FBOUIsOEJBQThCLHdJQWIvQjtZQUNWO2dCQUNDLE9BQU8sRUFBRSxxQkFBcUI7Z0JBQzlCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsOEJBQThCLENBQUM7Z0JBQzdELEtBQUssRUFBRSxJQUFJO2FBQ1g7WUFDRDtnQkFDQyxPQUFPLEVBQUUscUJBQXFCO2dCQUM5QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLDhCQUE4QixDQUFDO2dCQUM3RCxLQUFLLEVBQUUsSUFBSTthQUNYO1NBQ0QsaURDekJGLDZPQUVBOztTRHlCYSw4QkFBOEI7MkZBQTlCLDhCQUE4QjtrQkFuQjFDLFNBQVM7K0JBQ0MsMkJBQTJCLG1CQUdwQix1QkFBdUIsQ0FBQyxNQUFNLGNBQ25DLElBQUksYUFDTDt3QkFDVjs0QkFDQyxPQUFPLEVBQUUscUJBQXFCOzRCQUM5QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSwrQkFBK0IsQ0FBQzs0QkFDN0QsS0FBSyxFQUFFLElBQUk7eUJBQ1g7d0JBQ0Q7NEJBQ0MsT0FBTyxFQUFFLHFCQUFxQjs0QkFDOUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsK0JBQStCLENBQUM7NEJBQzdELEtBQUssRUFBRSxJQUFJO3lCQUNYO3FCQUNEOzhCQU9vQyxLQUFLO3NCQUF6QyxXQUFXO3VCQUFDLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIGZvcndhcmRSZWYsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBnZXRJbnRsLCBJTHVUcmVlIH0gZnJvbSAnQGx1Y2NhLWZyb250L25nL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQUx1VHJlZU9wdGlvbk9wZXJhdG9yIH0gZnJvbSAnLi4vLi4vb3BlcmF0b3IvaW5kZXgnO1xuaW1wb3J0IHsgQUx1VHJlZU9wdGlvblNlbGVjdG9yLCBJTHVUcmVlT3B0aW9uU2VsZWN0b3IgfSBmcm9tICcuLi90cmVlLW9wdGlvbi1zZWxlY3Rvci5tb2RlbCc7XG5pbXBvcnQgeyBMVV9PUFRJT05fU0VMRUNUX0FMTF9UUkFOU0xBVElPTlMgfSBmcm9tICcuL3NlbGVjdC1hbGwudHJhbnNsYXRlJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnbHUtdHJlZS1vcHRpb24tc2VsZWN0LWFsbCcsXG5cdHRlbXBsYXRlVXJsOiAnLi9zZWxlY3QtYWxsLmNvbXBvbmVudC5odG1sJyxcblx0c3R5bGVVcmxzOiBbJ3NlbGVjdC1hbGwuY29tcG9uZW50LnNjc3MnXSxcblx0Y2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG5cdHByb3ZpZGVyczogW1xuXHRcdHtcblx0XHRcdHByb3ZpZGU6IEFMdVRyZWVPcHRpb25PcGVyYXRvcixcblx0XHRcdHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEx1VHJlZU9wdGlvblNlbGVjdEFsbENvbXBvbmVudCksXG5cdFx0XHRtdWx0aTogdHJ1ZSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHByb3ZpZGU6IEFMdVRyZWVPcHRpb25TZWxlY3Rvcixcblx0XHRcdHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEx1VHJlZU9wdGlvblNlbGVjdEFsbENvbXBvbmVudCksXG5cdFx0XHRtdWx0aTogdHJ1ZSxcblx0XHR9LFxuXHRdLFxufSlcbmV4cG9ydCBjbGFzcyBMdVRyZWVPcHRpb25TZWxlY3RBbGxDb21wb25lbnQ8VD4gZXh0ZW5kcyBBTHVUcmVlT3B0aW9uT3BlcmF0b3I8VD4gaW1wbGVtZW50cyBJTHVUcmVlT3B0aW9uU2VsZWN0b3I8VD4ge1xuXHRtdWx0aXBsZSA9IHRydWU7XG5cdG9uU2VsZWN0VmFsdWUgPSBuZXcgU3ViamVjdDxUIHwgVFtdPigpO1xuXHRwcml2YXRlIF92YWx1ZXM6IFRbXTtcblxuXHRASG9zdEJpbmRpbmcoJ2NsYXNzLnBvc2l0aW9uLWZpeGVkJykgZml4ZWQgPSB0cnVlO1xuXHRmbGF0T3B0aW9uczogVFtdO1xuXHRvdXRPcHRpb25zJDogT2JzZXJ2YWJsZTxJTHVUcmVlPFQ+W10+O1xuXHRzZXQgaW5PcHRpb25zJChpbiQ6IE9ic2VydmFibGU8SUx1VHJlZTxUPltdPikge1xuXHRcdHRoaXMub3V0T3B0aW9ucyQgPSBpbiQucGlwZSh0YXAoKG9wdGlvbnMpID0+ICh0aGlzLmZsYXRPcHRpb25zID0gdGhpcy5mbGF0dGVuVHJlZShvcHRpb25zKSkpKTtcblx0fVxuXG5cdHB1YmxpYyBpbnRsID0gZ2V0SW50bChMVV9PUFRJT05fU0VMRUNUX0FMTF9UUkFOU0xBVElPTlMpO1xuXG5cdHNlbGVjdEFsbCgpIHtcblx0XHR0aGlzLm9uU2VsZWN0VmFsdWUubmV4dChbLi4udGhpcy5mbGF0T3B0aW9uc10pO1xuXHR9XG5cdGRlc2VsZWN0QWxsKCkge1xuXHRcdHRoaXMub25TZWxlY3RWYWx1ZS5uZXh0KFtdKTtcblx0fVxuXHRzZXRWYWx1ZSh2YWx1ZXM6IFQgfCBUW10pOiB2b2lkIHtcblx0XHR0aGlzLl92YWx1ZXMgPSB2YWx1ZXMgYXMgVFtdO1xuXHR9XG5cblx0cHJpdmF0ZSBmbGF0dGVuVHJlZSh0cmVlOiBJTHVUcmVlPFQ+W10gPSBbXSk6IFRbXSB7XG5cdFx0cmV0dXJuIHRyZWUubWFwKCh0KSA9PiBbdC52YWx1ZSwgLi4udGhpcy5mbGF0dGVuVHJlZSh0LmNoaWxkcmVuKV0pLnJlZHVjZSgoYWdnLCBjdXIpID0+IFsuLi5hZ2csIC4uLmN1cl0sIFtdKTtcblx0fVxufVxuIiwiPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgKGNsaWNrKT1cInNlbGVjdEFsbCgpXCIgY2xhc3M9XCJsaW5rIHNlbGVjdEFsbC1idXR0b25cIj57eyBpbnRsLnNlbGVjdCB9fTwvYnV0dG9uPlxuPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgKGNsaWNrKT1cImRlc2VsZWN0QWxsKClcIiBjbGFzcz1cImxpbmsgc2VsZWN0QWxsLWJ1dHRvbiB1LW1hcmdpbkxlZnRYU1wiPnt7IGludGwuZGVzZWxlY3QgfX08L2J1dHRvbj5cbiJdfQ==