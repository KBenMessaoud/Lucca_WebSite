import { ChangeDetectionStrategy, Component, forwardRef } from '@angular/core';
import { ALuOnScrollBottomSubscriber } from '@lucca-front/ng/core';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { ALuTreeOptionOperator } from '../tree-option-operator.model';
import * as i0 from "@angular/core";
const MAGIC_STEP = 10;
class LuTreeOptionPagerComponent extends ALuTreeOptionOperator {
    constructor() {
        super(...arguments);
        this.paging$ = new BehaviorSubject(MAGIC_STEP);
    }
    set inOptions$(in$) {
        this.outOptions$ = combineLatest([in$, this.paging$]).pipe(map(([options, paging]) => {
            return this.trim(options, paging);
        }));
    }
    next() {
        this.paging$.next(this.paging$.value + MAGIC_STEP);
    }
    onScrollBottom() {
        this.next();
    }
    trim(trees = [], paging = MAGIC_STEP) {
        const flat = this.flatten(trees);
        const flatTrimmed = flat.slice(0, paging);
        return this.filter(trees, flatTrimmed);
    }
    flatten(trees = []) {
        return trees.map((t) => [t.value, ...this.flatten(t.children)]).reduce((a, v) => [...a, ...v], []);
    }
    filter(trees = [], values) {
        return trees
            .map((t) => {
            if (!values.some((v) => v === t.value)) {
                return undefined;
            }
            return { ...t, children: this.filter(t.children, values) };
        })
            .filter((t) => !!t);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPagerComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuTreeOptionPagerComponent, isStandalone: true, selector: "lu-tree-option-pager", providers: [
            {
                provide: ALuTreeOptionOperator,
                useExisting: forwardRef(() => LuTreeOptionPagerComponent),
                multi: true,
            },
            {
                provide: ALuOnScrollBottomSubscriber,
                useExisting: forwardRef(() => LuTreeOptionPagerComponent),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuTreeOptionPagerComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPagerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-tree-option-pager', template: '', standalone: true, changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: ALuTreeOptionOperator,
                            useExisting: forwardRef(() => LuTreeOptionPagerComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnScrollBottomSubscriber,
                            useExisting: forwardRef(() => LuTreeOptionPagerComponent),
                            multi: true,
                        },
                    ] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1vcHRpb24tcGFnZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvb3B0aW9uL29wZXJhdG9yL3BhZ2VyL3RyZWUtb3B0aW9uLXBhZ2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsMkJBQTJCLEVBQXdDLE1BQU0sc0JBQXNCLENBQUM7QUFDekcsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDbEUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxxQkFBcUIsRUFBeUIsTUFBTSwrQkFBK0IsQ0FBQzs7QUFDN0YsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO0FBQ3RCLE1BbUJhLDBCQUE4QixTQUFRLHFCQUF3QjtJQW5CM0U7O1FBNEJDLFlBQU8sR0FBRyxJQUFJLGVBQWUsQ0FBUyxVQUFVLENBQUMsQ0FBQztLQTBCbEQ7SUFqQ0EsSUFBSSxVQUFVLENBQUMsR0FBNkI7UUFDM0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxhQUFhLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN6RCxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQ0YsQ0FBQztJQUNILENBQUM7SUFFRCxJQUFJO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUNELGNBQWM7UUFDYixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDYixDQUFDO0lBQ0QsSUFBSSxDQUFDLFFBQXNCLEVBQUUsRUFBRSxTQUFpQixVQUFVO1FBQ3pELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFMUMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBQ0QsT0FBTyxDQUFDLFFBQXNCLEVBQUU7UUFDL0IsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3BHLENBQUM7SUFDRCxNQUFNLENBQUMsUUFBc0IsRUFBRSxFQUFFLE1BQVc7UUFDM0MsT0FBTyxLQUFLO2FBQ1YsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDVixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDdkMsT0FBTyxTQUFTLENBQUM7YUFDakI7WUFDRCxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQzVELENBQUMsQ0FBQzthQUNELE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7OEdBbENXLDBCQUEwQjtrR0FBMUIsMEJBQTBCLG1FQWIzQjtZQUNWO2dCQUNDLE9BQU8sRUFBRSxxQkFBcUI7Z0JBQzlCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsMEJBQTBCLENBQUM7Z0JBQ3pELEtBQUssRUFBRSxJQUFJO2FBQ1g7WUFDRDtnQkFDQyxPQUFPLEVBQUUsMkJBQTJCO2dCQUNwQyxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLDBCQUEwQixDQUFDO2dCQUN6RCxLQUFLLEVBQUUsSUFBSTthQUNYO1NBQ0QsaURBZlMsRUFBRTs7U0FpQkEsMEJBQTBCOzJGQUExQiwwQkFBMEI7a0JBbkJ0QyxTQUFTOytCQUNDLHNCQUFzQixZQUN0QixFQUFFLGNBRUEsSUFBSSxtQkFDQyx1QkFBdUIsQ0FBQyxNQUFNLGFBQ3BDO3dCQUNWOzRCQUNDLE9BQU8sRUFBRSxxQkFBcUI7NEJBQzlCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLDJCQUEyQixDQUFDOzRCQUN6RCxLQUFLLEVBQUUsSUFBSTt5QkFDWDt3QkFDRDs0QkFDQyxPQUFPLEVBQUUsMkJBQTJCOzRCQUNwQyxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSwyQkFBMkIsQ0FBQzs0QkFDekQsS0FBSyxFQUFFLElBQUk7eUJBQ1g7cUJBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBmb3J3YXJkUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBTHVPblNjcm9sbEJvdHRvbVN1YnNjcmliZXIsIElMdU9uU2Nyb2xsQm90dG9tU3Vic2NyaWJlciwgSUx1VHJlZSB9IGZyb20gJ0BsdWNjYS1mcm9udC9uZy9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgY29tYmluZUxhdGVzdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQUx1VHJlZU9wdGlvbk9wZXJhdG9yLCBJTHVUcmVlT3B0aW9uT3BlcmF0b3IgfSBmcm9tICcuLi90cmVlLW9wdGlvbi1vcGVyYXRvci5tb2RlbCc7XG5jb25zdCBNQUdJQ19TVEVQID0gMTA7XG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICdsdS10cmVlLW9wdGlvbi1wYWdlcicsXG5cdHRlbXBsYXRlOiAnJyxcblx0c3R5bGVVcmxzOiBbXSxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0Y2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG5cdHByb3ZpZGVyczogW1xuXHRcdHtcblx0XHRcdHByb3ZpZGU6IEFMdVRyZWVPcHRpb25PcGVyYXRvcixcblx0XHRcdHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEx1VHJlZU9wdGlvblBhZ2VyQ29tcG9uZW50KSxcblx0XHRcdG11bHRpOiB0cnVlLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQUx1T25TY3JvbGxCb3R0b21TdWJzY3JpYmVyLFxuXHRcdFx0dXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTHVUcmVlT3B0aW9uUGFnZXJDb21wb25lbnQpLFxuXHRcdFx0bXVsdGk6IHRydWUsXG5cdFx0fSxcblx0XSxcbn0pXG5leHBvcnQgY2xhc3MgTHVUcmVlT3B0aW9uUGFnZXJDb21wb25lbnQ8VD4gZXh0ZW5kcyBBTHVUcmVlT3B0aW9uT3BlcmF0b3I8VD4gaW1wbGVtZW50cyBJTHVUcmVlT3B0aW9uT3BlcmF0b3I8VD4sIElMdU9uU2Nyb2xsQm90dG9tU3Vic2NyaWJlciB7XG5cdG91dE9wdGlvbnMkOiBPYnNlcnZhYmxlPElMdVRyZWU8VD5bXT47XG5cdHNldCBpbk9wdGlvbnMkKGluJDogT2JzZXJ2YWJsZTxJTHVUcmVlPFQ+W10+KSB7XG5cdFx0dGhpcy5vdXRPcHRpb25zJCA9IGNvbWJpbmVMYXRlc3QoW2luJCwgdGhpcy5wYWdpbmckXSkucGlwZShcblx0XHRcdG1hcCgoW29wdGlvbnMsIHBhZ2luZ10pID0+IHtcblx0XHRcdFx0cmV0dXJuIHRoaXMudHJpbShvcHRpb25zLCBwYWdpbmcpO1xuXHRcdFx0fSksXG5cdFx0KTtcblx0fVxuXHRwYWdpbmckID0gbmV3IEJlaGF2aW9yU3ViamVjdDxudW1iZXI+KE1BR0lDX1NURVApO1xuXHRuZXh0KCkge1xuXHRcdHRoaXMucGFnaW5nJC5uZXh0KHRoaXMucGFnaW5nJC52YWx1ZSArIE1BR0lDX1NURVApO1xuXHR9XG5cdG9uU2Nyb2xsQm90dG9tKCkge1xuXHRcdHRoaXMubmV4dCgpO1xuXHR9XG5cdHRyaW0odHJlZXM6IElMdVRyZWU8VD5bXSA9IFtdLCBwYWdpbmc6IG51bWJlciA9IE1BR0lDX1NURVApOiBJTHVUcmVlPFQ+W10ge1xuXHRcdGNvbnN0IGZsYXQgPSB0aGlzLmZsYXR0ZW4odHJlZXMpO1xuXHRcdGNvbnN0IGZsYXRUcmltbWVkID0gZmxhdC5zbGljZSgwLCBwYWdpbmcpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKHRyZWVzLCBmbGF0VHJpbW1lZCk7XG5cdH1cblx0ZmxhdHRlbih0cmVlczogSUx1VHJlZTxUPltdID0gW10pOiBUW10ge1xuXHRcdHJldHVybiB0cmVlcy5tYXAoKHQpID0+IFt0LnZhbHVlLCAuLi50aGlzLmZsYXR0ZW4odC5jaGlsZHJlbildKS5yZWR1Y2UoKGEsIHYpID0+IFsuLi5hLCAuLi52XSwgW10pO1xuXHR9XG5cdGZpbHRlcih0cmVlczogSUx1VHJlZTxUPltdID0gW10sIHZhbHVlczogVFtdKTogSUx1VHJlZTxUPltdIHtcblx0XHRyZXR1cm4gdHJlZXNcblx0XHRcdC5tYXAoKHQpID0+IHtcblx0XHRcdFx0aWYgKCF2YWx1ZXMuc29tZSgodikgPT4gdiA9PT0gdC52YWx1ZSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB7IC4uLnQsIGNoaWxkcmVuOiB0aGlzLmZpbHRlcih0LmNoaWxkcmVuLCB2YWx1ZXMpIH07XG5cdFx0XHR9KVxuXHRcdFx0LmZpbHRlcigodCkgPT4gISF0KTtcblx0fVxufVxuIl19