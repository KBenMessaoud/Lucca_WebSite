import { ChangeDetectionStrategy, Component, forwardRef } from '@angular/core';
import { ALuOnScrollBottomSubscriber } from '@lucca-front/ng/core';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { ALuOptionOperator } from '../option-operator.model';
import * as i0 from "@angular/core";
const MAGIC_STEP = 10;
class LuOptionPagerComponent extends ALuOptionOperator {
    constructor() {
        super(...arguments);
        this.paging$ = new BehaviorSubject(MAGIC_STEP);
    }
    set inOptions$(in$) {
        this.outOptions$ = combineLatest([in$, this.paging$]).pipe(map(([options, paging]) => {
            return (options || []).slice(0, paging);
        }));
    }
    next() {
        this.paging$.next(this.paging$.value + MAGIC_STEP);
    }
    onScrollBottom() {
        this.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPagerComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuOptionPagerComponent, isStandalone: true, selector: "lu-option-pager", providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuOptionPagerComponent),
                multi: true,
            },
            {
                provide: ALuOnScrollBottomSubscriber,
                useExisting: forwardRef(() => LuOptionPagerComponent),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuOptionPagerComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPagerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-option-pager', template: '', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuOptionPagerComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnScrollBottomSubscriber,
                            useExisting: forwardRef(() => LuOptionPagerComponent),
                            multi: true,
                        },
                    ] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLXBhZ2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL29wdGlvbi9vcGVyYXRvci9wYWdlci9vcHRpb24tcGFnZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSwyQkFBMkIsRUFBK0IsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRyxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNsRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLGlCQUFpQixFQUFxQixNQUFNLDBCQUEwQixDQUFDOztBQUNoRixNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7QUFDdEIsTUFtQmEsc0JBQTBCLFNBQVEsaUJBQW9CO0lBbkJuRTs7UUE0QkMsWUFBTyxHQUFHLElBQUksZUFBZSxDQUFTLFVBQVUsQ0FBQyxDQUFDO0tBT2xEO0lBZEEsSUFBSSxVQUFVLENBQUMsR0FBb0I7UUFDbEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxhQUFhLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN6RCxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFO1lBQ3pCLE9BQU8sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FDRixDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUk7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBQ0QsY0FBYztRQUNiLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNiLENBQUM7OEdBZlcsc0JBQXNCO2tHQUF0QixzQkFBc0IsOERBYnZCO1lBQ1Y7Z0JBQ0MsT0FBTyxFQUFFLGlCQUFpQjtnQkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztnQkFDckQsS0FBSyxFQUFFLElBQUk7YUFDWDtZQUNEO2dCQUNDLE9BQU8sRUFBRSwyQkFBMkI7Z0JBQ3BDLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUM7Z0JBQ3JELEtBQUssRUFBRSxJQUFJO2FBQ1g7U0FDRCxpREFmUyxFQUFFOztTQWlCQSxzQkFBc0I7MkZBQXRCLHNCQUFzQjtrQkFuQmxDLFNBQVM7K0JBQ0MsaUJBQWlCLFlBQ2pCLEVBQUUsbUJBRUssdUJBQXVCLENBQUMsTUFBTSxjQUNuQyxJQUFJLGFBQ0w7d0JBQ1Y7NEJBQ0MsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsdUJBQXVCLENBQUM7NEJBQ3JELEtBQUssRUFBRSxJQUFJO3lCQUNYO3dCQUNEOzRCQUNDLE9BQU8sRUFBRSwyQkFBMkI7NEJBQ3BDLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLHVCQUF1QixDQUFDOzRCQUNyRCxLQUFLLEVBQUUsSUFBSTt5QkFDWDtxQkFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFMdU9uU2Nyb2xsQm90dG9tU3Vic2NyaWJlciwgSUx1T25TY3JvbGxCb3R0b21TdWJzY3JpYmVyIH0gZnJvbSAnQGx1Y2NhLWZyb250L25nL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBTHVPcHRpb25PcGVyYXRvciwgSUx1T3B0aW9uT3BlcmF0b3IgfSBmcm9tICcuLi9vcHRpb24tb3BlcmF0b3IubW9kZWwnO1xuY29uc3QgTUFHSUNfU1RFUCA9IDEwO1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnbHUtb3B0aW9uLXBhZ2VyJyxcblx0dGVtcGxhdGU6ICcnLFxuXHRzdHlsZVVybHM6IFtdLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0cHJvdmlkZXJzOiBbXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQUx1T3B0aW9uT3BlcmF0b3IsXG5cdFx0XHR1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBMdU9wdGlvblBhZ2VyQ29tcG9uZW50KSxcblx0XHRcdG11bHRpOiB0cnVlLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQUx1T25TY3JvbGxCb3R0b21TdWJzY3JpYmVyLFxuXHRcdFx0dXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTHVPcHRpb25QYWdlckNvbXBvbmVudCksXG5cdFx0XHRtdWx0aTogdHJ1ZSxcblx0XHR9LFxuXHRdLFxufSlcbmV4cG9ydCBjbGFzcyBMdU9wdGlvblBhZ2VyQ29tcG9uZW50PFQ+IGV4dGVuZHMgQUx1T3B0aW9uT3BlcmF0b3I8VD4gaW1wbGVtZW50cyBJTHVPcHRpb25PcGVyYXRvcjxUPiwgSUx1T25TY3JvbGxCb3R0b21TdWJzY3JpYmVyIHtcblx0b3V0T3B0aW9ucyQ6IE9ic2VydmFibGU8VFtdPjtcblx0c2V0IGluT3B0aW9ucyQoaW4kOiBPYnNlcnZhYmxlPFRbXT4pIHtcblx0XHR0aGlzLm91dE9wdGlvbnMkID0gY29tYmluZUxhdGVzdChbaW4kLCB0aGlzLnBhZ2luZyRdKS5waXBlKFxuXHRcdFx0bWFwKChbb3B0aW9ucywgcGFnaW5nXSkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gKG9wdGlvbnMgfHwgW10pLnNsaWNlKDAsIHBhZ2luZyk7XG5cdFx0XHR9KSxcblx0XHQpO1xuXHR9XG5cdHBhZ2luZyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PG51bWJlcj4oTUFHSUNfU1RFUCk7XG5cdG5leHQoKSB7XG5cdFx0dGhpcy5wYWdpbmckLm5leHQodGhpcy5wYWdpbmckLnZhbHVlICsgTUFHSUNfU1RFUCk7XG5cdH1cblx0b25TY3JvbGxCb3R0b20oKSB7XG5cdFx0dGhpcy5uZXh0KCk7XG5cdH1cbn1cbiJdfQ==