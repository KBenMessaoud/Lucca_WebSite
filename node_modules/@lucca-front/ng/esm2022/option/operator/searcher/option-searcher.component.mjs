import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, ElementRef, forwardRef, Input, ViewChild } from '@angular/core';
import { FormControl, ReactiveFormsModule } from '@angular/forms';
import { ALuOnOpenSubscriber } from '@lucca-front/ng/core';
import { combineLatest, merge, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { LuOptionPlaceholderComponent } from '../../placeholder';
import { ALuOptionOperator } from '../option-operator.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/common";
class LuOptionSearcherComponent extends ALuOptionOperator {
    constructor() {
        super(...arguments);
        this.searchControl = new FormControl();
        this.clue$ = merge(of(''), this.searchControl.valueChanges);
        this.searchFn = () => true;
    }
    set inOptions$(in$) {
        this.outOptions$ = combineLatest([in$, this.clue$]).pipe(map(([options, clue]) => {
            return clue ? (options || []).filter((o) => this.searchFn(o, clue)) : options || [];
        }));
        this.empty$ = this.outOptions$.pipe(map((o) => !o || o.length === 0));
    }
    onOpen() {
        this.searchInput.nativeElement.focus();
        this.searchControl.setValue('');
    }
    resetClue() {
        this.searchControl.setValue('');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSearcherComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuOptionSearcherComponent, isStandalone: true, selector: "lu-option-searcher", inputs: { searchFn: "searchFn" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuOptionSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuOptionSearcherComponent),
                multi: true,
            },
        ], viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true, read: ElementRef, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"textfield mod-search\">\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"searchControl\" />\n</div>\n\n<lu-option-placeholder *ngIf=\"empty$ | async\" (onClear)=\"resetClue()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"], dependencies: [{ kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "component", type: LuOptionPlaceholderComponent, selector: "lu-option-placeholder", outputs: ["onClear"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuOptionSearcherComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSearcherComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-option-searcher', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [ReactiveFormsModule, CommonModule, LuOptionPlaceholderComponent], providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuOptionSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuOptionSearcherComponent),
                            multi: true,
                        },
                    ], template: "<div class=\"textfield mod-search\">\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"searchControl\" />\n</div>\n\n<lu-option-placeholder *ngIf=\"empty$ | async\" (onClear)=\"resetClue()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"] }]
        }], propDecorators: { searchInput: [{
                type: ViewChild,
                args: ['searchInput', { read: ElementRef, static: true }]
            }], searchFn: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLXNlYXJjaGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL29wdGlvbi9vcGVyYXRvci9zZWFyY2hlci9vcHRpb24tc2VhcmNoZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvb3B0aW9uL29wZXJhdG9yL3NlYXJjaGVyL29wdGlvbi1zZWFyY2hlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0csT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxtQkFBbUIsRUFBdUIsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRixPQUFPLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBcUIsTUFBTSwwQkFBMEIsQ0FBQzs7OztBQUVoRixNQW9CYSx5QkFBNkIsU0FBUSxpQkFBb0I7SUFwQnRFOztRQXFCQyxrQkFBYSxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDbEMsVUFBSyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQXVCLENBQUM7UUFhcEUsYUFBUSxHQUF5QyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7S0FTckU7SUFqQkEsSUFBSSxVQUFVLENBQUMsR0FBb0I7UUFDbEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxhQUFhLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN2RCxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDckYsQ0FBQyxDQUFDLENBQ0YsQ0FBQztRQUNGLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUdELE1BQU07UUFDTCxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN2QyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQ0QsU0FBUztRQUNSLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7OEdBdkJXLHlCQUF5QjtrR0FBekIseUJBQXlCLG1HQWIxQjtZQUNWO2dCQUNDLE9BQU8sRUFBRSxpQkFBaUI7Z0JBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUM7Z0JBQ3hELEtBQUssRUFBRSxJQUFJO2FBQ1g7WUFDRDtnQkFDQyxPQUFPLEVBQUUsbUJBQW1CO2dCQUM1QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDO2dCQUN4RCxLQUFLLEVBQUUsSUFBSTthQUNYO1NBQ0QsaUhBTWlDLFVBQVUsa0VDakM3QywwT0FLQSw4NkJEVVcsbUJBQW1CLHlrQkFBRSxZQUFZLHdMQUFFLDRCQUE0Qjs7U0FjN0QseUJBQXlCOzJGQUF6Qix5QkFBeUI7a0JBcEJyQyxTQUFTOytCQUNDLG9CQUFvQixtQkFHYix1QkFBdUIsQ0FBQyxNQUFNLGNBQ25DLElBQUksV0FDUCxDQUFDLG1CQUFtQixFQUFFLFlBQVksRUFBRSw0QkFBNEIsQ0FBQyxhQUMvRDt3QkFDVjs0QkFDQyxPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSwwQkFBMEIsQ0FBQzs0QkFDeEQsS0FBSyxFQUFFLElBQUk7eUJBQ1g7d0JBQ0Q7NEJBQ0MsT0FBTyxFQUFFLG1CQUFtQjs0QkFDNUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsMEJBQTBCLENBQUM7NEJBQ3hELEtBQUssRUFBRSxJQUFJO3lCQUNYO3FCQUNEOzhCQU9ELFdBQVc7c0JBRFYsU0FBUzt1QkFBQyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBV25ELFFBQVE7c0JBQWhCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRWxlbWVudFJlZiwgZm9yd2FyZFJlZiwgSW5wdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBBTHVPbk9wZW5TdWJzY3JpYmVyLCBJTHVPbk9wZW5TdWJzY3JpYmVyIH0gZnJvbSAnQGx1Y2NhLWZyb250L25nL2NvcmUnO1xuaW1wb3J0IHsgY29tYmluZUxhdGVzdCwgbWVyZ2UsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBMdU9wdGlvblBsYWNlaG9sZGVyQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vcGxhY2Vob2xkZXInO1xuaW1wb3J0IHsgQUx1T3B0aW9uT3BlcmF0b3IsIElMdU9wdGlvbk9wZXJhdG9yIH0gZnJvbSAnLi4vb3B0aW9uLW9wZXJhdG9yLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnbHUtb3B0aW9uLXNlYXJjaGVyJyxcblx0dGVtcGxhdGVVcmw6ICdvcHRpb24tc2VhcmNoZXIuY29tcG9uZW50Lmh0bWwnLFxuXHRzdHlsZVVybHM6IFsnb3B0aW9uLXNlYXJjaGVyLmNvbXBvbmVudC5zY3NzJ10sXG5cdGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxuXHRpbXBvcnRzOiBbUmVhY3RpdmVGb3Jtc01vZHVsZSwgQ29tbW9uTW9kdWxlLCBMdU9wdGlvblBsYWNlaG9sZGVyQ29tcG9uZW50XSxcblx0cHJvdmlkZXJzOiBbXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQUx1T3B0aW9uT3BlcmF0b3IsXG5cdFx0XHR1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBMdU9wdGlvblNlYXJjaGVyQ29tcG9uZW50KSxcblx0XHRcdG11bHRpOiB0cnVlLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQUx1T25PcGVuU3Vic2NyaWJlcixcblx0XHRcdHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEx1T3B0aW9uU2VhcmNoZXJDb21wb25lbnQpLFxuXHRcdFx0bXVsdGk6IHRydWUsXG5cdFx0fSxcblx0XSxcbn0pXG5leHBvcnQgY2xhc3MgTHVPcHRpb25TZWFyY2hlckNvbXBvbmVudDxUPiBleHRlbmRzIEFMdU9wdGlvbk9wZXJhdG9yPFQ+IGltcGxlbWVudHMgSUx1T3B0aW9uT3BlcmF0b3I8VD4sIElMdU9uT3BlblN1YnNjcmliZXIge1xuXHRzZWFyY2hDb250cm9sID0gbmV3IEZvcm1Db250cm9sKCk7XG5cdGNsdWUkID0gbWVyZ2Uob2YoJycpLCB0aGlzLnNlYXJjaENvbnRyb2wudmFsdWVDaGFuZ2VzKSBhcyBPYnNlcnZhYmxlPHN0cmluZz47XG5cdGVtcHR5JDogT2JzZXJ2YWJsZTxib29sZWFuPjtcblx0QFZpZXdDaGlsZCgnc2VhcmNoSW5wdXQnLCB7IHJlYWQ6IEVsZW1lbnRSZWYsIHN0YXRpYzogdHJ1ZSB9KVxuXHRzZWFyY2hJbnB1dDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD47XG5cdG91dE9wdGlvbnMkOiBPYnNlcnZhYmxlPFRbXT47XG5cdHNldCBpbk9wdGlvbnMkKGluJDogT2JzZXJ2YWJsZTxUW10+KSB7XG5cdFx0dGhpcy5vdXRPcHRpb25zJCA9IGNvbWJpbmVMYXRlc3QoW2luJCwgdGhpcy5jbHVlJF0pLnBpcGUoXG5cdFx0XHRtYXAoKFtvcHRpb25zLCBjbHVlXSkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gY2x1ZSA/IChvcHRpb25zIHx8IFtdKS5maWx0ZXIoKG8pID0+IHRoaXMuc2VhcmNoRm4obywgY2x1ZSkpIDogb3B0aW9ucyB8fCBbXTtcblx0XHRcdH0pLFxuXHRcdCk7XG5cdFx0dGhpcy5lbXB0eSQgPSB0aGlzLm91dE9wdGlvbnMkLnBpcGUobWFwKChvKSA9PiAhbyB8fCBvLmxlbmd0aCA9PT0gMCkpO1xuXHR9XG5cdEBJbnB1dCgpIHNlYXJjaEZuOiAob3B0aW9uOiBULCBjbHVlOiBzdHJpbmcpID0+IGJvb2xlYW4gPSAoKSA9PiB0cnVlO1xuXG5cdG9uT3BlbigpIHtcblx0XHR0aGlzLnNlYXJjaElucHV0Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcblx0XHR0aGlzLnNlYXJjaENvbnRyb2wuc2V0VmFsdWUoJycpO1xuXHR9XG5cdHJlc2V0Q2x1ZSgpIHtcblx0XHR0aGlzLnNlYXJjaENvbnRyb2wuc2V0VmFsdWUoJycpO1xuXHR9XG59XG4iLCI8ZGl2IGNsYXNzPVwidGV4dGZpZWxkIG1vZC1zZWFyY2hcIj5cblx0PGlucHV0ICNzZWFyY2hJbnB1dCBjbGFzcz1cInRleHRmaWVsZC1pbnB1dFwiIFtmb3JtQ29udHJvbF09XCJzZWFyY2hDb250cm9sXCIgLz5cbjwvZGl2PlxuXG48bHUtb3B0aW9uLXBsYWNlaG9sZGVyICpuZ0lmPVwiZW1wdHkkIHwgYXN5bmNcIiAob25DbGVhcik9XCJyZXNldENsdWUoKVwiPjwvbHUtb3B0aW9uLXBsYWNlaG9sZGVyPlxuIl19