import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, ElementRef, forwardRef, Input, ViewChild } from '@angular/core';
import { FormControl, ReactiveFormsModule } from '@angular/forms';
import { ALuOnOpenSubscriber } from '@lucca-front/ng/core';
import { combineLatest, merge, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { LuOptionPlaceholderComponent } from '../../placeholder';
import { ALuTreeOptionOperator } from '../tree-option-operator.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/common";
class LuTreeOptionSearcherComponent extends ALuTreeOptionOperator {
    constructor() {
        super(...arguments);
        this.searchControl = new FormControl();
        this.clue$ = merge(of(''), this.searchControl.valueChanges);
        this.searchFn = () => true;
    }
    set inOptions$(in$) {
        this.outOptions$ = combineLatest([in$, this.clue$]).pipe(map(([options, clue]) => {
            if (!clue) {
                return options || [];
            }
            return this.trim(options, clue);
        }));
        this.empty$ = this.outOptions$.pipe(map((o) => !o || o.length === 0));
    }
    onOpen() {
        this.searchInput.nativeElement.focus();
        this.searchControl.setValue('');
    }
    trim(options, clue) {
        return options
            .map((option) => {
            if (this.searchFn(option.value, clue)) {
                return { ...option };
            }
            const trimmedChildren = option.children ? this.trim(option.children, clue) : [];
            if (trimmedChildren.length) {
                return { ...option, children: trimmedChildren };
            }
            return undefined;
        })
            .filter((o) => !!o);
    }
    resetClue() {
        this.searchControl.setValue('');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSearcherComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuTreeOptionSearcherComponent, isStandalone: true, selector: "lu-tree-option-searcher", inputs: { searchFn: "searchFn" }, providers: [
            {
                provide: ALuTreeOptionOperator,
                useExisting: forwardRef(() => LuTreeOptionSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuTreeOptionSearcherComponent),
                multi: true,
            },
        ], viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true, read: ElementRef, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"textfield mod-search\">\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"searchControl\" />\n</div>\n\n<lu-option-placeholder *ngIf=\"empty$ | async\" (onClear)=\"resetClue()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"], dependencies: [{ kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "component", type: LuOptionPlaceholderComponent, selector: "lu-option-placeholder", outputs: ["onClear"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuTreeOptionSearcherComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSearcherComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-tree-option-searcher', changeDetection: ChangeDetectionStrategy.OnPush, imports: [ReactiveFormsModule, CommonModule, LuOptionPlaceholderComponent], standalone: true, providers: [
                        {
                            provide: ALuTreeOptionOperator,
                            useExisting: forwardRef(() => LuTreeOptionSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuTreeOptionSearcherComponent),
                            multi: true,
                        },
                    ], template: "<div class=\"textfield mod-search\">\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"searchControl\" />\n</div>\n\n<lu-option-placeholder *ngIf=\"empty$ | async\" (onClear)=\"resetClue()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"] }]
        }], propDecorators: { searchInput: [{
                type: ViewChild,
                args: ['searchInput', { read: ElementRef, static: true }]
            }], searchFn: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1vcHRpb24tc2VhcmNoZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvb3B0aW9uL29wZXJhdG9yL3NlYXJjaGVyL3RyZWUtb3B0aW9uLXNlYXJjaGVyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL29wdGlvbi9vcGVyYXRvci9zZWFyY2hlci9vcHRpb24tc2VhcmNoZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdHLE9BQU8sRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsbUJBQW1CLEVBQWdDLE1BQU0sc0JBQXNCLENBQUM7QUFDekYsT0FBTyxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUscUJBQXFCLEVBQXlCLE1BQU0sK0JBQStCLENBQUM7Ozs7QUFFN0YsTUFvQmEsNkJBQWlDLFNBQVEscUJBQXdCO0lBcEI5RTs7UUFxQkMsa0JBQWEsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ2xDLFVBQUssR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUF1QixDQUFDO1FBZ0JwRSxhQUFRLEdBQXlD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LEVBQUUsbUJBQW1COzRCQUM1QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSw4QkFBOEIsQ0FBQzs0QkFDNUQsS0FBSyxFQUFFLElBQUk7eUJBQ1g7cUJBQ0Q7OEJBT0QsV0FBVztzQkFEVixTQUFTO3VCQUFDLGFBQWEsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFjbkQsUUFBUTtzQkFBaEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBmb3J3YXJkUmVmLCBJbnB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCwgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEFMdU9uT3BlblN1YnNjcmliZXIsIElMdU9uT3BlblN1YnNjcmliZXIsIElMdVRyZWUgfSBmcm9tICdAbHVjY2EtZnJvbnQvbmcvY29yZSc7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBtZXJnZSwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEx1T3B0aW9uUGxhY2Vob2xkZXJDb21wb25lbnQgfSBmcm9tICcuLi8uLi9wbGFjZWhvbGRlcic7XG5pbXBvcnQgeyBBTHVUcmVlT3B0aW9uT3BlcmF0b3IsIElMdVRyZWVPcHRpb25PcGVyYXRvciB9IGZyb20gJy4uL3RyZWUtb3B0aW9uLW9wZXJhdG9yLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnbHUtdHJlZS1vcHRpb24tc2VhcmNoZXInLFxuXHR0ZW1wbGF0ZVVybDogJy4vb3B0aW9uLXNlYXJjaGVyLmNvbXBvbmVudC5odG1sJyxcblx0c3R5bGVVcmxzOiBbJy4vb3B0aW9uLXNlYXJjaGVyLmNvbXBvbmVudC5zY3NzJ10sXG5cdGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuXHRpbXBvcnRzOiBbUmVhY3RpdmVGb3Jtc01vZHVsZSwgQ29tbW9uTW9kdWxlLCBMdU9wdGlvblBsYWNlaG9sZGVyQ29tcG9uZW50XSxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0cHJvdmlkZXJzOiBbXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQUx1VHJlZU9wdGlvbk9wZXJhdG9yLFxuXHRcdFx0dXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTHVUcmVlT3B0aW9uU2VhcmNoZXJDb21wb25lbnQpLFxuXHRcdFx0bXVsdGk6IHRydWUsXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRwcm92aWRlOiBBTHVPbk9wZW5TdWJzY3JpYmVyLFxuXHRcdFx0dXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTHVUcmVlT3B0aW9uU2VhcmNoZXJDb21wb25lbnQpLFxuXHRcdFx0bXVsdGk6IHRydWUsXG5cdFx0fSxcblx0XSxcbn0pXG5leHBvcnQgY2xhc3MgTHVUcmVlT3B0aW9uU2VhcmNoZXJDb21wb25lbnQ8VD4gZXh0ZW5kcyBBTHVUcmVlT3B0aW9uT3BlcmF0b3I8VD4gaW1wbGVtZW50cyBJTHVUcmVlT3B0aW9uT3BlcmF0b3I8VD4sIElMdU9uT3BlblN1YnNjcmliZXIge1xuXHRzZWFyY2hDb250cm9sID0gbmV3IEZvcm1Db250cm9sKCk7XG5cdGNsdWUkID0gbWVyZ2Uob2YoJycpLCB0aGlzLnNlYXJjaENvbnRyb2wudmFsdWVDaGFuZ2VzKSBhcyBPYnNlcnZhYmxlPHN0cmluZz47XG5cdGVtcHR5JDogT2JzZXJ2YWJsZTxib29sZWFuPjtcblx0QFZpZXdDaGlsZCgnc2VhcmNoSW5wdXQnLCB7IHJlYWQ6IEVsZW1lbnRSZWYsIHN0YXRpYzogdHJ1ZSB9KVxuXHRzZWFyY2hJbnB1dDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD47XG5cdG91dE9wdGlvbnMkOiBPYnNlcnZhYmxlPElMdVRyZWU8VD5bXT47XG5cdHNldCBpbk9wdGlvbnMkKGluJDogT2JzZXJ2YWJsZTxJTHVUcmVlPFQ+W10+KSB7XG5cdFx0dGhpcy5vdXRPcHRpb25zJCA9IGNvbWJpbmVMYXRlc3QoW2luJCwgdGhpcy5jbHVlJF0pLnBpcGUoXG5cdFx0XHRtYXAoKFtvcHRpb25zLCBjbHVlXSkgPT4ge1xuXHRcdFx0XHRpZiAoIWNsdWUpIHtcblx0XHRcdFx0XHRyZXR1cm4gb3B0aW9ucyB8fCBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcy50cmltKG9wdGlvbnMsIGNsdWUpO1xuXHRcdFx0fSksXG5cdFx0KTtcblx0XHR0aGlzLmVtcHR5JCA9IHRoaXMub3V0T3B0aW9ucyQucGlwZShtYXAoKG8pID0+ICFvIHx8IG8ubGVuZ3RoID09PSAwKSk7XG5cdH1cblx0QElucHV0KCkgc2VhcmNoRm46IChvcHRpb246IFQsIGNsdWU6IHN0cmluZykgPT4gYm9vbGVhbiA9ICgpID0+IHRydWU7XG5cblx0b25PcGVuKCkge1xuXHRcdHRoaXMuc2VhcmNoSW5wdXQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuXHRcdHRoaXMuc2VhcmNoQ29udHJvbC5zZXRWYWx1ZSgnJyk7XG5cdH1cblx0dHJpbShvcHRpb25zOiBJTHVUcmVlPFQ+W10sIGNsdWU6IHN0cmluZyk6IElMdVRyZWU8VD5bXSB7XG5cdFx0cmV0dXJuIG9wdGlvbnNcblx0XHRcdC5tYXAoKG9wdGlvbikgPT4ge1xuXHRcdFx0XHRpZiAodGhpcy5zZWFyY2hGbihvcHRpb24udmFsdWUsIGNsdWUpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgLi4ub3B0aW9uIH07XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgdHJpbW1lZENoaWxkcmVuID0gb3B0aW9uLmNoaWxkcmVuID8gdGhpcy50cmltKG9wdGlvbi5jaGlsZHJlbiwgY2x1ZSkgOiBbXTtcblx0XHRcdFx0aWYgKHRyaW1tZWRDaGlsZHJlbi5sZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm4geyAuLi5vcHRpb24sIGNoaWxkcmVuOiB0cmltbWVkQ2hpbGRyZW4gfTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdFx0fSlcblx0XHRcdC5maWx0ZXIoKG8pID0+ICEhbyk7XG5cdH1cblx0cmVzZXRDbHVlKCkge1xuXHRcdHRoaXMuc2VhcmNoQ29udHJvbC5zZXRWYWx1ZSgnJyk7XG5cdH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJ0ZXh0ZmllbGQgbW9kLXNlYXJjaFwiPlxuXHQ8aW5wdXQgI3NlYXJjaElucHV0IGNsYXNzPVwidGV4dGZpZWxkLWlucHV0XCIgW2Zvcm1Db250cm9sXT1cInNlYXJjaENvbnRyb2xcIiAvPlxuPC9kaXY+XG5cbjxsdS1vcHRpb24tcGxhY2Vob2xkZXIgKm5nSWY9XCJlbXB0eSQgfCBhc3luY1wiIChvbkNsZWFyKT1cInJlc2V0Q2x1ZSgpXCI+PC9sdS1vcHRpb24tcGxhY2Vob2xkZXI+XG4iXX0=