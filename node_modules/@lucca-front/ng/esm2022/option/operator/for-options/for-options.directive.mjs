import { NgForOf } from '@angular/common';
import { Directive, forwardRef, Input } from '@angular/core';
import { Subscription } from 'rxjs';
import { ALuOptionOperator } from '../option-operator.model';
import * as i0 from "@angular/core";
class LuForOptionsDirective extends NgForOf {
    set inOptions$(options$) {
        this._subs.add(options$.subscribe((options) => {
            this.ngForOf = options;
            this._changeDetectionRef.markForCheck();
        }));
        this.outOptions$ = options$;
    }
    set luForOptionsTrackBy(fn) {
        this.ngForTrackBy = fn;
    }
    constructor(_viewContainer, _template, _differs, _changeDetectionRef) {
        super(_viewContainer, _template, _differs);
        this._changeDetectionRef = _changeDetectionRef;
        this._subs = new Subscription();
    }
    ngOnDestroy() {
        this._subs.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForOptionsDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuForOptionsDirective, isStandalone: true, selector: "[luForOptions]", inputs: { luForOptionsTrackBy: "luForOptionsTrackBy" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuForOptionsDirective),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0 }); }
}
export { LuForOptionsDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForOptionsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luForOptions]',
                    standalone: true,
                    providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuForOptionsDirective),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { luForOptionsTrackBy: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yLW9wdGlvbnMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvb3B0aW9uL29wZXJhdG9yL2Zvci1vcHRpb25zL2Zvci1vcHRpb25zLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFrQixNQUFNLGlCQUFpQixDQUFDO0FBQzFELE9BQU8sRUFBcUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQThFLE1BQU0sZUFBZSxDQUFDO0FBQzVKLE9BQU8sRUFBYyxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEQsT0FBTyxFQUFFLGlCQUFpQixFQUFxQixNQUFNLDBCQUEwQixDQUFDOztBQUVoRixNQVdhLHFCQUF5QixTQUFRLE9BQVU7SUFHdkQsSUFBSSxVQUFVLENBQUMsUUFBeUI7UUFDdkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQ2IsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FDRixDQUFDO1FBQ0YsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUM7SUFDN0IsQ0FBQztJQUNELElBQ0ksbUJBQW1CLENBQUMsRUFBc0I7UUFDN0MsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELFlBQVksY0FBZ0MsRUFBRSxTQUF5QyxFQUFFLFFBQXlCLEVBQVksbUJBQXNDO1FBQ25LLEtBQUssQ0FBQyxjQUFjLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRGtGLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBbUI7UUFmMUosVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFpQnJDLENBQUM7SUFFRCxXQUFXO1FBQ1YsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMxQixDQUFDOzhHQXZCVyxxQkFBcUI7a0dBQXJCLHFCQUFxQixxSEFSdEI7WUFDVjtnQkFDQyxPQUFPLEVBQUUsaUJBQWlCO2dCQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHFCQUFxQixDQUFDO2dCQUNwRCxLQUFLLEVBQUUsSUFBSTthQUNYO1NBQ0Q7O1NBRVcscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBWGpDLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFNBQVMsRUFBRTt3QkFDVjs0QkFDQyxPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxzQkFBc0IsQ0FBQzs0QkFDcEQsS0FBSyxFQUFFLElBQUk7eUJBQ1g7cUJBQ0Q7aUJBQ0Q7K0xBY0ksbUJBQW1CO3NCQUR0QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdGb3JPZiwgTmdGb3JPZkNvbnRleHQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIERpcmVjdGl2ZSwgZm9yd2FyZFJlZiwgSW5wdXQsIEl0ZXJhYmxlRGlmZmVycywgT25EZXN0cm95LCBUZW1wbGF0ZVJlZiwgVHJhY2tCeUZ1bmN0aW9uLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFMdU9wdGlvbk9wZXJhdG9yLCBJTHVPcHRpb25PcGVyYXRvciB9IGZyb20gJy4uL29wdGlvbi1vcGVyYXRvci5tb2RlbCc7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1tsdUZvck9wdGlvbnNdJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0cHJvdmlkZXJzOiBbXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQUx1T3B0aW9uT3BlcmF0b3IsXG5cdFx0XHR1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBMdUZvck9wdGlvbnNEaXJlY3RpdmUpLFxuXHRcdFx0bXVsdGk6IHRydWUsXG5cdFx0fSxcblx0XSxcbn0pXG5leHBvcnQgY2xhc3MgTHVGb3JPcHRpb25zRGlyZWN0aXZlPFQ+IGV4dGVuZHMgTmdGb3JPZjxUPiBpbXBsZW1lbnRzIElMdU9wdGlvbk9wZXJhdG9yPFQ+LCBPbkRlc3Ryb3kge1xuXHRvdXRPcHRpb25zJDtcblx0cHJvdGVjdGVkIF9zdWJzID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXHRzZXQgaW5PcHRpb25zJChvcHRpb25zJDogT2JzZXJ2YWJsZTxUW10+KSB7XG5cdFx0dGhpcy5fc3Vicy5hZGQoXG5cdFx0XHRvcHRpb25zJC5zdWJzY3JpYmUoKG9wdGlvbnMpID0+IHtcblx0XHRcdFx0dGhpcy5uZ0Zvck9mID0gb3B0aW9ucztcblx0XHRcdFx0dGhpcy5fY2hhbmdlRGV0ZWN0aW9uUmVmLm1hcmtGb3JDaGVjaygpO1xuXHRcdFx0fSksXG5cdFx0KTtcblx0XHR0aGlzLm91dE9wdGlvbnMkID0gb3B0aW9ucyQ7XG5cdH1cblx0QElucHV0KClcblx0c2V0IGx1Rm9yT3B0aW9uc1RyYWNrQnkoZm46IFRyYWNrQnlGdW5jdGlvbjxUPikge1xuXHRcdHRoaXMubmdGb3JUcmFja0J5ID0gZm47XG5cdH1cblxuXHRjb25zdHJ1Y3Rvcihfdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZiwgX3RlbXBsYXRlOiBUZW1wbGF0ZVJlZjxOZ0Zvck9mQ29udGV4dDxUPj4sIF9kaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIHByb3RlY3RlZCBfY2hhbmdlRGV0ZWN0aW9uUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuXHRcdHN1cGVyKF92aWV3Q29udGFpbmVyLCBfdGVtcGxhdGUsIF9kaWZmZXJzKTtcblx0fVxuXG5cdG5nT25EZXN0cm95KCkge1xuXHRcdHRoaXMuX3N1YnMudW5zdWJzY3JpYmUoKTtcblx0fVxufVxuIl19