import { Directive, forwardRef } from '@angular/core';
import { ALuTreeOptionOperator } from '../tree-option-operator.model';
import { LuForOptionsDirective } from './for-options.directive';
import * as i0 from "@angular/core";
class LuForTreeOptionsDirective extends LuForOptionsDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForTreeOptionsDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuForTreeOptionsDirective, isStandalone: true, selector: "[luForTreeOptions]", providers: [
            {
                provide: ALuTreeOptionOperator,
                useExisting: forwardRef(() => LuForTreeOptionsDirective),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0 }); }
}
export { LuForTreeOptionsDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForTreeOptionsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luForTreeOptions]',
                    standalone: true,
                    providers: [
                        {
                            provide: ALuTreeOptionOperator,
                            useExisting: forwardRef(() => LuForTreeOptionsDirective),
                            multi: true,
                        },
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yLXRyZWUtb3B0aW9ucy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy9vcHRpb24vb3BlcmF0b3IvZm9yLW9wdGlvbnMvZm9yLXRyZWUtb3B0aW9ucy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFHakUsT0FBTyxFQUFFLHFCQUFxQixFQUF5QixNQUFNLCtCQUErQixDQUFDO0FBQzdGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDOztBQUVoRSxNQVdhLHlCQUE2QixTQUFRLHFCQUFpQzs4R0FBdEUseUJBQXlCO2tHQUF6Qix5QkFBeUIsaUVBUjFCO1lBQ1Y7Z0JBQ0MsT0FBTyxFQUFFLHFCQUFxQjtnQkFDOUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQztnQkFDeEQsS0FBSyxFQUFFLElBQUk7YUFDWDtTQUNEOztTQUVXLHlCQUF5QjsyRkFBekIseUJBQXlCO2tCQVhyQyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFVBQVUsRUFBRSxJQUFJO29CQUNoQixTQUFTLEVBQUU7d0JBQ1Y7NEJBQ0MsT0FBTyxFQUFFLHFCQUFxQjs0QkFDOUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsMEJBQTBCLENBQUM7NEJBQ3hELEtBQUssRUFBRSxJQUFJO3lCQUNYO3FCQUNEO2lCQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBmb3J3YXJkUmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSUx1VHJlZSB9IGZyb20gJ0BsdWNjYS1mcm9udC9uZy9jb3JlJztcbmltcG9ydCB7IEFMdVRyZWVPcHRpb25PcGVyYXRvciwgSUx1VHJlZU9wdGlvbk9wZXJhdG9yIH0gZnJvbSAnLi4vdHJlZS1vcHRpb24tb3BlcmF0b3IubW9kZWwnO1xuaW1wb3J0IHsgTHVGb3JPcHRpb25zRGlyZWN0aXZlIH0gZnJvbSAnLi9mb3Itb3B0aW9ucy5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdbbHVGb3JUcmVlT3B0aW9uc10nLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxuXHRwcm92aWRlcnM6IFtcblx0XHR7XG5cdFx0XHRwcm92aWRlOiBBTHVUcmVlT3B0aW9uT3BlcmF0b3IsXG5cdFx0XHR1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBMdUZvclRyZWVPcHRpb25zRGlyZWN0aXZlKSxcblx0XHRcdG11bHRpOiB0cnVlLFxuXHRcdH0sXG5cdF0sXG59KVxuZXhwb3J0IGNsYXNzIEx1Rm9yVHJlZU9wdGlvbnNEaXJlY3RpdmU8VD4gZXh0ZW5kcyBMdUZvck9wdGlvbnNEaXJlY3RpdmU8SUx1VHJlZTxUPj4gaW1wbGVtZW50cyBJTHVUcmVlT3B0aW9uT3BlcmF0b3I8VD4sIE9uRGVzdHJveSB7fVxuIl19