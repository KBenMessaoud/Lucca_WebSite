import { Directive, forwardRef, Input } from '@angular/core';
import { Subscription } from 'rxjs';
import { ALuOptionOperator } from '../option-operator.model';
import * as i0 from "@angular/core";
export class LuForGroupContext {
    constructor($implicit, index, count) {
        this.$implicit = $implicit;
        this.index = index;
        this.count = count;
    }
    get first() {
        return this.index === 0;
    }
    get last() {
        return this.index === this.count - 1;
    }
    get even() {
        return this.index % 2 === 0;
    }
    get odd() {
        return !this.even;
    }
}
class LuForGroupsDirective {
    set attrGroupBy(fn) {
        this._groupByFn = fn;
    }
    set inOptions$(options$) {
        this._subs.add(options$.subscribe((options) => this.render(options)));
        this.outOptions$ = options$;
    }
    constructor(_vcr, _cdr, _templateRef) {
        this._vcr = _vcr;
        this._cdr = _cdr;
        this._templateRef = _templateRef;
        this._subs = new Subscription();
    }
    ngOnDestroy() {
        this._subs.unsubscribe();
    }
    render(options) {
        this._vcr.clear();
        const count = options.length;
        const groups = this.groupBy(options);
        groups.forEach((group, index) => {
            this._vcr.createEmbeddedView(this._templateRef, new LuForGroupContext(group, index, count));
        });
        this._cdr.markForCheck();
    }
    groupBy(items) {
        const groups = [];
        items.forEach((item) => {
            const key = this._groupByFn(item);
            let group = groups.find((g) => g.key === key);
            if (!group) {
                group = { key: key, items: [] };
                groups.push(group);
            }
            group.items.push(item);
        });
        return groups;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForGroupsDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.ChangeDetectorRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuForGroupsDirective, isStandalone: true, selector: "[luForGroups]", inputs: { attrGroupBy: ["luForGroupsGroupBy", "attrGroupBy"] }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuForGroupsDirective),
                multi: true,
            },
        ], ngImport: i0 }); }
}
export { LuForGroupsDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForGroupsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luForGroups]',
                    standalone: true,
                    providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuForGroupsDirective),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }, { type: i0.TemplateRef }]; }, propDecorators: { attrGroupBy: [{
                type: Input,
                args: ['luForGroupsGroupBy']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yLWdyb3Vwcy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy9vcHRpb24vb3BlcmF0b3IvZm9yLWdyb3Vwcy9mb3ItZ3JvdXBzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXFCLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUE0QyxNQUFNLGVBQWUsQ0FBQztBQUUxSCxPQUFPLEVBQWMsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxpQkFBaUIsRUFBcUIsTUFBTSwwQkFBMEIsQ0FBQzs7QUFFaEYsTUFBTSxPQUFPLGlCQUFpQjtJQUM3QixZQUEwQixTQUFZLEVBQVMsS0FBYSxFQUFTLEtBQWE7UUFBeEQsY0FBUyxHQUFULFNBQVMsQ0FBRztRQUFTLFVBQUssR0FBTCxLQUFLLENBQVE7UUFBUyxVQUFLLEdBQUwsS0FBSyxDQUFRO0lBQUcsQ0FBQztJQUV0RixJQUFXLEtBQUs7UUFDZixPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFXLElBQUk7UUFDZCxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNkLE9BQU8sSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFXLEdBQUc7UUFDYixPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0NBQ0Q7QUFFRCxNQVdhLG9CQUFvQjtJQUloQyxJQUNXLFdBQVcsQ0FBQyxFQUF5QjtRQUMvQyxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBR0QsSUFBVyxVQUFVLENBQUMsUUFBNkI7UUFDbEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUM7SUFDN0IsQ0FBQztJQUVELFlBQTZCLElBQXNCLEVBQVksSUFBdUIsRUFBWSxZQUFtRTtRQUF4SSxTQUFJLEdBQUosSUFBSSxDQUFrQjtRQUFZLFNBQUksR0FBSixJQUFJLENBQW1CO1FBQVksaUJBQVksR0FBWixZQUFZLENBQXVEO1FBTjNKLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBTW1JLENBQUM7SUFFbEssV0FBVztRQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBZ0I7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNsQixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQzdCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxpQkFBaUIsQ0FBd0IsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3BILENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRVMsT0FBTyxDQUFDLEtBQWM7UUFDL0IsTUFBTSxNQUFNLEdBQTRCLEVBQUUsQ0FBQztRQUMzQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDdEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsQyxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ1gsS0FBSyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUM7Z0JBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDbkI7WUFDRCxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQzs4R0EzQ1csb0JBQW9CO2tHQUFwQixvQkFBb0IsNEhBUnJCO1lBQ1Y7Z0JBQ0MsT0FBTyxFQUFFLGlCQUFpQjtnQkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztnQkFDbkQsS0FBSyxFQUFFLElBQUk7YUFDWDtTQUNEOztTQUVXLG9CQUFvQjsyRkFBcEIsb0JBQW9CO2tCQVhoQyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxlQUFlO29CQUN6QixVQUFVLEVBQUUsSUFBSTtvQkFDaEIsU0FBUyxFQUFFO3dCQUNWOzRCQUNDLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLHFCQUFxQixDQUFDOzRCQUNuRCxLQUFLLEVBQUUsSUFBSTt5QkFDWDtxQkFDRDtpQkFDRDtpS0FNVyxXQUFXO3NCQURyQixLQUFLO3VCQUFDLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIGZvcndhcmRSZWYsIElucHV0LCBPbkRlc3Ryb3ksIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJTHVHcm91cCB9IGZyb20gJ0BsdWNjYS1mcm9udC9uZy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQUx1T3B0aW9uT3BlcmF0b3IsIElMdU9wdGlvbk9wZXJhdG9yIH0gZnJvbSAnLi4vb3B0aW9uLW9wZXJhdG9yLm1vZGVsJztcblxuZXhwb3J0IGNsYXNzIEx1Rm9yR3JvdXBDb250ZXh0PFQ+IHtcblx0cHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyAkaW1wbGljaXQ6IFQsIHB1YmxpYyBpbmRleDogbnVtYmVyLCBwdWJsaWMgY291bnQ6IG51bWJlcikge31cblxuXHRwdWJsaWMgZ2V0IGZpcnN0KCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLmluZGV4ID09PSAwO1xuXHR9XG5cblx0cHVibGljIGdldCBsYXN0KCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLmluZGV4ID09PSB0aGlzLmNvdW50IC0gMTtcblx0fVxuXG5cdHB1YmxpYyBnZXQgZXZlbigpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5pbmRleCAlIDIgPT09IDA7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IG9kZCgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gIXRoaXMuZXZlbjtcblx0fVxufVxuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdbbHVGb3JHcm91cHNdJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0cHJvdmlkZXJzOiBbXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQUx1T3B0aW9uT3BlcmF0b3IsXG5cdFx0XHR1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBMdUZvckdyb3Vwc0RpcmVjdGl2ZSksXG5cdFx0XHRtdWx0aTogdHJ1ZSxcblx0XHR9LFxuXHRdLFxufSlcbmV4cG9ydCBjbGFzcyBMdUZvckdyb3Vwc0RpcmVjdGl2ZTxUSXRlbSwgVEtleT4gaW1wbGVtZW50cyBJTHVPcHRpb25PcGVyYXRvcjxUSXRlbT4sIE9uRGVzdHJveSB7XG5cdG91dE9wdGlvbnMkPzogT2JzZXJ2YWJsZTxUSXRlbVtdPjtcblxuXHRwcml2YXRlIF9ncm91cEJ5Rm46IChpdGVtOiBUSXRlbSkgPT4gVEtleTtcblx0QElucHV0KCdsdUZvckdyb3Vwc0dyb3VwQnknKVxuXHRwdWJsaWMgc2V0IGF0dHJHcm91cEJ5KGZuOiAoaXRlbTogVEl0ZW0pID0+IFRLZXkpIHtcblx0XHR0aGlzLl9ncm91cEJ5Rm4gPSBmbjtcblx0fVxuXG5cdHByb3RlY3RlZCBfc3VicyA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblx0cHVibGljIHNldCBpbk9wdGlvbnMkKG9wdGlvbnMkOiBPYnNlcnZhYmxlPFRJdGVtW10+KSB7XG5cdFx0dGhpcy5fc3Vicy5hZGQob3B0aW9ucyQuc3Vic2NyaWJlKChvcHRpb25zKSA9PiB0aGlzLnJlbmRlcihvcHRpb25zKSkpO1xuXHRcdHRoaXMub3V0T3B0aW9ucyQgPSBvcHRpb25zJDtcblx0fVxuXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgX3ZjcjogVmlld0NvbnRhaW5lclJlZiwgcHJvdGVjdGVkIF9jZHI6IENoYW5nZURldGVjdG9yUmVmLCBwcm90ZWN0ZWQgX3RlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxMdUZvckdyb3VwQ29udGV4dDxJTHVHcm91cDxUSXRlbSwgVEtleT4+Pikge31cblxuXHRwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG5cdFx0dGhpcy5fc3Vicy51bnN1YnNjcmliZSgpO1xuXHR9XG5cblx0cHVibGljIHJlbmRlcihvcHRpb25zOiBUSXRlbVtdKTogdm9pZCB7XG5cdFx0dGhpcy5fdmNyLmNsZWFyKCk7XG5cdFx0Y29uc3QgY291bnQgPSBvcHRpb25zLmxlbmd0aDtcblx0XHRjb25zdCBncm91cHMgPSB0aGlzLmdyb3VwQnkob3B0aW9ucyk7XG5cdFx0Z3JvdXBzLmZvckVhY2goKGdyb3VwLCBpbmRleCkgPT4ge1xuXHRcdFx0dGhpcy5fdmNyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLl90ZW1wbGF0ZVJlZiwgbmV3IEx1Rm9yR3JvdXBDb250ZXh0PElMdUdyb3VwPFRJdGVtLCBUS2V5Pj4oZ3JvdXAsIGluZGV4LCBjb3VudCkpO1xuXHRcdH0pO1xuXHRcdHRoaXMuX2Nkci5tYXJrRm9yQ2hlY2soKTtcblx0fVxuXG5cdHByb3RlY3RlZCBncm91cEJ5KGl0ZW1zOiBUSXRlbVtdKTogSUx1R3JvdXA8VEl0ZW0sIFRLZXk+W10ge1xuXHRcdGNvbnN0IGdyb3VwczogSUx1R3JvdXA8VEl0ZW0sIFRLZXk+W10gPSBbXTtcblx0XHRpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG5cdFx0XHRjb25zdCBrZXkgPSB0aGlzLl9ncm91cEJ5Rm4oaXRlbSk7XG5cdFx0XHRsZXQgZ3JvdXAgPSBncm91cHMuZmluZCgoZykgPT4gZy5rZXkgPT09IGtleSk7XG5cdFx0XHRpZiAoIWdyb3VwKSB7XG5cdFx0XHRcdGdyb3VwID0geyBrZXk6IGtleSwgaXRlbXM6IFtdIH07XG5cdFx0XHRcdGdyb3Vwcy5wdXNoKGdyb3VwKTtcblx0XHRcdH1cblx0XHRcdGdyb3VwLml0ZW1zLnB1c2goaXRlbSk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIGdyb3Vwcztcblx0fVxufVxuIl19