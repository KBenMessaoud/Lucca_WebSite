import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { ALuTreeOptionOperator } from '../tree-option-operator.model';
import * as i0 from "@angular/core";
class LuTreeOptionFeederComponent {
    constructor() {
        this.outOptions$ = new BehaviorSubject([]);
    }
    set options(options) {
        this.outOptions$.next(options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionFeederComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuTreeOptionFeederComponent, isStandalone: true, selector: "lu-tree-option-feeder", inputs: { options: "options" }, providers: [
            {
                provide: ALuTreeOptionOperator,
                useExisting: forwardRef(() => LuTreeOptionFeederComponent),
                multi: true,
            },
        ], ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuTreeOptionFeederComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionFeederComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-tree-option-feeder', template: '', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [
                        {
                            provide: ALuTreeOptionOperator,
                            useExisting: forwardRef(() => LuTreeOptionFeederComponent),
                            multi: true,
                        },
                    ] }]
        }], propDecorators: { options: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1vcHRpb24tZmVlZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL29wdGlvbi9vcGVyYXRvci9mZWVkZXIvdHJlZS1vcHRpb24tZmVlZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQUUscUJBQXFCLEVBQXlCLE1BQU0sK0JBQStCLENBQUM7O0FBRTdGLE1BY2EsMkJBQTJCO0lBZHhDO1FBZUMsZ0JBQVcsR0FBRyxJQUFJLGVBQWUsQ0FBZSxFQUFFLENBQUMsQ0FBQztLQUlwRDtJQUhBLElBQWEsT0FBTyxDQUFDLE9BQXFCO1FBQ3pDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7OEdBSlcsMkJBQTJCO2tHQUEzQiwyQkFBMkIsb0dBUjVCO1lBQ1Y7Z0JBQ0MsT0FBTyxFQUFFLHFCQUFxQjtnQkFDOUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQztnQkFDMUQsS0FBSyxFQUFFLElBQUk7YUFDWDtTQUNELDBCQVZTLEVBQUU7O1NBWUEsMkJBQTJCOzJGQUEzQiwyQkFBMkI7a0JBZHZDLFNBQVM7K0JBQ0MsdUJBQXVCLFlBQ3ZCLEVBQUUsbUJBRUssdUJBQXVCLENBQUMsTUFBTSxjQUNuQyxJQUFJLGFBQ0w7d0JBQ1Y7NEJBQ0MsT0FBTyxFQUFFLHFCQUFxQjs0QkFDOUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsNEJBQTRCLENBQUM7NEJBQzFELEtBQUssRUFBRSxJQUFJO3lCQUNYO3FCQUNEOzhCQUlZLE9BQU87c0JBQW5CLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUx1VHJlZSB9IGZyb20gJ0BsdWNjYS1mcm9udC9uZy9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQUx1VHJlZU9wdGlvbk9wZXJhdG9yLCBJTHVUcmVlT3B0aW9uT3BlcmF0b3IgfSBmcm9tICcuLi90cmVlLW9wdGlvbi1vcGVyYXRvci5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ2x1LXRyZWUtb3B0aW9uLWZlZWRlcicsXG5cdHRlbXBsYXRlOiAnJyxcblx0c3R5bGVVcmxzOiBbXSxcblx0Y2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG5cdHByb3ZpZGVyczogW1xuXHRcdHtcblx0XHRcdHByb3ZpZGU6IEFMdVRyZWVPcHRpb25PcGVyYXRvcixcblx0XHRcdHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEx1VHJlZU9wdGlvbkZlZWRlckNvbXBvbmVudCksXG5cdFx0XHRtdWx0aTogdHJ1ZSxcblx0XHR9LFxuXHRdLFxufSlcbmV4cG9ydCBjbGFzcyBMdVRyZWVPcHRpb25GZWVkZXJDb21wb25lbnQ8VD4gaW1wbGVtZW50cyBJTHVUcmVlT3B0aW9uT3BlcmF0b3I8VD4ge1xuXHRvdXRPcHRpb25zJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8SUx1VHJlZTxUPltdPihbXSk7XG5cdEBJbnB1dCgpIHNldCBvcHRpb25zKG9wdGlvbnM6IElMdVRyZWU8VD5bXSkge1xuXHRcdHRoaXMub3V0T3B0aW9ucyQubmV4dChvcHRpb25zKTtcblx0fVxufVxuIl19