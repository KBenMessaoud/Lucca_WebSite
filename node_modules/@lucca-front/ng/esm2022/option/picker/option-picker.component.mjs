/* eslint-disable @angular-eslint/no-output-native */
import { A11yModule } from '@angular/cdk/a11y';
import { OverlayModule } from '@angular/cdk/overlay';
import { CommonModule, DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, Component, ContentChildren, Directive, EventEmitter, forwardRef, Inject, Input, Output, TemplateRef, ViewChild, } from '@angular/core';
import { ALuPickerPanel } from '@lucca-front/ng/picker';
import { luTransformPopover } from '@lucca-front/ng/popover';
import { merge, of } from 'rxjs';
import { delay, map, share } from 'rxjs/operators';
import { LuOptionItemComponent } from '../item';
import { ALuOptionItem } from '../item/option-item.model';
import { ALuOptionPicker } from './option-picker.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/a11y";
class ALuOptionPickerComponent extends ALuOptionPicker {
    /**
     * This method takes classes set on the host lu-popover element and applies them on the
     * popover template that displays in the overlay container.  Otherwise, it's difficult
     * to style the containing popover from outside the component.
     * @param classes list of class names
     */
    set inputPanelClasses(classes) {
        this.panelClasses = classes;
    }
    /**
     * This method takes classes set on the host lu-popover element and applies them on the
     * popover template that displays in the overlay container. Otherwise, it's difficult
     * to style the containing popover from outside the component.
     * @param classes list of class names
     */
    set inputContentClasses(classes) {
        this.contentClasses = classes;
    }
    /**
     * This method take a function that compare options from feeder and options from form value.
     * By default, compare JSON values.
     */
    set inputOptionComparer(comparer) {
        this.optionComparer = comparer;
    }
    set optionsQL(ql) {
        this._optionsQL = ql;
    }
    constructor(_changeDetectorRef, document) {
        super();
        this._changeDetectorRef = _changeDetectorRef;
        this.document = document;
        this.close = new EventEmitter();
        this.open = new EventEmitter();
        this.hovered = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onSelectValue = new EventEmitter();
        this._defaultOverlayPaneClasses = ['mod-optionPicker'];
        this._options = [];
        this._highlightIndex = -1;
        this._isOptionItemsInitialized = false;
        this.overlayPaneClass = this._defaultOverlayPaneClasses;
    }
    _emitSelectValue(val) {
        this.onSelectValue.emit(val);
    }
    ngOnDestroy() {
        super.destroy();
    }
    _emitOpenEvent() {
        this.open.emit();
    }
    _emitCloseEvent() {
        this.close.emit();
    }
    _emitHoveredEvent(h) {
        this.hovered.emit(h);
    }
    onOpen() {
        super.onOpen();
        this.highlightIndex = -1;
        this._incrHighlight();
        this._applySelected();
    }
    set vcTemplateRef(tr) {
        this.templateRef = tr;
    }
    // keydown
    _handleKeydown(event) {
        super._handleKeydown(event);
        switch (event.key) {
            case 'Enter':
                this._selectHighlighted();
                event.preventDefault();
                event.stopPropagation();
                break;
            case 'ArrowUp':
                this._decrHighlight();
                event.preventDefault();
                event.stopPropagation();
                break;
            case 'ArrowDown':
                this._incrHighlight();
                event.preventDefault();
                event.stopPropagation();
                break;
        }
    }
    get highlightIndex() {
        return this._highlightIndex;
    }
    set highlightIndex(i) {
        this._highlightIndex = i;
        this._applyHighlight(true);
    }
    _initHighlight() {
        this._subs.add(this._options$.subscribe((options) => {
            const optionCount = options.length;
            const newHighlight = Math.max(Math.min(this.highlightIndex, optionCount - 1), -1);
            if (newHighlight !== this.highlightIndex) {
                this.highlightIndex = newHighlight;
            }
        }));
        setTimeout(() => {
            this.highlightIndex = -1;
        }, 1);
    }
    _incrHighlight() {
        const nextIndex = this._options.findIndex((item, index) => index > this.highlightIndex && !item.disabled);
        this.highlightIndex = nextIndex > -1 ? nextIndex : this._options.findIndex((item) => !item.disabled);
    }
    _decrHighlight() {
        //NB: findLastIndex would be better but is not available on this project
        let nextIndex = -1;
        for (let i = this.highlightIndex - 1; i >= 0; --i) {
            if (!this._options[i].disabled) {
                nextIndex = i;
                break;
            }
        }
        if (nextIndex > -1) {
            this.highlightIndex = nextIndex;
            return;
        }
        const optionsLength = this._options.length - 1;
        for (let i = optionsLength; i >= 0; --i) {
            if (!this._options[i].disabled) {
                nextIndex = i;
                break;
            }
        }
        this.highlightIndex = nextIndex;
    }
    _applyHighlight(reScroll = false) {
        if (!this.isOpen) {
            return;
        }
        const options = this._options;
        // remove `is-highlighted` class from all other options
        options.forEach((option) => (option.highlighted = false));
        // apply `is-highlighted` to current highlight
        const highlightedOption = options[this.highlightIndex];
        if (highlightedOption) {
            highlightedOption.highlighted = true;
            // scroll to let the highlighted option visible
            if (reScroll) {
                setTimeout(() => {
                    this._scrollToHighlight(highlightedOption.element.nativeElement);
                }, 1);
            }
        }
        this._changeDetectorRef.markForCheck();
    }
    _scrollToHighlight(targetElt) {
        if (!targetElt) {
            return;
        }
        const contentElt = this.document.querySelector('.lu-picker-content');
        if (!contentElt) {
            return;
        }
        const headerElt = this.document.querySelector('.lu-picker-content .lu-picker-header');
        const headerHeight = headerElt ? headerElt.offsetHeight : 0;
        const footerElt = this.document.querySelector('.lu-picker-content .lu-picker-footer');
        const footerHeight = footerElt ? footerElt.offsetHeight : 0;
        // highlighted option is too high
        if (contentElt.scrollTop + headerHeight > targetElt.offsetTop) {
            contentElt.scrollTop = targetElt.offsetTop - headerHeight;
            return;
        }
        // highlight option is too low
        const offsetHeight = contentElt.offsetHeight;
        if (contentElt.scrollTop + offsetHeight - footerHeight < targetElt.offsetTop + targetElt.offsetHeight) {
            contentElt.scrollTop = targetElt.offsetTop + targetElt.offsetHeight - offsetHeight + footerHeight;
            return;
        }
    }
    _selectHighlighted() {
        const options = this._options ? this._options : [];
        const highlightedOption = options[this.highlightIndex];
        if (highlightedOption) {
            this._toggle(highlightedOption);
        }
    }
    _initSelected() {
        this._subs.add(this._options$.subscribe(() => {
            this._applySelected();
        }));
    }
    _applySelected() {
        if (!this._options) {
            return;
        }
        // const selectedClass = 'is-selected';
        const options = this._options;
        // remove `is-selected` class from all other options
        options.forEach((option) => (option.selected = false));
        // add `is-selected` to all selected indexes
        const selectedIndexes = [];
        if (!this.multiple) {
            const selectedIndex = this._options.findIndex((o) => this.optionComparer(o.value, this._value));
            if (selectedIndex !== -1) {
                selectedIndexes.push(selectedIndex);
            }
            if (selectedIndex !== -1 && this.highlightIndex === -1) {
                this.highlightIndex = selectedIndex;
            }
        }
        else {
            const values = this._value || [];
            const matchingIndexes = this._options
                .map((o) => values.some((v) => this.optionComparer(o.value, v)))
                .map((f, i) => (f ? i : null))
                .filter((i) => i !== null);
            selectedIndexes.push(...matchingIndexes);
            // selectedIndexes.push(
            // 	...values
            // 	.map(v => this._options.findIndex(o => this.optionComparer(o.value, v)))
            // 	.filter(i => i !== -1)
            // );
        }
        selectedIndexes.forEach((i) => {
            const option = options[i];
            if (option) {
                option.selected = true;
            }
        });
    }
    initItems() {
        const items$ = merge(of(this._optionsQL), this._optionsQL.changes).pipe(map((q) => q.toArray()), delay(0), share());
        items$.subscribe((o) => (this._options = o || []));
        this._options$ = items$;
        this._initHighlight();
        this._initSelected();
    }
    ngAfterViewInit() {
        this.initItems();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuOptionPickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: ALuOptionPickerComponent, inputs: { inputPanelClasses: ["panel-classes", "inputPanelClasses"], inputContentClasses: ["content-classes", "inputContentClasses"], inputOptionComparer: ["option-comparer", "inputOptionComparer"] }, outputs: { close: "close", open: "open", hovered: "hovered", onSelectValue: "onSelectValue" }, queries: [{ propertyName: "optionsQL", predicate: ALuOptionItem, descendants: true }], viewQueries: [{ propertyName: "vcTemplateRef", first: true, predicate: TemplateRef, descendants: true, static: true }], usesInheritance: true, ngImport: i0 }); }
}
export { ALuOptionPickerComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuOptionPickerComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { inputPanelClasses: [{
                type: Input,
                args: ['panel-classes']
            }], inputContentClasses: [{
                type: Input,
                args: ['content-classes']
            }], inputOptionComparer: [{
                type: Input,
                args: ['option-comparer']
            }], close: [{
                type: Output
            }], open: [{
                type: Output
            }], hovered: [{
                type: Output
            }], onSelectValue: [{
                type: Output
            }], optionsQL: [{
                type: ContentChildren,
                args: [ALuOptionItem, { descendants: true }]
            }], vcTemplateRef: [{
                type: ViewChild,
                args: [TemplateRef, { static: true }]
            }] } });
/**
 * basic option picker panel
 */
class LuOptionPickerComponent extends ALuOptionPickerComponent {
    constructor(_changeDetectorRef, document) {
        super(_changeDetectorRef, document);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuOptionPickerComponent, isStandalone: true, selector: "lu-option-picker", providers: [
            {
                provide: ALuPickerPanel,
                useExisting: forwardRef(() => LuOptionPickerComponent),
            },
        ], exportAs: ["LuOptionPicker"], usesInheritance: true, ngImport: i0, template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-option-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t[class.mod-multiple]=\"multiple\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\">\n\t\t\t<div class=\"lu-picker-content-option\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</ng-template>\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "ngmodule", type: OverlayModule }, { kind: "ngmodule", type: A11yModule }, { kind: "directive", type: i2.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }], animations: [luTransformPopover], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuOptionPickerComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-option-picker', changeDetection: ChangeDetectionStrategy.OnPush, animations: [luTransformPopover], exportAs: 'LuOptionPicker', standalone: true, imports: [CommonModule, OverlayModule, LuOptionItemComponent, A11yModule], providers: [
                        {
                            provide: ALuPickerPanel,
                            useExisting: forwardRef(() => LuOptionPickerComponent),
                        },
                    ], template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-option-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t[class.mod-multiple]=\"multiple\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\">\n\t\t\t<div class=\"lu-picker-content-option\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,