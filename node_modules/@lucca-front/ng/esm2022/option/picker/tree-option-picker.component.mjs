import { A11yModule } from '@angular/cdk/a11y';
import { CommonModule, DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, Component, ContentChildren, Directive, forwardRef, Inject, ViewContainerRef } from '@angular/core';
import { ALuPickerPanel } from '@lucca-front/ng/picker';
import { luTransformPopover } from '@lucca-front/ng/popover';
import { merge } from 'rxjs';
import { delay, map, startWith, switchMap } from 'rxjs/operators';
import { ALuTreeOptionItem } from '../item/index';
import { ALuOptionPickerComponent } from './option-picker.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/a11y";
var ToggleMode;
(function (ToggleMode) {
    ToggleMode[ToggleMode["all"] = 0] = "all";
    ToggleMode[ToggleMode["self"] = 1] = "self";
    ToggleMode[ToggleMode["children"] = 2] = "children";
})(ToggleMode || (ToggleMode = {}));
class ALuTreeOptionPickerComponent extends ALuOptionPickerComponent {
    set optionsQL(ql) {
        this._optionsQL = ql;
    }
    set _options$(optionItems$) {
        // reapply selected when the options change
        this._subs.add(optionItems$.subscribe(() => this._applySelected()));
        // subscribe to any option.onSelect
        const singleFlowSelect$ = optionItems$.pipe(switchMap((items) => merge(...items.map((i) => i.onSelect))));
        const singleFlowSelectSelf$ = optionItems$.pipe(switchMap((items) => merge(...items.map((i) => i.onSelectSelf))));
        const singleFlowSelectChildren$ = optionItems$.pipe(switchMap((items) => merge(...items.map((i) => i.onSelectChildren))));
        this._subs.add(singleFlowSelect$.subscribe((option) => this._toggle(option, ToggleMode.all)));
        this._subs.add(singleFlowSelectSelf$.subscribe((option) => this._toggle(option, ToggleMode.self)));
        this._subs.add(singleFlowSelectChildren$.subscribe((option) => this._toggle(option, ToggleMode.children)));
    }
    constructor(_changeDetectorRef, document) {
        super(_changeDetectorRef, document);
    }
    _toggle(option, mod = ToggleMode.all) {
        switch (mod) {
            case ToggleMode.self:
                return this._toggleSelf(option);
            case ToggleMode.children:
                return this._toggleChildren(option);
            default:
                return this._toggleAll(option);
        }
    }
    _toggleAll(option) {
        const value = option.value;
        if (!this.multiple) {
            this._select(value);
            return;
        }
        const allChildren = option.allChildren.map((i) => i.value);
        const values = this._value || [];
        let newValues;
        const selfSelected = values.some((v) => this.optionComparer(v, value));
        const allChildrenSelected = allChildren.every((child) => values.some((v) => this.optionComparer(v, child)));
        if (selfSelected && allChildrenSelected) {
            // remove option and its children
            newValues = this._remove(values, [value, ...allChildren]);
        }
        else {
            // add option and its children
            newValues = this._add(values, [value, ...allChildren]);
        }
        this._select(newValues);
    }
    _toggleSelf(option) {
        const value = option.value;
        if (!this.multiple) {
            this._select(value);
            return;
        }
        const allChildren = option.allChildren.map((i) => i.value);
        const values = this._value || [];
        const selfSelected = values.some((v) => this.optionComparer(v, value));
        const someChildSelected = allChildren.some((child) => values.some((v) => this.optionComparer(v, child)));
        let newValues = this._remove(values, [...allChildren]);
        if (selfSelected && !someChildSelected) {
            // remove option
            newValues = this._remove(newValues, [value]);
        }
        else {
            // add option
            newValues = this._add(newValues, [value]);
        }
        this._select(newValues);
    }
    _toggleChildren(option) {
        const value = option.value;
        if (!this.multiple) {
            this._select(value);
            return;
        }
        const allChildren = option.allChildren.map((i) => i.value);
        const values = this._value || [];
        const selfSelected = values.some((v) => this.optionComparer(v, value));
        let newValues = this._remove(values, [value]);
        const allChildrenSelected = allChildren.every((child) => values.some((v) => this.optionComparer(v, child)));
        if (allChildrenSelected && !selfSelected) {
            newValues = this._remove(newValues, allChildren);
        }
        else {
            newValues = this._add(newValues, allChildren);
        }
        this._select(newValues);
    }
    _add(values, entries) {
        const newEntries = entries.filter((entry) => !values.some((v) => this.optionComparer(v, entry)));
        return [...values, ...newEntries];
    }
    _remove(values, entries) {
        const entriesToKeep = values.filter((value) => !entries.some((e) => this.optionComparer(e, value)));
        return [...entriesToKeep];
    }
    initItems() {
        const items$ = this._optionsQL.changes.pipe(startWith(this._optionsQL), map((q) => q.toArray()), map((roots) => roots.map((r) => [r, ...r.allChildren]).reduce((agg, val) => [...agg, ...val], [])), delay(0));
        this._subs.add(items$.subscribe((o) => (this._options = o || [])));
        this._options$ = items$;
    }
    ngAfterViewInit() {
        this.initItems();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuTreeOptionPickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: ALuTreeOptionPickerComponent, queries: [{ propertyName: "optionsQL", predicate: ALuTreeOptionItem, descendants: true }, { propertyName: "optionsQLVR", predicate: ALuTreeOptionItem, descendants: true, read: ViewContainerRef }], usesInheritance: true, ngImport: i0 }); }
}
export { ALuTreeOptionPickerComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuTreeOptionPickerComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { optionsQL: [{
                type: ContentChildren,
                args: [ALuTreeOptionItem, { descendants: true }]
            }], optionsQLVR: [{
                type: ContentChildren,
                args: [ALuTreeOptionItem, {
                        descendants: true,
                        read: ViewContainerRef,
                    }]
            }] } });
/**
 * basic tree option picker panel
 */
class LuTreeOptionPickerComponent extends ALuTreeOptionPickerComponent {
    constructor(_changeDetectorRef, document) {
        super(_changeDetectorRef, document);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuTreeOptionPickerComponent, isStandalone: true, selector: "lu-tree-option-picker", providers: [
            {
                provide: ALuPickerPanel,
                useExisting: forwardRef(() => LuTreeOptionPickerComponent),
            },
        ], exportAs: ["LuTreeOptionPicker"], usesInheritance: true, ngImport: i0, template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-tree-option-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t[class.mod-multiple]=\"multiple\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\">\n\t\t\t<div class=\"lu-picker-content-option\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</ng-template>\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "ngmodule", type: A11yModule }, { kind: "directive", type: i2.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }], animations: [luTransformPopover], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuTreeOptionPickerComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-tree-option-picker', changeDetection: ChangeDetectionStrategy.OnPush, animations: [luTransformPopover], exportAs: 'LuTreeOptionPicker', standalone: true, imports: [CommonModule, A11yModule], providers: [
                        {
                            provide: ALuPickerPanel,
                            useExisting: forwardRef(() => LuTreeOptionPickerComponent),
                        },
                    ], template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-tree-option-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t[class.mod-multiple]=\"multiple\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\">\n\t\t\t<div class=\"lu-picker-content-option\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,