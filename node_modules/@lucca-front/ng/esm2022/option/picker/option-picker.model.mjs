import { ALuPickerPanel } from '@lucca-front/ng/picker';
import { merge, Subscription } from 'rxjs';
import { switchMap } from 'rxjs/operators';
export class ALuOptionPicker extends ALuPickerPanel {
    constructor() {
        super(...arguments);
        this._subs = new Subscription();
        this.optionComparer = (option1, option2) => JSON.stringify(option1) === JSON.stringify(option2);
    }
    setValue(value) {
        this._value = value;
        this._applySelected();
    }
    get _options$() {
        return this.__options$;
    }
    set _options$(options$) {
        this.__options$ = options$;
        // reapply selected when the options change
        this._subs.add(options$.subscribe(() => {
            this._applySelected();
            this._applyHighlight();
        }));
        // subscribe to any option.onSelect
        const singleFlow$ = options$.pipe(switchMap((items) => merge(...items.map((i) => i.onSelect))));
        this._subs.add(singleFlow$.subscribe((option) => this._toggle(option)));
    }
    _toggle(option) {
        const value = option.value;
        if (!this.multiple) {
            this._select(value);
        }
        else {
            const values = this._value || [];
            let newValues;
            if (values.some((v) => this.optionComparer(v, value))) {
                // value was present, we remove it
                newValues = values.filter((v) => !this.optionComparer(v, value));
            }
            else {
                // value was absent, we add it
                newValues = [...values, value];
            }
            this._select(newValues);
        }
    }
    _select(val) {
        this._emitSelectValue(val);
        if (!this.multiple) {
            this._emitCloseEvent();
        }
    }
    destroy() {
        this._subs.unsubscribe();
    }
    _handleKeydown(event) {
        switch (event.key) {
            case 'Escape':
                this._emitCloseEvent();
                event.preventDefault();
                event.stopPropagation();
                break;
            case 'Tab':
                this._emitCloseEvent();
                break;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLXBpY2tlci5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL29wdGlvbi9waWNrZXIvb3B0aW9uLXBpY2tlci5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFrQixNQUFNLHdCQUF3QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxLQUFLLEVBQWMsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQU8zQyxNQUFNLE9BQWdCLGVBQWtFLFNBQVEsY0FBaUI7SUFBakg7O1FBQ1csVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUF3QjNCLG1CQUFjLEdBQXdCLENBQUMsT0FBVSxFQUFFLE9BQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBNENqSSxDQUFDO0lBakVBLFFBQVEsQ0FBQyxLQUFjO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBYyxTQUFTO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN4QixDQUFDO0lBQ0QsSUFBYyxTQUFTLENBQUMsUUFBeUI7UUFDaEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7UUFDM0IsMkNBQTJDO1FBQzNDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUNiLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN0QixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQ0YsQ0FBQztRQUNGLG1DQUFtQztRQUNuQyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFUyxPQUFPLENBQUMsTUFBUztRQUMxQixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDcEI7YUFBTTtZQUNOLE1BQU0sTUFBTSxHQUFRLElBQUksQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO1lBQ3RDLElBQUksU0FBYyxDQUFDO1lBQ25CLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDdEQsa0NBQWtDO2dCQUNsQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ2pFO2lCQUFNO2dCQUNOLDhCQUE4QjtnQkFDOUIsU0FBUyxHQUFHLENBQUMsR0FBRyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDL0I7WUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3hCO0lBQ0YsQ0FBQztJQUVTLE9BQU8sQ0FBQyxHQUFZO1FBQzdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNuQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDdkI7SUFDRixDQUFDO0lBR1MsT0FBTztRQUNoQixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFDUSxjQUFjLENBQUMsS0FBb0I7UUFDM0MsUUFBUSxLQUFLLENBQUMsR0FBRyxFQUFFO1lBQ2xCLEtBQUssUUFBUTtnQkFDWixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQ3ZCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDdkIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO2dCQUN4QixNQUFNO1lBQ1AsS0FBSyxLQUFLO2dCQUNULElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztnQkFDdkIsTUFBTTtTQUNQO0lBQ0YsQ0FBQztDQUdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQUx1UGlja2VyUGFuZWwsIElMdVBpY2tlclBhbmVsIH0gZnJvbSAnQGx1Y2NhLWZyb250L25nL3BpY2tlcic7XG5pbXBvcnQgeyBtZXJnZSwgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJTHVPcHRpb25JdGVtIH0gZnJvbSAnLi4vaXRlbS9vcHRpb24taXRlbS5tb2RlbCc7XG5cbmV4cG9ydCB0eXBlIElMdU9wdGlvblBpY2tlclBhbmVsPFQ+ID0gSUx1UGlja2VyUGFuZWw8VD47XG5cbmV4cG9ydCB0eXBlIEx1T3B0aW9uQ29tcGFyZXI8VD4gPSAob3B0aW9uMTogVCwgb3B0aW9uMjogVCkgPT4gYm9vbGVhbjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFMdU9wdGlvblBpY2tlcjxULCBPIGV4dGVuZHMgSUx1T3B0aW9uSXRlbTxUPiA9IElMdU9wdGlvbkl0ZW08VD4+IGV4dGVuZHMgQUx1UGlja2VyUGFuZWw8VD4gaW1wbGVtZW50cyBJTHVPcHRpb25QaWNrZXJQYW5lbDxUPiB7XG5cdHByb3RlY3RlZCBfc3VicyA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblx0b3ZlcnJpZGUgb25TZWxlY3RWYWx1ZTogT2JzZXJ2YWJsZTxUIHwgVFtdPjtcblx0cHJvdGVjdGVkIF92YWx1ZTogVCB8IFRbXTtcblx0c2V0VmFsdWUodmFsdWU6IFQgfCBUW10pIHtcblx0XHR0aGlzLl92YWx1ZSA9IHZhbHVlO1xuXHRcdHRoaXMuX2FwcGx5U2VsZWN0ZWQoKTtcblx0fVxuXHRwcml2YXRlIF9fb3B0aW9ucyQ6IE9ic2VydmFibGU8T1tdPjtcblx0cHJvdGVjdGVkIGdldCBfb3B0aW9ucyQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX19vcHRpb25zJDtcblx0fVxuXHRwcm90ZWN0ZWQgc2V0IF9vcHRpb25zJChvcHRpb25zJDogT2JzZXJ2YWJsZTxPW10+KSB7XG5cdFx0dGhpcy5fX29wdGlvbnMkID0gb3B0aW9ucyQ7XG5cdFx0Ly8gcmVhcHBseSBzZWxlY3RlZCB3aGVuIHRoZSBvcHRpb25zIGNoYW5nZVxuXHRcdHRoaXMuX3N1YnMuYWRkKFxuXHRcdFx0b3B0aW9ucyQuc3Vic2NyaWJlKCgpID0+IHtcblx0XHRcdFx0dGhpcy5fYXBwbHlTZWxlY3RlZCgpO1xuXHRcdFx0XHR0aGlzLl9hcHBseUhpZ2hsaWdodCgpO1xuXHRcdFx0fSksXG5cdFx0KTtcblx0XHQvLyBzdWJzY3JpYmUgdG8gYW55IG9wdGlvbi5vblNlbGVjdFxuXHRcdGNvbnN0IHNpbmdsZUZsb3ckID0gb3B0aW9ucyQucGlwZShzd2l0Y2hNYXAoKGl0ZW1zKSA9PiBtZXJnZSguLi5pdGVtcy5tYXAoKGkpID0+IGkub25TZWxlY3QpKSkpO1xuXHRcdHRoaXMuX3N1YnMuYWRkKHNpbmdsZUZsb3ckLnN1YnNjcmliZSgob3B0aW9uKSA9PiB0aGlzLl90b2dnbGUob3B0aW9uKSkpO1xuXHR9XG5cdHByb3RlY3RlZCBvcHRpb25Db21wYXJlcjogTHVPcHRpb25Db21wYXJlcjxUPiA9IChvcHRpb24xOiBULCBvcHRpb24yOiBUKSA9PiBKU09OLnN0cmluZ2lmeShvcHRpb24xKSA9PT0gSlNPTi5zdHJpbmdpZnkob3B0aW9uMik7XG5cdHByb3RlY3RlZCBfdG9nZ2xlKG9wdGlvbjogTykge1xuXHRcdGNvbnN0IHZhbHVlID0gb3B0aW9uLnZhbHVlO1xuXHRcdGlmICghdGhpcy5tdWx0aXBsZSkge1xuXHRcdFx0dGhpcy5fc2VsZWN0KHZhbHVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgdmFsdWVzID0gPFRbXT50aGlzLl92YWx1ZSB8fCBbXTtcblx0XHRcdGxldCBuZXdWYWx1ZXM6IFRbXTtcblx0XHRcdGlmICh2YWx1ZXMuc29tZSgodikgPT4gdGhpcy5vcHRpb25Db21wYXJlcih2LCB2YWx1ZSkpKSB7XG5cdFx0XHRcdC8vIHZhbHVlIHdhcyBwcmVzZW50LCB3ZSByZW1vdmUgaXRcblx0XHRcdFx0bmV3VmFsdWVzID0gdmFsdWVzLmZpbHRlcigodikgPT4gIXRoaXMub3B0aW9uQ29tcGFyZXIodiwgdmFsdWUpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIHZhbHVlIHdhcyBhYnNlbnQsIHdlIGFkZCBpdFxuXHRcdFx0XHRuZXdWYWx1ZXMgPSBbLi4udmFsdWVzLCB2YWx1ZV07XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9zZWxlY3QobmV3VmFsdWVzKTtcblx0XHR9XG5cdH1cblxuXHRwcm90ZWN0ZWQgX3NlbGVjdCh2YWw6IFQgfCBUW10pIHtcblx0XHR0aGlzLl9lbWl0U2VsZWN0VmFsdWUodmFsKTtcblx0XHRpZiAoIXRoaXMubXVsdGlwbGUpIHtcblx0XHRcdHRoaXMuX2VtaXRDbG9zZUV2ZW50KCk7XG5cdFx0fVxuXHR9XG5cdHByb3RlY3RlZCBhYnN0cmFjdCBfYXBwbHlTZWxlY3RlZCgpO1xuXHRwcm90ZWN0ZWQgYWJzdHJhY3QgX2FwcGx5SGlnaGxpZ2h0KCk7XG5cdHByb3RlY3RlZCBkZXN0cm95KCkge1xuXHRcdHRoaXMuX3N1YnMudW5zdWJzY3JpYmUoKTtcblx0fVxuXHRvdmVycmlkZSBfaGFuZGxlS2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuXHRcdHN3aXRjaCAoZXZlbnQua2V5KSB7XG5cdFx0XHRjYXNlICdFc2NhcGUnOlxuXHRcdFx0XHR0aGlzLl9lbWl0Q2xvc2VFdmVudCgpO1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdUYWInOlxuXHRcdFx0XHR0aGlzLl9lbWl0Q2xvc2VFdmVudCgpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHRwcm90ZWN0ZWQgYWJzdHJhY3QgX2VtaXRTZWxlY3RWYWx1ZSh2YWx1ZTogVCB8IFRbXSk7XG59XG4iXX0=