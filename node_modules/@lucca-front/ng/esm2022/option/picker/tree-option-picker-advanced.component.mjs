import { A11yModule } from '@angular/cdk/a11y';
import { CommonModule, DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, Component, ContentChildren, Directive, forwardRef, Inject } from '@angular/core';
import { ALuOnCloseSubscriber, ALuOnOpenSubscriber, ALuOnScrollBottomSubscriber } from '@lucca-front/ng/core';
import { ALuPickerPanel } from '@lucca-front/ng/picker';
import { luTransformPopover } from '@lucca-front/ng/popover';
import { merge } from 'rxjs';
import { first, map, mergeAll, shareReplay, startWith } from 'rxjs/operators';
import { ALuTreeOptionOperator } from '../operator/index';
import { ALuTreeOptionSelector } from '../selector/index';
import { ALuTreeOptionPickerComponent } from './tree-option-picker.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/a11y";
class ALuTreeOptionPickerAdvancedComponent extends ALuTreeOptionPickerComponent {
    set operatorsQL(ql) {
        this._operatorsQL = ql;
    }
    set onOpenSubsQL(ql) {
        this._onOpenSubscribers = ql.toArray();
    }
    set onCloseSubsQL(ql) {
        this._onCloseSubscribers = ql.toArray();
    }
    set onScrollBottomSubsQL(ql) {
        this._onScrollBottomSubscribers = ql.toArray();
    }
    set selectorsQL(ql) {
        this._selectorsQL = ql;
    }
    constructor(_changeDetectorRef, document) {
        super(_changeDetectorRef, document);
        this._operators = [];
        this._onOpenSubscribers = [];
        this._onCloseSubscribers = [];
        this._onScrollBottomSubscribers = [];
        this._selectors = [];
    }
    onScrollBottom() {
        this._onScrollBottomSubscribers.forEach((o) => {
            if (!o.onScrollBottom) {
                return;
            }
            o.onScrollBottom();
        });
    }
    onOpen() {
        this._onOpenSubscribers.forEach((o) => {
            o.onOpen();
        });
        super.onOpen();
    }
    onClose() {
        this._onCloseSubscribers.forEach((o) => {
            o.onClose();
        });
        super.onClose();
    }
    setValue(value) {
        super.setValue(value);
        this._selectors.forEach((s) => s.setValue(value));
    }
    initOperators() {
        const operators = this._operatorsQL.toArray();
        this._operators = operators;
        let options$;
        operators.forEach((operator) => {
            operator.inOptions$ = options$;
            options$ = operator.outOptions$;
        });
        const lastOperator = operators[operators.length - 1];
        if (lastOperator && lastOperator.outOptions$) {
            this.loading$ = lastOperator.outOptions$.pipe(first(), map(() => false), startWith(true), shareReplay());
        }
    }
    initSelectors() {
        this._selectors = this._selectorsQL.toArray();
        this._subs.add(merge(this._selectors.map((s) => s.onSelectValue))
            .pipe(mergeAll())
            .subscribe((values) => {
            this._select(values);
        }));
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.initOperators();
        this.initSelectors();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuTreeOptionPickerAdvancedComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: ALuTreeOptionPickerAdvancedComponent, queries: [{ propertyName: "operatorsQL", predicate: ALuTreeOptionOperator, descendants: true }, { propertyName: "onOpenSubsQL", predicate: ALuOnOpenSubscriber, descendants: true }, { propertyName: "onCloseSubsQL", predicate: ALuOnCloseSubscriber, descendants: true }, { propertyName: "onScrollBottomSubsQL", predicate: ALuOnScrollBottomSubscriber, descendants: true }, { propertyName: "selectorsQL", predicate: ALuTreeOptionSelector, descendants: true }], usesInheritance: true, ngImport: i0 }); }
}
export { ALuTreeOptionPickerAdvancedComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuTreeOptionPickerAdvancedComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { operatorsQL: [{
                type: ContentChildren,
                args: [ALuTreeOptionOperator, { descendants: true }]
            }], onOpenSubsQL: [{
                type: ContentChildren,
                args: [ALuOnOpenSubscriber, { descendants: true }]
            }], onCloseSubsQL: [{
                type: ContentChildren,
                args: [ALuOnCloseSubscriber, { descendants: true }]
            }], onScrollBottomSubsQL: [{
                type: ContentChildren,
                args: [ALuOnScrollBottomSubscriber, { descendants: true }]
            }], selectorsQL: [{
                type: ContentChildren,
                args: [ALuTreeOptionSelector, { descendants: true }]
            }] } });
/**
 * advanced option picker panel
 */
class LuTreeOptionPickerAdvancedComponent extends ALuTreeOptionPickerAdvancedComponent {
    constructor(_changeDetectorRef, document) {
        super(_changeDetectorRef, document);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPickerAdvancedComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuTreeOptionPickerAdvancedComponent, isStandalone: true, selector: "lu-tree-option-picker-advanced", providers: [
            {
                provide: ALuPickerPanel,
                useExisting: forwardRef(() => LuTreeOptionPickerAdvancedComponent),
            },
        ], exportAs: ["LuOptionPicker"], usesInheritance: true, ngImport: i0, template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-tree-option-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t[class.mod-multiple]=\"multiple\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\" luScroll (onScrollBottom)=\"onScrollBottom()\">\n\t\t\t<div class=\"lu-picker-content-option\">\n\t\t\t\t<ng-content [class.is-loading]=\"loading$ | async\"></ng-content>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</ng-template>\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "ngmodule", type: A11yModule }, { kind: "directive", type: i2.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }], animations: [luTransformPopover], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuTreeOptionPickerAdvancedComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPickerAdvancedComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-tree-option-picker-advanced', changeDetection: ChangeDetectionStrategy.OnPush, animations: [luTransformPopover], exportAs: 'LuOptionPicker', standalone: true, imports: [CommonModule, A11yModule], providers: [
                        {
                            provide: ALuPickerPanel,
                            useExisting: forwardRef(() => LuTreeOptionPickerAdvancedComponent),
                        },
                    ], template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-tree-option-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t[class.mod-multiple]=\"multiple\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\" luScroll (onScrollBottom)=\"onScrollBottom()\">\n\t\t\t<div class=\"lu-picker-content-option\">\n\t\t\t\t<ng-content [class.is-loading]=\"loading$ | async\"></ng-content>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,