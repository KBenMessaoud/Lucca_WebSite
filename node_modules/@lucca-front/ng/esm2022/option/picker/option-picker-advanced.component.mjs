import { A11yModule } from '@angular/cdk/a11y';
import { OverlayModule } from '@angular/cdk/overlay';
import { CommonModule, DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, Component, ContentChildren, Directive, forwardRef, Inject } from '@angular/core';
import { ALuOnCloseSubscriber, ALuOnOpenSubscriber, ALuOnScrollBottomSubscriber } from '@lucca-front/ng/core';
import { ALuPickerPanel } from '@lucca-front/ng/picker';
import { luTransformPopover } from '@lucca-front/ng/popover';
import { LuScrollDirective } from '@lucca-front/ng/scroll';
import { merge } from 'rxjs';
import { first, map, mergeAll, shareReplay, startWith } from 'rxjs/operators';
import { LuOptionItemComponent } from '../item';
import { ALuOptionOperator } from '../operator/index';
import { ALuOptionSelector } from '../selector/index';
import { ALuOptionPickerComponent } from './option-picker.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/a11y";
class ALuOptionPickerAdvancedComponent extends ALuOptionPickerComponent {
    set operatorsQL(ql) {
        this._operatorsQL = ql;
    }
    set onOpenSubsQL(ql) {
        this._onOpenSubscribers = ql.toArray();
    }
    set onCloseSubsQL(ql) {
        this._onCloseSubscribers = ql.toArray();
    }
    set onScrollBottomSubsQL(ql) {
        this._onScrollBottomSubscribers = ql.toArray();
    }
    set selectorsQL(ql) {
        this._selectorsQL = ql;
    }
    constructor(_changeDetectorRef, document) {
        super(_changeDetectorRef, document);
        this._operators = [];
        this._onOpenSubscribers = [];
        this._onCloseSubscribers = [];
        this._onScrollBottomSubscribers = [];
        this._selectors = [];
    }
    onScrollBottom() {
        this._onScrollBottomSubscribers.forEach((o) => {
            if (!o.onScrollBottom) {
                return;
            }
            o.onScrollBottom();
        });
    }
    onOpen() {
        this._onOpenSubscribers.forEach((o) => {
            o.onOpen();
        });
        const operators = this._operators || [];
        const lastOperator = operators[operators.length - 1];
        if (lastOperator && lastOperator.outOptions$) {
            this.loading$ = lastOperator.outOptions$.pipe(first(), map(() => false), startWith(true), shareReplay());
        }
        super.onOpen();
    }
    onClose() {
        this._onCloseSubscribers.forEach((o) => {
            o.onClose();
        });
        super.onClose();
    }
    setValue(value) {
        super.setValue(value);
        this._selectors.forEach((s) => s.setValue(value));
    }
    initOperators() {
        const operators = this._operatorsQL.toArray();
        this._operators = operators;
        let options$;
        operators.forEach((operator) => {
            operator.inOptions$ = options$;
            options$ = operator.outOptions$;
        });
    }
    initSelectors() {
        // TODO : FIX changes type
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const selectors$ = this._selectorsQL.changes.pipe(startWith(this._selectorsQL.toArray()));
        this._subs.add(selectors$.subscribe((selectors) => {
            this._selectors = selectors;
            this._selectors.forEach((s) => s.setValue(this._value));
            this._subs.add(merge(this._selectors.map((s) => s.onSelectValue))
                .pipe(mergeAll())
                .subscribe((values) => {
                this._select(values);
            }));
        }));
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.initOperators();
        this.initSelectors();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuOptionPickerAdvancedComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: ALuOptionPickerAdvancedComponent, queries: [{ propertyName: "operatorsQL", predicate: ALuOptionOperator, descendants: true }, { propertyName: "onOpenSubsQL", predicate: ALuOnOpenSubscriber, descendants: true }, { propertyName: "onCloseSubsQL", predicate: ALuOnCloseSubscriber, descendants: true }, { propertyName: "onScrollBottomSubsQL", predicate: ALuOnScrollBottomSubscriber, descendants: true }, { propertyName: "selectorsQL", predicate: ALuOptionSelector, descendants: true }], usesInheritance: true, ngImport: i0 }); }
}
export { ALuOptionPickerAdvancedComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuOptionPickerAdvancedComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { operatorsQL: [{
                type: ContentChildren,
                args: [ALuOptionOperator, { descendants: true }]
            }], onOpenSubsQL: [{
                type: ContentChildren,
                args: [ALuOnOpenSubscriber, { descendants: true }]
            }], onCloseSubsQL: [{
                type: ContentChildren,
                args: [ALuOnCloseSubscriber, { descendants: true }]
            }], onScrollBottomSubsQL: [{
                type: ContentChildren,
                args: [ALuOnScrollBottomSubscriber, { descendants: true }]
            }], selectorsQL: [{
                type: ContentChildren,
                args: [ALuOptionSelector, { descendants: true }]
            }] } });
/**
 * advanced option picker panel
 */
class LuOptionPickerAdvancedComponent extends ALuOptionPickerAdvancedComponent {
    constructor(_changeDetectorRef, document) {
        super(_changeDetectorRef, document);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPickerAdvancedComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuOptionPickerAdvancedComponent, isStandalone: true, selector: "lu-option-picker-advanced", providers: [
            {
                provide: ALuPickerPanel,
                useExisting: forwardRef(() => LuOptionPickerAdvancedComponent),
            },
        ], exportAs: ["LuOptionPickerAdvanced"], usesInheritance: true, ngImport: i0, template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-option-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t[class.mod-multiple]=\"multiple\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div\n\t\t\t[class.is-loading]=\"loading$ | async\"\n\t\t\tclass=\"lu-picker-content\"\n\t\t\t[ngClass]=\"contentClassesMap\"\n\t\t\t[cdkTrapFocus]=\"trapFocus\"\n\t\t\tluScroll\n\t\t\t(onScrollBottom)=\"onScrollBottom()\"\n\t\t>\n\t\t\t<ng-content></ng-content>\n\t\t\t<div *ngIf=\"loading$ | async\" class=\"loading lu-picker-loading\"></div>\n\t\t</div>\n\t</div>\n</ng-template>\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "ngmodule", type: OverlayModule }, { kind: "directive", type: LuScrollDirective, selector: "[luScroll]", inputs: ["debounceTime"], outputs: ["onScroll", "onScrollTop", "onScrollBottom", "onScrollLeft", "onScrollRight"], exportAs: ["luScroll"] }, { kind: "ngmodule", type: A11yModule }, { kind: "directive", type: i2.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }], animations: [luTransformPopover], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuOptionPickerAdvancedComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPickerAdvancedComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-option-picker-advanced', changeDetection: ChangeDetectionStrategy.OnPush, animations: [luTransformPopover], exportAs: 'LuOptionPickerAdvanced', standalone: true, imports: [CommonModule, OverlayModule, LuOptionItemComponent, LuScrollDirective, A11yModule], providers: [
                        {
                            provide: ALuPickerPanel,
                            useExisting: forwardRef(() => LuOptionPickerAdvancedComponent),
                        },
                    ], template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-option-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t[class.mod-multiple]=\"multiple\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div\n\t\t\t[class.is-loading]=\"loading$ | async\"\n\t\t\tclass=\"lu-picker-content\"\n\t\t\t[ngClass]=\"contentClassesMap\"\n\t\t\t[cdkTrapFocus]=\"trapFocus\"\n\t\t\tluScroll\n\t\t\t(onScrollBottom)=\"onScrollBottom()\"\n\t\t>\n\t\t\t<ng-content></ng-content>\n\t\t\t<div *ngIf=\"loading$ | async\" class=\"loading lu-picker-loading\"></div>\n\t\t</div>\n\t</div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,