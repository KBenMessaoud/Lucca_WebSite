import { ChangeDetectionStrategy, Component, forwardRef, Inject, Input, Optional, Self, SkipSelf } from '@angular/core';
import { ALuOnOpenSubscriber } from '@lucca-front/ng/core';
import { ALuTreeOptionOperator } from '@lucca-front/ng/option';
import { Subject } from 'rxjs';
import { ALuDepartmentService, LuDepartmentV3Service } from '../../service/index';
import * as i0 from "@angular/core";
import * as i1 from "../../service/index";
class LuDepartmentFeederComponent extends ALuTreeOptionOperator {
    set appInstanceId(appInstanceId) {
        this._service.appInstanceId = appInstanceId;
    }
    set operations(operations) {
        this._service.operations = operations;
    }
    set filters(filters) {
        this._service.filters = filters;
    }
    constructor(hostService, selfService) {
        super();
        this._out$ = new Subject();
        this._service = hostService || selfService;
        this.outOptions$ = this._out$.asObservable();
    }
    onOpen() {
        this._service.getTrees().subscribe((trees) => this._out$.next(trees));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDepartmentFeederComponent, deps: [{ token: ALuDepartmentService, optional: true, skipSelf: true }, { token: ALuDepartmentService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuDepartmentFeederComponent, isStandalone: true, selector: "lu-department-feeder", inputs: { appInstanceId: "appInstanceId", operations: "operations", filters: "filters" }, providers: [
            {
                provide: ALuTreeOptionOperator,
                useExisting: forwardRef(() => LuDepartmentFeederComponent),
                multi: true,
            },
            {
                provide: ALuDepartmentService,
                useClass: LuDepartmentV3Service,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuDepartmentFeederComponent),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuDepartmentFeederComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDepartmentFeederComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-department-feeder', template: '', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [
                        {
                            provide: ALuTreeOptionOperator,
                            useExisting: forwardRef(() => LuDepartmentFeederComponent),
                            multi: true,
                        },
                        {
                            provide: ALuDepartmentService,
                            useClass: LuDepartmentV3Service,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuDepartmentFeederComponent),
                            multi: true,
                        },
                    ] }]
        }], ctorParameters: function () { return [{ type: i1.LuDepartmentV3Service, decorators: [{
                    type: Inject,
                    args: [ALuDepartmentService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.LuDepartmentV3Service, decorators: [{
                    type: Inject,
                    args: [ALuDepartmentService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { appInstanceId: [{
                type: Input
            }], operations: [{
                type: Input
            }], filters: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwYXJ0bWVudC1mZWVkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvZGVwYXJ0bWVudC9zZWxlY3QvZmVlZGVyL2RlcGFydG1lbnQtZmVlZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxtQkFBbUIsRUFBZ0MsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RixPQUFPLEVBQUUscUJBQXFCLEVBQXlCLE1BQU0sd0JBQXdCLENBQUM7QUFDdEYsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUzQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBRWxGLE1BdUJhLDJCQUE0QixTQUFRLHFCQUFvQztJQUtwRixJQUFhLGFBQWEsQ0FBQyxhQUE4QjtRQUN4RCxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7SUFDN0MsQ0FBQztJQUNELElBQWEsVUFBVSxDQUFDLFVBQW9CO1FBQzNDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBYSxPQUFPLENBQUMsT0FBaUI7UUFDckMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxZQUlDLFdBQWtDLEVBQ0ksV0FBa0M7UUFFeEUsS0FBSyxFQUFFLENBQUM7UUFwQkMsVUFBSyxHQUFHLElBQUksT0FBTyxFQUE0QixDQUFDO1FBcUJ6RCxJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUM7UUFDM0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFDRCxNQUFNO1FBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdkUsQ0FBQzs4R0E3QlcsMkJBQTJCLGtCQWlCOUIsb0JBQW9CLDZDQUlwQixvQkFBb0I7a0dBckJqQiwyQkFBMkIsNkpBakI1QjtZQUNWO2dCQUNDLE9BQU8sRUFBRSxxQkFBcUI7Z0JBQzlCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsMkJBQTJCLENBQUM7Z0JBQzFELEtBQUssRUFBRSxJQUFJO2FBQ1g7WUFDRDtnQkFDQyxPQUFPLEVBQUUsb0JBQW9CO2dCQUM3QixRQUFRLEVBQUUscUJBQXFCO2FBQy9CO1lBQ0Q7Z0JBQ0MsT0FBTyxFQUFFLG1CQUFtQjtnQkFDNUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQztnQkFDMUQsS0FBSyxFQUFFLElBQUk7YUFDWDtTQUNELGlEQW5CUyxFQUFFOztTQXFCQSwyQkFBMkI7MkZBQTNCLDJCQUEyQjtrQkF2QnZDLFNBQVM7K0JBQ0Msc0JBQXNCLFlBQ3RCLEVBQUUsbUJBRUssdUJBQXVCLENBQUMsTUFBTSxjQUNuQyxJQUFJLGFBQ0w7d0JBQ1Y7NEJBQ0MsT0FBTyxFQUFFLHFCQUFxQjs0QkFDOUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsNEJBQTRCLENBQUM7NEJBQzFELEtBQUssRUFBRSxJQUFJO3lCQUNYO3dCQUNEOzRCQUNDLE9BQU8sRUFBRSxvQkFBb0I7NEJBQzdCLFFBQVEsRUFBRSxxQkFBcUI7eUJBQy9CO3dCQUNEOzRCQUNDLE9BQU8sRUFBRSxtQkFBbUI7NEJBQzVCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLDRCQUE0QixDQUFDOzRCQUMxRCxLQUFLLEVBQUUsSUFBSTt5QkFDWDtxQkFDRDs7MEJBbUJDLE1BQU07MkJBQUMsb0JBQW9COzswQkFDM0IsUUFBUTs7MEJBQ1IsUUFBUTs7MEJBRVIsTUFBTTsyQkFBQyxvQkFBb0I7OzBCQUFHLElBQUk7NENBaEJ2QixhQUFhO3NCQUF6QixLQUFLO2dCQUdPLFVBQVU7c0JBQXRCLEtBQUs7Z0JBSU8sT0FBTztzQkFBbkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIGZvcndhcmRSZWYsIEluamVjdCwgSW5wdXQsIE9wdGlvbmFsLCBTZWxmLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQUx1T25PcGVuU3Vic2NyaWJlciwgSUx1T25PcGVuU3Vic2NyaWJlciwgSUx1VHJlZSB9IGZyb20gJ0BsdWNjYS1mcm9udC9uZy9jb3JlJztcbmltcG9ydCB7IEFMdVRyZWVPcHRpb25PcGVyYXRvciwgSUx1VHJlZU9wdGlvbk9wZXJhdG9yIH0gZnJvbSAnQGx1Y2NhLWZyb250L25nL29wdGlvbic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJTHVEZXBhcnRtZW50IH0gZnJvbSAnLi4vLi4vZGVwYXJ0bWVudC5tb2RlbCc7XG5pbXBvcnQgeyBBTHVEZXBhcnRtZW50U2VydmljZSwgTHVEZXBhcnRtZW50VjNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZS9pbmRleCc7XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ2x1LWRlcGFydG1lbnQtZmVlZGVyJyxcblx0dGVtcGxhdGU6ICcnLFxuXHRzdHlsZVVybHM6IFtdLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0cHJvdmlkZXJzOiBbXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQUx1VHJlZU9wdGlvbk9wZXJhdG9yLFxuXHRcdFx0dXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTHVEZXBhcnRtZW50RmVlZGVyQ29tcG9uZW50KSxcblx0XHRcdG11bHRpOiB0cnVlLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQUx1RGVwYXJ0bWVudFNlcnZpY2UsXG5cdFx0XHR1c2VDbGFzczogTHVEZXBhcnRtZW50VjNTZXJ2aWNlLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQUx1T25PcGVuU3Vic2NyaWJlcixcblx0XHRcdHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEx1RGVwYXJ0bWVudEZlZWRlckNvbXBvbmVudCksXG5cdFx0XHRtdWx0aTogdHJ1ZSxcblx0XHR9LFxuXHRdLFxufSlcbmV4cG9ydCBjbGFzcyBMdURlcGFydG1lbnRGZWVkZXJDb21wb25lbnQgZXh0ZW5kcyBBTHVUcmVlT3B0aW9uT3BlcmF0b3I8SUx1RGVwYXJ0bWVudD4gaW1wbGVtZW50cyBJTHVUcmVlT3B0aW9uT3BlcmF0b3I8SUx1RGVwYXJ0bWVudD4sIElMdU9uT3BlblN1YnNjcmliZXIge1xuXHRpbk9wdGlvbnMkOiBPYnNlcnZhYmxlPElMdVRyZWU8SUx1RGVwYXJ0bWVudD5bXT47XG5cdG91dE9wdGlvbnMkOiBPYnNlcnZhYmxlPElMdVRyZWU8SUx1RGVwYXJ0bWVudD5bXT47XG5cdHByb3RlY3RlZCBfb3V0JCA9IG5ldyBTdWJqZWN0PElMdVRyZWU8SUx1RGVwYXJ0bWVudD5bXT4oKTtcblx0cHJvdGVjdGVkIF9zZXJ2aWNlOiBMdURlcGFydG1lbnRWM1NlcnZpY2U7XG5cdEBJbnB1dCgpIHNldCBhcHBJbnN0YW5jZUlkKGFwcEluc3RhbmNlSWQ6IG51bWJlciB8IHN0cmluZykge1xuXHRcdHRoaXMuX3NlcnZpY2UuYXBwSW5zdGFuY2VJZCA9IGFwcEluc3RhbmNlSWQ7XG5cdH1cblx0QElucHV0KCkgc2V0IG9wZXJhdGlvbnMob3BlcmF0aW9uczogbnVtYmVyW10pIHtcblx0XHR0aGlzLl9zZXJ2aWNlLm9wZXJhdGlvbnMgPSBvcGVyYXRpb25zO1xuXHR9XG5cblx0QElucHV0KCkgc2V0IGZpbHRlcnMoZmlsdGVyczogc3RyaW5nW10pIHtcblx0XHR0aGlzLl9zZXJ2aWNlLmZpbHRlcnMgPSBmaWx0ZXJzO1xuXHR9XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0QEluamVjdChBTHVEZXBhcnRtZW50U2VydmljZSlcblx0XHRAT3B0aW9uYWwoKVxuXHRcdEBTa2lwU2VsZigpXG5cdFx0aG9zdFNlcnZpY2U6IEx1RGVwYXJ0bWVudFYzU2VydmljZSxcblx0XHRASW5qZWN0KEFMdURlcGFydG1lbnRTZXJ2aWNlKSBAU2VsZigpIHNlbGZTZXJ2aWNlOiBMdURlcGFydG1lbnRWM1NlcnZpY2UsXG5cdCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5fc2VydmljZSA9IGhvc3RTZXJ2aWNlIHx8IHNlbGZTZXJ2aWNlO1xuXHRcdHRoaXMub3V0T3B0aW9ucyQgPSB0aGlzLl9vdXQkLmFzT2JzZXJ2YWJsZSgpO1xuXHR9XG5cdG9uT3BlbigpIHtcblx0XHR0aGlzLl9zZXJ2aWNlLmdldFRyZWVzKCkuc3Vic2NyaWJlKCh0cmVlcykgPT4gdGhpcy5fb3V0JC5uZXh0KHRyZWVzKSk7XG5cdH1cbn1cbiJdfQ==