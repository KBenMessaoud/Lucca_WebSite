import { Injectable } from '@angular/core';
import { LuApiV3Service } from '@lucca-front/ng/api';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
class LuDepartmentV3Service extends LuApiV3Service {
    set appInstanceId(appInstanceId) {
        if (appInstanceId) {
            this._appInstanceId = appInstanceId;
        }
    }
    set operations(operations) {
        this._operations = operations;
    }
    constructor(_http) {
        super(_http);
        this._http = _http;
        this._api = `/api/v3/departments`;
        this._operations = [];
    }
    getTrees() {
        let call;
        if (this._appInstanceId && this._operations?.length) {
            call = this._http.get(`/api/v3/departments/scopedtree?fields=id,name&${[`appInstanceId=${this._appInstanceId}`, `operations=${this._operations.join(',')}`, this._filters.join(',')].filter((f) => !!f).join('&')}`);
        }
        else {
            call = this._http.get(`/api/v3/departments/tree?fields=id,name&${this._filters.join(',')}`);
        }
        return call.pipe(map((response) => {
            const tree = response.data;
            return tree?.children.map((c) => this.format(c)) ?? [];
        }));
    }
    format(t) {
        return { value: t.node, children: t.children.map((c) => this.format(c)) };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDepartmentV3Service, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDepartmentV3Service }); }
}
export { LuDepartmentV3Service };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDepartmentV3Service, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwYXJ0bWVudC12My5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvZGVwYXJ0bWVudC9zZXJ2aWNlL2RlcGFydG1lbnQtdjMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBa0IsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHckUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFTckMsTUFDYSxxQkFBc0IsU0FBUSxjQUE2QjtJQUd2RSxJQUFJLGFBQWEsQ0FBQyxhQUE4QjtRQUMvQyxJQUFJLGFBQWEsRUFBRTtZQUNsQixJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztTQUNwQztJQUNGLENBQUM7SUFFRCxJQUFJLFVBQVUsQ0FBQyxVQUFvQjtRQUNsQyxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztJQUMvQixDQUFDO0lBRUQsWUFBK0IsS0FBaUI7UUFDL0MsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRGlCLFVBQUssR0FBTCxLQUFLLENBQVk7UUFaN0IsU0FBSSxHQUFHLHFCQUFxQixDQUFDO1FBT3RDLGdCQUFXLEdBQWEsRUFBRSxDQUFDO0lBT3JDLENBQUM7SUFFRCxRQUFRO1FBQ1AsSUFBSSxJQUFnRCxDQUFDO1FBQ3JELElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRTtZQUNwRCxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQ3BCLGlEQUFpRCxDQUFDLGlCQUFpQixJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsY0FBYyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQzdMLENBQUM7U0FDRjthQUFNO1lBQ04sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFpQywyQ0FBMkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzVIO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUNmLEdBQUcsQ0FBQyxDQUFDLFFBQXdDLEVBQTRCLEVBQUU7WUFDMUUsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztZQUMzQixPQUFPLElBQUksRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3hELENBQUMsQ0FBQyxDQUNGLENBQUM7SUFDSCxDQUFDO0lBRU8sTUFBTSxDQUFDLENBQWlCO1FBQy9CLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzNFLENBQUM7OEdBcENXLHFCQUFxQjtrSEFBckIscUJBQXFCOztTQUFyQixxQkFBcUI7MkZBQXJCLHFCQUFxQjtrQkFEakMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJTHVBcGlSZXNwb25zZSwgTHVBcGlWM1NlcnZpY2UgfSBmcm9tICdAbHVjY2EtZnJvbnQvbmcvYXBpJztcbmltcG9ydCB7IElMdVRyZWUgfSBmcm9tICdAbHVjY2EtZnJvbnQvbmcvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJTHVEZXBhcnRtZW50IH0gZnJvbSAnLi4vZGVwYXJ0bWVudC5tb2RlbCc7XG5pbXBvcnQgeyBJTHVEZXBhcnRtZW50U2VydmljZSB9IGZyb20gJy4vZGVwYXJ0bWVudC1zZXJ2aWNlLm1vZGVsJztcblxuZXhwb3J0IGludGVyZmFjZSBJQXBpRGVwYXJ0bWVudCB7XG5cdG5vZGU6IElMdURlcGFydG1lbnQ7XG5cdGNoaWxkcmVuOiBJQXBpRGVwYXJ0bWVudFtdO1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTHVEZXBhcnRtZW50VjNTZXJ2aWNlIGV4dGVuZHMgTHVBcGlWM1NlcnZpY2U8SUx1RGVwYXJ0bWVudD4gaW1wbGVtZW50cyBJTHVEZXBhcnRtZW50U2VydmljZTxJTHVEZXBhcnRtZW50PiB7XG5cdHByb3RlY3RlZCBvdmVycmlkZSBfYXBpID0gYC9hcGkvdjMvZGVwYXJ0bWVudHNgO1xuXHRwcm90ZWN0ZWQgX2FwcEluc3RhbmNlSWQ6IG51bWJlciB8IHN0cmluZztcblx0c2V0IGFwcEluc3RhbmNlSWQoYXBwSW5zdGFuY2VJZDogbnVtYmVyIHwgc3RyaW5nKSB7XG5cdFx0aWYgKGFwcEluc3RhbmNlSWQpIHtcblx0XHRcdHRoaXMuX2FwcEluc3RhbmNlSWQgPSBhcHBJbnN0YW5jZUlkO1xuXHRcdH1cblx0fVxuXHRwcm90ZWN0ZWQgX29wZXJhdGlvbnM6IG51bWJlcltdID0gW107XG5cdHNldCBvcGVyYXRpb25zKG9wZXJhdGlvbnM6IG51bWJlcltdKSB7XG5cdFx0dGhpcy5fb3BlcmF0aW9ucyA9IG9wZXJhdGlvbnM7XG5cdH1cblxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgb3ZlcnJpZGUgX2h0dHA6IEh0dHBDbGllbnQpIHtcblx0XHRzdXBlcihfaHR0cCk7XG5cdH1cblxuXHRnZXRUcmVlcygpIHtcblx0XHRsZXQgY2FsbDogT2JzZXJ2YWJsZTxJTHVBcGlSZXNwb25zZTxJQXBpRGVwYXJ0bWVudD4+O1xuXHRcdGlmICh0aGlzLl9hcHBJbnN0YW5jZUlkICYmIHRoaXMuX29wZXJhdGlvbnM/Lmxlbmd0aCkge1xuXHRcdFx0Y2FsbCA9IHRoaXMuX2h0dHAuZ2V0PElMdUFwaVJlc3BvbnNlPElBcGlEZXBhcnRtZW50Pj4oXG5cdFx0XHRcdGAvYXBpL3YzL2RlcGFydG1lbnRzL3Njb3BlZHRyZWU/ZmllbGRzPWlkLG5hbWUmJHtbYGFwcEluc3RhbmNlSWQ9JHt0aGlzLl9hcHBJbnN0YW5jZUlkfWAsIGBvcGVyYXRpb25zPSR7dGhpcy5fb3BlcmF0aW9ucy5qb2luKCcsJyl9YCwgdGhpcy5fZmlsdGVycy5qb2luKCcsJyldLmZpbHRlcigoZikgPT4gISFmKS5qb2luKCcmJyl9YCxcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNhbGwgPSB0aGlzLl9odHRwLmdldDxJTHVBcGlSZXNwb25zZTxJQXBpRGVwYXJ0bWVudD4+KGAvYXBpL3YzL2RlcGFydG1lbnRzL3RyZWU/ZmllbGRzPWlkLG5hbWUmJHt0aGlzLl9maWx0ZXJzLmpvaW4oJywnKX1gKTtcblx0XHR9XG5cdFx0cmV0dXJuIGNhbGwucGlwZShcblx0XHRcdG1hcCgocmVzcG9uc2U6IElMdUFwaVJlc3BvbnNlPElBcGlEZXBhcnRtZW50Pik6IElMdVRyZWU8SUx1RGVwYXJ0bWVudD5bXSA9PiB7XG5cdFx0XHRcdGNvbnN0IHRyZWUgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRyZXR1cm4gdHJlZT8uY2hpbGRyZW4ubWFwKChjKSA9PiB0aGlzLmZvcm1hdChjKSkgPz8gW107XG5cdFx0XHR9KSxcblx0XHQpO1xuXHR9XG5cblx0cHJpdmF0ZSBmb3JtYXQodDogSUFwaURlcGFydG1lbnQpOiBJTHVUcmVlPElMdURlcGFydG1lbnQ+IHtcblx0XHRyZXR1cm4geyB2YWx1ZTogdC5ub2RlLCBjaGlsZHJlbjogdC5jaGlsZHJlbi5tYXAoKGMpID0+IHRoaXMuZm9ybWF0KGMpKSB9O1xuXHR9XG59XG4iXX0=