import { OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { Injector } from '@angular/core';
import { Subject, Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';
import { LU_POPUP_DATA } from './popup.token';
export class ALuPopupRef {
    constructor(_overlay, _injector, _component, _config) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._component = _component;
        this._config = _config;
        this.onOpen = new Subject();
        this.onClose = new Subject();
        this.onDismiss = new Subject();
        this.onBackdropClick = new Subject();
        this._subs = new Subscription();
    }
    open(data) {
        this._createOverlay();
        this._openPopup(data);
        this._subToCloseEvents();
        this.onOpen.next(data);
        this.onOpen.complete();
    }
    close(result) {
        this.onClose.next(result);
        this._destroy();
    }
    dismiss() {
        this.onDismiss.next();
        this._destroy();
    }
    /**
     *  This method creates the overlay from the provided popover's template and saves its
     *  OverlayRef so that it can be attached to the DOM when openPopover is called.
     */
    _createOverlay() {
        if (!this._overlayRef) {
            const overlayConfig = this._getOverlayConfig();
            this._overlayRef = this._overlay.create(overlayConfig);
        }
    }
    /**
     * This method builds the configuration object needed to create the overlay, the OverlayConfig.
     * @returns OverlayConfig
     */
    _getOverlayConfig() {
        const overlayConfig = new OverlayConfig();
        switch (this._config.position) {
            case 'top':
                overlayConfig.positionStrategy = this._overlay.position().global().centerHorizontally().top('0');
                break;
            case 'bottom':
                overlayConfig.positionStrategy = this._overlay.position().global().centerHorizontally().bottom('0');
                break;
            case 'left':
                overlayConfig.positionStrategy = this._overlay.position().global().centerVertically().left('0');
                break;
            case 'right':
                overlayConfig.positionStrategy = this._overlay.position().global().centerVertically().right('0');
                break;
            case 'center':
            default:
                overlayConfig.positionStrategy = this._overlay.position().global().centerHorizontally().centerVertically();
                break;
        }
        overlayConfig.hasBackdrop = !this._config.noBackdrop;
        overlayConfig.backdropClass = this._config.backdropClass;
        overlayConfig.panelClass = this._getOverlayPanelClasses();
        overlayConfig.scrollStrategy = this._overlay.scrollStrategies.block();
        return overlayConfig;
    }
    _openPopup(data) {
        const injector = Injector.create({
            providers: [
                { provide: ALuPopupRef, useValue: this },
                { provide: LU_POPUP_DATA, useValue: data },
            ],
            parent: this._injector,
        });
        const portal = new ComponentPortal(this._component, undefined, injector);
        this._componentRef = this._overlayRef.attach(portal);
    }
    _getOverlayPanelClasses() {
        const panelClasses = [];
        if (Array.isArray(this._config.panelClass)) {
            panelClasses.push(...this._config.panelClass);
        }
        else {
            panelClasses.push(this._config.panelClass);
        }
        panelClasses.push(`mod-${this._config.size}`);
        return panelClasses;
    }
    _destroy() {
        this._cleanSubscription();
        this._closePopup();
        this._destroyOverlay();
        this._completeSubjects();
    }
    _completeSubjects() {
        this.onClose.complete();
        this.onOpen.complete();
        this.onDismiss.complete();
        this.onBackdropClick.complete();
    }
    _destroyOverlay() {
        this._overlayRef.detachBackdrop();
        this._overlayRef.detach();
    }
    _closePopup() {
        this._componentRef.destroy();
    }
    _subToCloseEvents() {
        if (!this._config.undismissable) {
            this._subToEscapeKeydownEvent();
        }
        this._subToBackdropClickEvent();
    }
    _subToEscapeKeydownEvent() {
        const escPressed$ = this._overlayRef.keydownEvents().pipe(filter(({ key }) => key === 'Escape'));
        this._subs.add(escPressed$.subscribe((_e) => this.dismiss()));
    }
    _subToBackdropClickEvent() {
        const bdClicked$ = this._overlayRef.backdropClick();
        const bdClickedSub = bdClicked$.subscribe((_e) => {
            this.onBackdropClick.next();
            if (!this._config.undismissable) {
                this.dismiss();
            }
        });
        this._subs.add(bdClickedSub);
    }
    _cleanSubscription() {
        this._subs.unsubscribe();
    }
}
//# sourceMappingURL=data:application/json;base64,