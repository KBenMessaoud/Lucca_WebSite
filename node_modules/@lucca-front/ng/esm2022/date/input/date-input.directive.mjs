import { Directive, forwardRef, HostListener, Input } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ELuDateGranularity, getIntl } from '@lucca-front/ng/core';
import { ALuInput } from '@lucca-front/ng/input';
import { LU_DATE_INPUT_TRANSLATIONS } from './date-input.translate';
import * as i0 from "@angular/core";
import * as i1 from "@lucca-front/ng/core";
class LuDateInputDirective extends ALuInput {
    set placeholder(p) {
        this._elementRef.nativeElement.placeholder = p;
    }
    constructor(_changeDetectorRef, _elementRef, _renderer, _adapter) {
        super(_changeDetectorRef, _elementRef, _renderer);
        this._adapter = _adapter;
        this._focused = false;
        this.granularity = ELuDateGranularity.day;
        this._intl = getIntl(LU_DATE_INPUT_TRANSLATIONS);
    }
    ngOnInit() {
        switch (this.granularity) {
            case ELuDateGranularity.year:
                this.placeholder = this._intl.placeholderYear;
                break;
            case ELuDateGranularity.month:
                this.placeholder = this._intl.placeholderMonth;
                break;
            case ELuDateGranularity.day:
            default:
                this.placeholder = this._intl.placeholderDay;
                break;
        }
    }
    render() {
        if (this._focused) {
            return;
        }
        let format;
        switch (this.granularity) {
            case ELuDateGranularity.year:
                format = this._intl.formatYear;
                break;
            case ELuDateGranularity.month:
                format = this._intl.formatMonth;
                break;
            case ELuDateGranularity.day:
            default:
                format = this._intl.formatDay;
                break;
        }
        const text = this.value && this._adapter.isValid(this.value) ? this._adapter.format(this.value, format) : '';
        this._elementRef.nativeElement.value = text;
    }
    onInput(event) {
        // FIXME
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        const text = event.target.value;
        const value = this.parse(text);
        this.setValue(value);
    }
    parse(text) {
        const date = this._adapter.parse(text, this.granularity);
        return date;
    }
    onFocus() {
        this._focused = true;
    }
    onBlur() {
        this._focused = false;
        this.render();
    }
    validate(control) {
        const d = control.value;
        if (!d) {
            return null;
        }
        if (!this._adapter.isValid(d)) {
            return { date: true };
        }
        if (!!this.min && this._adapter.isValid(this.min) && this._adapter.compare(this.min, d, ELuDateGranularity.day) > 0) {
            return { min: true };
        }
        if (!!this.max && this._adapter.isValid(this.max) && this._adapter.compare(this.max, d, ELuDateGranularity.day) < 0) {
            return { max: true };
        }
        return null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateInputDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.ALuDateAdapter }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuDateInputDirective, isStandalone: true, selector: "input[luDateInput]", inputs: { min: "min", max: "max", granularity: "granularity", placeholder: "placeholder" }, host: { listeners: { "input": "onInput($event)", "focus": "onFocus()", "blur": "onBlur()" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => LuDateInputDirective),
                multi: true,
            },
            {
                provide: NG_VALIDATORS,
                useExisting: LuDateInputDirective,
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0 }); }
}
export { LuDateInputDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateInputDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[luDateInput]',
                    standalone: true,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => LuDateInputDirective),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: LuDateInputDirective,
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.ALuDateAdapter }]; }, propDecorators: { min: [{
                type: Input
            }], max: [{
                type: Input
            }], granularity: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], onInput: [{
                type: HostListener,
                args: ['input', ['$event']]
            }], onFocus: [{
                type: HostListener,
                args: ['focus']
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }] } });
//# sourceMappingURL=data:application/json;base64,