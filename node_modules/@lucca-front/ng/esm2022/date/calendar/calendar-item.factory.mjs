import { Injectable } from '@angular/core';
import { DayItem, DecadeItem, MonthItem, YearItem } from './calendar-item.class';
import * as i0 from "@angular/core";
import * as i1 from "@lucca-front/ng/core";
class LuCalendarItemFactory {
    constructor(_adapter) {
        this._adapter = _adapter;
    }
    forgeDay(d, format = 'd') {
        const date = this._adapter.clone(d);
        return new DayItem(date, this._adapter.format(date, format));
    }
    forgeMonth(d, format = 'MMM') {
        const year = this._adapter.getYear(d);
        const month = this._adapter.getMonth(d);
        const monthStart = this._adapter.forge(year, month, 1);
        return new MonthItem(monthStart, this._adapter.format(monthStart, format));
    }
    forgeYear(d, format = 'y') {
        const year = this._adapter.getYear(d);
        const yearStart = this._adapter.forge(year, 1, 1);
        return new YearItem(yearStart, this._adapter.format(yearStart, format));
    }
    forgeDecade(d, format = 'y') {
        const year = this._adapter.getYear(d);
        const decadeStart = this._adapter.forge(10 * Math.floor(year / 10), 1, 1);
        const decadeEnd = this._adapter.forge(10 * Math.floor(year / 10) + 9, 1, 1);
        const label = `${this._adapter.format(decadeStart, format)} - ${this._adapter.format(decadeEnd, format)}`;
        return new DecadeItem(decadeStart, label);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuCalendarItemFactory, deps: [{ token: i1.ALuDateAdapter }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuCalendarItemFactory }); }
}
export { LuCalendarItemFactory };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuCalendarItemFactory, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ALuDateAdapter }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItaXRlbS5mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvZGF0ZS9jYWxlbmRhci9jYWxlbmRhci1pdGVtLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7OztBQUVqRixNQUNhLHFCQUFxQjtJQUNqQyxZQUFvQixRQUEyQjtRQUEzQixhQUFRLEdBQVIsUUFBUSxDQUFtQjtJQUFHLENBQUM7SUFDbkQsUUFBUSxDQUFDLENBQUksRUFBRSxNQUFNLEdBQUcsR0FBRztRQUMxQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBQ0QsVUFBVSxDQUFDLENBQUksRUFBRSxNQUFNLEdBQUcsS0FBSztRQUM5QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sSUFBSSxTQUFTLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFDRCxTQUFTLENBQUMsQ0FBSSxFQUFFLE1BQU0sR0FBRyxHQUFHO1FBQzNCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEQsT0FBTyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUNELFdBQVcsQ0FBQyxDQUFJLEVBQUUsTUFBTSxHQUFHLEdBQUc7UUFDN0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMxRSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1RSxNQUFNLEtBQUssR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUMxRyxPQUFPLElBQUksVUFBVSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMzQyxDQUFDOzhHQXZCVyxxQkFBcUI7a0hBQXJCLHFCQUFxQjs7U0FBckIscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBRGpDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBTHVEYXRlQWRhcHRlciB9IGZyb20gJ0BsdWNjYS1mcm9udC9uZy9jb3JlJztcbmltcG9ydCB7IERheUl0ZW0sIERlY2FkZUl0ZW0sIE1vbnRoSXRlbSwgWWVhckl0ZW0gfSBmcm9tICcuL2NhbGVuZGFyLWl0ZW0uY2xhc3MnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTHVDYWxlbmRhckl0ZW1GYWN0b3J5PEQ+IHtcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBfYWRhcHRlcjogQUx1RGF0ZUFkYXB0ZXI8RD4pIHt9XG5cdGZvcmdlRGF5KGQ6IEQsIGZvcm1hdCA9ICdkJyk6IERheUl0ZW08RD4ge1xuXHRcdGNvbnN0IGRhdGUgPSB0aGlzLl9hZGFwdGVyLmNsb25lKGQpO1xuXHRcdHJldHVybiBuZXcgRGF5SXRlbShkYXRlLCB0aGlzLl9hZGFwdGVyLmZvcm1hdChkYXRlLCBmb3JtYXQpKTtcblx0fVxuXHRmb3JnZU1vbnRoKGQ6IEQsIGZvcm1hdCA9ICdNTU0nKTogTW9udGhJdGVtPEQ+IHtcblx0XHRjb25zdCB5ZWFyID0gdGhpcy5fYWRhcHRlci5nZXRZZWFyKGQpO1xuXHRcdGNvbnN0IG1vbnRoID0gdGhpcy5fYWRhcHRlci5nZXRNb250aChkKTtcblx0XHRjb25zdCBtb250aFN0YXJ0ID0gdGhpcy5fYWRhcHRlci5mb3JnZSh5ZWFyLCBtb250aCwgMSk7XG5cdFx0cmV0dXJuIG5ldyBNb250aEl0ZW0obW9udGhTdGFydCwgdGhpcy5fYWRhcHRlci5mb3JtYXQobW9udGhTdGFydCwgZm9ybWF0KSk7XG5cdH1cblx0Zm9yZ2VZZWFyKGQ6IEQsIGZvcm1hdCA9ICd5Jyk6IFllYXJJdGVtPEQ+IHtcblx0XHRjb25zdCB5ZWFyID0gdGhpcy5fYWRhcHRlci5nZXRZZWFyKGQpO1xuXHRcdGNvbnN0IHllYXJTdGFydCA9IHRoaXMuX2FkYXB0ZXIuZm9yZ2UoeWVhciwgMSwgMSk7XG5cdFx0cmV0dXJuIG5ldyBZZWFySXRlbSh5ZWFyU3RhcnQsIHRoaXMuX2FkYXB0ZXIuZm9ybWF0KHllYXJTdGFydCwgZm9ybWF0KSk7XG5cdH1cblx0Zm9yZ2VEZWNhZGUoZDogRCwgZm9ybWF0ID0gJ3knKTogRGVjYWRlSXRlbTxEPiB7XG5cdFx0Y29uc3QgeWVhciA9IHRoaXMuX2FkYXB0ZXIuZ2V0WWVhcihkKTtcblx0XHRjb25zdCBkZWNhZGVTdGFydCA9IHRoaXMuX2FkYXB0ZXIuZm9yZ2UoMTAgKiBNYXRoLmZsb29yKHllYXIgLyAxMCksIDEsIDEpO1xuXHRcdGNvbnN0IGRlY2FkZUVuZCA9IHRoaXMuX2FkYXB0ZXIuZm9yZ2UoMTAgKiBNYXRoLmZsb29yKHllYXIgLyAxMCkgKyA5LCAxLCAxKTtcblx0XHRjb25zdCBsYWJlbCA9IGAke3RoaXMuX2FkYXB0ZXIuZm9ybWF0KGRlY2FkZVN0YXJ0LCBmb3JtYXQpfSAtICR7dGhpcy5fYWRhcHRlci5mb3JtYXQoZGVjYWRlRW5kLCBmb3JtYXQpfWA7XG5cdFx0cmV0dXJuIG5ldyBEZWNhZGVJdGVtKGRlY2FkZVN0YXJ0LCBsYWJlbCk7XG5cdH1cbn1cbiJdfQ==