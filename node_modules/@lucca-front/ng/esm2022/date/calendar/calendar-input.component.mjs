import { CommonModule, FormStyle, getLocaleDayNames, getLocaleFirstDayOfWeek, TranslationWidth } from '@angular/common';
import { ChangeDetectionStrategy, Component, forwardRef, Inject, Input, LOCALE_ID } from '@angular/core';
import { FormsModule, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ELuDateGranularity } from '@lucca-front/ng/core';
import { ALuInput } from '@lucca-front/ng/input';
import { LuCalendarItemFactory } from './calendar-item.factory';
import * as i0 from "@angular/core";
import * as i1 from "./calendar-item.factory";
import * as i2 from "@lucca-front/ng/core";
import * as i3 from "@angular/common";
class LuCalendarInputComponent extends ALuInput {
    get mod() {
        switch (this.viewGranularity) {
            case ELuDateGranularity.year:
                return 'mod-yearlyView';
            case ELuDateGranularity.month:
                return 'mod-monthlyView';
            case ELuDateGranularity.day:
            default:
                return 'mod-dailyView';
        }
    }
    constructor(_changeDetectorRef, _elementRef, _renderer, _locale, _factory, _adapter) {
        super(_changeDetectorRef, _elementRef, _renderer);
        this._locale = _locale;
        this._factory = _factory;
        this._adapter = _adapter;
        this.granularity = ELuDateGranularity.day;
        this.startOn = this._adapter.forgeToday();
        this.items = [];
        // daily view
        this.labels = [];
    }
    ngOnInit() {
        this.viewGranularity = this.granularity;
        this.initDayLabels();
    }
    writeValue(value) {
        const date = value && this._adapter.isValid(value) ? this._adapter.clone(value) : this.startOn;
        this.header = this._factory.forgeMonth(date);
        super.writeValue(value);
    }
    initDayLabels() {
        this.labels = [...getLocaleDayNames(this._locale, FormStyle.Standalone, TranslationWidth.Abbreviated)];
        if (getLocaleFirstDayOfWeek(this._locale) === 1) {
            this.labels.push(this.labels.shift());
        }
    }
    render() {
        switch (this.viewGranularity) {
            case ELuDateGranularity.year:
                this.renderYearlyView();
                break;
            case ELuDateGranularity.month:
                this.renderMonthlyView();
                break;
            case ELuDateGranularity.day:
            default:
                this.renderDailyView();
                break;
        }
    }
    renderDailyView(month = this.header.date) {
        this.items = [];
        const start = this._adapter.forge(this._adapter.getYear(month), this._adapter.getMonth(month), 1);
        let index = 0;
        const isFirstDayOfWeek = this._adapter.getDay(start) === getLocaleFirstDayOfWeek(this._locale);
        this.header = this._factory.forgeMonth(month, 'MMMM y');
        if (!isFirstDayOfWeek) {
            const offset = (this._adapter.getDay(start) - getLocaleFirstDayOfWeek(this._locale) + 7) % 7;
            index = -1 * offset;
        }
        // TODO
        let isFDOW = false;
        let isNextMonth = false;
        do {
            const d = this._adapter.add(start, index++, ELuDateGranularity.day);
            const day = this._factory.forgeDay(d);
            isNextMonth = this._adapter.compare(d, month, ELuDateGranularity.month) > 0;
            isFDOW = this._adapter.getDay(d) === getLocaleFirstDayOfWeek(this._locale);
            this.items.push(day);
        } while (!isFDOW || !isNextMonth);
        this.applyDailyMods();
    }
    renderMonthlyView(year = this.header.date) {
        this.header = this._factory.forgeYear(year);
        this.items = [...Array(12).keys()].map((i) => {
            const d = this._adapter.forge(this._adapter.getYear(year), i + 1, 1);
            return this._factory.forgeMonth(d);
        });
        this.applyMonthlyMods();
    }
    renderYearlyView(decade = this.header.date) {
        const year = Math.floor(this._adapter.getYear(decade) / 10) * 10;
        const d = this._adapter.forge(year, 1, 1);
        this.header = this._factory.forgeDecade(d);
        this.items = [...Array(10).keys()].map((i) => {
            const y = this._adapter.forge(year + i, 1, 1);
            return this._factory.forgeYear(y);
        });
        this.applyYearlyMods();
    }
    applyDailyMods() {
        const month = this.header.date;
        const today = this._adapter.forgeToday();
        const min = this.min && this._adapter.isValid(this.min) ? this.min : undefined;
        const max = this.max && this._adapter.isValid(this.max) ? this.max : undefined;
        this.items.forEach((item) => {
            const day = item.date;
            if (this._adapter.compare(day, month, ELuDateGranularity.month) < 0) {
                item.mods.push('is-previousMonth');
            }
            if (this._adapter.compare(day, month, ELuDateGranularity.month) > 0) {
                item.mods.push('is-nextMonth');
            }
            if (this._adapter.compare(day, today, ELuDateGranularity.day) === 0) {
                item.mods.push('is-today');
            }
            if (this.value && this._adapter.isValid(this.value) && this._adapter.compare(day, this.value, ELuDateGranularity.day) === 0) {
                item.mods.push('is-active');
            }
            if (min && this._adapter.compare(day, min, ELuDateGranularity.day) < 0) {
                item.isDisabled = true;
            }
            if (max && this._adapter.compare(day, max, ELuDateGranularity.day) > 0) {
                item.isDisabled = true;
            }
        });
    }
    applyMonthlyMods() {
        const today = this._adapter.forgeToday();
        const min = this.min && this._adapter.isValid(this.min) ? this.min : undefined;
        const max = this.max && this._adapter.isValid(this.max) ? this.max : undefined;
        this.items.forEach((item) => {
            const month = item.date;
            if (this._adapter.compare(month, today, ELuDateGranularity.month) === 0) {
                item.mods.push('is-today');
            }
            if (this.value && this._adapter.isValid(this.value) && this._adapter.compare(month, this.value, ELuDateGranularity.month) === 0) {
                item.mods.push('is-active');
            }
            if (min && this._adapter.compare(month, min, ELuDateGranularity.month) < 0) {
                item.isDisabled = true;
            }
            if (max && this._adapter.compare(month, max, ELuDateGranularity.month) > 0) {
                item.isDisabled = true;
            }
        });
    }
    applyYearlyMods() {
        const today = this._adapter.forgeToday();
        const min = this.min && this._adapter.isValid(this.min) ? this.min : undefined;
        const max = this.max && this._adapter.isValid(this.max) ? this.max : undefined;
        this.items.forEach((item) => {
            const year = item.date;
            if (this._adapter.compare(year, today, ELuDateGranularity.year) === 0) {
                item.mods.push('is-today');
            }
            if (this.value && this._adapter.isValid(this.value) && this._adapter.compare(year, this.value, ELuDateGranularity.year) === 0) {
                item.mods.push('is-active');
            }
            if (min && this._adapter.compare(year, min, ELuDateGranularity.year) < 0) {
                item.isDisabled = true;
            }
            if (max && this._adapter.compare(year, max, ELuDateGranularity.year) > 0) {
                item.isDisabled = true;
            }
        });
    }
    select(item) {
        switch (this.viewGranularity) {
            case ELuDateGranularity.year:
                this.selectYear(item);
                break;
            case ELuDateGranularity.month:
                this.selectMonth(item);
                break;
            case ELuDateGranularity.day:
            default:
                this.selectDay(item);
                break;
        }
    }
    selectDay(item) {
        const year = this._adapter.getYear(item.date);
        const month = this._adapter.getMonth(item.date);
        const d = this._adapter.forge(year, month, 1);
        this.header = this._factory.forgeMonth(d);
        this.setValue(item.date);
    }
    selectMonth(item) {
        if (this.granularity === ELuDateGranularity.month) {
            this.setValue(item.date);
        }
        else {
            this.header = item;
            this.viewGranularity = ELuDateGranularity.day;
            this.render();
        }
    }
    selectYear(item) {
        if (this.granularity === ELuDateGranularity.year) {
            this.setValue(item.date);
        }
        else {
            this.header = item;
            this.viewGranularity = ELuDateGranularity.month;
            this.render();
        }
    }
    previous() {
        switch (this.viewGranularity) {
            case ELuDateGranularity.year:
                this.previousDecade();
                break;
            case ELuDateGranularity.month:
                this.previousYear();
                break;
            case ELuDateGranularity.day:
            default:
                this.previousMonth();
                break;
        }
        this.render();
    }
    next() {
        switch (this.viewGranularity) {
            case ELuDateGranularity.year:
                this.nextDecade();
                break;
            case ELuDateGranularity.month:
                this.nextYear();
                break;
            case ELuDateGranularity.day:
            default:
                this.nextMonth();
                break;
        }
        this.render();
    }
    trackBy(_idx, item) {
        return item.id;
    }
    increaseGranularity() {
        if (this.header.granularity !== ELuDateGranularity.decade) {
            this.viewGranularity = this.header.granularity;
            this.render();
        }
    }
    nextMonth() {
        const d = this._adapter.add(this.header.date, 1, ELuDateGranularity.month);
        this.header = this._factory.forgeMonth(d);
    }
    nextYear() {
        const d = this._adapter.add(this.header.date, 1, ELuDateGranularity.year);
        this.header = this._factory.forgeYear(d);
    }
    nextDecade() {
        const d = this._adapter.add(this.header.date, 1, ELuDateGranularity.decade);
        this.header = this._factory.forgeDecade(d);
    }
    previousMonth() {
        const d = this._adapter.add(this.header.date, -1, ELuDateGranularity.month);
        this.header = this._factory.forgeMonth(d);
    }
    previousYear() {
        const d = this._adapter.add(this.header.date, -1, ELuDateGranularity.year);
        this.header = this._factory.forgeYear(d);
    }
    previousDecade() {
        const d = this._adapter.add(this.header.date, -1, ELuDateGranularity.decade);
        this.header = this._factory.forgeDecade(d);
    }
    validate(control) {
        const d = control.value;
        if (!d) {
            return null;
        }
        if (!this._adapter.isValid(d)) {
            return { date: true };
        }
        if (!!this.min && this._adapter.isValid(this.min) && this._adapter.compare(this.min, d, ELuDateGranularity.day) > 0) {
            return { min: true };
        }
        if (!!this.max && this._adapter.isValid(this.max) && this._adapter.compare(this.max, d, ELuDateGranularity.day) < 0) {
            return { max: true };
        }
        return null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuCalendarInputComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: LOCALE_ID }, { token: i1.LuCalendarItemFactory }, { token: i2.ALuDateAdapter }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuCalendarInputComponent, isStandalone: true, selector: "lu-calendar", inputs: { min: "min", max: "max", granularity: "granularity", startOn: "startOn" }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => LuCalendarInputComponent),
                multi: true,
            },
            {
                provide: NG_VALIDATORS,
                useExisting: LuCalendarInputComponent,
                multi: true,
            },
            LuCalendarItemFactory,
        ], usesInheritance: true, ngImport: i0, template: "<section class=\"calendar\">\n\t<header class=\"calendar-header\">\n\t\t<button type=\"button\" class=\"actionIcon mod-S\" (click)=\"previous()\">\n\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon icon-arrowChevronLeft\"></span>\n\t\t\t<span class=\"u-mask\">Previous</span>\n\t\t</button>\n\t\t<button type=\"button\" class=\"calendar-header-date\" (click)=\"increaseGranularity()\">{{ header.label }}</button>\n\t\t<button type=\"button\" class=\"actionIcon mod-S\" (click)=\"next()\">\n\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon icon-arrowChevronRight\"></span>\n\t\t\t<span class=\"u-mask\">Next</span>\n\t\t</button>\n\t</header>\n\t<section class=\"calendar-labels\" [ngClass]=\"mod\">\n\t\t<div class=\"calendar-labels-item\" *ngFor=\"let label of labels\">{{ label }}</div>\n\t</section>\n\t<section class=\"calendar-grid\" [ngClass]=\"mod\">\n\t\t<button\n\t\t\ttype=\"button\"\n\t\t\t*ngFor=\"let item of items; trackBy: trackBy\"\n\t\t\tclass=\"calendar-grid-item\"\n\t\t\t[ngClass]=\"item.mods\"\n\t\t\t[disabled]=\"item.isDisabled\"\n\t\t\t(click)=\"select(item)\"\n\t\t>\n\t\t\t<div class=\"calendar-grid-item-content\">{{ item.label }}</div>\n\t\t</button>\n\t</section>\n</section>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.calendar{background-color:var(--colors-white-color);width:var(--components-calendar-width)}:host-context(.mod-block) .calendar{width:auto;max-width:var(--components-calendar-width)}.calendar-header{display:flex;align-items:center;justify-content:space-between}.calendar-header-date{font-weight:600;color:var(--palettes-grey-900);font-size:var(--sizes-L-fontSize);line-height:var(--sizes-L-lineHeight);padding:0;background:transparent;border:none;cursor:pointer}.calendar-header-date:focus-visible{outline:2px solid var(--palettes-primary-700);outline-offset:2px;border-radius:4px}.calendar-labels{display:none}.calendar-labels.mod-dailyView{display:flex;align-items:center;flex-wrap:wrap;text-align:center;height:var(--components-calendar-day-size);font-size:var(--sizes-S-fontSize);color:var(--palettes-primary-700)}.calendar-labels.mod-dailyView .calendar-labels-item{width:var(--components-calendar-day-size)}.calendar-grid{display:flex;text-align:center;align-self:stretch;flex-wrap:wrap;width:var(--components-calendar-width)}.calendar-grid.mod-dailyView .calendar-grid-item{width:var(--components-calendar-day-size)}.calendar-grid.mod-monthlyView .calendar-grid-item-content,.calendar-grid.mod-yearlyView .calendar-grid-item-content{width:5.83rem}.calendar-grid-item{height:var(--components-calendar-day-size);border:none;cursor:pointer;background:transparent;position:relative;padding:0;outline:none;color:var(--palettes-grey-800)}.calendar-grid-item.is-previousMonth,.calendar-grid-item.is-nextMonth{color:var(--palettes-grey-500)}.calendar-grid-item.is-today{color:var(--palettes-primary-700);font-weight:600}.calendar-grid-item.is-today:after{content:\"\";position:absolute;bottom:var(--spacings-XXS);left:var(--spacings-XS);right:var(--spacings-XS);height:2px;background:var(--palettes-primary-700);z-index:1}.calendar-grid-item:hover .calendar-grid-item-content{background:var(--palettes-grey-50)}.calendar-grid-item:active .calendar-grid-item-content{background:var(--palettes-grey-100)}.calendar-grid-item:focus-visible{outline:2px solid var(--palettes-primary-700);outline-offset:2px;border-radius:var(--commons-borderRadius-L);z-index:1}.calendar-grid-item.is-active .calendar-grid-item-content{background:var(--palettes-primary-700);color:var(--palettes-primary-text)}.calendar-grid-item.is-active.is-today:after{background:white!important;transition:background-color var(--commons-animations-durations-fast)}.calendar-grid-item.is-disabled,.calendar-grid-item[disabled]{color:var(--palettes-grey-500);pointer-events:none}.calendar-grid-item.is-disabled:hover .calendar-grid-item-content,.calendar-grid-item[disabled]:hover .calendar-grid-item-content{background-color:#fff}.calendar-grid-item-content{position:relative;height:var(--components-calendar-day-size);width:var(--components-calendar-day-size);line-height:var(--components-calendar-day-size);border-radius:var(--commons-borderRadius-L);transition-duration:var(--commons-animations-durations-fast);transition-property:background-color,color}\n"], dependencies: [{ kind: "ngmodule", type: FormsModule }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuCalendarInputComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuCalendarInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-calendar', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [FormsModule, CommonModule], providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => LuCalendarInputComponent),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: LuCalendarInputComponent,
                            multi: true,
                        },
                        LuCalendarItemFactory,
                    ], template: "<section class=\"calendar\">\n\t<header class=\"calendar-header\">\n\t\t<button type=\"button\" class=\"actionIcon mod-S\" (click)=\"previous()\">\n\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon icon-arrowChevronLeft\"></span>\n\t\t\t<span class=\"u-mask\">Previous</span>\n\t\t</button>\n\t\t<button type=\"button\" class=\"calendar-header-date\" (click)=\"increaseGranularity()\">{{ header.label }}</button>\n\t\t<button type=\"button\" class=\"actionIcon mod-S\" (click)=\"next()\">\n\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon icon-arrowChevronRight\"></span>\n\t\t\t<span class=\"u-mask\">Next</span>\n\t\t</button>\n\t</header>\n\t<section class=\"calendar-labels\" [ngClass]=\"mod\">\n\t\t<div class=\"calendar-labels-item\" *ngFor=\"let label of labels\">{{ label }}</div>\n\t</section>\n\t<section class=\"calendar-grid\" [ngClass]=\"mod\">\n\t\t<button\n\t\t\ttype=\"button\"\n\t\t\t*ngFor=\"let item of items; trackBy: trackBy\"\n\t\t\tclass=\"calendar-grid-item\"\n\t\t\t[ngClass]=\"item.mods\"\n\t\t\t[disabled]=\"item.isDisabled\"\n\t\t\t(click)=\"select(item)\"\n\t\t>\n\t\t\t<div class=\"calendar-grid-item-content\">{{ item.label }}</div>\n\t\t</button>\n\t</section>\n</section>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.calendar{background-color:var(--colors-white-color);width:var(--components-calendar-width)}:host-context(.mod-block) .calendar{width:auto;max-width:var(--components-calendar-width)}.calendar-header{display:flex;align-items:center;justify-content:space-between}.calendar-header-date{font-weight:600;color:var(--palettes-grey-900);font-size:var(--sizes-L-fontSize);line-height:var(--sizes-L-lineHeight);padding:0;background:transparent;border:none;cursor:pointer}.calendar-header-date:focus-visible{outline:2px solid var(--palettes-primary-700);outline-offset:2px;border-radius:4px}.calendar-labels{display:none}.calendar-labels.mod-dailyView{display:flex;align-items:center;flex-wrap:wrap;text-align:center;height:var(--components-calendar-day-size);font-size:var(--sizes-S-fontSize);color:var(--palettes-primary-700)}.calendar-labels.mod-dailyView .calendar-labels-item{width:var(--components-calendar-day-size)}.calendar-grid{display:flex;text-align:center;align-self:stretch;flex-wrap:wrap;width:var(--components-calendar-width)}.calendar-grid.mod-dailyView .calendar-grid-item{width:var(--components-calendar-day-size)}.calendar-grid.mod-monthlyView .calendar-grid-item-content,.calendar-grid.mod-yearlyView .calendar-grid-item-content{width:5.83rem}.calendar-grid-item{height:var(--components-calendar-day-size);border:none;cursor:pointer;background:transparent;position:relative;padding:0;outline:none;color:var(--palettes-grey-800)}.calendar-grid-item.is-previousMonth,.calendar-grid-item.is-nextMonth{color:var(--palettes-grey-500)}.calendar-grid-item.is-today{color:var(--palettes-primary-700);font-weight:600}.calendar-grid-item.is-today:after{content:\"\";position:absolute;bottom:var(--spacings-XXS);left:var(--spacings-XS);right:var(--spacings-XS);height:2px;background:var(--palettes-primary-700);z-index:1}.calendar-grid-item:hover .calendar-grid-item-content{background:var(--palettes-grey-50)}.calendar-grid-item:active .calendar-grid-item-content{background:var(--palettes-grey-100)}.calendar-grid-item:focus-visible{outline:2px solid var(--palettes-primary-700);outline-offset:2px;border-radius:var(--commons-borderRadius-L);z-index:1}.calendar-grid-item.is-active .calendar-grid-item-content{background:var(--palettes-primary-700);color:var(--palettes-primary-text)}.calendar-grid-item.is-active.is-today:after{background:white!important;transition:background-color var(--commons-animations-durations-fast)}.calendar-grid-item.is-disabled,.calendar-grid-item[disabled]{color:var(--palettes-grey-500);pointer-events:none}.calendar-grid-item.is-disabled:hover .calendar-grid-item-content,.calendar-grid-item[disabled]:hover .calendar-grid-item-content{background-color:#fff}.calendar-grid-item-content{position:relative;height:var(--components-calendar-day-size);width:var(--components-calendar-day-size);line-height:var(--components-calendar-day-size);border-radius:var(--commons-borderRadius-L);transition-duration:var(--commons-animations-durations-fast);transition-property:background-color,color}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }, { type: i1.LuCalendarItemFactory }, { type: i2.ALuDateAdapter }]; }, propDecorators: { min: [{
                type: Input
            }], max: [{
                type: Input
            }], granularity: [{
                type: Input
            }], startOn: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,