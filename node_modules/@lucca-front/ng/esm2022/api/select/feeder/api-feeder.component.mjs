import { ChangeDetectionStrategy, Component, forwardRef, Inject, Input, Optional, Self, SkipSelf } from '@angular/core';
import { ALuOnOpenSubscriber } from '@lucca-front/ng/core';
import { ALuOptionOperator } from '@lucca-front/ng/option';
import { BehaviorSubject } from 'rxjs';
import { ALuApiService, LuApiHybridService } from '../../service/index';
import { ALuApiOptionFeeder } from './api-feeder.model';
import * as i0 from "@angular/core";
import * as i1 from "../../service/index";
class LuApiFeederComponent extends ALuApiOptionFeeder {
    constructor(hostService, selfService) {
        super(hostService || selfService);
        this.outOptions$ = new BehaviorSubject([]);
    }
    set standard(standard) {
        this._service.standard = standard;
    }
    set api(api) {
        this._service.api = api;
    }
    set fields(fields) {
        this._service.fields = fields;
    }
    set filters(filters) {
        this._service.filters = filters;
    }
    set orderBy(orderBy) {
        this._service.orderBy = orderBy;
    }
    set sort(sort) {
        this._service.sort = sort;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiFeederComponent, deps: [{ token: ALuApiService, optional: true, skipSelf: true }, { token: ALuApiService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuApiFeederComponent, isStandalone: true, selector: "lu-api-feeder", inputs: { standard: "standard", api: "api", fields: "fields", filters: "filters", orderBy: "orderBy", sort: "sort" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuApiFeederComponent),
                multi: true,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuApiFeederComponent),
                multi: true,
            },
            {
                provide: ALuApiService,
                useClass: LuApiHybridService,
            },
        ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuApiFeederComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiFeederComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-api-feeder', template: '', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuApiFeederComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuApiFeederComponent),
                            multi: true,
                        },
                        {
                            provide: ALuApiService,
                            useClass: LuApiHybridService,
                        },
                    ] }]
        }], ctorParameters: function () { return [{ type: i1.LuApiHybridService, decorators: [{
                    type: Inject,
                    args: [ALuApiService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.LuApiHybridService, decorators: [{
                    type: Inject,
                    args: [ALuApiService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { standard: [{
                type: Input
            }], api: [{
                type: Input
            }], fields: [{
                type: Input
            }], filters: [{
                type: Input
            }], orderBy: [{
                type: Input
            }], sort: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLWZlZWRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy9hcGkvc2VsZWN0L2ZlZWRlci9hcGktZmVlZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxtQkFBbUIsRUFBdUIsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRixPQUFPLEVBQUUsaUJBQWlCLEVBQXFCLE1BQU0sd0JBQXdCLENBQUM7QUFDOUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV2QyxPQUFPLEVBQUUsYUFBYSxFQUFFLGtCQUFrQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7OztBQUN4RCxNQXVCYSxvQkFBd0QsU0FBUSxrQkFBNEM7SUFFeEgsWUFJQyxXQUFrQyxFQUNILFdBQWtDO1FBRWpFLEtBQUssQ0FBQyxXQUFXLElBQUksV0FBVyxDQUFDLENBQUM7UUFSMUIsZ0JBQVcsR0FBRyxJQUFJLGVBQWUsQ0FBTSxFQUFFLENBQUMsQ0FBQztJQVNwRCxDQUFDO0lBRUQsSUFBYSxRQUFRLENBQUMsUUFBcUI7UUFDMUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQ25DLENBQUM7SUFDRCxJQUFhLEdBQUcsQ0FBQyxHQUFXO1FBQzNCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUN6QixDQUFDO0lBQ0QsSUFBYSxNQUFNLENBQUMsTUFBYztRQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDL0IsQ0FBQztJQUNELElBQWEsT0FBTyxDQUFDLE9BQWlCO1FBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUNqQyxDQUFDO0lBQ0QsSUFBYSxPQUFPLENBQUMsT0FBZTtRQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDakMsQ0FBQztJQUNELElBQWEsSUFBSSxDQUFDLElBQVk7UUFDN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7OEdBN0JXLG9CQUFvQixrQkFHdkIsYUFBYSw2Q0FJYixhQUFhO2tHQVBWLG9CQUFvQixrTEFqQnJCO1lBQ1Y7Z0JBQ0MsT0FBTyxFQUFFLGlCQUFpQjtnQkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztnQkFDbkQsS0FBSyxFQUFFLElBQUk7YUFDWDtZQUNEO2dCQUNDLE9BQU8sRUFBRSxtQkFBbUI7Z0JBQzVCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsb0JBQW9CLENBQUM7Z0JBQ25ELEtBQUssRUFBRSxJQUFJO2FBQ1g7WUFDRDtnQkFDQyxPQUFPLEVBQUUsYUFBYTtnQkFDdEIsUUFBUSxFQUFFLGtCQUFrQjthQUM1QjtTQUNELGlEQW5CUyxFQUFFOztTQXFCQSxvQkFBb0I7MkZBQXBCLG9CQUFvQjtrQkF2QmhDLFNBQVM7K0JBQ0MsZUFBZSxZQUNmLEVBQUUsbUJBRUssdUJBQXVCLENBQUMsTUFBTSxjQUNuQyxJQUFJLGFBQ0w7d0JBQ1Y7NEJBQ0MsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUscUJBQXFCLENBQUM7NEJBQ25ELEtBQUssRUFBRSxJQUFJO3lCQUNYO3dCQUNEOzRCQUNDLE9BQU8sRUFBRSxtQkFBbUI7NEJBQzVCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLHFCQUFxQixDQUFDOzRCQUNuRCxLQUFLLEVBQUUsSUFBSTt5QkFDWDt3QkFDRDs0QkFDQyxPQUFPLEVBQUUsYUFBYTs0QkFDdEIsUUFBUSxFQUFFLGtCQUFrQjt5QkFDNUI7cUJBQ0Q7OzBCQUtDLE1BQU07MkJBQUMsYUFBYTs7MEJBQ3BCLFFBQVE7OzBCQUNSLFFBQVE7OzBCQUVSLE1BQU07MkJBQUMsYUFBYTs7MEJBQUcsSUFBSTs0Q0FLaEIsUUFBUTtzQkFBcEIsS0FBSztnQkFHTyxHQUFHO3NCQUFmLEtBQUs7Z0JBR08sTUFBTTtzQkFBbEIsS0FBSztnQkFHTyxPQUFPO3NCQUFuQixLQUFLO2dCQUdPLE9BQU87c0JBQW5CLEtBQUs7Z0JBR08sSUFBSTtzQkFBaEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIGZvcndhcmRSZWYsIEluamVjdCwgSW5wdXQsIE9wdGlvbmFsLCBTZWxmLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQUx1T25PcGVuU3Vic2NyaWJlciwgSUx1T25PcGVuU3Vic2NyaWJlciB9IGZyb20gJ0BsdWNjYS1mcm9udC9uZy9jb3JlJztcbmltcG9ydCB7IEFMdU9wdGlvbk9wZXJhdG9yLCBJTHVPcHRpb25PcGVyYXRvciB9IGZyb20gJ0BsdWNjYS1mcm9udC9uZy9vcHRpb24nO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJTHVBcGlJdGVtIH0gZnJvbSAnLi4vLi4vYXBpLm1vZGVsJztcbmltcG9ydCB7IEFMdUFwaVNlcnZpY2UsIEx1QXBpSHlicmlkU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2UvaW5kZXgnO1xuaW1wb3J0IHsgQUx1QXBpT3B0aW9uRmVlZGVyIH0gZnJvbSAnLi9hcGktZmVlZGVyLm1vZGVsJztcbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ2x1LWFwaS1mZWVkZXInLFxuXHR0ZW1wbGF0ZTogJycsXG5cdHN0eWxlVXJsczogW10sXG5cdGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxuXHRwcm92aWRlcnM6IFtcblx0XHR7XG5cdFx0XHRwcm92aWRlOiBBTHVPcHRpb25PcGVyYXRvcixcblx0XHRcdHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEx1QXBpRmVlZGVyQ29tcG9uZW50KSxcblx0XHRcdG11bHRpOiB0cnVlLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQUx1T25PcGVuU3Vic2NyaWJlcixcblx0XHRcdHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEx1QXBpRmVlZGVyQ29tcG9uZW50KSxcblx0XHRcdG11bHRpOiB0cnVlLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQUx1QXBpU2VydmljZSxcblx0XHRcdHVzZUNsYXNzOiBMdUFwaUh5YnJpZFNlcnZpY2UsXG5cdFx0fSxcblx0XSxcbn0pXG5leHBvcnQgY2xhc3MgTHVBcGlGZWVkZXJDb21wb25lbnQ8VCBleHRlbmRzIElMdUFwaUl0ZW0gPSBJTHVBcGlJdGVtPiBleHRlbmRzIEFMdUFwaU9wdGlvbkZlZWRlcjxULCBMdUFwaUh5YnJpZFNlcnZpY2U8VD4+IGltcGxlbWVudHMgSUx1T3B0aW9uT3BlcmF0b3I8VD4sIElMdU9uT3BlblN1YnNjcmliZXIge1xuXHRvdmVycmlkZSBvdXRPcHRpb25zJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8VFtdPihbXSk7XG5cdGNvbnN0cnVjdG9yKFxuXHRcdEBJbmplY3QoQUx1QXBpU2VydmljZSlcblx0XHRAT3B0aW9uYWwoKVxuXHRcdEBTa2lwU2VsZigpXG5cdFx0aG9zdFNlcnZpY2U6IEx1QXBpSHlicmlkU2VydmljZTxUPixcblx0XHRASW5qZWN0KEFMdUFwaVNlcnZpY2UpIEBTZWxmKCkgc2VsZlNlcnZpY2U6IEx1QXBpSHlicmlkU2VydmljZTxUPixcblx0KSB7XG5cdFx0c3VwZXIoaG9zdFNlcnZpY2UgfHwgc2VsZlNlcnZpY2UpO1xuXHR9XG5cblx0QElucHV0KCkgc2V0IHN0YW5kYXJkKHN0YW5kYXJkOiAndjMnIHwgJ3Y0Jykge1xuXHRcdHRoaXMuX3NlcnZpY2Uuc3RhbmRhcmQgPSBzdGFuZGFyZDtcblx0fVxuXHRASW5wdXQoKSBzZXQgYXBpKGFwaTogc3RyaW5nKSB7XG5cdFx0dGhpcy5fc2VydmljZS5hcGkgPSBhcGk7XG5cdH1cblx0QElucHV0KCkgc2V0IGZpZWxkcyhmaWVsZHM6IHN0cmluZykge1xuXHRcdHRoaXMuX3NlcnZpY2UuZmllbGRzID0gZmllbGRzO1xuXHR9XG5cdEBJbnB1dCgpIHNldCBmaWx0ZXJzKGZpbHRlcnM6IHN0cmluZ1tdKSB7XG5cdFx0dGhpcy5fc2VydmljZS5maWx0ZXJzID0gZmlsdGVycztcblx0fVxuXHRASW5wdXQoKSBzZXQgb3JkZXJCeShvcmRlckJ5OiBzdHJpbmcpIHtcblx0XHR0aGlzLl9zZXJ2aWNlLm9yZGVyQnkgPSBvcmRlckJ5O1xuXHR9XG5cdEBJbnB1dCgpIHNldCBzb3J0KHNvcnQ6IHN0cmluZykge1xuXHRcdHRoaXMuX3NlcnZpY2Uuc29ydCA9IHNvcnQ7XG5cdH1cbn1cbiJdfQ==