import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, ElementRef, forwardRef, Inject, Input, Optional, Self, SkipSelf, ViewChild } from '@angular/core';
import { FormControl, ReactiveFormsModule } from '@angular/forms';
import { ALuOnCloseSubscriber, ALuOnOpenSubscriber, ALuOnScrollBottomSubscriber } from '@lucca-front/ng/core';
import { ALuOptionOperator, LuOptionPlaceholderComponent } from '@lucca-front/ng/option';
import { debounceTime } from 'rxjs/operators';
import { ALuApiService, LuApiHybridService } from '../../service/index';
import { ALuApiOptionPagedSearcher, ALuApiOptionSearcher } from './api-searcher.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/common";
import * as i3 from "../../service/index";
class LuApiSearcherComponent extends ALuApiOptionSearcher {
    set standard(standard) {
        this._service.standard = standard;
    }
    set api(api) {
        this._service.api = api;
    }
    set fields(fields) {
        this._service.fields = fields;
    }
    set filters(filters) {
        this._service.filters = filters;
    }
    set orderBy(orderBy) {
        this._service.orderBy = orderBy;
    }
    set sort(sort) {
        this._service.sort = sort;
    }
    constructor(hostService, selfService) {
        super(hostService || selfService);
        this.debounceTime = 250;
    }
    ngOnInit() {
        this.clueControl = new FormControl(undefined);
        this.clue$ = this.clueControl.valueChanges.pipe(debounceTime(this.debounceTime));
        super.init();
    }
    onOpen() {
        this.searchInput.nativeElement.focus();
        super.onOpen();
    }
    resetClue() {
        this.clueControl.setValue('');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiSearcherComponent, deps: [{ token: ALuApiService, optional: true, skipSelf: true }, { token: ALuApiService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuApiSearcherComponent, isStandalone: true, selector: "lu-api-searcher", inputs: { standard: "standard", api: "api", fields: "fields", filters: "filters", orderBy: "orderBy", sort: "sort", debounceTime: "debounceTime" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuApiSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuApiSearcherComponent),
                multi: true,
            },
            {
                provide: ALuApiService,
                useClass: LuApiHybridService,
            },
        ], viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true, read: ElementRef, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"textfield mod-search\" [class.is-loading]=\"loading$ | async\">\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"clueControl\" />\n</div>\n<lu-option-placeholder *ngIf=\"(empty$ | async) && (loading$ | async) === false\" (onClear)=\"resetClue()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"], dependencies: [{ kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "component", type: LuOptionPlaceholderComponent, selector: "lu-option-placeholder", outputs: ["onClear"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuApiSearcherComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiSearcherComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-api-searcher', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [ReactiveFormsModule, CommonModule, LuOptionPlaceholderComponent], providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuApiSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuApiSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuApiService,
                            useClass: LuApiHybridService,
                        },
                    ], template: "<div class=\"textfield mod-search\" [class.is-loading]=\"loading$ | async\">\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"clueControl\" />\n</div>\n<lu-option-placeholder *ngIf=\"(empty$ | async) && (loading$ | async) === false\" (onClear)=\"resetClue()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"] }]
        }], ctorParameters: function () { return [{ type: i3.LuApiHybridService, decorators: [{
                    type: Inject,
                    args: [ALuApiService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i3.LuApiHybridService, decorators: [{
                    type: Inject,
                    args: [ALuApiService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { searchInput: [{
                type: ViewChild,
                args: ['searchInput', { read: ElementRef, static: true }]
            }], standard: [{
                type: Input
            }], api: [{
                type: Input
            }], fields: [{
                type: Input
            }], filters: [{
                type: Input
            }], orderBy: [{
                type: Input
            }], sort: [{
                type: Input
            }], debounceTime: [{
                type: Input
            }] } });
class LuApiPagedSearcherComponent extends ALuApiOptionPagedSearcher {
    set standard(standard) {
        this._service.standard = standard;
    }
    set api(api) {
        this._service.api = api;
    }
    set fields(fields) {
        this._service.fields = fields;
    }
    set filters(filters) {
        this._service.filters = filters;
    }
    set orderBy(orderBy) {
        this._service.orderBy = orderBy;
    }
    set sort(sort) {
        this._service.sort = sort;
    }
    constructor(hostService, selfService) {
        super(hostService || selfService);
        this.debounceTime = 250;
    }
    ngOnInit() {
        this.clueControl = new FormControl(undefined);
        this.clue$ = this.clueControl.valueChanges.pipe(debounceTime(this.debounceTime));
        super.init();
    }
    onOpen() {
        this.searchInput.nativeElement.focus();
        super.onOpen();
    }
    resetClue() {
        this.clueControl.reset('');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiPagedSearcherComponent, deps: [{ token: ALuApiService, optional: true, skipSelf: true }, { token: ALuApiService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuApiPagedSearcherComponent, isStandalone: true, selector: "lu-api-paged-searcher", inputs: { standard: "standard", api: "api", fields: "fields", filters: "filters", orderBy: "orderBy", sort: "sort", debounceTime: "debounceTime" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuApiPagedSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuApiPagedSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnScrollBottomSubscriber,
                useExisting: forwardRef(() => LuApiPagedSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnCloseSubscriber,
                useExisting: forwardRef(() => LuApiPagedSearcherComponent),
                multi: true,
            },
            {
                provide: ALuApiService,
                useClass: LuApiHybridService,
            },
        ], viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true, read: ElementRef, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"textfield mod-search\" [class.is-loading]=\"loading$ | async\">\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"clueControl\" />\n</div>\n<lu-option-placeholder *ngIf=\"(empty$ | async) && (loading$ | async) === false\" (onClear)=\"resetClue()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"], dependencies: [{ kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "component", type: LuOptionPlaceholderComponent, selector: "lu-option-placeholder", outputs: ["onClear"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuApiPagedSearcherComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiPagedSearcherComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-api-paged-searcher', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [ReactiveFormsModule, CommonModule, LuOptionPlaceholderComponent], providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuApiPagedSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuApiPagedSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnScrollBottomSubscriber,
                            useExisting: forwardRef(() => LuApiPagedSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnCloseSubscriber,
                            useExisting: forwardRef(() => LuApiPagedSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuApiService,
                            useClass: LuApiHybridService,
                        },
                    ], template: "<div class=\"textfield mod-search\" [class.is-loading]=\"loading$ | async\">\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"clueControl\" />\n</div>\n<lu-option-placeholder *ngIf=\"(empty$ | async) && (loading$ | async) === false\" (onClear)=\"resetClue()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"] }]
        }], ctorParameters: function () { return [{ type: i3.LuApiHybridService, decorators: [{
                    type: Inject,
                    args: [ALuApiService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i3.LuApiHybridService, decorators: [{
                    type: Inject,
                    args: [ALuApiService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { searchInput: [{
                type: ViewChild,
                args: ['searchInput', { read: ElementRef, static: true }]
            }], standard: [{
                type: Input
            }], api: [{
                type: Input
            }], fields: [{
                type: Input
            }], filters: [{
                type: Input
            }], orderBy: [{
                type: Input
            }], sort: [{
                type: Input
            }], debounceTime: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,