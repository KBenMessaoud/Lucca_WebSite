import { merge, of, Subject } from 'rxjs';
import { catchError, map, scan, share, startWith, switchMap } from 'rxjs/operators';
export class ALuApiOptionSearcher {
    set clue$(clue$) {
        // this.initObservables(clue$);
        this._clue$ = clue$;
    }
    constructor(_service) {
        this._service = _service;
        this.outOptions$ = new Subject();
    }
    init() {
        this.initObservables();
    }
    onOpen() {
        this.resetClue();
    }
    onClose() {
        this.clearOptions();
    }
    initObservables() {
        // this._clue$ = clue$.pipe(share());
        const results$ = this._clue$.pipe(switchMap((clue) => this._service.searchAll(clue)), catchError(() => of([])), share());
        results$.subscribe((items) => this.outOptions$.next(items));
        this.loading$ = merge(this._clue$.pipe(map(() => true)), results$.pipe(map(() => false)));
        this.empty$ = results$.pipe(map((o) => o.length === 0));
    }
    clearOptions() {
        this.outOptions$.next([]);
    }
}
export class ALuApiOptionPagedSearcher extends ALuApiOptionSearcher {
    constructor(service) {
        super(service);
        this.outOptions$ = new Subject();
        this._loading = false;
        this._page$ = new Subject();
        this._options = [];
    }
    onOpen() {
        this.resetClue();
    }
    onScrollBottom() {
        if (!this._loading && !this._isLastPage) {
            this._page$.next();
        }
    }
    initObservables() {
        const pager$ = this._page$.pipe(scan((acc) => acc + 1, 0), startWith(0));
        const query$ = this._clue$.pipe(switchMap((clue) => pager$.pipe(map((page) => [page, clue]))), share());
        const results$ = query$.pipe(switchMap(([page, clue]) => this._service.searchPaged(clue, page).pipe(catchError(() => of([])), map((items) => [items, page]))), share());
        results$.subscribe(([items, page]) => {
            if (page === 0) {
                this._options = [...items];
            }
            else {
                this._options.push(...items);
            }
            this._isLastPage = !items.length;
            this.outOptions$.next([...this._options]);
        });
        this.loading$ = merge(query$.pipe(map(() => true)), results$.pipe(map(() => false)));
        this.loading$.subscribe((l) => (this._loading = l));
        this.empty$ = this.outOptions$.pipe(map((o) => o.length === 0));
    }
}
//# sourceMappingURL=data:application/json;base64,