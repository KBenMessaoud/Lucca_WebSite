import { ChangeDetectionStrategy, Component, forwardRef, Inject, Input, Optional, Self, SkipSelf } from '@angular/core';
import { ALuOnOpenSubscriber, ALuOnScrollBottomSubscriber } from '@lucca-front/ng/core';
import { ALuOptionOperator } from '@lucca-front/ng/option';
import { ALuApiService, LuApiHybridService } from '../../service/index';
import { ALuApiOptionPager } from './api-pager.model';
import * as i0 from "@angular/core";
import * as i1 from "../../service/index";
class LuApiPagerComponent extends ALuApiOptionPager {
    constructor(hostService, selfService) {
        super(hostService || selfService);
    }
    set standard(standard) {
        this._service.standard = standard;
    }
    set api(api) {
        this._service.api = api;
    }
    set fields(fields) {
        this._service.fields = fields;
    }
    set filters(filters) {
        this._service.filters = filters;
    }
    set orderBy(orderBy) {
        this._service.orderBy = orderBy;
    }
    ngOnInit() {
        super.init();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiPagerComponent, deps: [{ token: ALuApiService, optional: true, skipSelf: true }, { token: ALuApiService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuApiPagerComponent, isStandalone: true, selector: "lu-api-pager", inputs: { standard: "standard", api: "api", fields: "fields", filters: "filters", orderBy: "orderBy" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuApiPagerComponent),
                multi: true,
            },
            {
                provide: ALuApiService,
                useClass: LuApiHybridService,
            },
            {
                provide: ALuOnScrollBottomSubscriber,
                useExisting: forwardRef(() => LuApiPagerComponent),
                multi: true,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuApiPagerComponent),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuApiPagerComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiPagerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-api-pager', template: '', standalone: true, changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuApiPagerComponent),
                            multi: true,
                        },
                        {
                            provide: ALuApiService,
                            useClass: LuApiHybridService,
                        },
                        {
                            provide: ALuOnScrollBottomSubscriber,
                            useExisting: forwardRef(() => LuApiPagerComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuApiPagerComponent),
                            multi: true,
                        },
                    ] }]
        }], ctorParameters: function () { return [{ type: i1.LuApiHybridService, decorators: [{
                    type: Inject,
                    args: [ALuApiService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.LuApiHybridService, decorators: [{
                    type: Inject,
                    args: [ALuApiService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { standard: [{
                type: Input
            }], api: [{
                type: Input
            }], fields: [{
                type: Input
            }], filters: [{
                type: Input
            }], orderBy: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLXBhZ2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL2FwaS9zZWxlY3QvcGFnZXIvYXBpLXBhZ2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFVLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hJLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSwyQkFBMkIsRUFBb0QsTUFBTSxzQkFBc0IsQ0FBQztBQUMxSSxPQUFPLEVBQUUsaUJBQWlCLEVBQXFCLE1BQU0sd0JBQXdCLENBQUM7QUFFOUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7QUFFdEQsTUE0QmEsbUJBQ1osU0FBUSxpQkFBMkM7SUFHbkQsWUFJQyxXQUFrQyxFQUNILFdBQWtDO1FBRWpFLEtBQUssQ0FBQyxXQUFXLElBQUksV0FBVyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELElBQWEsUUFBUSxDQUFDLFFBQXFCO1FBQzFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUNuQyxDQUFDO0lBQ0QsSUFBYSxHQUFHLENBQUMsR0FBVztRQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDekIsQ0FBQztJQUNELElBQWEsTUFBTSxDQUFDLE1BQWM7UUFDakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQy9CLENBQUM7SUFDRCxJQUFhLE9BQU8sQ0FBQyxPQUFpQjtRQUNyQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDakMsQ0FBQztJQUNELElBQWEsT0FBTyxDQUFDLE9BQWU7UUFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxRQUFRO1FBQ1AsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQzs4R0FoQ1csbUJBQW1CLGtCQUt0QixhQUFhLDZDQUliLGFBQWE7a0dBVFYsbUJBQW1CLG1LQXRCcEI7WUFDVjtnQkFDQyxPQUFPLEVBQUUsaUJBQWlCO2dCQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixDQUFDO2dCQUNsRCxLQUFLLEVBQUUsSUFBSTthQUNYO1lBQ0Q7Z0JBQ0MsT0FBTyxFQUFFLGFBQWE7Z0JBQ3RCLFFBQVEsRUFBRSxrQkFBa0I7YUFDNUI7WUFDRDtnQkFDQyxPQUFPLEVBQUUsMkJBQTJCO2dCQUNwQyxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixDQUFDO2dCQUNsRCxLQUFLLEVBQUUsSUFBSTthQUNYO1lBQ0Q7Z0JBQ0MsT0FBTyxFQUFFLG1CQUFtQjtnQkFDNUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztnQkFDbEQsS0FBSyxFQUFFLElBQUk7YUFDWDtTQUNELGlEQXhCUyxFQUFFOztTQTBCQSxtQkFBbUI7MkZBQW5CLG1CQUFtQjtrQkE1Qi9CLFNBQVM7K0JBQ0MsY0FBYyxZQUNkLEVBQUUsY0FFQSxJQUFJLG1CQUNDLHVCQUF1QixDQUFDLE1BQU0sYUFDcEM7d0JBQ1Y7NEJBQ0MsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLENBQUM7NEJBQ2xELEtBQUssRUFBRSxJQUFJO3lCQUNYO3dCQUNEOzRCQUNDLE9BQU8sRUFBRSxhQUFhOzRCQUN0QixRQUFRLEVBQUUsa0JBQWtCO3lCQUM1Qjt3QkFDRDs0QkFDQyxPQUFPLEVBQUUsMkJBQTJCOzRCQUNwQyxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxvQkFBb0IsQ0FBQzs0QkFDbEQsS0FBSyxFQUFFLElBQUk7eUJBQ1g7d0JBQ0Q7NEJBQ0MsT0FBTyxFQUFFLG1CQUFtQjs0QkFDNUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLENBQUM7NEJBQ2xELEtBQUssRUFBRSxJQUFJO3lCQUNYO3FCQUNEOzswQkFPQyxNQUFNOzJCQUFDLGFBQWE7OzBCQUNwQixRQUFROzswQkFDUixRQUFROzswQkFFUixNQUFNOzJCQUFDLGFBQWE7OzBCQUFHLElBQUk7NENBS2hCLFFBQVE7c0JBQXBCLEtBQUs7Z0JBR08sR0FBRztzQkFBZixLQUFLO2dCQUdPLE1BQU07c0JBQWxCLEtBQUs7Z0JBR08sT0FBTztzQkFBbkIsS0FBSztnQkFHTyxPQUFPO3NCQUFuQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5qZWN0LCBJbnB1dCwgT25Jbml0LCBPcHRpb25hbCwgU2VsZiwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFMdU9uT3BlblN1YnNjcmliZXIsIEFMdU9uU2Nyb2xsQm90dG9tU3Vic2NyaWJlciwgSUx1T25PcGVuU3Vic2NyaWJlciwgSUx1T25TY3JvbGxCb3R0b21TdWJzY3JpYmVyIH0gZnJvbSAnQGx1Y2NhLWZyb250L25nL2NvcmUnO1xuaW1wb3J0IHsgQUx1T3B0aW9uT3BlcmF0b3IsIElMdU9wdGlvbk9wZXJhdG9yIH0gZnJvbSAnQGx1Y2NhLWZyb250L25nL29wdGlvbic7XG5pbXBvcnQgeyBJTHVBcGlJdGVtIH0gZnJvbSAnLi4vLi4vYXBpLm1vZGVsJztcbmltcG9ydCB7IEFMdUFwaVNlcnZpY2UsIEx1QXBpSHlicmlkU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2UvaW5kZXgnO1xuaW1wb3J0IHsgQUx1QXBpT3B0aW9uUGFnZXIgfSBmcm9tICcuL2FwaS1wYWdlci5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ2x1LWFwaS1wYWdlcicsXG5cdHRlbXBsYXRlOiAnJyxcblx0c3R5bGVVcmxzOiBbXSxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0Y2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG5cdHByb3ZpZGVyczogW1xuXHRcdHtcblx0XHRcdHByb3ZpZGU6IEFMdU9wdGlvbk9wZXJhdG9yLFxuXHRcdFx0dXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTHVBcGlQYWdlckNvbXBvbmVudCksXG5cdFx0XHRtdWx0aTogdHJ1ZSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHByb3ZpZGU6IEFMdUFwaVNlcnZpY2UsXG5cdFx0XHR1c2VDbGFzczogTHVBcGlIeWJyaWRTZXJ2aWNlLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQUx1T25TY3JvbGxCb3R0b21TdWJzY3JpYmVyLFxuXHRcdFx0dXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTHVBcGlQYWdlckNvbXBvbmVudCksXG5cdFx0XHRtdWx0aTogdHJ1ZSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHByb3ZpZGU6IEFMdU9uT3BlblN1YnNjcmliZXIsXG5cdFx0XHR1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBMdUFwaVBhZ2VyQ29tcG9uZW50KSxcblx0XHRcdG11bHRpOiB0cnVlLFxuXHRcdH0sXG5cdF0sXG59KVxuZXhwb3J0IGNsYXNzIEx1QXBpUGFnZXJDb21wb25lbnQ8VCBleHRlbmRzIElMdUFwaUl0ZW0gPSBJTHVBcGlJdGVtPlxuXHRleHRlbmRzIEFMdUFwaU9wdGlvblBhZ2VyPFQsIEx1QXBpSHlicmlkU2VydmljZTxUPj5cblx0aW1wbGVtZW50cyBJTHVPcHRpb25PcGVyYXRvcjxUPiwgT25Jbml0LCBJTHVPblNjcm9sbEJvdHRvbVN1YnNjcmliZXIsIElMdU9uT3BlblN1YnNjcmliZXJcbntcblx0Y29uc3RydWN0b3IoXG5cdFx0QEluamVjdChBTHVBcGlTZXJ2aWNlKVxuXHRcdEBPcHRpb25hbCgpXG5cdFx0QFNraXBTZWxmKClcblx0XHRob3N0U2VydmljZTogTHVBcGlIeWJyaWRTZXJ2aWNlPFQ+LFxuXHRcdEBJbmplY3QoQUx1QXBpU2VydmljZSkgQFNlbGYoKSBzZWxmU2VydmljZTogTHVBcGlIeWJyaWRTZXJ2aWNlPFQ+LFxuXHQpIHtcblx0XHRzdXBlcihob3N0U2VydmljZSB8fCBzZWxmU2VydmljZSk7XG5cdH1cblxuXHRASW5wdXQoKSBzZXQgc3RhbmRhcmQoc3RhbmRhcmQ6ICd2MycgfCAndjQnKSB7XG5cdFx0dGhpcy5fc2VydmljZS5zdGFuZGFyZCA9IHN0YW5kYXJkO1xuXHR9XG5cdEBJbnB1dCgpIHNldCBhcGkoYXBpOiBzdHJpbmcpIHtcblx0XHR0aGlzLl9zZXJ2aWNlLmFwaSA9IGFwaTtcblx0fVxuXHRASW5wdXQoKSBzZXQgZmllbGRzKGZpZWxkczogc3RyaW5nKSB7XG5cdFx0dGhpcy5fc2VydmljZS5maWVsZHMgPSBmaWVsZHM7XG5cdH1cblx0QElucHV0KCkgc2V0IGZpbHRlcnMoZmlsdGVyczogc3RyaW5nW10pIHtcblx0XHR0aGlzLl9zZXJ2aWNlLmZpbHRlcnMgPSBmaWx0ZXJzO1xuXHR9XG5cdEBJbnB1dCgpIHNldCBvcmRlckJ5KG9yZGVyQnk6IHN0cmluZykge1xuXHRcdHRoaXMuX3NlcnZpY2Uub3JkZXJCeSA9IG9yZGVyQnk7XG5cdH1cblxuXHRuZ09uSW5pdCgpIHtcblx0XHRzdXBlci5pbml0KCk7XG5cdH1cbn1cbiJdfQ==