import { merge, of, Subject } from 'rxjs';
import { catchError, distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';
var Strategy;
(function (Strategy) {
    Strategy[Strategy["append"] = 0] = "append";
    Strategy[Strategy["replace"] = 1] = "replace";
})(Strategy || (Strategy = {}));
export class ALuApiOptionPager {
    constructor(_service) {
        this._service = _service;
        this.outOptions$ = new Subject();
        this._loading = false;
        this._options = [];
        this._page$ = new Subject();
        this._initialized = false;
    }
    init() {
        this.initObservables();
    }
    onOpen() {
        if (!this._initialized) {
            this._page$.next(0);
            this._initialized = true;
        }
    }
    // onClose() {
    // 	this._page$.next(0);
    // }
    onScrollBottom() {
        if (!this._loading) {
            this._page$.next(this._page + 1);
        }
    }
    initObservables() {
        const _results$ = this._page$.pipe(distinctUntilChanged(), tap((p) => (this._page = p)), switchMap((page) => {
            if (page === undefined) {
                return of({ items: [], strategy: Strategy.replace });
            }
            return this._service.getPaged(page).pipe(map((items) => ({
                items: items,
                strategy: page === 0 ? Strategy.replace : Strategy.append,
            })));
        }), catchError(() => of({ items: [], strategy: Strategy.replace })), tap((results) => {
            if (results.strategy === Strategy.replace) {
                this._options = [...results.items];
            }
            else {
                this._options.push(...results.items);
            }
            this.outOptions$.next([...this._options]);
        }));
        this.loading$ = merge(this._page$.pipe(map(() => true)), _results$.pipe(map(() => false)));
        this.loading$.subscribe((l) => (this._loading = l));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLXBhZ2VyLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvYXBpL3NlbGVjdC9wYWdlci9hcGktcGFnZXIubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUl2RixJQUFLLFFBR0o7QUFIRCxXQUFLLFFBQVE7SUFDWiwyQ0FBTSxDQUFBO0lBQ04sNkNBQU8sQ0FBQTtBQUNSLENBQUMsRUFISSxRQUFRLEtBQVIsUUFBUSxRQUdaO0FBTUQsTUFBTSxPQUFnQixpQkFBaUI7SUFZdEMsWUFBc0IsUUFBVztRQUFYLGFBQVEsR0FBUixRQUFRLENBQUc7UUFUakMsZ0JBQVcsR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO1FBR3ZCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFakIsYUFBUSxHQUFRLEVBQUUsQ0FBQztRQUNuQixXQUFNLEdBQUcsSUFBSSxPQUFPLEVBQVUsQ0FBQztRQUUvQixpQkFBWSxHQUFHLEtBQUssQ0FBQztJQUNLLENBQUM7SUFDM0IsSUFBSTtRQUNiLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBQ0QsTUFBTTtRQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1NBQ3pCO0lBQ0YsQ0FBQztJQUNELGNBQWM7SUFDZCx3QkFBd0I7SUFDeEIsSUFBSTtJQUNKLGNBQWM7UUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2pDO0lBQ0YsQ0FBQztJQUNTLGVBQWU7UUFDeEIsTUFBTSxTQUFTLEdBQW1ELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNqRixvQkFBb0IsRUFBRSxFQUN0QixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUM1QixTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNsQixJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7Z0JBQ3ZCLE9BQU8sRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQVMsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7YUFDNUQ7WUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FDdkMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNmLEtBQUssRUFBRSxLQUFLO2dCQUNaLFFBQVEsRUFBRSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTTthQUN6RCxDQUFDLENBQUMsQ0FDSCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLEVBQ0YsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQ3RFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ2YsSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQyxPQUFPLEVBQUU7Z0JBQzFDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNuQztpQkFBTTtnQkFDTixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNyQztZQUNELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FDRixDQUFDO1FBRUYsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNGLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJTHVPbk9wZW5TdWJzY3JpYmVyLCBJTHVPblNjcm9sbEJvdHRvbVN1YnNjcmliZXIgfSBmcm9tICdAbHVjY2EtZnJvbnQvbmcvY29yZSc7XG5pbXBvcnQgeyBJTHVPcHRpb25PcGVyYXRvciB9IGZyb20gJ0BsdWNjYS1mcm9udC9uZy9vcHRpb24nO1xuaW1wb3J0IHsgbWVyZ2UsIE9ic2VydmFibGUsIG9mLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBzd2l0Y2hNYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IElMdUFwaUl0ZW0gfSBmcm9tICcuLi8uLi9hcGkubW9kZWwnO1xuaW1wb3J0IHsgSUx1QXBpU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2UvaW5kZXgnO1xuXG5lbnVtIFN0cmF0ZWd5IHtcblx0YXBwZW5kLFxuXHRyZXBsYWNlLFxufVxuZXhwb3J0IHR5cGUgSUx1QXBpT3B0aW9uUGFnZXI8VCBleHRlbmRzIElMdUFwaUl0ZW0gPSBJTHVBcGlJdGVtPiA9IElMdU9wdGlvbk9wZXJhdG9yPFQ+O1xuZXhwb3J0IGludGVyZmFjZSBJTHVBcGlQYWdlclNlcnZpY2U8VCBleHRlbmRzIElMdUFwaUl0ZW0gPSBJTHVBcGlJdGVtPiB7XG5cdGdldFBhZ2VkKHBhZ2U6IG51bWJlcik6IE9ic2VydmFibGU8VFtdPjtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFMdUFwaU9wdGlvblBhZ2VyPFQgZXh0ZW5kcyBJTHVBcGlJdGVtID0gSUx1QXBpSXRlbSwgUyBleHRlbmRzIElMdUFwaVNlcnZpY2U8VD4gPSBJTHVBcGlTZXJ2aWNlPFQ+PlxuXHRpbXBsZW1lbnRzIElMdUFwaU9wdGlvblBhZ2VyPFQ+LCBJTHVPbk9wZW5TdWJzY3JpYmVyLCBJTHVPblNjcm9sbEJvdHRvbVN1YnNjcmliZXJcbntcblx0b3V0T3B0aW9ucyQgPSBuZXcgU3ViamVjdDxUW10+KCk7XG5cdGxvYWRpbmckOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG5cdHByb3RlY3RlZCBfbG9hZGluZyA9IGZhbHNlO1xuXHRwcm90ZWN0ZWQgX3Jlc3VsdHMkOiBPYnNlcnZhYmxlPHsgaXRlbXM6IFRbXTsgc3RyYXRlZ3k6IFN0cmF0ZWd5IH0+O1xuXHRwcm90ZWN0ZWQgX29wdGlvbnM6IFRbXSA9IFtdO1xuXHRwcm90ZWN0ZWQgX3BhZ2UkID0gbmV3IFN1YmplY3Q8bnVtYmVyPigpO1xuXHRwcm90ZWN0ZWQgX3BhZ2U6IG51bWJlcjtcblx0cHJvdGVjdGVkIF9pbml0aWFsaXplZCA9IGZhbHNlO1xuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgX3NlcnZpY2U6IFMpIHt9XG5cdHByb3RlY3RlZCBpbml0KCkge1xuXHRcdHRoaXMuaW5pdE9ic2VydmFibGVzKCk7XG5cdH1cblx0b25PcGVuKCkge1xuXHRcdGlmICghdGhpcy5faW5pdGlhbGl6ZWQpIHtcblx0XHRcdHRoaXMuX3BhZ2UkLm5leHQoMCk7XG5cdFx0XHR0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdC8vIG9uQ2xvc2UoKSB7XG5cdC8vIFx0dGhpcy5fcGFnZSQubmV4dCgwKTtcblx0Ly8gfVxuXHRvblNjcm9sbEJvdHRvbSgpIHtcblx0XHRpZiAoIXRoaXMuX2xvYWRpbmcpIHtcblx0XHRcdHRoaXMuX3BhZ2UkLm5leHQodGhpcy5fcGFnZSArIDEpO1xuXHRcdH1cblx0fVxuXHRwcm90ZWN0ZWQgaW5pdE9ic2VydmFibGVzKCkge1xuXHRcdGNvbnN0IF9yZXN1bHRzJDogT2JzZXJ2YWJsZTx7IGl0ZW1zOiBUW107IHN0cmF0ZWd5OiBTdHJhdGVneSB9PiA9IHRoaXMuX3BhZ2UkLnBpcGUoXG5cdFx0XHRkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuXHRcdFx0dGFwKChwKSA9PiAodGhpcy5fcGFnZSA9IHApKSxcblx0XHRcdHN3aXRjaE1hcCgocGFnZSkgPT4ge1xuXHRcdFx0XHRpZiAocGFnZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9mKHsgaXRlbXM6IFtdIGFzIFRbXSwgc3RyYXRlZ3k6IFN0cmF0ZWd5LnJlcGxhY2UgfSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXMuX3NlcnZpY2UuZ2V0UGFnZWQocGFnZSkucGlwZShcblx0XHRcdFx0XHRtYXAoKGl0ZW1zKSA9PiAoe1xuXHRcdFx0XHRcdFx0aXRlbXM6IGl0ZW1zLFxuXHRcdFx0XHRcdFx0c3RyYXRlZ3k6IHBhZ2UgPT09IDAgPyBTdHJhdGVneS5yZXBsYWNlIDogU3RyYXRlZ3kuYXBwZW5kLFxuXHRcdFx0XHRcdH0pKSxcblx0XHRcdFx0KTtcblx0XHRcdH0pLFxuXHRcdFx0Y2F0Y2hFcnJvcigoKSA9PiBvZih7IGl0ZW1zOiBbXSBhcyBUW10sIHN0cmF0ZWd5OiBTdHJhdGVneS5yZXBsYWNlIH0pKSxcblx0XHRcdHRhcCgocmVzdWx0cykgPT4ge1xuXHRcdFx0XHRpZiAocmVzdWx0cy5zdHJhdGVneSA9PT0gU3RyYXRlZ3kucmVwbGFjZSkge1xuXHRcdFx0XHRcdHRoaXMuX29wdGlvbnMgPSBbLi4ucmVzdWx0cy5pdGVtc107XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fb3B0aW9ucy5wdXNoKC4uLnJlc3VsdHMuaXRlbXMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMub3V0T3B0aW9ucyQubmV4dChbLi4udGhpcy5fb3B0aW9uc10pO1xuXHRcdFx0fSksXG5cdFx0KTtcblxuXHRcdHRoaXMubG9hZGluZyQgPSBtZXJnZSh0aGlzLl9wYWdlJC5waXBlKG1hcCgoKSA9PiB0cnVlKSksIF9yZXN1bHRzJC5waXBlKG1hcCgoKSA9PiBmYWxzZSkpKTtcblx0XHR0aGlzLmxvYWRpbmckLnN1YnNjcmliZSgobCkgPT4gKHRoaXMuX2xvYWRpbmcgPSBsKSk7XG5cdH1cbn1cbiJdfQ==