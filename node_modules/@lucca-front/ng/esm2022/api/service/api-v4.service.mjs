import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { ALuApiService } from './api-service.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
class LuApiV4Service extends ALuApiService {
    set api(api) {
        this._api = api;
    }
    set filters(filters) {
        this._filters = filters || [];
    }
    get filters() {
        return this._filters;
    }
    set sort(sort) {
        if (sort) {
            this._sort = `sort=${sort}`;
        }
    }
    constructor(_http) {
        super();
        this._http = _http;
        this._filters = [];
    }
    getAll(filters = []) {
        const query = [...this.filters, ...filters, this._sort].filter((f) => !!f);
        const url = [this._api, query.join('&')].join('?');
        return this._http.get(url).pipe(map((res) => res.items));
    }
    getPaged(page = 0, filters = []) {
        const query = [`page=${page + 1}`, ...this.filters, ...filters, this._sort].filter((f) => !!f);
        const url = [this._api, query.join('&')].join('?');
        return this._http.get(url).pipe(map((res) => res.items));
    }
    searchAll(clue = '', filters = []) {
        if (!clue) {
            return this.getAll(filters);
        }
        const urlSafeClues = clue
            .split(' ')
            .map((c) => encodeURIComponent(c))
            .join(',');
        const query = [`search=${urlSafeClues}`, ...this.filters, ...filters, this._sort].filter((f) => !!f);
        const url = [this._api, query.join('&')].join('?');
        return this._http.get(url).pipe(map((res) => res.items));
    }
    searchPaged(clue = '', page = 0, filters = []) {
        if (!clue) {
            return this.getPaged(page, filters);
        }
        const urlSafeClues = clue
            .split(' ')
            .map((c) => encodeURIComponent(c))
            .join(',');
        const query = [`search=${urlSafeClues}`, `page=${page + 1}`, ...this.filters, ...filters, this._sort].filter((f) => !!f);
        const url = [this._api, query.join('&')].join('?');
        return this._http.get(url).pipe(map((res) => res.items));
    }
    count() {
        const query = [...this.filters, 'fields.root=count', 'limit=0'].filter((f) => !!f);
        const url = [this._api, query.join('&')].join('?');
        return this._http.get(url).pipe(map((res) => res.count));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiV4Service, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiV4Service }); }
}
export { LuApiV4Service };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiV4Service, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,