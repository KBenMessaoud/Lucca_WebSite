import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { ALuApiService } from './api-service.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
const MAGIC_PAGE_SIZE = 20;
class LuApiV3Service extends ALuApiService {
    set api(api) {
        this._api = api;
    }
    set fields(fields) {
        if (fields) {
            this._fields = `fields=${fields}`;
        }
    }
    set filters(filters) {
        if (filters) {
            this._filters = filters || [];
        }
    }
    set orderBy(orderBy) {
        if (orderBy) {
            this._orderBy = `orderBy=${orderBy}`;
        }
    }
    get url() {
        return `${this._api}?${[...this._filters, this._orderBy, this._fields].filter((f) => !!f).join('&')}`;
    }
    constructor(_http) {
        super();
        this._http = _http;
        this._fields = 'fields=id,name';
        this._filters = [];
        this._orderBy = 'orderBy=name,asc';
    }
    getAll(filters = []) {
        return this._get([this.url, ...filters].join('&'));
    }
    getPaged(page, filters = []) {
        const paging = `paging=${page * MAGIC_PAGE_SIZE},${MAGIC_PAGE_SIZE}`;
        const url = [this.url, paging, ...filters].join('&');
        return this._get(url);
    }
    searchAll(clue, filters = []) {
        if (!clue) {
            return this.getAll(filters);
        }
        const url = [this.url, this._clueFilter(clue), ...filters].join('&');
        return this._get(url);
    }
    searchPaged(clue, page, filters = []) {
        if (!clue) {
            return this.getPaged(page, filters);
        }
        const paging = `paging=${page * MAGIC_PAGE_SIZE},${MAGIC_PAGE_SIZE}`;
        const url = [this.url, this._clueFilter(clue), paging, ...filters].join('&');
        return this._get(url);
    }
    _get(url) {
        return this._http.get(url).pipe(map((response) => response.data.items));
    }
    _clueFilter(clue) {
        const urlSafeClue = encodeURIComponent(clue);
        return `name=like,${urlSafeClue}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiV3Service, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiV3Service }); }
}
export { LuApiV3Service };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiV3Service, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLXYzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy9hcGkvc2VydmljZS9hcGktdjMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7OztBQUVwRCxNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUM7QUFFM0IsTUFDYSxjQUFrRCxTQUFRLGFBQWdCO0lBRXRGLElBQUksR0FBRyxDQUFDLEdBQVc7UUFDbEIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7SUFDakIsQ0FBQztJQUVELElBQUksTUFBTSxDQUFDLE1BQWM7UUFDeEIsSUFBSSxNQUFNLEVBQUU7WUFDWCxJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsTUFBTSxFQUFFLENBQUM7U0FDbEM7SUFDRixDQUFDO0lBRUQsSUFBSSxPQUFPLENBQUMsT0FBaUI7UUFDNUIsSUFBSSxPQUFPLEVBQUU7WUFDWixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7U0FDOUI7SUFDRixDQUFDO0lBRUQsSUFBSSxPQUFPLENBQUMsT0FBZTtRQUMxQixJQUFJLE9BQU8sRUFBRTtZQUNaLElBQUksQ0FBQyxRQUFRLEdBQUcsV0FBVyxPQUFPLEVBQUUsQ0FBQztTQUNyQztJQUNGLENBQUM7SUFFRCxJQUFJLEdBQUc7UUFDTixPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUN2RyxDQUFDO0lBRUQsWUFBc0IsS0FBaUI7UUFDdEMsS0FBSyxFQUFFLENBQUM7UUFEYSxVQUFLLEdBQUwsS0FBSyxDQUFZO1FBdkI3QixZQUFPLEdBQUcsZ0JBQWdCLENBQUM7UUFNM0IsYUFBUSxHQUFhLEVBQUUsQ0FBQztRQU14QixhQUFRLEdBQUcsa0JBQWtCLENBQUM7SUFheEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFvQixFQUFFO1FBQzVCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsUUFBUSxDQUFDLElBQVksRUFBRSxVQUFvQixFQUFFO1FBQzVDLE1BQU0sTUFBTSxHQUFHLFVBQVUsSUFBSSxHQUFHLGVBQWUsSUFBSSxlQUFlLEVBQUUsQ0FBQztRQUNyRSxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQsU0FBUyxDQUFDLElBQVksRUFBRSxVQUFvQixFQUFFO1FBQzdDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDNUI7UUFDRCxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELFdBQVcsQ0FBQyxJQUFZLEVBQUUsSUFBWSxFQUFFLFVBQW9CLEVBQUU7UUFDN0QsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNWLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDcEM7UUFDRCxNQUFNLE1BQU0sR0FBRyxVQUFVLElBQUksR0FBRyxlQUFlLElBQUksZUFBZSxFQUFFLENBQUM7UUFDckUsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRVMsSUFBSSxDQUFDLEdBQVc7UUFDekIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBOEIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3RHLENBQUM7SUFDUyxXQUFXLENBQUMsSUFBWTtRQUNqQyxNQUFNLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QyxPQUFPLGFBQWEsV0FBVyxFQUFFLENBQUM7SUFDbkMsQ0FBQzs4R0FqRVcsY0FBYztrSEFBZCxjQUFjOztTQUFkLGNBQWM7MkZBQWQsY0FBYztrQkFEMUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJTHVBcGlDb2xsZWN0aW9uUmVzcG9uc2UsIElMdUFwaUl0ZW0gfSBmcm9tICcuLi9hcGkubW9kZWwnO1xuaW1wb3J0IHsgQUx1QXBpU2VydmljZSB9IGZyb20gJy4vYXBpLXNlcnZpY2UubW9kZWwnO1xuXG5jb25zdCBNQUdJQ19QQUdFX1NJWkUgPSAyMDtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEx1QXBpVjNTZXJ2aWNlPFQgZXh0ZW5kcyBJTHVBcGlJdGVtID0gSUx1QXBpSXRlbT4gZXh0ZW5kcyBBTHVBcGlTZXJ2aWNlPFQ+IHtcblx0cHJvdGVjdGVkIF9hcGk6IHN0cmluZztcblx0c2V0IGFwaShhcGk6IHN0cmluZykge1xuXHRcdHRoaXMuX2FwaSA9IGFwaTtcblx0fVxuXHRwcm90ZWN0ZWQgX2ZpZWxkcyA9ICdmaWVsZHM9aWQsbmFtZSc7XG5cdHNldCBmaWVsZHMoZmllbGRzOiBzdHJpbmcpIHtcblx0XHRpZiAoZmllbGRzKSB7XG5cdFx0XHR0aGlzLl9maWVsZHMgPSBgZmllbGRzPSR7ZmllbGRzfWA7XG5cdFx0fVxuXHR9XG5cdHByb3RlY3RlZCBfZmlsdGVyczogc3RyaW5nW10gPSBbXTtcblx0c2V0IGZpbHRlcnMoZmlsdGVyczogc3RyaW5nW10pIHtcblx0XHRpZiAoZmlsdGVycykge1xuXHRcdFx0dGhpcy5fZmlsdGVycyA9IGZpbHRlcnMgfHwgW107XG5cdFx0fVxuXHR9XG5cdHByb3RlY3RlZCBfb3JkZXJCeSA9ICdvcmRlckJ5PW5hbWUsYXNjJztcblx0c2V0IG9yZGVyQnkob3JkZXJCeTogc3RyaW5nKSB7XG5cdFx0aWYgKG9yZGVyQnkpIHtcblx0XHRcdHRoaXMuX29yZGVyQnkgPSBgb3JkZXJCeT0ke29yZGVyQnl9YDtcblx0XHR9XG5cdH1cblxuXHRnZXQgdXJsKCkge1xuXHRcdHJldHVybiBgJHt0aGlzLl9hcGl9PyR7Wy4uLnRoaXMuX2ZpbHRlcnMsIHRoaXMuX29yZGVyQnksIHRoaXMuX2ZpZWxkc10uZmlsdGVyKChmKSA9PiAhIWYpLmpvaW4oJyYnKX1gO1xuXHR9XG5cblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIF9odHRwOiBIdHRwQ2xpZW50KSB7XG5cdFx0c3VwZXIoKTtcblx0fVxuXG5cdGdldEFsbChmaWx0ZXJzOiBzdHJpbmdbXSA9IFtdKTogT2JzZXJ2YWJsZTxUW10+IHtcblx0XHRyZXR1cm4gdGhpcy5fZ2V0KFt0aGlzLnVybCwgLi4uZmlsdGVyc10uam9pbignJicpKTtcblx0fVxuXG5cdGdldFBhZ2VkKHBhZ2U6IG51bWJlciwgZmlsdGVyczogc3RyaW5nW10gPSBbXSk6IE9ic2VydmFibGU8VFtdPiB7XG5cdFx0Y29uc3QgcGFnaW5nID0gYHBhZ2luZz0ke3BhZ2UgKiBNQUdJQ19QQUdFX1NJWkV9LCR7TUFHSUNfUEFHRV9TSVpFfWA7XG5cdFx0Y29uc3QgdXJsID0gW3RoaXMudXJsLCBwYWdpbmcsIC4uLmZpbHRlcnNdLmpvaW4oJyYnKTtcblx0XHRyZXR1cm4gdGhpcy5fZ2V0KHVybCk7XG5cdH1cblxuXHRzZWFyY2hBbGwoY2x1ZTogc3RyaW5nLCBmaWx0ZXJzOiBzdHJpbmdbXSA9IFtdKTogT2JzZXJ2YWJsZTxUW10+IHtcblx0XHRpZiAoIWNsdWUpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldEFsbChmaWx0ZXJzKTtcblx0XHR9XG5cdFx0Y29uc3QgdXJsID0gW3RoaXMudXJsLCB0aGlzLl9jbHVlRmlsdGVyKGNsdWUpLCAuLi5maWx0ZXJzXS5qb2luKCcmJyk7XG5cdFx0cmV0dXJuIHRoaXMuX2dldCh1cmwpO1xuXHR9XG5cblx0c2VhcmNoUGFnZWQoY2x1ZTogc3RyaW5nLCBwYWdlOiBudW1iZXIsIGZpbHRlcnM6IHN0cmluZ1tdID0gW10pOiBPYnNlcnZhYmxlPFRbXT4ge1xuXHRcdGlmICghY2x1ZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0UGFnZWQocGFnZSwgZmlsdGVycyk7XG5cdFx0fVxuXHRcdGNvbnN0IHBhZ2luZyA9IGBwYWdpbmc9JHtwYWdlICogTUFHSUNfUEFHRV9TSVpFfSwke01BR0lDX1BBR0VfU0laRX1gO1xuXHRcdGNvbnN0IHVybCA9IFt0aGlzLnVybCwgdGhpcy5fY2x1ZUZpbHRlcihjbHVlKSwgcGFnaW5nLCAuLi5maWx0ZXJzXS5qb2luKCcmJyk7XG5cdFx0cmV0dXJuIHRoaXMuX2dldCh1cmwpO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9nZXQodXJsOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFRbXT4ge1xuXHRcdHJldHVybiB0aGlzLl9odHRwLmdldDxJTHVBcGlDb2xsZWN0aW9uUmVzcG9uc2U8VD4+KHVybCkucGlwZShtYXAoKHJlc3BvbnNlKSA9PiByZXNwb25zZS5kYXRhLml0ZW1zKSk7XG5cdH1cblx0cHJvdGVjdGVkIF9jbHVlRmlsdGVyKGNsdWU6IHN0cmluZykge1xuXHRcdGNvbnN0IHVybFNhZmVDbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KGNsdWUpO1xuXHRcdHJldHVybiBgbmFtZT1saWtlLCR7dXJsU2FmZUNsdWV9YDtcblx0fVxufVxuIl19