import { Injectable } from '@angular/core';
import { ALuApiService } from './api-service.model';
import { LuApiV3Service } from './api-v3.service';
import { LuApiV4Service } from './api-v4.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
class LuApiHybridService extends ALuApiService {
    set standard(std) {
        this._standard = std;
    }
    // both
    set api(api) {
        this._v3Service.api = api;
        this._v4Service.api = api;
    }
    set filters(filters) {
        this._v3Service.filters = filters;
        this._v4Service.filters = filters;
    }
    // api v3 only
    set fields(fields) {
        this._v3Service.fields = fields;
    }
    set orderBy(orderBy) {
        this._v3Service.orderBy = orderBy;
    }
    // api v4 only
    set sort(sort) {
        this._v4Service.sort = sort;
    }
    get _service() {
        switch (this._standard) {
            case 'v4':
                return this._v4Service;
            case 'v3':
            default:
                return this._v3Service;
        }
    }
    constructor(_http) {
        super();
        this._http = _http;
        this._standard = 'v3';
        this._v3Service = new LuApiV3Service(this._http);
        this._v4Service = new LuApiV4Service(this._http);
    }
    getAll(filters = []) {
        return this._service.getAll(filters);
    }
    getPaged(page, filters = []) {
        return this._service.getPaged(page, filters);
    }
    searchAll(clue, filters = []) {
        return this._service.searchAll(clue, filters);
    }
    searchPaged(clue, page, filters = []) {
        return this._service.searchPaged(clue, page, filters);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiHybridService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiHybridService }); }
}
export { LuApiHybridService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiHybridService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLWh5YnJpZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvYXBpL3NlcnZpY2UvYXBpLWh5YnJpZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7OztBQUVsRCxNQUNhLGtCQUFzRCxTQUFRLGFBQWdCO0lBSzFGLElBQUksUUFBUSxDQUFDLEdBQWdCO1FBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxPQUFPO0lBQ1AsSUFBSSxHQUFHLENBQUMsR0FBVztRQUNsQixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDMUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQzNCLENBQUM7SUFDRCxJQUFJLE9BQU8sQ0FBQyxPQUFpQjtRQUM1QixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDbEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ25DLENBQUM7SUFFRCxjQUFjO0lBQ2QsSUFBSSxNQUFNLENBQUMsTUFBYztRQUN4QixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDakMsQ0FBQztJQUNELElBQUksT0FBTyxDQUFDLE9BQWU7UUFDMUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ25DLENBQUM7SUFFRCxjQUFjO0lBQ2QsSUFBSSxJQUFJLENBQUMsSUFBWTtRQUNwQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQVksUUFBUTtRQUNuQixRQUFRLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDdkIsS0FBSyxJQUFJO2dCQUNSLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUN4QixLQUFLLElBQUksQ0FBQztZQUNWO2dCQUNDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUN4QjtJQUNGLENBQUM7SUFFRCxZQUFvQixLQUFpQjtRQUNwQyxLQUFLLEVBQUUsQ0FBQztRQURXLFVBQUssR0FBTCxLQUFLLENBQVk7UUF0QzdCLGNBQVMsR0FBZ0IsSUFBSSxDQUFDO1FBd0NyQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQW9CLEVBQUU7UUFDNUIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsUUFBUSxDQUFDLElBQVksRUFBRSxVQUFvQixFQUFFO1FBQzVDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxTQUFTLENBQUMsSUFBWSxFQUFFLFVBQW9CLEVBQUU7UUFDN0MsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELFdBQVcsQ0FBQyxJQUFZLEVBQUUsSUFBWSxFQUFFLFVBQW9CLEVBQUU7UUFDN0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZELENBQUM7OEdBOURXLGtCQUFrQjtrSEFBbEIsa0JBQWtCOztTQUFsQixrQkFBa0I7MkZBQWxCLGtCQUFrQjtrQkFEOUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJTHVBcGlJdGVtIH0gZnJvbSAnLi4vYXBpLm1vZGVsJztcbmltcG9ydCB7IEFMdUFwaVNlcnZpY2UgfSBmcm9tICcuL2FwaS1zZXJ2aWNlLm1vZGVsJztcbmltcG9ydCB7IEx1QXBpVjNTZXJ2aWNlIH0gZnJvbSAnLi9hcGktdjMuc2VydmljZSc7XG5pbXBvcnQgeyBMdUFwaVY0U2VydmljZSB9IGZyb20gJy4vYXBpLXY0LnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTHVBcGlIeWJyaWRTZXJ2aWNlPFQgZXh0ZW5kcyBJTHVBcGlJdGVtID0gSUx1QXBpSXRlbT4gZXh0ZW5kcyBBTHVBcGlTZXJ2aWNlPFQ+IHtcblx0cHJpdmF0ZSBfdjNTZXJ2aWNlOiBMdUFwaVYzU2VydmljZTxUPjtcblx0cHJpdmF0ZSBfdjRTZXJ2aWNlOiBMdUFwaVY0U2VydmljZTxUPjtcblxuXHRwcml2YXRlIF9zdGFuZGFyZDogJ3YzJyB8ICd2NCcgPSAndjMnO1xuXHRzZXQgc3RhbmRhcmQoc3RkOiAndjMnIHwgJ3Y0Jykge1xuXHRcdHRoaXMuX3N0YW5kYXJkID0gc3RkO1xuXHR9XG5cblx0Ly8gYm90aFxuXHRzZXQgYXBpKGFwaTogc3RyaW5nKSB7XG5cdFx0dGhpcy5fdjNTZXJ2aWNlLmFwaSA9IGFwaTtcblx0XHR0aGlzLl92NFNlcnZpY2UuYXBpID0gYXBpO1xuXHR9XG5cdHNldCBmaWx0ZXJzKGZpbHRlcnM6IHN0cmluZ1tdKSB7XG5cdFx0dGhpcy5fdjNTZXJ2aWNlLmZpbHRlcnMgPSBmaWx0ZXJzO1xuXHRcdHRoaXMuX3Y0U2VydmljZS5maWx0ZXJzID0gZmlsdGVycztcblx0fVxuXG5cdC8vIGFwaSB2MyBvbmx5XG5cdHNldCBmaWVsZHMoZmllbGRzOiBzdHJpbmcpIHtcblx0XHR0aGlzLl92M1NlcnZpY2UuZmllbGRzID0gZmllbGRzO1xuXHR9XG5cdHNldCBvcmRlckJ5KG9yZGVyQnk6IHN0cmluZykge1xuXHRcdHRoaXMuX3YzU2VydmljZS5vcmRlckJ5ID0gb3JkZXJCeTtcblx0fVxuXG5cdC8vIGFwaSB2NCBvbmx5XG5cdHNldCBzb3J0KHNvcnQ6IHN0cmluZykge1xuXHRcdHRoaXMuX3Y0U2VydmljZS5zb3J0ID0gc29ydDtcblx0fVxuXG5cdHByaXZhdGUgZ2V0IF9zZXJ2aWNlKCk6IEFMdUFwaVNlcnZpY2U8VD4ge1xuXHRcdHN3aXRjaCAodGhpcy5fc3RhbmRhcmQpIHtcblx0XHRcdGNhc2UgJ3Y0Jzpcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3Y0U2VydmljZTtcblx0XHRcdGNhc2UgJ3YzJzpcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiB0aGlzLl92M1NlcnZpY2U7XG5cdFx0fVxuXHR9XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSBfaHR0cDogSHR0cENsaWVudCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5fdjNTZXJ2aWNlID0gbmV3IEx1QXBpVjNTZXJ2aWNlKHRoaXMuX2h0dHApO1xuXHRcdHRoaXMuX3Y0U2VydmljZSA9IG5ldyBMdUFwaVY0U2VydmljZSh0aGlzLl9odHRwKTtcblx0fVxuXG5cdGdldEFsbChmaWx0ZXJzOiBzdHJpbmdbXSA9IFtdKTogT2JzZXJ2YWJsZTxUW10+IHtcblx0XHRyZXR1cm4gdGhpcy5fc2VydmljZS5nZXRBbGwoZmlsdGVycyk7XG5cdH1cblxuXHRnZXRQYWdlZChwYWdlOiBudW1iZXIsIGZpbHRlcnM6IHN0cmluZ1tdID0gW10pOiBPYnNlcnZhYmxlPFRbXT4ge1xuXHRcdHJldHVybiB0aGlzLl9zZXJ2aWNlLmdldFBhZ2VkKHBhZ2UsIGZpbHRlcnMpO1xuXHR9XG5cblx0c2VhcmNoQWxsKGNsdWU6IHN0cmluZywgZmlsdGVyczogc3RyaW5nW10gPSBbXSk6IE9ic2VydmFibGU8VFtdPiB7XG5cdFx0cmV0dXJuIHRoaXMuX3NlcnZpY2Uuc2VhcmNoQWxsKGNsdWUsIGZpbHRlcnMpO1xuXHR9XG5cblx0c2VhcmNoUGFnZWQoY2x1ZTogc3RyaW5nLCBwYWdlOiBudW1iZXIsIGZpbHRlcnM6IHN0cmluZ1tdID0gW10pOiBPYnNlcnZhYmxlPFRbXT4ge1xuXHRcdHJldHVybiB0aGlzLl9zZXJ2aWNlLnNlYXJjaFBhZ2VkKGNsdWUsIHBhZ2UsIGZpbHRlcnMpO1xuXHR9XG59XG4iXX0=