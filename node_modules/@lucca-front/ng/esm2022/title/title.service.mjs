import { Inject, Injectable } from '@angular/core';
import { ActivationEnd } from '@angular/router';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { distinctUntilChanged, filter, map, switchMap, tap } from 'rxjs/operators';
import { LU_TITLE_TRANSLATE_SERVICE } from './title-translate.service';
import { TitleSeparator } from './title.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/platform-browser";
/**
 * @deprecated use Title strategy instead
 */
class LuTitleService {
    constructor(router, title, translateService) {
        this.router = router;
        this.title = title;
        this.translateService = translateService;
        this.titlePartsSubject = new BehaviorSubject(['Lucca']);
        this.titleParts$ = this.titlePartsSubject.asObservable();
        this.title$ = this.titleParts$.pipe(switchMap((titleParts) => combineLatest(titleParts.map((part) => (typeof part === 'string' ? of(part) : part)))), map((parts) => parts.join(TitleSeparator)));
    }
    init(applicationNameTranslationKey) {
        this.router.events
            .pipe(filter((event) => {
            return event instanceof ActivationEnd && event.snapshot.children.length === 0;
        }), map((event) => getPageTitleParts(event.snapshot)), map((titleParts) => uniqTitle(titleParts)), map((titleParts) => titleParts.filter(({ title }) => title !== '').map(({ title, params }) => this.translateService.translate(title, params))), map((titleParts) => [...titleParts, this.translateService.translate(applicationNameTranslationKey, {}), 'Lucca'].filter((x) => !!x)), distinctUntilChanged(), tap((titleParts) => this.titlePartsSubject.next(titleParts)))
            .subscribe();
        this.title$.pipe(tap((title) => this.title.setTitle(title))).subscribe();
    }
    prependTitle(title) {
        this.titlePartsSubject.next([title, ...this.titlePartsSubject.value]);
    }
    overrideFirstTitlePart(title) {
        this.titlePartsSubject.next([title, ...this.titlePartsSubject.value.slice(1)]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTitleService, deps: [{ token: i1.Router }, { token: i2.Title }, { token: LU_TITLE_TRANSLATE_SERVICE }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTitleService }); }
}
export { LuTitleService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTitleService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.Title }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LU_TITLE_TRANSLATE_SERVICE]
                }] }]; } });
function getPageTitleParts(snapshot) {
    const pageTitle = {
        title: (snapshot.data?.['title'] || ''),
        params: { ...snapshot.params, ...snapshot.data },
    };
    return snapshot.parent ? [pageTitle, ...getPageTitleParts(snapshot.parent)] : [pageTitle];
}
function uniqTitle(titleParts) {
    return titleParts.filter(({ title }, index) => titleParts.findIndex((pageTitle) => pageTitle.title === title) === index);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGl0bGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL3RpdGxlL3RpdGxlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUEwQixhQUFhLEVBQVUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRixPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBbUIsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRixPQUFPLEVBQTRCLDBCQUEwQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakcsT0FBTyxFQUFhLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUUxRDs7R0FFRztBQUNILE1BQ2EsY0FBYztJQVExQixZQUFvQixNQUFjLEVBQVUsS0FBWSxFQUE4QyxnQkFBMEM7UUFBNUgsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLFVBQUssR0FBTCxLQUFLLENBQU87UUFBOEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUEwQjtRQVB4SSxzQkFBaUIsR0FBRyxJQUFJLGVBQWUsQ0FBMEMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3BHLGdCQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BELFdBQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FDN0IsU0FBUyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMs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QUFJLEVBQUU7S0FDaEQsQ0FBQztJQUNGLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsR0FBRyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMzRixDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsVUFBNEI7SUFDOUMsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUM7QUFDMUgsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGl0bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIEFjdGl2YXRpb25FbmQsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGVJbnB1dCwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBmaWx0ZXIsIG1hcCwgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJTHVUaXRsZVRyYW5zbGF0ZVNlcnZpY2UsIExVX1RJVExFX1RSQU5TTEFURV9TRVJWSUNFIH0gZnJvbSAnLi90aXRsZS10cmFuc2xhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBQYWdlVGl0bGUsIFRpdGxlU2VwYXJhdG9yIH0gZnJvbSAnLi90aXRsZS5tb2RlbCc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIFRpdGxlIHN0cmF0ZWd5IGluc3RlYWRcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEx1VGl0bGVTZXJ2aWNlIHtcblx0cHJpdmF0ZSB0aXRsZVBhcnRzU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8QXJyYXk8c3RyaW5nIHwgT2JzZXJ2YWJsZUlucHV0PHN0cmluZz4+PihbJ0x1Y2NhJ10pO1xuXHR0aXRsZVBhcnRzJCA9IHRoaXMudGl0bGVQYXJ0c1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG5cdHRpdGxlJCA9IHRoaXMudGl0bGVQYXJ0cyQucGlwZShcblx0XHRzd2l0Y2hNYXAoKHRpdGxlUGFydHMpID0+IGNvbWJpbmVMYXRlc3QodGl0bGVQYXJ0cy5tYXAoKHBhcnQpID0+ICh0eXBlb2YgcGFydCA9PT0gJ3N0cmluZycgPyBvZihwYXJ0KSA6IHBhcnQpKSkpLFxuXHRcdG1hcCgocGFydHMpID0+IHBhcnRzLmpvaW4oVGl0bGVTZXBhcmF0b3IpKSxcblx0KTtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJvdXRlcjogUm91dGVyLCBwcml2YXRlIHRpdGxlOiBUaXRsZSwgQEluamVjdChMVV9USVRMRV9UUkFOU0xBVEVfU0VSVklDRSkgcHJpdmF0ZSB0cmFuc2xhdGVTZXJ2aWNlOiBJTHVUaXRsZVRyYW5zbGF0ZVNlcnZpY2UpIHt9XG5cblx0aW5pdChhcHBsaWNhdGlvbk5hbWVUcmFuc2xhdGlvbktleTogc3RyaW5nKSB7XG5cdFx0dGhpcy5yb3V0ZXIuZXZlbnRzXG5cdFx0XHQucGlwZShcblx0XHRcdFx0ZmlsdGVyKChldmVudCkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBldmVudCBpbnN0YW5jZW9mIEFjdGl2YXRpb25FbmQgJiYgZXZlbnQuc25hcHNob3QuY2hpbGRyZW4ubGVuZ3RoID09PSAwO1xuXHRcdFx0XHR9KSxcblx0XHRcdFx0bWFwKChldmVudDogQWN0aXZhdGlvbkVuZCkgPT4gZ2V0UGFnZVRpdGxlUGFydHMoZXZlbnQuc25hcHNob3QpKSxcblx0XHRcdFx0bWFwKCh0aXRsZVBhcnRzKSA9PiB1bmlxVGl0bGUodGl0bGVQYXJ0cykpLFxuXHRcdFx0XHRtYXAoKHRpdGxlUGFydHMpID0+IHRpdGxlUGFydHMuZmlsdGVyKCh7IHRpdGxlIH0pID0+IHRpdGxlICE9PSAnJykubWFwKCh7IHRpdGxlLCBwYXJhbXMgfSkgPT4gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLnRyYW5zbGF0ZSh0aXRsZSwgcGFyYW1zKSkpLFxuXHRcdFx0XHRtYXAoKHRpdGxlUGFydHM6IEFycmF5PHN0cmluZz4pID0+IFsuLi50aXRsZVBhcnRzLCB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UudHJhbnNsYXRlKGFwcGxpY2F0aW9uTmFtZVRyYW5zbGF0aW9uS2V5LCB7fSksICdMdWNjYSddLmZpbHRlcigoeCkgPT4gISF4KSksXG5cdFx0XHRcdGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG5cdFx0XHRcdHRhcCgodGl0bGVQYXJ0cykgPT4gdGhpcy50aXRsZVBhcnRzU3ViamVjdC5uZXh0KHRpdGxlUGFydHMpKSxcblx0XHRcdClcblx0XHRcdC5zdWJzY3JpYmUoKTtcblxuXHRcdHRoaXMudGl0bGUkLnBpcGUodGFwKCh0aXRsZSkgPT4gdGhpcy50aXRsZS5zZXRUaXRsZSh0aXRsZSkpKS5zdWJzY3JpYmUoKTtcblx0fVxuXG5cdHByZXBlbmRUaXRsZSh0aXRsZTogc3RyaW5nIHwgT2JzZXJ2YWJsZUlucHV0PHN0cmluZz4pIHtcblx0XHR0aGlzLnRpdGxlUGFydHNTdWJqZWN0Lm5leHQoW3RpdGxlLCAuLi50aGlzLnRpdGxlUGFydHNTdWJqZWN0LnZhbHVlXSk7XG5cdH1cblxuXHRvdmVycmlkZUZpcnN0VGl0bGVQYXJ0KHRpdGxlOiBzdHJpbmcgfCBPYnNlcnZhYmxlSW5wdXQ8c3RyaW5nPikge1xuXHRcdHRoaXMudGl0bGVQYXJ0c1N1YmplY3QubmV4dChbdGl0bGUsIC4uLnRoaXMudGl0bGVQYXJ0c1N1YmplY3QudmFsdWUuc2xpY2UoMSldKTtcblx0fVxufVxuXG5mdW5jdGlvbiBnZXRQYWdlVGl0bGVQYXJ0cyhzbmFwc2hvdDogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCk6IEFycmF5PFBhZ2VUaXRsZT4ge1xuXHRjb25zdCBwYWdlVGl0bGU6IFBhZ2VUaXRsZSA9IHtcblx0XHR0aXRsZTogKHNuYXBzaG90LmRhdGE/LlsndGl0bGUnXSB8fCAnJykgYXMgc3RyaW5nLFxuXHRcdHBhcmFtczogeyAuLi5zbmFwc2hvdC5wYXJhbXMsIC4uLnNuYXBzaG90LmRhdGEgfSxcblx0fTtcblx0cmV0dXJuIHNuYXBzaG90LnBhcmVudCA/IFtwYWdlVGl0bGUsIC4uLmdldFBhZ2VUaXRsZVBhcnRzKHNuYXBzaG90LnBhcmVudCldIDogW3BhZ2VUaXRsZV07XG59XG5cbmZ1bmN0aW9uIHVuaXFUaXRsZSh0aXRsZVBhcnRzOiBBcnJheTxQYWdlVGl0bGU+KTogQXJyYXk8UGFnZVRpdGxlPiB7XG5cdHJldHVybiB0aXRsZVBhcnRzLmZpbHRlcigoeyB0aXRsZSB9LCBpbmRleCkgPT4gdGl0bGVQYXJ0cy5maW5kSW5kZXgoKHBhZ2VUaXRsZSkgPT4gcGFnZVRpdGxlLnRpdGxlID09PSB0aXRsZSkgPT09IGluZGV4KTtcbn1cbiJdfQ==