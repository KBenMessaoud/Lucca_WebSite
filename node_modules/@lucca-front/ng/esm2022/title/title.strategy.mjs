import { Inject, Injectable, InjectionToken } from '@angular/core';
import { TitleStrategy } from '@angular/router';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';
import { LU_TITLE_TRANSLATE_SERVICE } from './title-translate.service';
import { TitleSeparator } from './title.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
export const APP_TITLE = new InjectionToken('APP_TITLE');
class LuTitleStrategy extends TitleStrategy {
    constructor(title, translateService, appTitle) {
        super();
        this.title = title;
        this.translateService = translateService;
        this.appTitle = appTitle;
        this.titlePartsSubject = new BehaviorSubject(['Lucca']);
        this.titleParts$ = this.titlePartsSubject.asObservable();
        this.title$ = this.titleParts$.pipe(switchMap((titleParts) => combineLatest(titleParts.map((part) => (typeof part === 'string' ? of(part) : part)))), map((parts) => parts.join(TitleSeparator)), distinctUntilChanged());
        this.title$.pipe(tap((title) => this.title.setTitle(title))).subscribe();
    }
    updateTitle(routerState) {
        // Title page is display from child to root
        const pageTitles = this.#getPageTitleParts(routerState.root).reverse();
        const translatedPageTitles = uniqTitle(pageTitles)
            .filter(({ title }) => title !== '')
            .map(({ title, params }) => this.translateService.translate(title, params));
        // Add the name app and 'Lucca' at the end of the title
        const titleParts = [...translatedPageTitles, this.translateService.translate(this.appTitle), 'Lucca'].filter((x) => !!x);
        this.titlePartsSubject.next(titleParts);
    }
    prependTitle(title) {
        this.titlePartsSubject.next([title, ...this.titlePartsSubject.value]);
    }
    overrideFirstTitlePart(title) {
        this.titlePartsSubject.next([title, ...this.titlePartsSubject.value.slice(1)]);
    }
    #getPageTitleParts(snapshot) {
        const pageTitle = {
            title: this.getResolvedTitleForRoute(snapshot),
            params: { ...snapshot.params, ...snapshot.data },
        };
        return snapshot.firstChild ? [pageTitle, ...this.#getPageTitleParts(snapshot.firstChild)] : [pageTitle];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTitleStrategy, deps: [{ token: i1.Title }, { token: LU_TITLE_TRANSLATE_SERVICE }, { token: APP_TITLE }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTitleStrategy, providedIn: 'root' }); }
}
export { LuTitleStrategy };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTitleStrategy, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.Title }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LU_TITLE_TRANSLATE_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [APP_TITLE]
                }] }]; } });
function uniqTitle(titleParts) {
    return titleParts.filter(({ title }, index) => titleParts.findIndex((pageTitle) => pageTitle.title === title) === index);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGl0bGUuc3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy90aXRsZS90aXRsZS5zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkUsT0FBTyxFQUErQyxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3RixPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBbUIsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNFLE9BQU8sRUFBNEIsMEJBQTBCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRyxPQUFPLEVBQWEsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFFMUQsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLElBQUksY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRXpELE1BQ2EsZUFBZ0IsU0FBUSxhQUFhO0lBUWpELFlBQW9CLEtBQVksRUFBOEMsZ0JBQTBDLEVBQTZCLFFBQWdCO1FBQ3BLLEtBQUssRUFBRSxDQUFDO1FBRFcsVUFBSyxHQUFMLEtBQUssQ0FBTztRQUE4QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQTBCO1FBQTZCLGFBQVEsR0FBUixRQUFRLENBQVE7UUFQN0osc0JBQWlCLEdBQUcsSUFBSSxlQUFlLENBQTBDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNwRyxnQkFBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwRCxXQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQzdCLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMs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QUMsU0FBUzs7QUFpQzVJLFNBQVMsU0FBUyxDQUFDLFVBQTRCO0lBQzlDLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDO0FBQzFILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaXRsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyU3RhdGVTbmFwc2hvdCwgVGl0bGVTdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGVJbnB1dCwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHN3aXRjaE1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSUx1VGl0bGVUcmFuc2xhdGVTZXJ2aWNlLCBMVV9USVRMRV9UUkFOU0xBVEVfU0VSVklDRSB9IGZyb20gJy4vdGl0bGUtdHJhbnNsYXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGFnZVRpdGxlLCBUaXRsZVNlcGFyYXRvciB9IGZyb20gJy4vdGl0bGUubW9kZWwnO1xuXG5leHBvcnQgY29uc3QgQVBQX1RJVExFID0gbmV3IEluamVjdGlvblRva2VuKCdBUFBfVElUTEUnKTtcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBMdVRpdGxlU3RyYXRlZ3kgZXh0ZW5kcyBUaXRsZVN0cmF0ZWd5IHtcblx0cHJpdmF0ZSB0aXRsZVBhcnRzU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8QXJyYXk8c3RyaW5nIHwgT2JzZXJ2YWJsZUlucHV0PHN0cmluZz4+PihbJ0x1Y2NhJ10pO1xuXHR0aXRsZVBhcnRzJCA9IHRoaXMudGl0bGVQYXJ0c1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG5cdHRpdGxlJCA9IHRoaXMudGl0bGVQYXJ0cyQucGlwZShcblx0XHRzd2l0Y2hNYXAoKHRpdGxlUGFydHMpID0+IGNvbWJpbmVMYXRlc3QodGl0bGVQYXJ0cy5tYXAoKHBhcnQpID0+ICh0eXBlb2YgcGFydCA9PT0gJ3N0cmluZycgPyBvZihwYXJ0KSA6IHBhcnQpKSkpLFxuXHRcdG1hcCgocGFydHMpID0+IHBhcnRzLmpvaW4oVGl0bGVTZXBhcmF0b3IpKSxcblx0XHRkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuXHQpO1xuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHRpdGxlOiBUaXRsZSwgQEluamVjdChMVV9USVRMRV9UUkFOU0xBVEVfU0VSVklDRSkgcHJpdmF0ZSB0cmFuc2xhdGVTZXJ2aWNlOiBJTHVUaXRsZVRyYW5zbGF0ZVNlcnZpY2UsIEBJbmplY3QoQVBQX1RJVExFKSBwcml2YXRlIGFwcFRpdGxlOiBzdHJpbmcpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMudGl0bGUkLnBpcGUodGFwKCh0aXRsZSkgPT4gdGhpcy50aXRsZS5zZXRUaXRsZSh0aXRsZSkpKS5zdWJzY3JpYmUoKTtcblx0fVxuXG5cdG92ZXJyaWRlIHVwZGF0ZVRpdGxlKHJvdXRlclN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KSB7XG5cdFx0Ly8gVGl0bGUgcGFnZSBpcyBkaXNwbGF5IGZyb20gY2hpbGQgdG8gcm9vdFxuXHRcdGNvbnN0IHBhZ2VUaXRsZXMgPSB0aGlzLiNnZXRQYWdlVGl0bGVQYXJ0cyhyb3V0ZXJTdGF0ZS5yb290KS5yZXZlcnNlKCk7XG5cdFx0Y29uc3QgdHJhbnNsYXRlZFBhZ2VUaXRsZXMgPSB1bmlxVGl0bGUocGFnZVRpdGxlcylcblx0XHRcdC5maWx0ZXIoKHsgdGl0bGUgfSkgPT4gdGl0bGUgIT09ICcnKVxuXHRcdFx0Lm1hcCgoeyB0aXRsZSwgcGFyYW1zIH0pID0+IHRoaXMudHJhbnNsYXRlU2VydmljZS50cmFuc2xhdGUodGl0bGUsIHBhcmFtcykpO1xuXHRcdC8vIEFkZCB0aGUgbmFtZSBhcHAgYW5kICdMdWNjYScgYXQgdGhlIGVuZCBvZiB0aGUgdGl0bGVcblx0XHRjb25zdCB0aXRsZVBhcnRzID0gWy4uLnRyYW5zbGF0ZWRQYWdlVGl0bGVzLCB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UudHJhbnNsYXRlKHRoaXMuYXBwVGl0bGUpLCAnTHVjY2EnXS5maWx0ZXIoKHgpID0+ICEheCk7XG5cdFx0dGhpcy50aXRsZVBhcnRzU3ViamVjdC5uZXh0KHRpdGxlUGFydHMpO1xuXHR9XG5cblx0cHJlcGVuZFRpdGxlKHRpdGxlOiBzdHJpbmcgfCBPYnNlcnZhYmxlSW5wdXQ8c3RyaW5nPikge1xuXHRcdHRoaXMudGl0bGVQYXJ0c1N1YmplY3QubmV4dChbdGl0bGUsIC4uLnRoaXMudGl0bGVQYXJ0c1N1YmplY3QudmFsdWVdKTtcblx0fVxuXG5cdG92ZXJyaWRlRmlyc3RUaXRsZVBhcnQodGl0bGU6IHN0cmluZyB8IE9ic2VydmFibGVJbnB1dDxzdHJpbmc+KSB7XG5cdFx0dGhpcy50aXRsZVBhcnRzU3ViamVjdC5uZXh0KFt0aXRsZSwgLi4udGhpcy50aXRsZVBhcnRzU3ViamVjdC52YWx1ZS5zbGljZSgxKV0pO1xuXHR9XG5cblx0I2dldFBhZ2VUaXRsZVBhcnRzKHNuYXBzaG90OiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KTogQXJyYXk8UGFnZVRpdGxlPiB7XG5cdFx0Y29uc3QgcGFnZVRpdGxlOiBQYWdlVGl0bGUgPSB7XG5cdFx0XHR0aXRsZTogdGhpcy5nZXRSZXNvbHZlZFRpdGxlRm9yUm91dGUoc25hcHNob3QpIGFzIHN0cmluZyxcblx0XHRcdHBhcmFtczogeyAuLi5zbmFwc2hvdC5wYXJhbXMsIC4uLnNuYXBzaG90LmRhdGEgfSxcblx0XHR9O1xuXHRcdHJldHVybiBzbmFwc2hvdC5maXJzdENoaWxkID8gW3BhZ2VUaXRsZSwgLi4udGhpcy4jZ2V0UGFnZVRpdGxlUGFydHMoc25hcHNob3QuZmlyc3RDaGlsZCldIDogW3BhZ2VUaXRsZV07XG5cdH1cbn1cblxuZnVuY3Rpb24gdW5pcVRpdGxlKHRpdGxlUGFydHM6IEFycmF5PFBhZ2VUaXRsZT4pOiBBcnJheTxQYWdlVGl0bGU+IHtcblx0cmV0dXJuIHRpdGxlUGFydHMuZmlsdGVyKCh7IHRpdGxlIH0sIGluZGV4KSA9PiB0aXRsZVBhcnRzLmZpbmRJbmRleCgocGFnZVRpdGxlKSA9PiBwYWdlVGl0bGUudGl0bGUgPT09IHRpdGxlKSA9PT0gaW5kZXgpO1xufVxuIl19