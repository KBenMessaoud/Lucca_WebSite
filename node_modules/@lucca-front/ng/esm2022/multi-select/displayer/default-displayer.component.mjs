import { AsyncPipe, NgFor, NgIf, NgPlural, NgPluralCase } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, DestroyRef, ElementRef, HostBinding, NgZone, ViewChild, ViewChildren, inject, } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { getIntl } from '@lucca-front/ng/core';
import { LU_OPTION_CONTEXT, ɵLuOptionOutletDirective } from '@lucca-front/ng/core-select';
import { LuTooltipModule } from '@lucca-front/ng/tooltip';
import { Observable, ReplaySubject, combineLatest, concatMap, debounceTime, distinctUntilChanged, map, startWith } from 'rxjs';
import { LuMultiSelectInputComponent } from '../input';
import { LU_MULTI_SELECT_DISPLAYER_TRANSLATIONS } from './default-displayer.translate';
import * as i0 from "@angular/core";
function fromElementWidth(el) {
    return new Observable((observer) => {
        // Emit the initial width
        observer.next(el.getBoundingClientRect().width);
        // Emit the new width whenever the element is resized
        const resizeObserver = new ResizeObserver((entries) => observer.next(entries[0].contentRect.width));
        resizeObserver.observe(el);
        // Cleanup observer on cancellation
        return () => resizeObserver.disconnect();
    }).pipe(distinctUntilChanged());
}
class LuMultiSelectDefaultDisplayerComponent {
    constructor() {
        this.select = inject(LuMultiSelectInputComponent);
        this.elementRef = inject(ElementRef);
        this.cdr = inject(ChangeDetectorRef);
        this.intl = getIntl(LU_MULTI_SELECT_DISPLAYER_TRANSLATIONS);
        this.destroyRef = inject(DestroyRef);
        this.zone = inject(NgZone);
        this.ngAfterViewInit$ = new ReplaySubject(1);
        this.chips$ = this.ngAfterViewInit$.pipe(concatMap(() => this.chipsQL.changes.pipe(startWith(undefined))), map(() => this.chipsQL.toArray().map((chip) => chip.nativeElement)));
        this.context = inject(LU_OPTION_CONTEXT);
        this.visibleChips$ = new ReplaySubject(1);
        this.hiddenChips$ = new ReplaySubject(1);
        this.visibleChipsCount$ = this.visibleChips$.pipe(map((chips) => chips.length), distinctUntilChanged());
        this.hiddenChipsCount$ = this.hiddenChips$.pipe(map((chips) => chips.length), distinctUntilChanged());
        this.hiddenOptionCountWidthCssVar = 0;
        this.hiddenOptionCountOffsetLeftCssVar = 0;
    }
    get disabled() {
        return this.select.disabled;
    }
    ngOnInit() {
        this.visibleChips$.pipe(takeUntilDestroyed(this.destroyRef)).subscribe((visible) => {
            this.hiddenOptionCountOffsetLeftCssVar = visible.length ? visible[visible.length - 1].offsetLeft + visible[visible.length - 1].offsetWidth : 0;
            this.cdr.markForCheck();
        });
        this.hiddenChipsCount$.pipe(takeUntilDestroyed(this.destroyRef)).subscribe((hidden) => {
            this.hiddenOptionCountWidthCssVar = hidden;
            this.cdr.markForCheck();
        });
        combineLatest([fromElementWidth(this.chipsContainer.nativeElement), fromElementWidth(this.overflowCountContainer.nativeElement), this.chips$])
            .pipe(debounceTime(0), map(([containerWidth, counterWidth, chips]) => {
            const baseOffsetTop = this.elementRef.nativeElement.offsetTop;
            const isOutOfContainer = (chip, allowedWidth) => chip.offsetTop > baseOffsetTop || chip.offsetLeft + chip.offsetWidth > allowedWidth;
            const needsCounterSpace = !!chips.length && isOutOfContainer(chips[chips.length - 1], containerWidth);
            const availableWidth = needsCounterSpace ? containerWidth - counterWidth : containerWidth;
            // First on next line or first out of container
            const firstHiddenIndex = chips.findIndex((chip) => isOutOfContainer(chip, availableWidth));
            return firstHiddenIndex !== -1
                ? {
                    visible: chips.slice(0, firstHiddenIndex),
                    hidden: chips.slice(firstHiddenIndex),
                }
                : {
                    visible: chips,
                    hidden: [],
                };
        }), takeUntilDestroyed(this.destroyRef))
            .subscribe(({ visible, hidden }) => {
            this.zone.run(() => {
                this.visibleChips$.next(visible);
                this.hiddenChips$.next(hidden);
            });
        });
    }
    unselectOption(option, $event) {
        $event.stopPropagation();
        $event.preventDefault();
        this.select.updateValue(this.select.value.filter((o) => o !== option));
    }
    ngOnDestroy() {
        this.ngAfterViewInit$.complete();
    }
    ngAfterViewInit() {
        this.ngAfterViewInit$.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuMultiSelectDefaultDisplayerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuMultiSelectDefaultDisplayerComponent, isStandalone: true, selector: "lu-multi-select-default-displayer", host: { properties: { "style.--hidden-option-count-width.px": "this.hiddenOptionCountWidthCssVar", "style.--hidden-option-count-offset-left.px": "this.hiddenOptionCountOffsetLeftCssVar" } }, viewQueries: [{ propertyName: "overflowCountContainer", first: true, predicate: ["overflow"], descendants: true, static: true }, { propertyName: "chipsContainer", first: true, predicate: ["chipsContainer"], descendants: true, static: true }, { propertyName: "chipsQL", predicate: ["chip"], descendants: true }], ngImport: i0, template: `
		<div class="chips-container" #chipsContainer>
			<div
				#chip
				*ngFor="let option of context.option$ | async; let index = index"
				class="chip lu-multiselect-chip"
				[class.mod-unkillable]="disabled"
				[attr.aria-hidden]="index >= ((visibleChipsCount$ | async) || 0) ? 'true' : undefined"
			>
				<span class="lu-multiselect-chip-value"><ng-container *luOptionOutlet="select.valueTpl || select.optionTpl; value: option"></ng-container></span>
				<a href *ngIf="!disabled" type="button" class="chip-kill" (click)="unselectOption(option, $event)" [attr.tabindex]="index >= ((visibleChipsCount$ | async) || 0) ? -1 : undefined"></a>
			</div>
		</div>
		<div class="lu-multiselect-counter" #overflow>
			<ng-container *ngIf="hiddenChipsCount$ | async as count">
				<div class="chip mod-unkillable lu-multiselect-counter-chip" aria-hidden="true">+ {{ count }}</div>
				<span class="u-mask" [ngPlural]="count">
					<ng-template ngPluralCase="=1">{{ intl.otherResult }}</ng-template>
					<ng-template ngPluralCase="other">{{ intl.otherResults }}</ng-template>
				</span>
			</ng-container>
		</div>
	`, isInline: true, styles: [":host{display:flex;height:var(--sizes-M-lineHeight);position:relative;padding-right:var(--hidden-option-count-width);overflow:hidden}:host-context(.textfield.mod-S){height:var(--sizes-S-lineHeight)}:host-context(lu-multi-select.is-disabled) .chip{background:var(--palettes-grey-100);color:var(--palettes-grey-500)}:host-context(lu-multi-select.is-disabled) .chip .chip-kill{display:none}.lu-multiselect-counter{position:absolute;top:0;left:calc(var(--hidden-option-count-offset-left) + var(--spacings-XXS))}.lu-multiselect-counter-chip:focus-visible{outline:2px solid var(--palettes-primary-700);outline-offset:2px}.lu-multiselect-chip[aria-hidden]{visibility:hidden}.lu-multiselect-chip-value{max-width:4rem;text-overflow:ellipsis;overflow:hidden}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "ngmodule", type: LuTooltipModule }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: NgPlural, selector: "[ngPlural]", inputs: ["ngPlural"] }, { kind: "directive", type: NgPluralCase, selector: "[ngPluralCase]" }, { kind: "directive", type: ɵLuOptionOutletDirective, selector: "[luOptionOutlet]", inputs: ["luOptionOutlet", "luOptionOutletValue"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuMultiSelectDefaultDisplayerComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuMultiSelectDefaultDisplayerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-multi-select-default-displayer', standalone: true, imports: [AsyncPipe, LuTooltipModule, NgIf, NgFor, NgPlural, NgPluralCase, ɵLuOptionOutletDirective], template: `
		<div class="chips-container" #chipsContainer>
			<div
				#chip
				*ngFor="let option of context.option$ | async; let index = index"
				class="chip lu-multiselect-chip"
				[class.mod-unkillable]="disabled"
				[attr.aria-hidden]="index >= ((visibleChipsCount$ | async) || 0) ? 'true' : undefined"
			>
				<span class="lu-multiselect-chip-value"><ng-container *luOptionOutlet="select.valueTpl || select.optionTpl; value: option"></ng-container></span>
				<a href *ngIf="!disabled" type="button" class="chip-kill" (click)="unselectOption(option, $event)" [attr.tabindex]="index >= ((visibleChipsCount$ | async) || 0) ? -1 : undefined"></a>
			</div>
		</div>
		<div class="lu-multiselect-counter" #overflow>
			<ng-container *ngIf="hiddenChipsCount$ | async as count">
				<div class="chip mod-unkillable lu-multiselect-counter-chip" aria-hidden="true">+ {{ count }}</div>
				<span class="u-mask" [ngPlural]="count">
					<ng-template ngPluralCase="=1">{{ intl.otherResult }}</ng-template>
					<ng-template ngPluralCase="other">{{ intl.otherResults }}</ng-template>
				</span>
			</ng-container>
		</div>
	`, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{display:flex;height:var(--sizes-M-lineHeight);position:relative;padding-right:var(--hidden-option-count-width);overflow:hidden}:host-context(.textfield.mod-S){height:var(--sizes-S-lineHeight)}:host-context(lu-multi-select.is-disabled) .chip{background:var(--palettes-grey-100);color:var(--palettes-grey-500)}:host-context(lu-multi-select.is-disabled) .chip .chip-kill{display:none}.lu-multiselect-counter{position:absolute;top:0;left:calc(var(--hidden-option-count-offset-left) + var(--spacings-XXS))}.lu-multiselect-counter-chip:focus-visible{outline:2px solid var(--palettes-primary-700);outline-offset:2px}.lu-multiselect-chip[aria-hidden]{visibility:hidden}.lu-multiselect-chip-value{max-width:4rem;text-overflow:ellipsis;overflow:hidden}\n"] }]
        }], propDecorators: { overflowCountContainer: [{
                type: ViewChild,
                args: ['overflow', { static: true }]
            }], chipsContainer: [{
                type: ViewChild,
                args: ['chipsContainer', { static: true }]
            }], chipsQL: [{
                type: ViewChildren,
                args: ['chip']
            }], hiddenOptionCountWidthCssVar: [{
                type: HostBinding,
                args: ['style.--hidden-option-count-width.px']
            }], hiddenOptionCountOffsetLeftCssVar: [{
                type: HostBinding,
                args: ['style.--hidden-option-count-offset-left.px']
            }] } });
//# sourceMappingURL=data:application/json;base64,