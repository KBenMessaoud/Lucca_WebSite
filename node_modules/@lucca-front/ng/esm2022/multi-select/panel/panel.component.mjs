import { A11yModule, ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { AsyncPipe, NgFor, NgIf, NgTemplateOutlet } from '@angular/common';
import { ChangeDetectionStrategy, Component, HostListener, inject, ViewChild, ViewChildren } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { getIntl } from '@lucca-front/ng/core';
import { SELECT_ID, ɵLuOptionComponent, ɵLuOptionOutletDirective } from '@lucca-front/ng/core-select';
import { asyncScheduler, filter, map, observeOn, take, takeUntil } from 'rxjs';
import { LuMultiSelectPanelRef } from '../input/panel.model';
import { MULTI_SELECT_PANEL_DATA } from '../select.model';
import { LU_MULTI_SELECT_TRANSLATIONS } from '../select.translate';
import { LuIsOptionSelectedPipe } from './option-selected.pipe';
import { ɵLuMultiSelectSelectedChipDirective } from './selected-chip.directive';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
import * as i2 from "@angular/forms";
class LuMultiSelectPanelComponent {
    constructor() {
        this.panelData = inject(MULTI_SELECT_PANEL_DATA);
        this.panelRef = inject(LuMultiSelectPanelRef);
        this.selectId = inject(SELECT_ID);
        this.intl = getIntl(LU_MULTI_SELECT_TRANSLATIONS);
        this.isExpanded = this.panelData.expanded;
        this.options$ = this.panelData.options$;
        this.loading$ = this.panelData.loading$;
        this.areAllOptionsSelected$ = this.panelData.areAllOptionsSelected$;
        this.canSelectAll = false; // TODO connect to panel options when we'll be ok on designing select all
        this.optionComparer = this.panelData.optionComparer;
        this.selectedOptions = this.panelData.initialValue || [];
        this.optionTpl = this.panelData.optionTpl;
        this.searchable = this.panelData.searchable;
        this.search = null;
    }
    onScroll(evt) {
        if (!(evt.target instanceof HTMLElement)) {
            return;
        }
        if (evt.target.scrollTop === 0) {
            this.panelRef.previousPage.emit();
        }
        if (evt.target.scrollHeight - evt.target.scrollTop - evt.target.clientHeight < 1) {
            this.panelRef.nextPage.emit();
        }
    }
    ngAfterViewInit() {
        if (!this.optionsQL) {
            return;
        }
        this.initLeftColumnKeyManager();
        this.initRightColumnKeyManager();
        if (this.searchInput) {
            setTimeout(() => this.searchInput.nativeElement.focus());
        }
        if (this.isExpanded) {
            this.panelRef.useExpandedPosition();
        }
        else {
            this.panelRef.useDefaultPosition();
        }
    }
    onKeyDown($event) {
        if ($event.key === 'Escape') {
            return this.panelRef.close();
        }
    }
    onLeftColumnKeydown($event) {
        if ($event.code === 'Space' || $event.code === 'Enter') {
            this.toggleOption(this.leftColumnKeyManager?.activeItem?.option);
            $event.preventDefault();
            return;
        }
        this.leftColumnKeyManager?.onKeydown($event);
    }
    onRightColumnKeydown($event) {
        const option = this.rightColumnKeyManager?.activeItem?.option;
        if (option && ($event.code === 'Space' || $event.code === 'Enter')) {
            this.onChipKillClick(option);
            $event.preventDefault();
            return;
        }
        this.rightColumnKeyManager?.onKeydown($event);
    }
    // toggleAll(shouldSelectAll: boolean): void {
    // 	if (shouldSelectAll) {
    // 		this.panelRef.selectAll.emit();
    // 	} else {
    // 		this.clear();
    // 	}
    // }
    updateClue(clue) {
        this.search = clue;
        this.panelRef.clueChanged.emit(clue);
        setTimeout(() => this.leftColumnKeyManager.setFirstItemActive());
    }
    toggleOption(option) {
        const selectedOption = this.selectedOptions.find((o) => this.optionComparer(o, option));
        this.selectedOptions = selectedOption ? this.selectedOptions.filter((o) => o !== selectedOption) : [...this.selectedOptions, option];
        this.panelRef.emitValue(this.selectedOptions);
        this.leftColumnKeyManager?.setActiveItem(this.optionsQL.toArray().findIndex((o) => o.option === option));
    }
    onChipKillClick(option) {
        const optionToUnselectIndex = this.selectedOptions.findIndex((o) => this.optionComparer(o, option));
        this.selectedOptions = this.selectedOptions.filter((_, index) => index !== optionToUnselectIndex);
        this.panelRef.emitValue(this.selectedOptions);
        if (this.selectedOptions.length && this.rightColumnKeyManager) {
            optionToUnselectIndex >= this.selectedOptions.length ? this.rightColumnKeyManager.setPreviousItemActive() : this.rightColumnKeyManager.setNextItemActive();
        }
    }
    clear() {
        this.selectedOptions = [];
        this.panelRef.emitValue(this.selectedOptions);
    }
    initLeftColumnKeyManager() {
        this.leftColumnKeyManager = new ActiveDescendantKeyManager(this.optionsQL).withHomeAndEnd();
        if (this.selectedOptions) {
            this.options$
                ?.pipe(observeOn(asyncScheduler), map((options) => (this.selectedOptions.length ? options.findIndex((o) => this.optionComparer(o, this.selectedOptions[0])) : -1)), filter((index) => index !== -1), take(1), takeUntil(this.panelRef.closed))
                .subscribe((selectedIndex) => this.leftColumnKeyManager.setActiveItem(selectedIndex));
        }
        this.leftColumnKeyManager.change
            .pipe(map(() => this.leftColumnKeyManager.activeItem?.id), takeUntil(this.panelRef.closed))
            .subscribe((activeDescendant) => this.panelRef.activeOptionIdChanged.emit(activeDescendant));
    }
    initRightColumnKeyManager() {
        this.rightColumnKeyManager = new ActiveDescendantKeyManager(this.selectedChipsQL).withHomeAndEnd();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuMultiSelectPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuMultiSelectPanelComponent, isStandalone: true, selector: "lu-select-panel", host: { listeners: { "keydown": "onKeyDown($event)" } }, viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true }, { propertyName: "optionsQL", predicate: ɵLuOptionComponent, descendants: true }, { propertyName: "selectedChipsQL", predicate: ɵLuMultiSelectSelectedChipDirective, descendants: true }], ngImport: i0, template: "<!-- TODO : il faudrait remplacer la classe is-expanded par un attribut aria-expanded=\"true\"-->\n<ng-template #searchInputTpl>\n\t<label class=\"panel-search textfield mod-search mod-outlined lu-multiselect-search\">\n\t\t<input\n\t\t\t#searchInput\n\t\t\tclass=\"textfield-input\"\n\t\t\t[(ngModel)]=\"search\"\n\t\t\t(ngModelChange)=\"updateClue($event)\"\n\t\t\t[ngModelOptions]=\"{ standalone: true }\"\n\t\t/>\n\t\t<span class=\"u-mask textfield-label\">{{ intl.search }}</span>\n\t</label>\n</ng-template>\n\n<div\n\tclass=\"lu-picker-panel lu-option-picker-panel lu-multiselect-panel mod-multiple\"\n\trole=\"dialog\"\n\tcdkTrapFocus\n\t*ngIf=\"{ options: options$ | async } as ctx\"\n\t[cdkTrapFocusAutoCapture]=\"true\"\n\t[class.is-expanded]=\"isExpanded\"\n\t[attr.aria-expanded]=\"isExpanded ? 'true' : undefined\"\n>\n\t<div class=\"lu-multiselect-panel-form\" *ngIf=\"searchable && !isExpanded\">\n\t\t<ng-container *ngTemplateOutlet=\"searchInputTpl\"></ng-container>\n\t\t<!--\t\t<button class=\"button mod-text mod-icon lu-multiselect-expandbutton\" type=\"button\" (click)=\"toggleExpansion()\">-->\n\t\t<!--\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon\" [class.icon-fullscreen]=\"!isExpanded\" [class.icon-fullscreenExit]=\"isExpanded\"></span>-->\n\t\t<!--\t\t\t{{ isExpanded ? intl.reduce : intl.expand }}-->\n\t\t<!--\t\t</button>-->\n\t</div>\n\t<div class=\"lu-multiselect-panel-columns\">\n\t\t<div class=\"lu-multiselect-panel-columns-col1\" (keydown)=\"onLeftColumnKeydown($event)\">\n\t\t\t<div class=\"lu-multiselect-panel-form\" *ngIf=\"searchable && isExpanded\">\n\t\t\t\t<ng-container *ngTemplateOutlet=\"searchInputTpl\"></ng-container>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclass=\"lu-picker-content lu-multiselect-panel-columns-col1-content\"\n\t\t\t\t[class.is-loading]=\"loading$ | async\"\n\t\t\t\ttabindex=\"0\"\n\t\t\t\tcdkFocusInitial\n\t\t\t\trole=\"list\"\n\t\t\t\taria-multiselectable=\"true\"\n\t\t\t\t(scroll)=\"onScroll($event)\"\n\t\t\t>\n\t\t\t\t<ng-container *ngIf=\"searchable\">\n\t\t\t\t\t<div class=\"optionPlaceholder\" *ngIf=\"search && !ctx.options?.length\">\n\t\t\t\t\t\t<p class=\"optionPlaceholder-content u-marginBottom0\">{{ intl.emptyResults }}</p>\n\t\t\t\t\t\t<button type=\"button\" class=\"link\" (click)=\"updateClue(null); searchInput.nativeElement.focus()\">{{ intl.clearSearch }}</button>\n\t\t\t\t\t</div>\n\t\t\t\t</ng-container>\n\n\t\t\t\t<!--\t\t\t\t<ng-container *ngIf=\"canSelectAll\">-->\n\t\t\t\t<!--\t\t\t\t\t<label class=\"checkbox lu-multiselect-selectall\" role=\"option\" [for]=\"selectId + '-select-all'\">-->\n\t\t\t\t<!--\t\t\t\t\t\t<input-->\n\t\t\t\t<!--\t\t\t\t\t\t\tclass=\"checkbox-input\"-->\n\t\t\t\t<!--\t\t\t\t\t\t\ttype=\"checkbox\"-->\n\t\t\t\t<!--\t\t\t\t\t\t\t[class.is-incomplete]=\"(areAllOptionsSelected$ | async) !== true && selectedOptions.length\"-->\n\t\t\t\t<!--\t\t\t\t\t\t\t[id]=\"selectId + '-select-all'\"-->\n\t\t\t\t<!--\t\t\t\t\t\t\t[ngModel]=\"(areAllOptionsSelected$ | async) === true || !!selectedOptions.length\"-->\n\t\t\t\t<!--\t\t\t\t\t\t\t(ngModelChange)=\"toggleAll($event)\"-->\n\t\t\t\t<!--\t\t\t\t\t\t/>-->\n\t\t\t\t<!--\t\t\t\t\t\t<span class=\"checkbox-label\">{{ intl.selectAll }}</span>-->\n\t\t\t\t<!--\t\t\t\t\t</label>-->\n\t\t\t\t<!--\t\t\t\t</ng-container>-->\n\n\t\t\t\t<div class=\"lu-picker-content-option\">\n\t\t\t\t\t<lu-select-option\n\t\t\t\t\t\t*ngFor=\"let option of ctx.options; let index = index\"\n\t\t\t\t\t\t[option]=\"option\"\n\t\t\t\t\t\t[optionTpl]=\"optionTpl\"\n\t\t\t\t\t\t[optionIndex]=\"index\"\n\t\t\t\t\t\t[scrollIntoViewOptions]=\"{ block: 'nearest' }\"\n\t\t\t\t\t\t[isSelected]=\"option | luIsOptionSelected:optionComparer:selectedOptions\"\n\t\t\t\t\t\t(click)=\"toggleOption(option)\"\n\t\t\t\t\t></lu-select-option>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"loading$ | async\" class=\"panel-loading loading lu-picker-loading\"></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"lu-multiselect-panel-columns-col2\" *ngIf=\"isExpanded\">\n\t\t\t<div class=\"lu-multiselect-emptystate\" *ngIf=\"!selectedOptions.length\">{{ intl.emptySelection }}</div>\n\t\t\t<div class=\"lu-multiselect-chips\" role=\"listbox\" tabindex=\"0\" *ngIf=\"selectedOptions.length\" (keydown)=\"onRightColumnKeydown($event)\">\n\t\t\t\t<div role=\"option\" class=\"chip lu-multiselect-chip\" *ngFor=\"let option of selectedOptions\" [luMultiSelectSelectedChip]=\"option\">\n\t\t\t\t\t<ng-container *luOptionOutlet=\"optionTpl; value: option\"></ng-container>\n\t\t\t\t\t<button type=\"button\" class=\"chip-kill\" tabindex=\"-1\" (click)=\"onChipKillClick(option)\"></button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div *ngIf=\"selectedOptions.length\" class=\"lu-multiselect-panel-columns-col2-footer\">\n\t\t\t\t<button class=\"button mod-text\" type=\"button\" (click)=\"clear()\">{{ intl.clear }}</button>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.optionPlaceholder{display:block;padding:var(--components-options-item-padding-vertical) var(--components-options-item-padding-horizontal);font-style:italic;color:var(--palettes-grey-600)}.lu-multiselect-panel{display:flex;flex-direction:column;width:100%;border-radius:var(--commons-borderRadius-M);background-color:var(--colors-white-color);box-shadow:var(--commons-boxShadow-M);transition-property:width,min-width,margin-top,margin-left;transition-duration:var(--commons-animations-durations-fast);transition-timing-function:ease-in}.lu-multiselect-panel-form{padding:var(--spacings-XS);z-index:1}.lu-multiselect-panel-columns{display:flex;gap:var(--spacings-XS);padding:0;width:100%;transition:padding var(--commons-animations-durations-standard) ease;max-height:20rem}.is-expanded .lu-multiselect-panel-columns{padding:var(--spacings-XS)}[class*=lu-multiselect-panel-columns-col]{display:flex;flex-basis:100%;flex-direction:column}.is-expanded [class*=lu-multiselect-panel-columns-col]{border-radius:var(--commons-borderRadius-M)}.lu-multiselect-panel-columns-col2{align-items:flex-start;background-color:var(--palettes-grey-25);min-width:18rem}.is-expanded .lu-multiselect-panel-columns-col1{border:var(--commons-divider-width) solid var(--palettes-grey-200)}.lu-multiselect-panel-columns-col1-content{box-shadow:none;animation:none;padding:var(--spacings-XS);max-height:inherit}.lu-multiselect-panel-columns-col1-content,.lu-multiselect-chips{scroll-snap-type:y proximity;outline:none}.lu-multiselect-panel-columns-col1-content>*,.lu-multiselect-chips>*{scroll-snap-align:center}.lu-multiselect-panel-columns-col1-content:focus-visible,.lu-multiselect-chips:focus-visible{outline:2px solid var(--palettes-primary-700);outline-offset:2px}.lu-multiselect-search{flex-grow:1}.lu-multiselect-selectall{padding:var(--spacings-XS);font-weight:600;border-radius:var(--commons-borderRadius-M);margin-bottom:var(--spacings-XXS)}.lu-multiselect-selectall:hover,.lu-multiselect-selectall:focus-within{background-color:var(--palettes-grey-25)}.lu-multiselect-chips{overflow-y:auto;display:flex;flex-grow:1;flex-direction:column;align-items:flex-start;align-self:stretch;gap:var(--spacings-XXS);padding:var(--spacings-XS);border-top-left-radius:var(--commons-borderRadius-M);border-top-right-radius:var(--commons-borderRadius-M)}.lu-multiselect-panel-columns-col2-footer{display:flex;flex:0;align-items:flex-end;align-self:stretch;justify-content:flex-end;border-radius:0!important;border-top:var(--commons-divider-border);margin-top:auto;padding:var(--spacings-XXS) var(--spacings-XS)}.lu-multiselect-panel-form{display:flex;gap:var(--spacings-XS)}.lu-multiselect-panel-form~.lu-multiselect-panel-columns-col1-content{padding-top:0}@media not all and (min-width: 50em){.lu-multiselect-expandbutton{display:none}}.lu-multiselect-emptystate{margin:auto;text-align:center;padding:var(--spacings-S);color:var(--palettes-grey-600)}\n"], dependencies: [{ kind: "ngmodule", type: A11yModule }, { kind: "directive", type: i1.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }, { kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "pipe", type: LuIsOptionSelectedPipe, name: "luIsOptionSelected" }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: ɵLuOptionComponent, selector: "lu-select-option", inputs: ["optionTpl", "isSelected", "option", "optionIndex", "scrollIntoViewOptions"] }, { kind: "directive", type: ɵLuOptionOutletDirective, selector: "[luOptionOutlet]", inputs: ["luOptionOutlet", "luOptionOutletValue"] }, { kind: "directive", type: ɵLuMultiSelectSelectedChipDirective, selector: "[luMultiSelectSelectedChip]", inputs: ["luMultiSelectSelectedChip"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { LuMultiSelectPanelComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuMultiSelectPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-select-panel', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [A11yModule, AsyncPipe, FormsModule, LuIsOptionSelectedPipe, NgIf, NgFor, ɵLuOptionComponent, ɵLuOptionOutletDirective, ɵLuMultiSelectSelectedChipDirective, NgTemplateOutlet], template: "<!-- TODO : il faudrait remplacer la classe is-expanded par un attribut aria-expanded=\"true\"-->\n<ng-template #searchInputTpl>\n\t<label class=\"panel-search textfield mod-search mod-outlined lu-multiselect-search\">\n\t\t<input\n\t\t\t#searchInput\n\t\t\tclass=\"textfield-input\"\n\t\t\t[(ngModel)]=\"search\"\n\t\t\t(ngModelChange)=\"updateClue($event)\"\n\t\t\t[ngModelOptions]=\"{ standalone: true }\"\n\t\t/>\n\t\t<span class=\"u-mask textfield-label\">{{ intl.search }}</span>\n\t</label>\n</ng-template>\n\n<div\n\tclass=\"lu-picker-panel lu-option-picker-panel lu-multiselect-panel mod-multiple\"\n\trole=\"dialog\"\n\tcdkTrapFocus\n\t*ngIf=\"{ options: options$ | async } as ctx\"\n\t[cdkTrapFocusAutoCapture]=\"true\"\n\t[class.is-expanded]=\"isExpanded\"\n\t[attr.aria-expanded]=\"isExpanded ? 'true' : undefined\"\n>\n\t<div class=\"lu-multiselect-panel-form\" *ngIf=\"searchable && !isExpanded\">\n\t\t<ng-container *ngTemplateOutlet=\"searchInputTpl\"></ng-container>\n\t\t<!--\t\t<button class=\"button mod-text mod-icon lu-multiselect-expandbutton\" type=\"button\" (click)=\"toggleExpansion()\">-->\n\t\t<!--\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon\" [class.icon-fullscreen]=\"!isExpanded\" [class.icon-fullscreenExit]=\"isExpanded\"></span>-->\n\t\t<!--\t\t\t{{ isExpanded ? intl.reduce : intl.expand }}-->\n\t\t<!--\t\t</button>-->\n\t</div>\n\t<div class=\"lu-multiselect-panel-columns\">\n\t\t<div class=\"lu-multiselect-panel-columns-col1\" (keydown)=\"onLeftColumnKeydown($event)\">\n\t\t\t<div class=\"lu-multiselect-panel-form\" *ngIf=\"searchable && isExpanded\">\n\t\t\t\t<ng-container *ngTemplateOutlet=\"searchInputTpl\"></ng-container>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclass=\"lu-picker-content lu-multiselect-panel-columns-col1-content\"\n\t\t\t\t[class.is-loading]=\"loading$ | async\"\n\t\t\t\ttabindex=\"0\"\n\t\t\t\tcdkFocusInitial\n\t\t\t\trole=\"list\"\n\t\t\t\taria-multiselectable=\"true\"\n\t\t\t\t(scroll)=\"onScroll($event)\"\n\t\t\t>\n\t\t\t\t<ng-container *ngIf=\"searchable\">\n\t\t\t\t\t<div class=\"optionPlaceholder\" *ngIf=\"search && !ctx.options?.length\">\n\t\t\t\t\t\t<p class=\"optionPlaceholder-content u-marginBottom0\">{{ intl.emptyResults }}</p>\n\t\t\t\t\t\t<button type=\"button\" class=\"link\" (click)=\"updateClue(null); searchInput.nativeElement.focus()\">{{ intl.clearSearch }}</button>\n\t\t\t\t\t</div>\n\t\t\t\t</ng-container>\n\n\t\t\t\t<!--\t\t\t\t<ng-container *ngIf=\"canSelectAll\">-->\n\t\t\t\t<!--\t\t\t\t\t<label class=\"checkbox lu-multiselect-selectall\" role=\"option\" [for]=\"selectId + '-select-all'\">-->\n\t\t\t\t<!--\t\t\t\t\t\t<input-->\n\t\t\t\t<!--\t\t\t\t\t\t\tclass=\"checkbox-input\"-->\n\t\t\t\t<!--\t\t\t\t\t\t\ttype=\"checkbox\"-->\n\t\t\t\t<!--\t\t\t\t\t\t\t[class.is-incomplete]=\"(areAllOptionsSelected$ | async) !== true && selectedOptions.length\"-->\n\t\t\t\t<!--\t\t\t\t\t\t\t[id]=\"selectId + '-select-all'\"-->\n\t\t\t\t<!--\t\t\t\t\t\t\t[ngModel]=\"(areAllOptionsSelected$ | async) === true || !!selectedOptions.length\"-->\n\t\t\t\t<!--\t\t\t\t\t\t\t(ngModelChange)=\"toggleAll($event)\"-->\n\t\t\t\t<!--\t\t\t\t\t\t/>-->\n\t\t\t\t<!--\t\t\t\t\t\t<span class=\"checkbox-label\">{{ intl.selectAll }}</span>-->\n\t\t\t\t<!--\t\t\t\t\t</label>-->\n\t\t\t\t<!--\t\t\t\t</ng-container>-->\n\n\t\t\t\t<div class=\"lu-picker-content-option\">\n\t\t\t\t\t<lu-select-option\n\t\t\t\t\t\t*ngFor=\"let option of ctx.options; let index = index\"\n\t\t\t\t\t\t[option]=\"option\"\n\t\t\t\t\t\t[optionTpl]=\"optionTpl\"\n\t\t\t\t\t\t[optionIndex]=\"index\"\n\t\t\t\t\t\t[scrollIntoViewOptions]=\"{ block: 'nearest' }\"\n\t\t\t\t\t\t[isSelected]=\"option | luIsOptionSelected:optionComparer:selectedOptions\"\n\t\t\t\t\t\t(click)=\"toggleOption(option)\"\n\t\t\t\t\t></lu-select-option>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"loading$ | async\" class=\"panel-loading loading lu-picker-loading\"></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"lu-multiselect-panel-columns-col2\" *ngIf=\"isExpanded\">\n\t\t\t<div class=\"lu-multiselect-emptystate\" *ngIf=\"!selectedOptions.length\">{{ intl.emptySelection }}</div>\n\t\t\t<div class=\"lu-multiselect-chips\" role=\"listbox\" tabindex=\"0\" *ngIf=\"selectedOptions.length\" (keydown)=\"onRightColumnKeydown($event)\">\n\t\t\t\t<div role=\"option\" class=\"chip lu-multiselect-chip\" *ngFor=\"let option of selectedOptions\" [luMultiSelectSelectedChip]=\"option\">\n\t\t\t\t\t<ng-container *luOptionOutlet=\"optionTpl; value: option\"></ng-container>\n\t\t\t\t\t<button type=\"button\" class=\"chip-kill\" tabindex=\"-1\" (click)=\"onChipKillClick(option)\"></button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div *ngIf=\"selectedOptions.length\" class=\"lu-multiselect-panel-columns-col2-footer\">\n\t\t\t\t<button class=\"button mod-text\" type=\"button\" (click)=\"clear()\">{{ intl.clear }}</button>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.optionPlaceholder{display:block;padding:var(--components-options-item-padding-vertical) var(--components-options-item-padding-horizontal);font-style:italic;color:var(--palettes-grey-600)}.lu-multiselect-panel{display:flex;flex-direction:column;width:100%;border-radius:var(--commons-borderRadius-M);background-color:var(--colors-white-color);box-shadow:var(--commons-boxShadow-M);transition-property:width,min-width,margin-top,margin-left;transition-duration:var(--commons-animations-durations-fast);transition-timing-function:ease-in}.lu-multiselect-panel-form{padding:var(--spacings-XS);z-index:1}.lu-multiselect-panel-columns{display:flex;gap:var(--spacings-XS);padding:0;width:100%;transition:padding var(--commons-animations-durations-standard) ease;max-height:20rem}.is-expanded .lu-multiselect-panel-columns{padding:var(--spacings-XS)}[class*=lu-multiselect-panel-columns-col]{display:flex;flex-basis:100%;flex-direction:column}.is-expanded [class*=lu-multiselect-panel-columns-col]{border-radius:var(--commons-borderRadius-M)}.lu-multiselect-panel-columns-col2{align-items:flex-start;background-color:var(--palettes-grey-25);min-width:18rem}.is-expanded .lu-multiselect-panel-columns-col1{border:var(--commons-divider-width) solid var(--palettes-grey-200)}.lu-multiselect-panel-columns-col1-content{box-shadow:none;animation:none;padding:var(--spacings-XS);max-height:inherit}.lu-multiselect-panel-columns-col1-content,.lu-multiselect-chips{scroll-snap-type:y proximity;outline:none}.lu-multiselect-panel-columns-col1-content>*,.lu-multiselect-chips>*{scroll-snap-align:center}.lu-multiselect-panel-columns-col1-content:focus-visible,.lu-multiselect-chips:focus-visible{outline:2px solid var(--palettes-primary-700);outline-offset:2px}.lu-multiselect-search{flex-grow:1}.lu-multiselect-selectall{padding:var(--spacings-XS);font-weight:600;border-radius:var(--commons-borderRadius-M);margin-bottom:var(--spacings-XXS)}.lu-multiselect-selectall:hover,.lu-multiselect-selectall:focus-within{background-color:var(--palettes-grey-25)}.lu-multiselect-chips{overflow-y:auto;display:flex;flex-grow:1;flex-direction:column;align-items:flex-start;align-self:stretch;gap:var(--spacings-XXS);padding:var(--spacings-XS);border-top-left-radius:var(--commons-borderRadius-M);border-top-right-radius:var(--commons-borderRadius-M)}.lu-multiselect-panel-columns-col2-footer{display:flex;flex:0;align-items:flex-end;align-self:stretch;justify-content:flex-end;border-radius:0!important;border-top:var(--commons-divider-border);margin-top:auto;padding:var(--spacings-XXS) var(--spacings-XS)}.lu-multiselect-panel-form{display:flex;gap:var(--spacings-XS)}.lu-multiselect-panel-form~.lu-multiselect-panel-columns-col1-content{padding-top:0}@media not all and (min-width: 50em){.lu-multiselect-expandbutton{display:none}}.lu-multiselect-emptystate{margin:auto;text-align:center;padding:var(--spacings-S);color:var(--palettes-grey-600)}\n"] }]
        }], propDecorators: { searchInput: [{
                type: ViewChild,
                args: ['searchInput']
            }], optionsQL: [{
                type: ViewChildren,
                args: [ɵLuOptionComponent]
            }], selectedChipsQL: [{
                type: ViewChildren,
                args: [ɵLuMultiSelectSelectedChipDirective]
            }], onKeyDown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvbXVsdGktc2VsZWN0L3BhbmVsL3BhbmVsLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nL211bHRpLXNlbGVjdC9wYW5lbC9wYW5lbC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLDBCQUEwQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDM0UsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0UsT0FBTyxFQUFpQix1QkFBdUIsRUFBRSxTQUFTLEVBQWMsWUFBWSxFQUFFLE1BQU0sRUFBYSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hKLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM3RCxPQUFPLEVBQTJCLHVCQUF1QixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDaEUsT0FBTyxFQUFFLG1DQUFtQyxF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QUMvQjthQUNBLFNBQVMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDL0YsQ0FBQztJQUVTLHlCQUF5QjtRQUNsQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSwwQkFBMEIsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDcEcsQ0FBQzs4R0F2SlcsMkJBQTJCO2tHQUEzQiwyQkFBMkIsK1BBbUJ6QixrQkFBa0IscUVBR2xCLG1DQUFtQyxnREMzQ2xELHl5SkE4RkEsbytHRDNFVyxVQUFVLHFMQUFFLFNBQVMsNkNBQUUsV0FBVywwbUJBQUUsc0JBQXNCLDJEQUFFLElBQUksNkZBQUUsS0FBSyxtSEFBRSxrQkFBa0Isb0pBQUUsd0JBQXdCLGdIQUFFLG1DQUFtQywrR0FBRSxnQkFBZ0I7O1NBRTFLLDJCQUEyQjsyRkFBM0IsMkJBQTJCO2tCQVJ2QyxTQUFTOytCQUNDLGlCQUFpQixtQkFHVix1QkFBdUIsQ0FBQyxNQUFNLGNBQ25DLElBQUksV0FDUCxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLHNCQUFzQixFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsd0JBQXdCLEVBQUUsbUNBQW1DLEVBQUUsZ0JBQWdCLENBQUM7OEJBbUJ2TCxXQUFXO3NCQURWLFNBQVM7dUJBQUMsYUFBYTtnQkFHVSxTQUFTO3NCQUExQyxZQUFZO3VCQUFDLGtCQUFrQjtnQkFHbUIsZUFBZTtzQkFBakUsWUFBWTt1QkFBQyxtQ0FBbUM7Z0JBdUNqRCxTQUFTO3NCQURSLFlBQVk7dUJBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQTExeU1vZHVsZSwgQWN0aXZlRGVzY2VuZGFudEtleU1hbmFnZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQgeyBBc3luY1BpcGUsIE5nRm9yLCBOZ0lmLCBOZ1RlbXBsYXRlT3V0bGV0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgaW5qZWN0LCBRdWVyeUxpc3QsIFZpZXdDaGlsZCwgVmlld0NoaWxkcmVuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IGdldEludGwgfSBmcm9tICdAbHVjY2EtZnJvbnQvbmcvY29yZSc7XG5pbXBvcnQgeyBTRUxFQ1RfSUQsIMm1THVPcHRpb25Db21wb25lbnQsIMm1THVPcHRpb25PdXRsZXREaXJlY3RpdmUgfSBmcm9tICdAbHVjY2EtZnJvbnQvbmcvY29yZS1zZWxlY3QnO1xuaW1wb3J0IHsgYXN5bmNTY2hlZHVsZXIsIGZpbHRlciwgbWFwLCBvYnNlcnZlT24sIHRha2UsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTHVNdWx0aVNlbGVjdFBhbmVsUmVmIH0gZnJvbSAnLi4vaW5wdXQvcGFuZWwubW9kZWwnO1xuaW1wb3J0IHsgSUx1TXVsdGlTZWxlY3RQYW5lbERhdGEsIE1VTFRJX1NFTEVDVF9QQU5FTF9EQVRBIH0gZnJvbSAnLi4vc2VsZWN0Lm1vZGVsJztcbmltcG9ydCB7IExVX01VTFRJX1NFTEVDVF9UUkFOU0xBVElPTlMgfSBmcm9tICcuLi9zZWxlY3QudHJhbnNsYXRlJztcbmltcG9ydCB7IEx1SXNPcHRpb25TZWxlY3RlZFBpcGUgfSBmcm9tICcuL29wdGlvbi1zZWxlY3RlZC5waXBlJztcbmltcG9ydCB7IMm1THVNdWx0aVNlbGVjdFNlbGVjdGVkQ2hpcERpcmVjdGl2ZSB9IGZyb20gJy4vc2VsZWN0ZWQtY2hpcC5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICdsdS1zZWxlY3QtcGFuZWwnLFxuXHR0ZW1wbGF0ZVVybDogJy4vcGFuZWwuY29tcG9uZW50Lmh0bWwnLFxuXHRzdHlsZVVybHM6IFsnLi9wYW5lbC5jb21wb25lbnQuc2NzcyddLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0aW1wb3J0czogW0ExMXlNb2R1bGUsIEFzeW5jUGlwZSwgRm9ybXNNb2R1bGUsIEx1SXNPcHRpb25TZWxlY3RlZFBpcGUsIE5nSWYsIE5nRm9yLCDJtUx1T3B0aW9uQ29tcG9uZW50LCDJtUx1T3B0aW9uT3V0bGV0RGlyZWN0aXZlLCDJtUx1TXVsdGlTZWxlY3RTZWxlY3RlZENoaXBEaXJlY3RpdmUsIE5nVGVtcGxhdGVPdXRsZXRdLFxufSlcbmV4cG9ydCBjbGFzcyBMdU11bHRpU2VsZWN0UGFuZWxDb21wb25lbnQ8VD4gaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcblx0cHJvdGVjdGVkIHBhbmVsRGF0YSA9IGluamVjdDxJTHVNdWx0aVNlbGVjdFBhbmVsRGF0YTxUPj4oTVVMVElfU0VMRUNUX1BBTkVMX0RBVEEpO1xuXHRwYW5lbFJlZiA9IGluamVjdDxMdU11bHRpU2VsZWN0UGFuZWxSZWY8VD4+KEx1TXVsdGlTZWxlY3RQYW5lbFJlZik7XG5cdHNlbGVjdElkID0gaW5qZWN0KFNFTEVDVF9JRCk7XG5cdGludGwgPSBnZXRJbnRsKExVX01VTFRJX1NFTEVDVF9UUkFOU0xBVElPTlMpO1xuXHRpc0V4cGFuZGVkID0gdGhpcy5wYW5lbERhdGEuZXhwYW5kZWQ7XG5cblx0b3B0aW9ucyQgPSB0aGlzLnBhbmVsRGF0YS5vcHRpb25zJDtcblx0bG9hZGluZyQgPSB0aGlzLnBhbmVsRGF0YS5sb2FkaW5nJDtcblx0YXJlQWxsT3B0aW9uc1NlbGVjdGVkJCA9IHRoaXMucGFuZWxEYXRhLmFyZUFsbE9wdGlvbnNTZWxlY3RlZCQ7XG5cdGNhblNlbGVjdEFsbCA9IGZhbHNlOyAvLyBUT0RPIGNvbm5lY3QgdG8gcGFuZWwgb3B0aW9ucyB3aGVuIHdlJ2xsIGJlIG9rIG9uIGRlc2lnbmluZyBzZWxlY3QgYWxsXG5cdG9wdGlvbkNvbXBhcmVyID0gdGhpcy5wYW5lbERhdGEub3B0aW9uQ29tcGFyZXI7XG5cdHNlbGVjdGVkT3B0aW9uczogVFtdID0gdGhpcy5wYW5lbERhdGEuaW5pdGlhbFZhbHVlIHx8IFtdO1xuXHRvcHRpb25UcGwgPSB0aGlzLnBhbmVsRGF0YS5vcHRpb25UcGw7XG5cdHNlYXJjaGFibGUgPSB0aGlzLnBhbmVsRGF0YS5zZWFyY2hhYmxlO1xuXG5cdEBWaWV3Q2hpbGQoJ3NlYXJjaElucHV0Jylcblx0c2VhcmNoSW5wdXQ6IEVsZW1lbnRSZWY8SFRNTElucHV0RWxlbWVudD4gfCB1bmRlZmluZWQ7XG5cblx0QFZpZXdDaGlsZHJlbijJtUx1T3B0aW9uQ29tcG9uZW50KSBvcHRpb25zUUw6IFF1ZXJ5TGlzdDzJtUx1T3B0aW9uQ29tcG9uZW50PFQ+Pjtcblx0cHJpdmF0ZSBsZWZ0Q29sdW1uS2V5TWFuYWdlcjogQWN0aXZlRGVzY2VuZGFudEtleU1hbmFnZXI8ybVMdU9wdGlvbkNvbXBvbmVudDxUPj47XG5cblx0QFZpZXdDaGlsZHJlbijJtUx1TXVsdGlTZWxlY3RTZWxlY3RlZENoaXBEaXJlY3RpdmUpIHNlbGVjdGVkQ2hpcHNRTDogUXVlcnlMaXN0PMm1THVNdWx0aVNlbGVjdFNlbGVjdGVkQ2hpcERpcmVjdGl2ZTxUPj47XG5cdHByaXZhdGUgcmlnaHRDb2x1bW5LZXlNYW5hZ2VyOiBBY3RpdmVEZXNjZW5kYW50S2V5TWFuYWdlcjzJtUx1TXVsdGlTZWxlY3RTZWxlY3RlZENoaXBEaXJlY3RpdmU8VD4+O1xuXG5cdHNlYXJjaDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cblx0b25TY3JvbGwoZXZ0OiBFdmVudCk6IHZvaWQge1xuXHRcdGlmICghKGV2dC50YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoZXZ0LnRhcmdldC5zY3JvbGxUb3AgPT09IDApIHtcblx0XHRcdHRoaXMucGFuZWxSZWYucHJldmlvdXNQYWdlLmVtaXQoKTtcblx0XHR9XG5cblx0XHRpZiAoZXZ0LnRhcmdldC5zY3JvbGxIZWlnaHQgLSBldnQudGFyZ2V0LnNjcm9sbFRvcCAtIGV2dC50YXJnZXQuY2xpZW50SGVpZ2h0IDwgMSkge1xuXHRcdFx0dGhpcy5wYW5lbFJlZi5uZXh0UGFnZS5lbWl0KCk7XG5cdFx0fVxuXHR9XG5cblx0bmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuXHRcdGlmICghdGhpcy5vcHRpb25zUUwpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLmluaXRMZWZ0Q29sdW1uS2V5TWFuYWdlcigpO1xuXHRcdHRoaXMuaW5pdFJpZ2h0Q29sdW1uS2V5TWFuYWdlcigpO1xuXG5cdFx0aWYgKHRoaXMuc2VhcmNoSW5wdXQpIHtcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZWFyY2hJbnB1dC5uYXRpdmVFbGVtZW50LmZvY3VzKCkpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmlzRXhwYW5kZWQpIHtcblx0XHRcdHRoaXMucGFuZWxSZWYudXNlRXhwYW5kZWRQb3NpdGlvbigpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBhbmVsUmVmLnVzZURlZmF1bHRQb3NpdGlvbigpO1xuXHRcdH1cblx0fVxuXG5cdEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKVxuXHRvbktleURvd24oJGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG5cdFx0aWYgKCRldmVudC5rZXkgPT09ICdFc2NhcGUnKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wYW5lbFJlZi5jbG9zZSgpO1xuXHRcdH1cblx0fVxuXG5cdG9uTGVmdENvbHVtbktleWRvd24oJGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG5cdFx0aWYgKCRldmVudC5jb2RlID09PSAnU3BhY2UnIHx8ICRldmVudC5jb2RlID09PSAnRW50ZXInKSB7XG5cdFx0XHR0aGlzLnRvZ2dsZU9wdGlvbih0aGlzLmxlZnRDb2x1bW5LZXlNYW5hZ2VyPy5hY3RpdmVJdGVtPy5vcHRpb24pO1xuXHRcdFx0JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5sZWZ0Q29sdW1uS2V5TWFuYWdlcj8ub25LZXlkb3duKCRldmVudCk7XG5cdH1cblxuXHRvblJpZ2h0Q29sdW1uS2V5ZG93bigkZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcblx0XHRjb25zdCBvcHRpb24gPSB0aGlzLnJpZ2h0Q29sdW1uS2V5TWFuYWdlcj8uYWN0aXZlSXRlbT8ub3B0aW9uO1xuXG5cdFx0aWYgKG9wdGlvbiAmJiAoJGV2ZW50LmNvZGUgPT09ICdTcGFjZScgfHwgJGV2ZW50LmNvZGUgPT09ICdFbnRlcicpKSB7XG5cdFx0XHR0aGlzLm9uQ2hpcEtpbGxDbGljayhvcHRpb24pO1xuXHRcdFx0JGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5yaWdodENvbHVtbktleU1hbmFnZXI/Lm9uS2V5ZG93bigkZXZlbnQpO1xuXHR9XG5cblx0Ly8gdG9nZ2xlQWxsKHNob3VsZFNlbGVjdEFsbDogYm9vbGVhbik6IHZvaWQge1xuXHQvLyBcdGlmIChzaG91bGRTZWxlY3RBbGwpIHtcblx0Ly8gXHRcdHRoaXMucGFuZWxSZWYuc2VsZWN0QWxsLmVtaXQoKTtcblx0Ly8gXHR9IGVsc2Uge1xuXHQvLyBcdFx0dGhpcy5jbGVhcigpO1xuXHQvLyBcdH1cblx0Ly8gfVxuXG5cdHVwZGF0ZUNsdWUoY2x1ZTogc3RyaW5nIHwgbnVsbCk6IHZvaWQge1xuXHRcdHRoaXMuc2VhcmNoID0gY2x1ZTtcblx0XHR0aGlzLnBhbmVsUmVmLmNsdWVDaGFuZ2VkLmVtaXQoY2x1ZSk7XG5cblx0XHRzZXRUaW1lb3V0KCgpID0+IHRoaXMubGVmdENvbHVtbktleU1hbmFnZXIuc2V0Rmlyc3RJdGVtQWN0aXZlKCkpO1xuXHR9XG5cblx0dG9nZ2xlT3B0aW9uKG9wdGlvbjogVCk6IHZvaWQge1xuXHRcdGNvbnN0IHNlbGVjdGVkT3B0aW9uID0gdGhpcy5zZWxlY3RlZE9wdGlvbnMuZmluZCgobykgPT4gdGhpcy5vcHRpb25Db21wYXJlcihvLCBvcHRpb24pKTtcblx0XHR0aGlzLnNlbGVjdGVkT3B0aW9ucyA9IHNlbGVjdGVkT3B0aW9uID8gdGhpcy5zZWxlY3RlZE9wdGlvbnMuZmlsdGVyKChvKSA9PiBvICE9PSBzZWxlY3RlZE9wdGlvbikgOiBbLi4udGhpcy5zZWxlY3RlZE9wdGlvbnMsIG9wdGlvbl07XG5cdFx0dGhpcy5wYW5lbFJlZi5lbWl0VmFsdWUodGhpcy5zZWxlY3RlZE9wdGlvbnMpO1xuXHRcdHRoaXMubGVmdENvbHVtbktleU1hbmFnZXI/LnNldEFjdGl2ZUl0ZW0odGhpcy5vcHRpb25zUUwudG9BcnJheSgpLmZpbmRJbmRleCgobykgPT4gby5vcHRpb24gPT09IG9wdGlvbikpO1xuXHR9XG5cblx0b25DaGlwS2lsbENsaWNrKG9wdGlvbjogVCk6IHZvaWQge1xuXHRcdGNvbnN0IG9wdGlvblRvVW5zZWxlY3RJbmRleCA9IHRoaXMuc2VsZWN0ZWRPcHRpb25zLmZpbmRJbmRleCgobykgPT4gdGhpcy5vcHRpb25Db21wYXJlcihvLCBvcHRpb24pKTtcblx0XHR0aGlzLnNlbGVjdGVkT3B0aW9ucyA9IHRoaXMuc2VsZWN0ZWRPcHRpb25zLmZpbHRlcigoXywgaW5kZXgpID0+IGluZGV4ICE9PSBvcHRpb25Ub1Vuc2VsZWN0SW5kZXgpO1xuXHRcdHRoaXMucGFuZWxSZWYuZW1pdFZhbHVlKHRoaXMuc2VsZWN0ZWRPcHRpb25zKTtcblxuXHRcdGlmICh0aGlzLnNlbGVjdGVkT3B0aW9ucy5sZW5ndGggJiYgdGhpcy5yaWdodENvbHVtbktleU1hbmFnZXIpIHtcblx0XHRcdG9wdGlvblRvVW5zZWxlY3RJbmRleCA+PSB0aGlzLnNlbGVjdGVkT3B0aW9ucy5sZW5ndGggPyB0aGlzLnJpZ2h0Q29sdW1uS2V5TWFuYWdlci5zZXRQcmV2aW91c0l0ZW1BY3RpdmUoKSA6IHRoaXMucmlnaHRDb2x1bW5LZXlNYW5hZ2VyLnNldE5leHRJdGVtQWN0aXZlKCk7XG5cdFx0fVxuXHR9XG5cblx0Y2xlYXIoKTogdm9pZCB7XG5cdFx0dGhpcy5zZWxlY3RlZE9wdGlvbnMgPSBbXTtcblx0XHR0aGlzLnBhbmVsUmVmLmVtaXRWYWx1ZSh0aGlzLnNlbGVjdGVkT3B0aW9ucyk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgaW5pdExlZnRDb2x1bW5LZXlNYW5hZ2VyKCk6IHZvaWQge1xuXHRcdHRoaXMubGVmdENvbHVtbktleU1hbmFnZXIgPSBuZXcgQWN0aXZlRGVzY2VuZGFudEtleU1hbmFnZXIodGhpcy5vcHRpb25zUUwpLndpdGhIb21lQW5kRW5kKCk7XG5cblx0XHRpZiAodGhpcy5zZWxlY3RlZE9wdGlvbnMpIHtcblx0XHRcdHRoaXMub3B0aW9ucyRcblx0XHRcdFx0Py5waXBlKFxuXHRcdFx0XHRcdG9ic2VydmVPbihhc3luY1NjaGVkdWxlciksXG5cdFx0XHRcdFx0bWFwKChvcHRpb25zKSA9PiAodGhpcy5zZWxlY3RlZE9wdGlvbnMubGVuZ3RoID8gb3B0aW9ucy5maW5kSW5kZXgoKG8pID0+IHRoaXMub3B0aW9uQ29tcGFyZXIobywgdGhpcy5zZWxlY3RlZE9wdGlvbnNbMF0pKSA6IC0xKSksXG5cdFx0XHRcdFx0ZmlsdGVyKChpbmRleCkgPT4gaW5kZXggIT09IC0xKSxcblx0XHRcdFx0XHR0YWtlKDEpLFxuXHRcdFx0XHRcdHRha2VVbnRpbCh0aGlzLnBhbmVsUmVmLmNsb3NlZCksXG5cdFx0XHRcdClcblx0XHRcdFx0LnN1YnNjcmliZSgoc2VsZWN0ZWRJbmRleCkgPT4gdGhpcy5sZWZ0Q29sdW1uS2V5TWFuYWdlci5zZXRBY3RpdmVJdGVtKHNlbGVjdGVkSW5kZXgpKTtcblx0XHR9XG5cblx0XHR0aGlzLmxlZnRDb2x1bW5LZXlNYW5hZ2VyLmNoYW5nZVxuXHRcdFx0LnBpcGUoXG5cdFx0XHRcdG1hcCgoKSA9PiB0aGlzLmxlZnRDb2x1bW5LZXlNYW5hZ2VyLmFjdGl2ZUl0ZW0/LmlkKSxcblx0XHRcdFx0dGFrZVVudGlsKHRoaXMucGFuZWxSZWYuY2xvc2VkKSxcblx0XHRcdClcblx0XHRcdC5zdWJzY3JpYmUoKGFjdGl2ZURlc2NlbmRhbnQpID0+IHRoaXMucGFuZWxSZWYuYWN0aXZlT3B0aW9uSWRDaGFuZ2VkLmVtaXQoYWN0aXZlRGVzY2VuZGFudCkpO1xuXHR9XG5cblx0cHJvdGVjdGVkIGluaXRSaWdodENvbHVtbktleU1hbmFnZXIoKTogdm9pZCB7XG5cdFx0dGhpcy5yaWdodENvbHVtbktleU1hbmFnZXIgPSBuZXcgQWN0aXZlRGVzY2VuZGFudEtleU1hbmFnZXIodGhpcy5zZWxlY3RlZENoaXBzUUwpLndpdGhIb21lQW5kRW5kKCk7XG5cdH1cbn1cbiIsIjwhLS0gVE9ETyA6IGlsIGZhdWRyYWl0IHJlbXBsYWNlciBsYSBjbGFzc2UgaXMtZXhwYW5kZWQgcGFyIHVuIGF0dHJpYnV0IGFyaWEtZXhwYW5kZWQ9XCJ0cnVlXCItLT5cbjxuZy10ZW1wbGF0ZSAjc2VhcmNoSW5wdXRUcGw+XG5cdDxsYWJlbCBjbGFzcz1cInBhbmVsLXNlYXJjaCB0ZXh0ZmllbGQgbW9kLXNlYXJjaCBtb2Qtb3V0bGluZWQgbHUtbXVsdGlzZWxlY3Qtc2VhcmNoXCI+XG5cdFx0PGlucHV0XG5cdFx0XHQjc2VhcmNoSW5wdXRcblx0XHRcdGNsYXNzPVwidGV4dGZpZWxkLWlucHV0XCJcblx0XHRcdFsobmdNb2RlbCldPVwic2VhcmNoXCJcblx0XHRcdChuZ01vZGVsQ2hhbmdlKT1cInVwZGF0ZUNsdWUoJGV2ZW50KVwiXG5cdFx0XHRbbmdNb2RlbE9wdGlvbnNdPVwieyBzdGFuZGFsb25lOiB0cnVlIH1cIlxuXHRcdC8+XG5cdFx0PHNwYW4gY2xhc3M9XCJ1LW1hc2sgdGV4dGZpZWxkLWxhYmVsXCI+e3sgaW50bC5zZWFyY2ggfX08L3NwYW4+XG5cdDwvbGFiZWw+XG48L25nLXRlbXBsYXRlPlxuXG48ZGl2XG5cdGNsYXNzPVwibHUtcGlja2VyLXBhbmVsIGx1LW9wdGlvbi1waWNrZXItcGFuZWwgbHUtbXVsdGlzZWxlY3QtcGFuZWwgbW9kLW11bHRpcGxlXCJcblx0cm9sZT1cImRpYWxvZ1wiXG5cdGNka1RyYXBGb2N1c1xuXHQqbmdJZj1cInsgb3B0aW9uczogb3B0aW9ucyQgfCBhc3luYyB9IGFzIGN0eFwiXG5cdFtjZGtUcmFwRm9jdXNBdXRvQ2FwdHVyZV09XCJ0cnVlXCJcblx0W2NsYXNzLmlzLWV4cGFuZGVkXT1cImlzRXhwYW5kZWRcIlxuXHRbYXR0ci5hcmlhLWV4cGFuZGVkXT1cImlzRXhwYW5kZWQgPyAndHJ1ZScgOiB1bmRlZmluZWRcIlxuPlxuXHQ8ZGl2IGNsYXNzPVwibHUtbXVsdGlzZWxlY3QtcGFuZWwtZm9ybVwiICpuZ0lmPVwic2VhcmNoYWJsZSAmJiAhaXNFeHBhbmRlZFwiPlxuXHRcdDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJzZWFyY2hJbnB1dFRwbFwiPjwvbmctY29udGFpbmVyPlxuXHRcdDwhLS1cdFx0PGJ1dHRvbiBjbGFzcz1cImJ1dHRvbiBtb2QtdGV4dCBtb2QtaWNvbiBsdS1tdWx0aXNlbGVjdC1leHBhbmRidXR0b25cIiB0eXBlPVwiYnV0dG9uXCIgKGNsaWNrKT1cInRvZ2dsZUV4cGFuc2lvbigpXCI+LS0+XG5cdFx0PCEtLVx0XHRcdDxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGNsYXNzPVwibHVjY2EtaWNvblwiIFtjbGFzcy5pY29uLWZ1bGxzY3JlZW5dPVwiIWlzRXhwYW5kZWRcIiBbY2xhc3MuaWNvbi1mdWxsc2NyZWVuRXhpdF09XCJpc0V4cGFuZGVkXCI+PC9zcGFuPi0tPlxuXHRcdDwhLS1cdFx0XHR7eyBpc0V4cGFuZGVkID8gaW50bC5yZWR1Y2UgOiBpbnRsLmV4cGFuZCB9fS0tPlxuXHRcdDwhLS1cdFx0PC9idXR0b24+LS0+XG5cdDwvZGl2PlxuXHQ8ZGl2IGNsYXNzPVwibHUtbXVsdGlzZWxlY3QtcGFuZWwtY29sdW1uc1wiPlxuXHRcdDxkaXYgY2xhc3M9XCJsdS1tdWx0aXNlbGVjdC1wYW5lbC1jb2x1bW5zLWNvbDFcIiAoa2V5ZG93bik9XCJvbkxlZnRDb2x1bW5LZXlkb3duKCRldmVudClcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJsdS1tdWx0aXNlbGVjdC1wYW5lbC1mb3JtXCIgKm5nSWY9XCJzZWFyY2hhYmxlICYmIGlzRXhwYW5kZWRcIj5cblx0XHRcdFx0PG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cInNlYXJjaElucHV0VHBsXCI+PC9uZy1jb250YWluZXI+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXZcblx0XHRcdFx0Y2xhc3M9XCJsdS1waWNrZXItY29udGVudCBsdS1tdWx0aXNlbGVjdC1wYW5lbC1jb2x1bW5zLWNvbDEtY29udGVudFwiXG5cdFx0XHRcdFtjbGFzcy5pcy1sb2FkaW5nXT1cImxvYWRpbmckIHwgYXN5bmNcIlxuXHRcdFx0XHR0YWJpbmRleD1cIjBcIlxuXHRcdFx0XHRjZGtGb2N1c0luaXRpYWxcblx0XHRcdFx0cm9sZT1cImxpc3RcIlxuXHRcdFx0XHRhcmlhLW11bHRpc2VsZWN0YWJsZT1cInRydWVcIlxuXHRcdFx0XHQoc2Nyb2xsKT1cIm9uU2Nyb2xsKCRldmVudClcIlxuXHRcdFx0PlxuXHRcdFx0XHQ8bmctY29udGFpbmVyICpuZ0lmPVwic2VhcmNoYWJsZVwiPlxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJvcHRpb25QbGFjZWhvbGRlclwiICpuZ0lmPVwic2VhcmNoICYmICFjdHgub3B0aW9ucz8ubGVuZ3RoXCI+XG5cdFx0XHRcdFx0XHQ8cCBjbGFzcz1cIm9wdGlvblBsYWNlaG9sZGVyLWNvbnRlbnQgdS1tYXJnaW5Cb3R0b20wXCI+e3sgaW50bC5lbXB0eVJlc3VsdHMgfX08L3A+XG5cdFx0XHRcdFx0XHQ8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImxpbmtcIiAoY2xpY2spPVwidXBkYXRlQ2x1ZShudWxsKTsgc2VhcmNoSW5wdXQubmF0aXZlRWxlbWVudC5mb2N1cygpXCI+e3sgaW50bC5jbGVhclNlYXJjaCB9fTwvYnV0dG9uPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L25nLWNvbnRhaW5lcj5cblxuXHRcdFx0XHQ8IS0tXHRcdFx0XHQ8bmctY29udGFpbmVyICpuZ0lmPVwiY2FuU2VsZWN0QWxsXCI+LS0+XG5cdFx0XHRcdDwhLS1cdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiY2hlY2tib3ggbHUtbXVsdGlzZWxlY3Qtc2VsZWN0YWxsXCIgcm9sZT1cIm9wdGlvblwiIFtmb3JdPVwic2VsZWN0SWQgKyAnLXNlbGVjdC1hbGwnXCI+LS0+XG5cdFx0XHRcdDwhLS1cdFx0XHRcdFx0XHQ8aW5wdXQtLT5cblx0XHRcdFx0PCEtLVx0XHRcdFx0XHRcdFx0Y2xhc3M9XCJjaGVja2JveC1pbnB1dFwiLS0+XG5cdFx0XHRcdDwhLS1cdFx0XHRcdFx0XHRcdHR5cGU9XCJjaGVja2JveFwiLS0+XG5cdFx0XHRcdDwhLS1cdFx0XHRcdFx0XHRcdFtjbGFzcy5pcy1pbmNvbXBsZXRlXT1cIihhcmVBbGxPcHRpb25zU2VsZWN0ZWQkIHwgYXN5bmMpICE9PSB0cnVlICYmIHNlbGVjdGVkT3B0aW9ucy5sZW5ndGhcIi0tPlxuXHRcdFx0XHQ8IS0tXHRcdFx0XHRcdFx0XHRbaWRdPVwic2VsZWN0SWQgKyAnLXNlbGVjdC1hbGwnXCItLT5cblx0XHRcdFx0PCEtLVx0XHRcdFx0XHRcdFx0W25nTW9kZWxdPVwiKGFyZUFsbE9wdGlvbnNTZWxlY3RlZCQgfCBhc3luYykgPT09IHRydWUgfHwgISFzZWxlY3RlZE9wdGlvbnMubGVuZ3RoXCItLT5cblx0XHRcdFx0PCEtLVx0XHRcdFx0XHRcdFx0KG5nTW9kZWxDaGFuZ2UpPVwidG9nZ2xlQWxsKCRldmVudClcIi0tPlxuXHRcdFx0XHQ8IS0tXHRcdFx0XHRcdFx0Lz4tLT5cblx0XHRcdFx0PCEtLVx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiY2hlY2tib3gtbGFiZWxcIj57eyBpbnRsLnNlbGVjdEFsbCB9fTwvc3Bhbj4tLT5cblx0XHRcdFx0PCEtLVx0XHRcdFx0XHQ8L2xhYmVsPi0tPlxuXHRcdFx0XHQ8IS0tXHRcdFx0XHQ8L25nLWNvbnRhaW5lcj4tLT5cblxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwibHUtcGlja2VyLWNvbnRlbnQtb3B0aW9uXCI+XG5cdFx0XHRcdFx0PGx1LXNlbGVjdC1vcHRpb25cblx0XHRcdFx0XHRcdCpuZ0Zvcj1cImxldCBvcHRpb24gb2YgY3R4Lm9wdGlvbnM7IGxldCBpbmRleCA9IGluZGV4XCJcblx0XHRcdFx0XHRcdFtvcHRpb25dPVwib3B0aW9uXCJcblx0XHRcdFx0XHRcdFtvcHRpb25UcGxdPVwib3B0aW9uVHBsXCJcblx0XHRcdFx0XHRcdFtvcHRpb25JbmRleF09XCJpbmRleFwiXG5cdFx0XHRcdFx0XHRbc2Nyb2xsSW50b1ZpZXdPcHRpb25zXT1cInsgYmxvY2s6ICduZWFyZXN0JyB9XCJcblx0XHRcdFx0XHRcdFtpc1NlbGVjdGVkXT1cIm9wdGlvbiB8IGx1SXNPcHRpb25TZWxlY3RlZDpvcHRpb25Db21wYXJlcjpzZWxlY3RlZE9wdGlvbnNcIlxuXHRcdFx0XHRcdFx0KGNsaWNrKT1cInRvZ2dsZU9wdGlvbihvcHRpb24pXCJcblx0XHRcdFx0XHQ+PC9sdS1zZWxlY3Qtb3B0aW9uPlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2ICpuZ0lmPVwibG9hZGluZyQgfCBhc3luY1wiIGNsYXNzPVwicGFuZWwtbG9hZGluZyBsb2FkaW5nIGx1LXBpY2tlci1sb2FkaW5nXCI+PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0XHQ8ZGl2IGNsYXNzPVwibHUtbXVsdGlzZWxlY3QtcGFuZWwtY29sdW1ucy1jb2wyXCIgKm5nSWY9XCJpc0V4cGFuZGVkXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwibHUtbXVsdGlzZWxlY3QtZW1wdHlzdGF0ZVwiICpuZ0lmPVwiIXNlbGVjdGVkT3B0aW9ucy5sZW5ndGhcIj57eyBpbnRsLmVtcHR5U2VsZWN0aW9uIH19PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwibHUtbXVsdGlzZWxlY3QtY2hpcHNcIiByb2xlPVwibGlzdGJveFwiIHRhYmluZGV4PVwiMFwiICpuZ0lmPVwic2VsZWN0ZWRPcHRpb25zLmxlbmd0aFwiIChrZXlkb3duKT1cIm9uUmlnaHRDb2x1bW5LZXlkb3duKCRldmVudClcIj5cblx0XHRcdFx0PGRpdiByb2xlPVwib3B0aW9uXCIgY2xhc3M9XCJjaGlwIGx1LW11bHRpc2VsZWN0LWNoaXBcIiAqbmdGb3I9XCJsZXQgb3B0aW9uIG9mIHNlbGVjdGVkT3B0aW9uc1wiIFtsdU11bHRpU2VsZWN0U2VsZWN0ZWRDaGlwXT1cIm9wdGlvblwiPlxuXHRcdFx0XHRcdDxuZy1jb250YWluZXIgKmx1T3B0aW9uT3V0bGV0PVwib3B0aW9uVHBsOyB2YWx1ZTogb3B0aW9uXCI+PC9uZy1jb250YWluZXI+XG5cdFx0XHRcdFx0PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJjaGlwLWtpbGxcIiB0YWJpbmRleD1cIi0xXCIgKGNsaWNrKT1cIm9uQ2hpcEtpbGxDbGljayhvcHRpb24pXCI+PC9idXR0b24+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2ICpuZ0lmPVwic2VsZWN0ZWRPcHRpb25zLmxlbmd0aFwiIGNsYXNzPVwibHUtbXVsdGlzZWxlY3QtcGFuZWwtY29sdW1ucy1jb2wyLWZvb3RlclwiPlxuXHRcdFx0XHQ8YnV0dG9uIGNsYXNzPVwiYnV0dG9uIG1vZC10ZXh0XCIgdHlwZT1cImJ1dHRvblwiIChjbGljayk9XCJjbGVhcigpXCI+e3sgaW50bC5jbGVhciB9fTwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuPC9kaXY+XG4iXX0=