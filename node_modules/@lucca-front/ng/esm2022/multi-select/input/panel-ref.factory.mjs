import { Overlay, OverlayPositionBuilder, ScrollStrategyOptions } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { ChangeDetectorRef, ElementRef, inject, Injectable, Injector } from '@angular/core';
import { takeUntil } from 'rxjs';
import { LuMultiSelectPanelComponent } from '../panel';
import { MULTI_SELECT_PANEL_DATA } from '../select.model';
import { LuMultiSelectPanelRef } from './panel.model';
import * as i0 from "@angular/core";
class MultiSelectPanelRef extends LuMultiSelectPanelRef {
    constructor(overlayRef, parentInjector, panelData, defaultPositionStrategy, expandedPositionStrategy) {
        super();
        this.overlayRef = overlayRef;
        this.defaultPositionStrategy = defaultPositionStrategy;
        this.expandedPositionStrategy = expandedPositionStrategy;
        const injector = Injector.create({
            providers: [
                { provide: LuMultiSelectPanelRef, useValue: this },
                { provide: MULTI_SELECT_PANEL_DATA, useValue: panelData },
            ],
            parent: parentInjector,
        });
        this.portalRef = new ComponentPortal(LuMultiSelectPanelComponent, undefined, injector);
        this.panelRef = overlayRef.attach(this.portalRef);
        this.instance = this.panelRef.instance;
        overlayRef
            .backdropClick()
            .pipe(takeUntil(this.closed))
            .subscribe(() => this.close());
    }
    emitValue(value) {
        this.valueChanged.emit(value);
    }
    updateSelectedOptions(selectedOptions) {
        this.instance.selectedOptions = selectedOptions;
        // Run change detection on the panel component
        this.panelRef.injector.get(ChangeDetectorRef).markForCheck();
    }
    useExpandedPosition() {
        this.overlayRef.updatePositionStrategy(this.expandedPositionStrategy);
    }
    useDefaultPosition() {
        this.overlayRef.updatePositionStrategy(this.defaultPositionStrategy);
    }
    close() {
        super.close();
        this.panelRef.destroy();
        this.overlayRef.detach();
    }
}
class LuMultiSelectPanelRefFactory {
    constructor() {
        this.overlay = inject(Overlay);
        this.elementRef = inject(ElementRef);
        this.positionBuilder = inject(OverlayPositionBuilder);
        this.scrollStrategies = inject(ScrollStrategyOptions);
        this.parentInjector = inject(Injector);
    }
    buildPanelRef(panelData, defaultOverlayConfigOverride = {}, expandedPositionStrategy) {
        const defaultOverlayConfig = this.buildDefaultOverlayConfig(defaultOverlayConfigOverride);
        expandedPositionStrategy ??= this.buildExpandedPositionStrategy();
        const overlayRef = this.overlay.create(defaultOverlayConfig);
        overlayRef.hostElement.style.transitionProperty = 'height';
        overlayRef.hostElement.style.transitionDuration = 'var(--commons-animations-durations-standard)';
        return new MultiSelectPanelRef(overlayRef, this.parentInjector, panelData, defaultOverlayConfig.positionStrategy, expandedPositionStrategy);
    }
    buildDefaultOverlayConfig(overlayConfigOverride = {}) {
        const overlayConfig = { ...overlayConfigOverride };
        const config = { overlapInput: false, offsetY: 2 };
        overlayConfig.positionStrategy = this.positionBuilder
            .flexibleConnectedTo(this.elementRef)
            .withViewportMargin(10)
            .withPositions([
            this.buildPosition('bottom', 'right', config),
            this.buildPosition('bottom', 'left', config),
            this.buildPosition('top', 'right', config),
            this.buildPosition('top', 'left', config),
        ]);
        overlayConfig.scrollStrategy = this.scrollStrategies.reposition();
        overlayConfig.minWidth = this.elementRef.nativeElement.clientWidth;
        overlayConfig.maxWidth = '100vw';
        return overlayConfig;
    }
    buildExpandedPositionStrategy() {
        const config = { overlapInput: true, offsetX: -4, offsetY: -4 };
        return this.positionBuilder
            .flexibleConnectedTo(this.elementRef)
            .withViewportMargin(10)
            .withPositions([
            this.buildPosition('top', 'right', config),
            this.buildPosition('top', 'left', config),
            this.buildPosition('bottom', 'right', config),
            this.buildPosition('bottom', 'left', config),
        ]);
    }
    buildPosition(yDirection, xDirection, config) {
        const originX = xDirection === 'right' ? 'start' : 'end';
        const overlayX = originX;
        const oppositeYDirection = yDirection === 'top' ? 'bottom' : 'top';
        const { originY, overlayY } = config.overlapInput
            ? {
                originY: oppositeYDirection,
                overlayY: oppositeYDirection,
            }
            : { originY: yDirection, overlayY: oppositeYDirection };
        return {
            originX,
            originY,
            overlayX,
            overlayY,
            ...(config.offsetX ? { offsetX: xDirection === 'right' ? config.offsetX : -config.offsetX } : {}),
            ...(config.offsetY ? { offsetY: yDirection === 'bottom' ? config.offsetY : -config.offsetY } : {}),
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuMultiSelectPanelRefFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuMultiSelectPanelRefFactory }); }
}
export { LuMultiSelectPanelRefFactory };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuMultiSelectPanelRefFactory, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,