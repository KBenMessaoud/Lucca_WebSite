import { ChangeDetectionStrategy, Component, inject, Input } from '@angular/core';
import { NgIf } from '@angular/common';
import { NgClazz } from '@lucca-front/ng/core';
import { IconComponent } from '@lucca-front/ng/icon';
import * as i0 from "@angular/core";
import * as i1 from "@lucca-front/ng/core";
class InlineMessageComponent {
    #ngClass = inject(NgClazz);
    ngOnChanges() {
        this.#ngClass.ngClass = {
            [`mod-${this.size}`]: true,
            [`is-${this.state}`]: true,
            inlineMessage: true,
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: InlineMessageComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: InlineMessageComponent, isStandalone: true, selector: "lu-inline-message", inputs: { label: "label", state: "state", size: "size" }, usesOnChanges: true, hostDirectives: [{ directive: i1.NgClazz }], ngImport: i0, template: "<lu-icon [icon]=\"state\" *ngIf=\"state && state !== 'default'\" [alt]=\"state\"></lu-icon>{{label}}\n", styles: [".inlineMessage{--components-inlineMessage-fontSize: var(--sizes-S-fontSize);--components-inlineMessage-lineHeight: var(--sizes-S-lineHeight);--components-inlineMessage-icon-fontSize: var(--sizes-XS-lineHeight);--components-inlineMessage-color: var(--palettes-grey-700);--components-inlineMessage-icon-color: var(--palettes-grey-600);display:flex;gap:var(--components-inlineMessage-gap);font-size:var(--components-inlineMessage-fontSize);line-height:var(--components-inlineMessage-lineHeight);color:var(--components-inlineMessage-color)}.inlineMessage .lucca-icon{font-size:var(--components-inlineMessage-icon-fontSize);color:var(--components-inlineMessage-icon-color);margin-top:2px}.inlineMessage.mod-S{--components-inlineMessage-fontSize: var(--sizes-XS-fontSize);--components-inlineMessage-lineHeight: var(--sizes-XS-lineHeight);--components-inlineMessage-icon-fontSize: .75rem}.inlineMessage.is-success{--components-inlineMessage-icon-color: var(--palettes-success-700);--components-inlineMessage-gap: var(--spacings-XXS)}.inlineMessage.is-success .lucca-icon:before{content:\"\\e9ed\";content:\"\\e9ed\"/\"\"}.inlineMessage.is-warning{--components-inlineMessage-icon-color: var(--palettes-warning-700);--components-inlineMessage-gap: var(--spacings-XXS)}.inlineMessage.is-warning .lucca-icon:before{content:\"\\e992\";content:\"\\e992\"/\"\"}.inlineMessage.is-error{--components-inlineMessage-icon-color: var(--palettes-error-700);--components-inlineMessage-color: var(--palettes-error-700);--components-inlineMessage-gap: var(--spacings-XXS)}.inlineMessage.is-error .lucca-icon:before{content:\"\\e92c\";content:\"\\e92c\"/\"\"}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IconComponent, selector: "lu-icon", inputs: ["icon", "alt", "size", "color"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { InlineMessageComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: InlineMessageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-inline-message', standalone: true, imports: [NgIf, IconComponent], hostDirectives: [NgClazz], changeDetection: ChangeDetectionStrategy.OnPush, template: "<lu-icon [icon]=\"state\" *ngIf=\"state && state !== 'default'\" [alt]=\"state\"></lu-icon>{{label}}\n", styles: [".inlineMessage{--components-inlineMessage-fontSize: var(--sizes-S-fontSize);--components-inlineMessage-lineHeight: var(--sizes-S-lineHeight);--components-inlineMessage-icon-fontSize: var(--sizes-XS-lineHeight);--components-inlineMessage-color: var(--palettes-grey-700);--components-inlineMessage-icon-color: var(--palettes-grey-600);display:flex;gap:var(--components-inlineMessage-gap);font-size:var(--components-inlineMessage-fontSize);line-height:var(--components-inlineMessage-lineHeight);color:var(--components-inlineMessage-color)}.inlineMessage .lucca-icon{font-size:var(--components-inlineMessage-icon-fontSize);color:var(--components-inlineMessage-icon-color);margin-top:2px}.inlineMessage.mod-S{--components-inlineMessage-fontSize: var(--sizes-XS-fontSize);--components-inlineMessage-lineHeight: var(--sizes-XS-lineHeight);--components-inlineMessage-icon-fontSize: .75rem}.inlineMessage.is-success{--components-inlineMessage-icon-color: var(--palettes-success-700);--components-inlineMessage-gap: var(--spacings-XXS)}.inlineMessage.is-success .lucca-icon:before{content:\"\\e9ed\";content:\"\\e9ed\"/\"\"}.inlineMessage.is-warning{--components-inlineMessage-icon-color: var(--palettes-warning-700);--components-inlineMessage-gap: var(--spacings-XXS)}.inlineMessage.is-warning .lucca-icon:before{content:\"\\e992\";content:\"\\e992\"/\"\"}.inlineMessage.is-error{--components-inlineMessage-icon-color: var(--palettes-error-700);--components-inlineMessage-color: var(--palettes-error-700);--components-inlineMessage-gap: var(--spacings-XXS)}.inlineMessage.is-error .lucca-icon:before{content:\"\\e92c\";content:\"\\e92c\"/\"\"}\n"] }]
        }], propDecorators: { label: [{
                type: Input,
                args: [{ required: true }]
            }], state: [{
                type: Input
            }], size: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lLW1lc3NhZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvaW5saW5lLW1lc3NhZ2UvaW5saW5lLW1lc3NhZ2UuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vcGFja2FnZXMvbmcvaW5saW5lLW1lc3NhZ2UvaW5saW5lLW1lc3NhZ2UuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV2QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7QUFFckQsTUFTYSxzQkFBc0I7SUFDbEMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQVczQixXQUFXO1FBQ1YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUc7WUFDdkIsQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUk7WUFDMUIsQ0FBQyxNQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUk7WUFDMUIsYUFBYSxFQUFFLElBQUk7U0FDbkIsQ0FBQztJQUNILENBQUM7OEdBbEJXLHNCQUFzQjtrR0FBdEIsc0JBQXNCLHlNQ2ZuQyx3R0FDQSw4cEREUVcsSUFBSSw2RkFBRSxhQUFhOztTQU1qQixzQkFBc0I7MkZBQXRCLHNCQUFzQjtrQkFUbEMsU0FBUzsrQkFDQyxtQkFBbUIsY0FDakIsSUFBSSxXQUNQLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxrQkFDZCxDQUFDLE9BQU8sQ0FBQyxtQkFHUix1QkFBdUIsQ0FBQyxNQUFNOzhCQU0vQyxLQUFLO3NCQURKLEtBQUs7dUJBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO2dCQUl6QixLQUFLO3NCQURKLEtBQUs7Z0JBSU4sSUFBSTtzQkFESCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgaW5qZWN0LCBJbnB1dCwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0lmIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IElubGluZU1lc3NhZ2VTdGF0ZSB9IGZyb20gJy4vaW5saW5lLW1lc3NhZ2Utc3RhdGUnO1xuaW1wb3J0IHsgTmdDbGF6eiB9IGZyb20gJ0BsdWNjYS1mcm9udC9uZy9jb3JlJztcbmltcG9ydCB7IEljb25Db21wb25lbnQgfSBmcm9tICdAbHVjY2EtZnJvbnQvbmcvaWNvbic7XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ2x1LWlubGluZS1tZXNzYWdlJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0aW1wb3J0czogW05nSWYsIEljb25Db21wb25lbnRdLFxuXHRob3N0RGlyZWN0aXZlczogW05nQ2xhenpdLFxuXHR0ZW1wbGF0ZVVybDogJy4vaW5saW5lLW1lc3NhZ2UuY29tcG9uZW50Lmh0bWwnLFxuXHRzdHlsZVVybHM6IFsnLi9pbmxpbmUtbWVzc2FnZS5jb21wb25lbnQuc2NzcyddLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgSW5saW5lTWVzc2FnZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cdCNuZ0NsYXNzID0gaW5qZWN0KE5nQ2xhenopO1xuXG5cdEBJbnB1dCh7IHJlcXVpcmVkOiB0cnVlIH0pXG5cdGxhYmVsOiBzdHJpbmc7XG5cblx0QElucHV0KClcblx0c3RhdGU6IElubGluZU1lc3NhZ2VTdGF0ZTtcblxuXHRASW5wdXQoKVxuXHRzaXplOiAnUycgfCAnTSc7XG5cblx0bmdPbkNoYW5nZXMoKTogdm9pZCB7XG5cdFx0dGhpcy4jbmdDbGFzcy5uZ0NsYXNzID0ge1xuXHRcdFx0W2Btb2QtJHt0aGlzLnNpemV9YF06IHRydWUsXG5cdFx0XHRbYGlzLSR7dGhpcy5zdGF0ZX1gXTogdHJ1ZSxcblx0XHRcdGlubGluZU1lc3NhZ2U6IHRydWUsXG5cdFx0fTtcblx0fVxufVxuIiwiPGx1LWljb24gW2ljb25dPVwic3RhdGVcIiAqbmdJZj1cInN0YXRlICYmIHN0YXRlICE9PSAnZGVmYXVsdCdcIiBbYWx0XT1cInN0YXRlXCI+PC9sdS1pY29uPnt7bGFiZWx9fVxuIl19