import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { defaultToastDuration } from './toasts.model';
import * as i0 from "@angular/core";
class LuToastsService {
    constructor() {
        this.toasts$ = new BehaviorSubject([]);
    }
    addToast(toastInput) {
        const toast = this.getToast(toastInput);
        this.toasts$.next([...this.toasts$.value, toast]);
        return toast;
    }
    removeToast(toast) {
        const updatedToasts = this.toasts$.value.filter(({ id }) => id !== toast.id);
        this.toasts$.next(updatedToasts);
    }
    isOnlyDismissibleManually({ duration }) {
        return duration === null;
    }
    getToast(toastInput) {
        const id = this.generateId();
        const duration = this.isOnlyDismissibleManually(toastInput) ? toastInput.duration : toastInput.duration ?? defaultToastDuration;
        return { ...toastInput, id, duration };
    }
    generateId() {
        const randomString = Math.random().toString(36).substring(2, 9);
        return `_${randomString}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuToastsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuToastsService, providedIn: 'root' }); }
}
export { LuToastsService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuToastsService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3RzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy90b2FzdC90b2FzdHMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFFLG9CQUFvQixFQUF5QixNQUFNLGdCQUFnQixDQUFDOztBQUU3RSxNQUNhLGVBQWU7SUFENUI7UUFFUSxZQUFPLEdBQUcsSUFBSSxlQUFlLENBQVksRUFBRSxDQUFDLENBQUM7S0E4QnBEO0lBNUJPLFFBQVEsQ0FBQyxVQUF3QjtRQUN2QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXhDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRWxELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVNLFdBQVcsQ0FBQyxLQUFjO1FBQ2hDLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVNLHlCQUF5QixDQUFDLEVBQUUsUUFBUSxFQUFnQjtRQUMxRCxPQUFPLFFBQVEsS0FBSyxJQUFJLENBQUM7SUFDMUIsQ0FBQztJQUVPLFFBQVEsQ0FBQyxVQUF3QjtRQUN4QyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDN0IsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxJQUFJLG9CQUFvQixDQUFDO1FBRWhJLE9BQU8sRUFBRSxHQUFHLFVBQVUsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVPLFVBQVU7UUFDakIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUMzQixDQUFDOzhHQTlCVyxlQUFlO2tIQUFmLGVBQWUsY0FERixNQUFNOztTQUNuQixlQUFlOzJGQUFmLGVBQWU7a0JBRDNCLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWZhdWx0VG9hc3REdXJhdGlvbiwgTHVUb2FzdCwgTHVUb2FzdElucHV0IH0gZnJvbSAnLi90b2FzdHMubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIEx1VG9hc3RzU2VydmljZSB7XG5cdHB1YmxpYyB0b2FzdHMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxMdVRvYXN0W10+KFtdKTtcblxuXHRwdWJsaWMgYWRkVG9hc3QodG9hc3RJbnB1dDogTHVUb2FzdElucHV0KTogTHVUb2FzdCB7XG5cdFx0Y29uc3QgdG9hc3QgPSB0aGlzLmdldFRvYXN0KHRvYXN0SW5wdXQpO1xuXG5cdFx0dGhpcy50b2FzdHMkLm5leHQoWy4uLnRoaXMudG9hc3RzJC52YWx1ZSwgdG9hc3RdKTtcblxuXHRcdHJldHVybiB0b2FzdDtcblx0fVxuXG5cdHB1YmxpYyByZW1vdmVUb2FzdCh0b2FzdDogTHVUb2FzdCk6IHZvaWQge1xuXHRcdGNvbnN0IHVwZGF0ZWRUb2FzdHMgPSB0aGlzLnRvYXN0cyQudmFsdWUuZmlsdGVyKCh7IGlkIH0pID0+IGlkICE9PSB0b2FzdC5pZCk7XG5cdFx0dGhpcy50b2FzdHMkLm5leHQodXBkYXRlZFRvYXN0cyk7XG5cdH1cblxuXHRwdWJsaWMgaXNPbmx5RGlzbWlzc2libGVNYW51YWxseSh7IGR1cmF0aW9uIH06IEx1VG9hc3RJbnB1dCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBkdXJhdGlvbiA9PT0gbnVsbDtcblx0fVxuXG5cdHByaXZhdGUgZ2V0VG9hc3QodG9hc3RJbnB1dDogTHVUb2FzdElucHV0KTogTHVUb2FzdCB7XG5cdFx0Y29uc3QgaWQgPSB0aGlzLmdlbmVyYXRlSWQoKTtcblx0XHRjb25zdCBkdXJhdGlvbiA9IHRoaXMuaXNPbmx5RGlzbWlzc2libGVNYW51YWxseSh0b2FzdElucHV0KSA/IHRvYXN0SW5wdXQuZHVyYXRpb24gOiB0b2FzdElucHV0LmR1cmF0aW9uID8/IGRlZmF1bHRUb2FzdER1cmF0aW9uO1xuXG5cdFx0cmV0dXJuIHsgLi4udG9hc3RJbnB1dCwgaWQsIGR1cmF0aW9uIH07XG5cdH1cblxuXHRwcml2YXRlIGdlbmVyYXRlSWQoKTogc3RyaW5nIHtcblx0XHRjb25zdCByYW5kb21TdHJpbmcgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgOSk7XG5cdFx0cmV0dXJuIGBfJHtyYW5kb21TdHJpbmd9YDtcblx0fVxufVxuIl19