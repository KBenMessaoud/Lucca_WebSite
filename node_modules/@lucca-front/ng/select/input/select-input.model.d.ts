import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { ChangeDetectorRef, ElementRef, Renderer2, ViewContainerRef, ViewRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ILuClearer, ILuInput, ILuInputDisplayer } from '@lucca-front/ng/input';
import { ILuInputWithPicker, ILuPickerPanel } from '@lucca-front/ng/picker';
import { ALuPopoverTrigger } from '@lucca-front/ng/popover';
import { Subscription } from 'rxjs';
export declare abstract class ALuSelectInput<T, TPicker extends ILuPickerPanel<T> = ILuPickerPanel<T>> extends ALuPopoverTrigger<TPicker> implements ControlValueAccessor, ILuInputWithPicker<T>, ILuInput {
    protected _changeDetectorRef: ChangeDetectorRef;
    protected _overlay: Overlay;
    protected _elementRef: ElementRef<HTMLElement>;
    protected _viewContainerRef: ViewContainerRef;
    protected _renderer: Renderer2;
    protected _subs: Subscription;
    constructor(_changeDetectorRef: ChangeDetectorRef, _overlay: Overlay, _elementRef: ElementRef<HTMLElement>, _viewContainerRef: ViewContainerRef, _renderer: Renderer2);
    protected _isContentInitialized: boolean;
    protected _placeholder: string;
    get placeholder(): string;
    set placeholder(p: string);
    /**
     * contriol value accessor interface implementation
     */
    protected _value: T | T[];
    setValue(value: T | T[]): void;
    get value(): T | T[];
    set value(value: T | T[]);
    writeValue(value: T | T[]): void;
    protected _cvaOnChange: (v: T | T[]) => any;
    registerOnChange(fn: (v: T | T[]) => unknown): void;
    protected _onTouched: () => any;
    registerOnTouched(fn: () => unknown): void;
    set disabled(d: boolean);
    get disabled(): boolean;
    setDisabledState(disabled: boolean): void;
    protected isEmpty(): boolean;
    protected applyClasses(): void;
    /**
     * popover trigger class extension
     */
    protected set _picker(picker: TPicker);
    protected get _picker(): TPicker;
    protected set _clearer(clearer: ILuClearer<T>);
    protected subToPickerEvts(): void;
    closePopover(): void;
    onDestroy(): void;
    protected _getOverlayConfig(): OverlayConfig;
    protected _displayer: ILuInputDisplayer<T>;
    protected _displayContainer: ViewContainerRef;
    protected set displayer(d: ILuInputDisplayer<T>);
    protected set displayContainer(vcr: ViewContainerRef);
    protected render(): void;
    protected useMultipleViews(): boolean;
    protected renderSingleView(): void;
    protected clearDisplay(): void;
    protected getView(value: T | T[]): ViewRef;
    protected displayView(view: ViewRef): void;
    protected renderMultipleViews(): void;
    protected _multiple: boolean;
    set multiple(m: boolean);
    get multiple(): boolean;
}
