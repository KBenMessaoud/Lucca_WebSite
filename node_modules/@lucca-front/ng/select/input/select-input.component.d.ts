import { Overlay } from '@angular/cdk/overlay';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, Renderer2, ViewContainerRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ILuClearer, ILuInputDisplayer } from '@lucca-front/ng/input';
import { ILuPickerPanel } from '@lucca-front/ng/picker';
import { ALuSelectInput } from './select-input.model';
import * as i0 from "@angular/core";
export declare abstract class ALuSelectInputComponent<T, TPicker extends ILuPickerPanel<T> = ILuPickerPanel<T>> extends ALuSelectInput<T, TPicker> implements ControlValueAccessor, AfterViewInit, OnDestroy {
    protected _changeDetectorRef: ChangeDetectorRef;
    protected _overlay: Overlay;
    protected _elementRef: ElementRef<HTMLElement>;
    protected _viewContainerRef: ViewContainerRef;
    protected _renderer: Renderer2;
    protected set _vcDisplayContainer(vcr: ViewContainerRef);
    tabindex: number;
    set overlapInput(o: boolean);
    set inputPlaceholder(p: string);
    set inputMultiple(m: boolean | string);
    /** Event emitted when the associated popover is opened. */
    onOpen: EventEmitter<void>;
    /** Event emitted when the associated popover is closed. */
    onClose: EventEmitter<void>;
    constructor(_changeDetectorRef: ChangeDetectorRef, _overlay: Overlay, _elementRef: ElementRef<HTMLElement>, _viewContainerRef: ViewContainerRef, _renderer: Renderer2);
    get isDisabled(): boolean;
    set inputDisabled(d: boolean);
    get isFocused(): boolean;
    get modMultiple(): boolean;
    get isClearable(): boolean;
    /**
     * popover trigger class extension
     */
    ccPicker: TPicker;
    vcPicker: TPicker;
    ccDisplayer: ILuInputDisplayer<T>;
    vcDisplayer: ILuInputDisplayer<T>;
    ccClearer: ILuClearer<T>;
    vcClearer: ILuClearer<T>;
    onClick(): void;
    onMouseEnter(): void;
    onMouseLeave(): void;
    onFocus(): void;
    onBlur(): void;
    onKeydown($event: KeyboardEvent): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    protected _emitOpen(): void;
    protected _emitClose(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ALuSelectInputComponent<any, any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ALuSelectInputComponent<any, any>, never, never, { "overlapInput": { "alias": "pickerOverlap"; "required": false; }; "inputPlaceholder": { "alias": "placeholder"; "required": false; }; "inputMultiple": { "alias": "multiple"; "required": false; }; "inputDisabled": { "alias": "disabled"; "required": false; }; }, { "onOpen": "onOpen"; "onClose": "onClose"; }, ["ccPicker", "ccDisplayer", "ccClearer"], never, false, never>;
}
/**
 * select input
 */
export declare class LuSelectInputComponent<T> extends ALuSelectInputComponent<T> implements AfterViewInit {
    protected _changeDetectorRef: ChangeDetectorRef;
    protected _overlay: Overlay;
    protected _elementRef: ElementRef<HTMLElement>;
    protected _viewContainerRef: ViewContainerRef;
    protected _renderer: Renderer2;
    get modMultipleView(): boolean;
    constructor(_changeDetectorRef: ChangeDetectorRef, _overlay: Overlay, _elementRef: ElementRef<HTMLElement>, _viewContainerRef: ViewContainerRef, _renderer: Renderer2);
    clearerEltRef: ElementRef<HTMLElement>;
    suffixEltRef: ElementRef<HTMLElement>;
    displayClearer(): void;
    ngAfterViewInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<LuSelectInputComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LuSelectInputComponent<any>, "lu-select", never, {}, {}, ["clearerEltRef"], never, true, never>;
}
