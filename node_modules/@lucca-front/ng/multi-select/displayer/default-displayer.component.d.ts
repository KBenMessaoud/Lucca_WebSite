import { AfterViewInit, ChangeDetectorRef, DestroyRef, ElementRef, NgZone, OnDestroy, OnInit, QueryList } from '@angular/core';
import { ILuOptionContext } from '@lucca-front/ng/core-select';
import { Observable, ReplaySubject } from 'rxjs';
import { LuMultiSelectInputComponent } from '../input';
import * as i0 from "@angular/core";
export declare class LuMultiSelectDefaultDisplayerComponent<T> implements AfterViewInit, OnInit, OnDestroy {
    select: LuMultiSelectInputComponent<T>;
    elementRef: ElementRef<HTMLElement>;
    cdr: ChangeDetectorRef;
    intl: import("./default-displayer.translate").ILuMultiSelectDisplayerLabel;
    protected destroyRef: DestroyRef;
    protected zone: NgZone;
    get disabled(): boolean;
    overflowCountContainer: ElementRef<HTMLElement>;
    chipsContainer: ElementRef<HTMLElement>;
    chipsQL: QueryList<ElementRef<HTMLElement>>;
    protected ngAfterViewInit$: ReplaySubject<void>;
    chips$: Observable<HTMLElement[]>;
    context: ILuOptionContext<T[]>;
    protected visibleChips$: ReplaySubject<HTMLElement[]>;
    protected hiddenChips$: ReplaySubject<HTMLElement[]>;
    visibleChipsCount$: Observable<number>;
    hiddenChipsCount$: Observable<number>;
    hiddenOptionCountWidthCssVar: number;
    hiddenOptionCountOffsetLeftCssVar: number;
    ngOnInit(): void;
    unselectOption(option: T, $event: Event): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<LuMultiSelectDefaultDisplayerComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LuMultiSelectDefaultDisplayerComponent<any>, "lu-multi-select-default-displayer", never, {}, {}, never, never, true, never>;
}
