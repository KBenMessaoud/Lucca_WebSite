import { ConnectedPosition, Overlay, OverlayConfig, OverlayPositionBuilder, PositionStrategy, ScrollStrategyOptions } from '@angular/cdk/overlay';
import { ElementRef, Injector } from '@angular/core';
import { ILuMultiSelectPanelData } from '../select.model';
import { LuMultiSelectPanelRef } from './panel.model';
import * as i0 from "@angular/core";
export declare class LuMultiSelectPanelRefFactory {
    protected overlay: Overlay;
    protected elementRef: ElementRef<HTMLElement>;
    protected positionBuilder: OverlayPositionBuilder;
    protected scrollStrategies: ScrollStrategyOptions;
    protected parentInjector: Injector;
    buildPanelRef<T>(panelData: ILuMultiSelectPanelData<T>, defaultOverlayConfigOverride?: OverlayConfig, expandedPositionStrategy?: PositionStrategy): LuMultiSelectPanelRef<T>;
    protected buildDefaultOverlayConfig(overlayConfigOverride?: OverlayConfig): OverlayConfig;
    buildExpandedPositionStrategy(): PositionStrategy;
    protected buildPosition(yDirection: 'top' | 'bottom', xDirection: 'left' | 'right', config: {
        offsetX?: number;
        offsetY?: number;
        overlapInput: boolean;
    }): ConnectedPosition;
    static ɵfac: i0.ɵɵFactoryDeclaration<LuMultiSelectPanelRefFactory, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<LuMultiSelectPanelRefFactory>;
}
