import { PositionStrategy } from '@angular/cdk/overlay';
import { TemplateRef, Type } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ALuSelectInputComponent, LuOptionContext } from '@lucca-front/ng/core-select';
import { ReplaySubject } from 'rxjs';
import { LuMultiSelectPanelRefFactory } from './panel-ref.factory';
import { LuMultiSelectPanelRef } from './panel.model';
import * as i0 from "@angular/core";
export declare class LuMultiSelectInputComponent<T> extends ALuSelectInputComponent<T, T[]> implements ControlValueAccessor {
    intl: import("../select.translate").ILuMultiSelectLabel;
    modMultipleClass: boolean;
    valuesTpl?: TemplateRef<LuOptionContext<T[]>> | Type<unknown>;
    expandedPositionStrategy?: PositionStrategy;
    expanded: boolean;
    get panelRef(): LuMultiSelectPanelRef<T> | undefined;
    protected areAllOptionsSelected$: ReplaySubject<boolean>;
    protected _panelRef?: LuMultiSelectPanelRef<T>;
    protected panelRefFactory: LuMultiSelectPanelRefFactory;
    writeValue(value: T[]): void;
    protected buildPanelRef(): LuMultiSelectPanelRef<T>;
    protected bindInputToPanelRefEvents(): void;
    protected get hasValue(): boolean;
    clearValue(event: MouseEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<LuMultiSelectInputComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LuMultiSelectInputComponent<any>, "lu-multi-select", never, { "valuesTpl": { "alias": "valuesTpl"; "required": false; }; "expandedPositionStrategy": { "alias": "expandedPositionStrategy"; "required": false; }; "expanded": { "alias": "expanded"; "required": false; }; "panelRef": { "alias": "panelRef"; "required": false; }; }, {}, never, never, true, never>;
}
