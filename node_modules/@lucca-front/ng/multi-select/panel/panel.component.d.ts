import { AfterViewInit, ElementRef, QueryList } from '@angular/core';
import { ɵLuOptionComponent } from '@lucca-front/ng/core-select';
import { LuMultiSelectPanelRef } from '../input/panel.model';
import { ILuMultiSelectPanelData } from '../select.model';
import { ɵLuMultiSelectSelectedChipDirective } from './selected-chip.directive';
import * as i0 from "@angular/core";
export declare class LuMultiSelectPanelComponent<T> implements AfterViewInit {
    protected panelData: ILuMultiSelectPanelData<T>;
    panelRef: LuMultiSelectPanelRef<T>;
    selectId: number;
    intl: import("../select.translate").ILuMultiSelectLabel;
    isExpanded: boolean;
    options$: import("rxjs").Observable<T[]>;
    loading$: import("rxjs").Observable<boolean>;
    areAllOptionsSelected$: import("rxjs").Observable<boolean>;
    canSelectAll: boolean;
    optionComparer: (option1: T, option2: T) => boolean;
    selectedOptions: T[];
    optionTpl: import("@angular/core").Type<unknown> | import("@angular/core").TemplateRef<import("@lucca-front/ng/core-select").LuOptionContext<T>>;
    searchable: boolean;
    searchInput: ElementRef<HTMLInputElement> | undefined;
    optionsQL: QueryList<ɵLuOptionComponent<T>>;
    private leftColumnKeyManager;
    selectedChipsQL: QueryList<ɵLuMultiSelectSelectedChipDirective<T>>;
    private rightColumnKeyManager;
    search: string | null;
    onScroll(evt: Event): void;
    ngAfterViewInit(): void;
    onKeyDown($event: KeyboardEvent): void;
    onLeftColumnKeydown($event: KeyboardEvent): void;
    onRightColumnKeydown($event: KeyboardEvent): void;
    updateClue(clue: string | null): void;
    toggleOption(option: T): void;
    onChipKillClick(option: T): void;
    clear(): void;
    protected initLeftColumnKeyManager(): void;
    protected initRightColumnKeyManager(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<LuMultiSelectPanelComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LuMultiSelectPanelComponent<any>, "lu-select-panel", never, {}, {}, never, never, true, never>;
}
