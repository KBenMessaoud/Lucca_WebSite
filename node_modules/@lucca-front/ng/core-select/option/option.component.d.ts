import { Highlightable } from '@angular/cdk/a11y';
import { AfterViewInit, ElementRef, OnDestroy, TemplateRef, Type } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { LuOptionContext } from '../select.model';
import * as i0 from "@angular/core";
export declare class LuOptionComponent<T> implements Highlightable, AfterViewInit, OnDestroy {
    hasOptionItemClass: boolean;
    optionTpl: TemplateRef<LuOptionContext<T>> | Type<unknown> | undefined;
    isSelected: boolean;
    option?: T;
    optionIndex: number;
    scrollIntoViewOptions: ScrollIntoViewOptions;
    isHighlighted$: BehaviorSubject<boolean>;
    /**
     * Whether option is disabled. Used by ListKeyManager.
     */
    disabled: boolean;
    private optionContext?;
    private cdr;
    private subscription?;
    role: string;
    get id(): string;
    protected elementRef: ElementRef<HTMLElement>;
    protected selectId: number;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    setActiveStyles(): void;
    setInactiveStyles(): void;
    selectOption($event: Event): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<LuOptionComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LuOptionComponent<any>, "lu-select-option", never, { "optionTpl": { "alias": "optionTpl"; "required": false; }; "isSelected": { "alias": "isSelected"; "required": false; }; "option": { "alias": "option"; "required": false; }; "optionIndex": { "alias": "optionIndex"; "required": false; }; "scrollIntoViewOptions": { "alias": "scrollIntoViewOptions"; "required": false; }; }, {}, never, never, true, never>;
}
