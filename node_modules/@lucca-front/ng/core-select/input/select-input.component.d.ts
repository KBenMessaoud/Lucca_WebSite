import { OverlayConfig } from '@angular/cdk/overlay';
import { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, TemplateRef, Type } from '@angular/core';
import { BehaviorSubject, ReplaySubject, Subject } from 'rxjs';
import { LuSelectPanelRef } from '../panel';
import { LuOptionContext } from '../select.model';
import * as i0 from "@angular/core";
export declare abstract class ALuSelectInputComponent<TOption, TValue> implements OnDestroy, OnInit {
    tabindex: number;
    placeholder: string;
    clearable: boolean;
    get searchable(): boolean;
    disabled: boolean;
    protected get isFilledClass(): boolean;
    protected abstract readonly hasValue: boolean;
    get isPanelOpen(): boolean;
    isPanelOpen$: BehaviorSubject<boolean>;
    role: string;
    activeDescendant: string | undefined;
    get ariaControls(): string;
    overlayConfig?: OverlayConfig;
    set loading(value: boolean);
    set options(options: TOption[]);
    optionComparer: (option1: TOption, option2: TOption) => boolean;
    optionTpl?: TemplateRef<LuOptionContext<TOption>> | Type<unknown>;
    valueTpl?: TemplateRef<LuOptionContext<TOption>> | Type<unknown>;
    clueChange: EventEmitter<string>;
    nextPage: EventEmitter<void>;
    previousPage: EventEmitter<void>;
    get value(): TValue;
    protected set value(value: TValue);
    protected _value?: TValue;
    options$: ReplaySubject<TOption[]>;
    loading$: ReplaySubject<boolean>;
    clue: string | null;
    protected onChange?: (value: TValue | null) => void;
    protected onTouched?: () => void;
    get panelRef(): LuSelectPanelRef<TOption, TValue> | undefined;
    protected _panelRef?: LuSelectPanelRef<TOption, TValue>;
    protected destroyed$: Subject<void>;
    onKeydown($event: KeyboardEvent): void;
    protected changeDetectorRef: ChangeDetectorRef;
    protected overlayContainerRef: HTMLElement;
    protected label: HTMLElement | undefined;
    protected labelId: string;
    registerOnChange(onChange: (value: TValue) => void): void;
    registerOnTouched(onTouched: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    clearValue(event: MouseEvent): void;
    openPanel(): void;
    protected abstract buildPanelRef(): this['panelRef'];
    protected bindInputToPanelRefEvents(): void;
    closePanel(): void;
    writeValue(value: TValue): void;
    updateValue(value: TValue): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ALuSelectInputComponent<any, any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ALuSelectInputComponent<any, any>, never, never, { "placeholder": { "alias": "placeholder"; "required": false; }; "clearable": { "alias": "clearable"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "overlayConfig": { "alias": "overlayConfig"; "required": false; }; "loading": { "alias": "loading"; "required": false; }; "options": { "alias": "options"; "required": false; }; "optionComparer": { "alias": "optionComparer"; "required": false; }; "optionTpl": { "alias": "optionTpl"; "required": false; }; "valueTpl": { "alias": "valueTpl"; "required": false; }; }, { "clueChange": "clueChange"; "nextPage": "nextPage"; "previousPage": "previousPage"; }, never, never, false, never>;
}
