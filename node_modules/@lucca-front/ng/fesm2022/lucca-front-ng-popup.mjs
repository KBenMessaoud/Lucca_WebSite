import * as i0 from '@angular/core';
import { InjectionToken, Injector, Injectable, inject, NgModule } from '@angular/core';
import * as i1 from '@angular/cdk/overlay';
import { OverlayConfig, OverlayModule } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { Subject, Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';

const luDefaultPopupConfig = {
    position: 'center',
    noBackdrop: false,
    undismissable: false,
    backdropClass: ['cdk-overlay-dark-backdrop', 'lu-popup-backdrop'],
    panelClass: 'lu-popup-panel',
    size: 'M',
};

const LU_POPUP_REF_FACTORY = new InjectionToken('LuPopupRefFactory');
/** Injection token that can be used to access the data that was passed in to a dialog. */
const LU_POPUP_DATA = new InjectionToken('LuPopupData');
const LU_POPUP_CONFIG = new InjectionToken('LuPopupDefaultConfig', {
    factory: () => ({}),
});

class ALuPopupRef {
    constructor(_overlay, _injector, _component, _config) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._component = _component;
        this._config = _config;
        this.onOpen = new Subject();
        this.onClose = new Subject();
        this.onDismiss = new Subject();
        this.onBackdropClick = new Subject();
        this._subs = new Subscription();
    }
    open(data) {
        this._createOverlay();
        this._openPopup(data);
        this._subToCloseEvents();
        this.onOpen.next(data);
        this.onOpen.complete();
    }
    close(result) {
        this.onClose.next(result);
        this._destroy();
    }
    dismiss() {
        this.onDismiss.next();
        this._destroy();
    }
    /**
     *  This method creates the overlay from the provided popover's template and saves its
     *  OverlayRef so that it can be attached to the DOM when openPopover is called.
     */
    _createOverlay() {
        if (!this._overlayRef) {
            const overlayConfig = this._getOverlayConfig();
            this._overlayRef = this._overlay.create(overlayConfig);
        }
    }
    /**
     * This method builds the configuration object needed to create the overlay, the OverlayConfig.
     * @returns OverlayConfig
     */
    _getOverlayConfig() {
        const overlayConfig = new OverlayConfig();
        switch (this._config.position) {
            case 'top':
                overlayConfig.positionStrategy = this._overlay.position().global().centerHorizontally().top('0');
                break;
            case 'bottom':
                overlayConfig.positionStrategy = this._overlay.position().global().centerHorizontally().bottom('0');
                break;
            case 'left':
                overlayConfig.positionStrategy = this._overlay.position().global().centerVertically().left('0');
                break;
            case 'right':
                overlayConfig.positionStrategy = this._overlay.position().global().centerVertically().right('0');
                break;
            case 'center':
            default:
                overlayConfig.positionStrategy = this._overlay.position().global().centerHorizontally().centerVertically();
                break;
        }
        overlayConfig.hasBackdrop = !this._config.noBackdrop;
        overlayConfig.backdropClass = this._config.backdropClass;
        overlayConfig.panelClass = this._getOverlayPanelClasses();
        overlayConfig.scrollStrategy = this._overlay.scrollStrategies.block();
        return overlayConfig;
    }
    _openPopup(data) {
        const injector = Injector.create({
            providers: [
                { provide: ALuPopupRef, useValue: this },
                { provide: LU_POPUP_DATA, useValue: data },
            ],
            parent: this._injector,
        });
        const portal = new ComponentPortal(this._component, undefined, injector);
        this._componentRef = this._overlayRef.attach(portal);
    }
    _getOverlayPanelClasses() {
        const panelClasses = [];
        if (Array.isArray(this._config.panelClass)) {
            panelClasses.push(...this._config.panelClass);
        }
        else {
            panelClasses.push(this._config.panelClass);
        }
        panelClasses.push(`mod-${this._config.size}`);
        return panelClasses;
    }
    _destroy() {
        this._cleanSubscription();
        this._closePopup();
        this._destroyOverlay();
        this._completeSubjects();
    }
    _completeSubjects() {
        this.onClose.complete();
        this.onOpen.complete();
        this.onDismiss.complete();
        this.onBackdropClick.complete();
    }
    _destroyOverlay() {
        this._overlayRef.detachBackdrop();
        this._overlayRef.detach();
    }
    _closePopup() {
        this._componentRef.destroy();
    }
    _subToCloseEvents() {
        if (!this._config.undismissable) {
            this._subToEscapeKeydownEvent();
        }
        this._subToBackdropClickEvent();
    }
    _subToEscapeKeydownEvent() {
        const escPressed$ = this._overlayRef.keydownEvents().pipe(filter(({ key }) => key === 'Escape'));
        this._subs.add(escPressed$.subscribe((_e) => this.dismiss()));
    }
    _subToBackdropClickEvent() {
        const bdClicked$ = this._overlayRef.backdropClick();
        const bdClickedSub = bdClicked$.subscribe((_e) => {
            this.onBackdropClick.next();
            if (!this._config.undismissable) {
                this.dismiss();
            }
        });
        this._subs.add(bdClickedSub);
    }
    _cleanSubscription() {
        this._subs.unsubscribe();
    }
}

class LuPopupRef extends ALuPopupRef {
    constructor(_overlay, _injector, _component, _config) {
        super(_overlay, _injector, _component, _config);
        this._overlay = _overlay;
        this._injector = _injector;
        this._component = _component;
        this._config = _config;
    }
}
class LuPopupRefFactory {
    constructor(_overlay, _injector) {
        this._overlay = _overlay;
        this._injector = _injector;
    }
    forge(component, config) {
        return new LuPopupRef(this._overlay, this._injector, component, config);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuPopupRefFactory, deps: [{ token: i1.Overlay }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuPopupRefFactory }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuPopupRefFactory, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.Injector }]; } });

class LuPopup {
    constructor() {
        this._factory = inject(LU_POPUP_REF_FACTORY);
        this._config = inject(LU_POPUP_CONFIG);
    }
    open(component, data = undefined, config = {}) {
        const extendedConfig = { ...this._config, ...config };
        const ref = this._factory.forge(component, extendedConfig);
        ref.open(data);
        return ref;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuPopup, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuPopup }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuPopup, decorators: [{
            type: Injectable
        }] });

class LuPopupModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuPopupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuPopupModule, imports: [OverlayModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuPopupModule, providers: [LuPopup, { provide: LU_POPUP_CONFIG, useValue: luDefaultPopupConfig }, { provide: LU_POPUP_REF_FACTORY, useClass: LuPopupRefFactory }], imports: [OverlayModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuPopupModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [OverlayModule],
                    exports: [],
                    providers: [LuPopup, { provide: LU_POPUP_CONFIG, useValue: luDefaultPopupConfig }, { provide: LU_POPUP_REF_FACTORY, useClass: LuPopupRefFactory }],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ALuPopupRef, LU_POPUP_CONFIG, LU_POPUP_DATA, LU_POPUP_REF_FACTORY, LuPopup, LuPopupModule, LuPopupRef, LuPopupRefFactory, luDefaultPopupConfig };
//# sourceMappingURL=lucca-front-ng-popup.mjs.map
