import * as i0 from '@angular/core';
import { ChangeDetectionStrategy, InjectionToken, ViewContainerRef, Directive, ViewChild, Component, HostBinding, Injector, inject, ApplicationRef, Injectable, NgModule } from '@angular/core';
import * as i2 from '@angular/cdk/a11y';
import { A11yModule } from '@angular/cdk/a11y';
import { AsyncPipe, NgClass, NgIf } from '@angular/common';
import { getIntl } from '@lucca-front/ng/core';
import * as i3 from '@lucca-front/ng/tooltip';
import { LuTooltipModule } from '@lucca-front/ng/tooltip';
import { ReplaySubject, Subject, Subscription, Observable, timer, isObservable, of } from 'rxjs';
import { map, tap, delay, distinctUntilChanged, switchMap } from 'rxjs/operators';
import { ALuPopupRef } from '@lucca-front/ng/popup';
import { ComponentPortal } from '@angular/cdk/portal';
import * as i1 from '@angular/cdk/overlay';
import { OverlayModule } from '@angular/cdk/overlay';

const luDefaultModalConfig = {
    mode: 'modal',
    position: 'center',
    noBackdrop: false,
    undismissable: false,
    backdropClass: ['cdk-overlay-dark-backdrop', 'lu-popup-backdrop'],
    panelClass: 'lu-popup-panel',
    size: 'M',
    changeDetection: ChangeDetectionStrategy.OnPush,
};
const luDefaultSidepanelConfig = {
    ...luDefaultModalConfig,
    mode: 'sidepanel',
    position: 'right',
};

const luModalClasses = {
    modal: { panel: 'lu-modal-panel', panelInner: 'lu-modal-panel-inner', panelContainer: 'lu-modal-container' },
    sidepanel: { panel: 'lu-sidepanel-panel', panelInner: 'lu-sidepanel-panel-inner', overlayPane: 'mod-sidepanel', panelContainer: 'lu-sidepanel-container' },
};

const LU_MODAL_TRANSLATIONS = new InjectionToken('LuModalTranslations', {
    factory: () => luModalTranslations,
});
const luModalTranslations = {
    en: {
        submit: 'Ok',
        cancel: 'Cancel',
        close: 'Close',
    },
    fr: {
        submit: 'Ok',
        cancel: 'Annuler',
        close: 'Fermer',
    },
    es: {
        submit: 'Ok',
        cancel: 'Cancelar',
        close: 'Cerrar',
    },
};

class ALuModalRef extends ALuPopupRef {
    get mode() {
        return this._config.mode || 'modal';
    }
    get modalClasses() {
        return luModalClasses[this.mode];
    }
}

let modalId = 0;
class ALuModalPanelComponent {
    get isSubmitHidden() {
        return !this._componentInstance.submitAction;
    }
    get submitPalette() {
        return this._componentInstance.submitPalette || 'primary';
    }
    constructor(_ref, _elementRef, _renderer) {
        this._ref = _ref;
        this.doCheck$ = new ReplaySubject(1);
        this.intl = getIntl(LU_MODAL_TRANSLATIONS);
        this.title$ = this.listenComponentValue(() => this._componentInstance.title);
        this.submitLabel$ = this.listenComponentValue(() => this._componentInstance.submitLabel || this.intl.submit);
        this.cancelLabel$ = this.listenComponentValue(() => this._componentInstance.cancelLabel || this.intl.cancel);
        this.submitCounter$ = this.listenComponentValue(() => this._componentInstance.submitCounter);
        this.submitDisabled$ = this.listenComponentValue(() => this._componentInstance.submitDisabled);
        this.hasSubmitCounter$ = this.submitCounter$.pipe(map(Boolean));
        this.closeLabel = this.intl.close;
        this.submitClass$ = new Subject();
        this.error$ = new Subject();
        this.modalId = modalId++;
        this._subs = new Subscription();
        this.modalClasses = _ref.modalClasses;
        _renderer.addClass(_elementRef.nativeElement, this.modalClasses.panel);
    }
    ngDoCheck() {
        this.doCheck$.next();
    }
    attachInnerComponent(componentType, injector) {
        const ref = this._containerRef.createComponent(componentType, { injector });
        this._componentInstance = ref.instance;
        return ref;
    }
    ngOnDestroy() {
        this.doCheck$.complete();
        this._subs.unsubscribe();
    }
    dismiss() {
        this._ref.dismiss();
    }
    submit() {
        this.error$.next(undefined);
        this.submitClass$.next('is-loading');
        const result$ = this._componentInstance.submitAction();
        if (result$ instanceof Observable) {
            this._subs.add(result$
                .pipe(tap((_) => this.submitClass$.next('is-success')), delay(500))
                .subscribe({
                next: (result) => this._ref.close(result),
                error: (err) => {
                    this.submitClass$.next('is-error');
                    this.error$.next(err);
                    timer(2000).subscribe((_) => {
                        this.submitClass$.next('');
                    });
                },
                complete: () => {
                    this.submitClass$.next('');
                },
            }));
        }
        else {
            this._ref.close(result$);
        }
    }
    listenComponentValue(selector) {
        return this.doCheck$.pipe(map(selector), distinctUntilChanged(), switchMap((value) => (isObservable(value) ? value : of(value))));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuModalPanelComponent, deps: [{ token: ALuModalRef }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: ALuModalPanelComponent, viewQueries: [{ propertyName: "_containerRef", first: true, predicate: ["container"], descendants: true, read: ViewContainerRef, static: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuModalPanelComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: ALuModalRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { _containerRef: [{
                type: ViewChild,
                args: ['container', { read: ViewContainerRef, static: true }]
            }] } });
const panelImports = [A11yModule, AsyncPipe, LuTooltipModule, NgClass, NgIf];
class LuModalPanelComponent extends ALuModalPanelComponent {
    constructor(_ref, _elementRef, _renderer) {
        super(_ref, _elementRef, _renderer);
        this.class = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuModalPanelComponent, deps: [{ token: ALuModalRef }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuModalPanelComponent, isStandalone: true, selector: "lu-modal-panel", host: { properties: { "class.lu-modal-panel": "this.class" } }, usesInheritance: true, ngImport: i0, template: "<div\n\tcdkTrapFocus=\"true\"\n\tcdkTrapFocusAutoCapture=\"true\"\n\trole=\"dialog\"\n\taria-modal=\"true\"\n\t[attr.aria-labelledby]=\"'luModalTitle' + modalId\"\n\t[ngClass]=\"modalClasses.panelInner\"\n>\n\t<div [ngClass]=\"modalClasses.panelContainer\" role=\"document\">\n\t\t<div class=\"lu-modal-header\" tabindex=\"-1\" cdkFocusInitial>\n\t\t\t<button type=\"button\" class=\"actionIcon mod-S lu-modal-header-close\" (click)=\"dismiss()\" [luTooltip]=\"closeLabel\">\n\t\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon icon-signClose\"></span>\n\t\t\t\t<span class=\"u-mask\">{{ closeLabel }}</span>\n\t\t\t</button>\n\t\t\t<h1 [attr.id]=\"'luModalTitle' + modalId\" class=\"lu-modal-header-title\">{{ title$ | async }}</h1>\n\t\t</div>\n\t\t<div class=\"lu-modal-content\">\n\t\t\t<ng-container #container></ng-container>\n\t\t</div>\n\t\t<div class=\"lu-modal-footer\">\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\t*ngIf=\"!isSubmitHidden\"\n\t\t\t\tclass=\"button palette-{{ submitPalette }}\"\n\t\t\t\t[disabled]=\"submitDisabled$ | async\"\n\t\t\t\t[ngClass]=\"submitClass$ | async\"\n\t\t\t\t(click)=\"submit()\"\n\t\t\t>\n\t\t\t\t{{ submitLabel$ | async }}\n\t\t\t\t<label class=\"numericBadge palette-primary\" *ngIf=\"hasSubmitCounter$ | async\">{{ submitCounter$ | async }}</label>\n\t\t\t</button>\n\t\t\t<button type=\"button\" class=\"button mod-text\" (click)=\"dismiss()\">{{ cancelLabel$ | async }}</button>\n\t\t</div>\n\t</div>\n</div>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: A11yModule }, { kind: "directive", type: i2.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }, { kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "ngmodule", type: LuTooltipModule }, { kind: "directive", type: i3.LuTooltipTriggerDirective, selector: "[luTooltip]", inputs: ["luTooltip", "luTooltipEnterDelay", "luTooltipLeaveDelay", "luTooltipDisabled", "luTooltipPosition", "luTooltipWhenEllipsis"], outputs: ["luTooltipOnOpen", "luTooltipOnClose"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuModalPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-modal-panel', standalone: true, imports: panelImports, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n\tcdkTrapFocus=\"true\"\n\tcdkTrapFocusAutoCapture=\"true\"\n\trole=\"dialog\"\n\taria-modal=\"true\"\n\t[attr.aria-labelledby]=\"'luModalTitle' + modalId\"\n\t[ngClass]=\"modalClasses.panelInner\"\n>\n\t<div [ngClass]=\"modalClasses.panelContainer\" role=\"document\">\n\t\t<div class=\"lu-modal-header\" tabindex=\"-1\" cdkFocusInitial>\n\t\t\t<button type=\"button\" class=\"actionIcon mod-S lu-modal-header-close\" (click)=\"dismiss()\" [luTooltip]=\"closeLabel\">\n\t\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon icon-signClose\"></span>\n\t\t\t\t<span class=\"u-mask\">{{ closeLabel }}</span>\n\t\t\t</button>\n\t\t\t<h1 [attr.id]=\"'luModalTitle' + modalId\" class=\"lu-modal-header-title\">{{ title$ | async }}</h1>\n\t\t</div>\n\t\t<div class=\"lu-modal-content\">\n\t\t\t<ng-container #container></ng-container>\n\t\t</div>\n\t\t<div class=\"lu-modal-footer\">\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\t*ngIf=\"!isSubmitHidden\"\n\t\t\t\tclass=\"button palette-{{ submitPalette }}\"\n\t\t\t\t[disabled]=\"submitDisabled$ | async\"\n\t\t\t\t[ngClass]=\"submitClass$ | async\"\n\t\t\t\t(click)=\"submit()\"\n\t\t\t>\n\t\t\t\t{{ submitLabel$ | async }}\n\t\t\t\t<label class=\"numericBadge palette-primary\" *ngIf=\"hasSubmitCounter$ | async\">{{ submitCounter$ | async }}</label>\n\t\t\t</button>\n\t\t\t<button type=\"button\" class=\"button mod-text\" (click)=\"dismiss()\">{{ cancelLabel$ | async }}</button>\n\t\t</div>\n\t</div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: ALuModalRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { class: [{
                type: HostBinding,
                args: ['class.lu-modal-panel']
            }] } });
class LuModalPanelComponentDefaultCD extends ALuModalPanelComponent {
    constructor(_ref, _elementRef, _renderer) {
        super(_ref, _elementRef, _renderer);
        this.class = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuModalPanelComponentDefaultCD, deps: [{ token: ALuModalRef }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuModalPanelComponentDefaultCD, isStandalone: true, selector: "lu-modal-panel-default", host: { properties: { "class.lu-modal-panel": "this.class" } }, usesInheritance: true, ngImport: i0, template: "<div\n\tcdkTrapFocus=\"true\"\n\tcdkTrapFocusAutoCapture=\"true\"\n\trole=\"dialog\"\n\taria-modal=\"true\"\n\t[attr.aria-labelledby]=\"'luModalTitle' + modalId\"\n\t[ngClass]=\"modalClasses.panelInner\"\n>\n\t<div [ngClass]=\"modalClasses.panelContainer\" role=\"document\">\n\t\t<div class=\"lu-modal-header\" tabindex=\"-1\" cdkFocusInitial>\n\t\t\t<button type=\"button\" class=\"actionIcon mod-S lu-modal-header-close\" (click)=\"dismiss()\" [luTooltip]=\"closeLabel\">\n\t\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon icon-signClose\"></span>\n\t\t\t\t<span class=\"u-mask\">{{ closeLabel }}</span>\n\t\t\t</button>\n\t\t\t<h1 [attr.id]=\"'luModalTitle' + modalId\" class=\"lu-modal-header-title\">{{ title$ | async }}</h1>\n\t\t</div>\n\t\t<div class=\"lu-modal-content\">\n\t\t\t<ng-container #container></ng-container>\n\t\t</div>\n\t\t<div class=\"lu-modal-footer\">\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\t*ngIf=\"!isSubmitHidden\"\n\t\t\t\tclass=\"button palette-{{ submitPalette }}\"\n\t\t\t\t[disabled]=\"submitDisabled$ | async\"\n\t\t\t\t[ngClass]=\"submitClass$ | async\"\n\t\t\t\t(click)=\"submit()\"\n\t\t\t>\n\t\t\t\t{{ submitLabel$ | async }}\n\t\t\t\t<label class=\"numericBadge palette-primary\" *ngIf=\"hasSubmitCounter$ | async\">{{ submitCounter$ | async }}</label>\n\t\t\t</button>\n\t\t\t<button type=\"button\" class=\"button mod-text\" (click)=\"dismiss()\">{{ cancelLabel$ | async }}</button>\n\t\t</div>\n\t</div>\n</div>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: A11yModule }, { kind: "directive", type: i2.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }, { kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "ngmodule", type: LuTooltipModule }, { kind: "directive", type: i3.LuTooltipTriggerDirective, selector: "[luTooltip]", inputs: ["luTooltip", "luTooltipEnterDelay", "luTooltipLeaveDelay", "luTooltipDisabled", "luTooltipPosition", "luTooltipWhenEllipsis"], outputs: ["luTooltipOnOpen", "luTooltipOnClose"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.Default }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuModalPanelComponentDefaultCD, decorators: [{
            type: Component,
            args: [{ selector: 'lu-modal-panel-default', standalone: true, imports: panelImports, changeDetection: ChangeDetectionStrategy.Default, template: "<div\n\tcdkTrapFocus=\"true\"\n\tcdkTrapFocusAutoCapture=\"true\"\n\trole=\"dialog\"\n\taria-modal=\"true\"\n\t[attr.aria-labelledby]=\"'luModalTitle' + modalId\"\n\t[ngClass]=\"modalClasses.panelInner\"\n>\n\t<div [ngClass]=\"modalClasses.panelContainer\" role=\"document\">\n\t\t<div class=\"lu-modal-header\" tabindex=\"-1\" cdkFocusInitial>\n\t\t\t<button type=\"button\" class=\"actionIcon mod-S lu-modal-header-close\" (click)=\"dismiss()\" [luTooltip]=\"closeLabel\">\n\t\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon icon-signClose\"></span>\n\t\t\t\t<span class=\"u-mask\">{{ closeLabel }}</span>\n\t\t\t</button>\n\t\t\t<h1 [attr.id]=\"'luModalTitle' + modalId\" class=\"lu-modal-header-title\">{{ title$ | async }}</h1>\n\t\t</div>\n\t\t<div class=\"lu-modal-content\">\n\t\t\t<ng-container #container></ng-container>\n\t\t</div>\n\t\t<div class=\"lu-modal-footer\">\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\t*ngIf=\"!isSubmitHidden\"\n\t\t\t\tclass=\"button palette-{{ submitPalette }}\"\n\t\t\t\t[disabled]=\"submitDisabled$ | async\"\n\t\t\t\t[ngClass]=\"submitClass$ | async\"\n\t\t\t\t(click)=\"submit()\"\n\t\t\t>\n\t\t\t\t{{ submitLabel$ | async }}\n\t\t\t\t<label class=\"numericBadge palette-primary\" *ngIf=\"hasSubmitCounter$ | async\">{{ submitCounter$ | async }}</label>\n\t\t\t</button>\n\t\t\t<button type=\"button\" class=\"button mod-text\" (click)=\"dismiss()\">{{ cancelLabel$ | async }}</button>\n\t\t</div>\n\t</div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: ALuModalRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { class: [{
                type: HostBinding,
                args: ['class.lu-modal-panel']
            }] } });

/** Injection token that can be used to access the data that was passed in to a dialog. */
const LU_MODAL_DATA = new InjectionToken('LuModalData');
const LU_MODAL_CONFIG = new InjectionToken('LuModalDefaultConfig', {
    factory: () => luDefaultModalConfig,
});
const LU_MODAL_REF_FACTORY = new InjectionToken('LuModalRefFactory');

function setAriaHiddenOnApplicationRoot(applicationRef, hidden) {
    for (const component of applicationRef.components) {
        const nativeElement = component.location.nativeElement;
        if (nativeElement instanceof HTMLElement) {
            nativeElement.ariaHidden = hidden ? 'true' : undefined;
        }
    }
}

class LuModalRef extends ALuModalRef {
    constructor(_overlay, _injector, _component, _config, _applicationRef) {
        super(_overlay, _injector, _component, _config);
        this._overlay = _overlay;
        this._injector = _injector;
        this._component = _component;
        this._config = _config;
        this._applicationRef = _applicationRef;
    }
    _openPopup(data) {
        const injector = Injector.create({
            providers: [
                { provide: ALuModalRef, useValue: this },
                { provide: LU_MODAL_DATA, useValue: data },
            ],
            parent: this._injector,
        });
        const containerPortal = new ComponentPortal(this._config.changeDetection === ChangeDetectionStrategy.OnPush ? LuModalPanelComponent : LuModalPanelComponentDefaultCD, undefined, injector);
        this._containerRef = this._overlayRef.attach(containerPortal);
        const panel = this._containerRef.instance;
        this._componentRef = panel.attachInnerComponent(this._component, injector);
        setAriaHiddenOnApplicationRoot(this._applicationRef, true);
    }
    _closePopup() {
        this._componentRef.destroy();
        this._containerRef.destroy();
        setAriaHiddenOnApplicationRoot(this._applicationRef, false);
    }
    _getOverlayPanelClasses() {
        const classes = super._getOverlayPanelClasses();
        if (this.modalClasses.overlayPane) {
            classes.push(this.modalClasses.overlayPane);
        }
        return classes;
    }
}
class LuModalRefFactory {
    constructor(_overlay, _injector) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._applicationRef = inject(ApplicationRef);
    }
    forge(component, config) {
        return new LuModalRef(this._overlay, this._injector, component, config, this._applicationRef);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuModalRefFactory, deps: [{ token: i1.Overlay }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuModalRefFactory }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuModalRefFactory, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.Injector }]; } });

class LuModal {
    constructor() {
        this._factory = inject(LU_MODAL_REF_FACTORY);
        this._config = inject(LU_MODAL_CONFIG);
    }
    open(component, data = undefined, config = {}) {
        const extendedConfig = { ...this._config, ...config };
        const ref = this._factory.forge(component, extendedConfig);
        ref.open(data);
        return ref;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuModal, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuModal }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuModal, decorators: [{
            type: Injectable
        }] });

/**
 * Provide LuModal.
 * Note that OverlayModule should be imported in one of the EnvironmentInjectors (AppModule, lazy-loaded route) using `providers: [importProvidersFrom(OverlayModule)]`.
 */
function provideLuModal() {
    return [LuModal, { provide: LU_MODAL_REF_FACTORY, useClass: LuModalRefFactory }];
}
class LuModalModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuModalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuModalModule, imports: [OverlayModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuModalModule, providers: [provideLuModal()], imports: [OverlayModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuModalModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [OverlayModule],
                    providers: [provideLuModal()],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ALuModalPanelComponent, ALuModalRef, LU_MODAL_CONFIG, LU_MODAL_DATA, LU_MODAL_REF_FACTORY, LU_MODAL_TRANSLATIONS, LuModal, LuModalModule, LuModalPanelComponent, LuModalPanelComponentDefaultCD, LuModalRefFactory, luDefaultModalConfig, luDefaultSidepanelConfig, luModalClasses, luModalTranslations, provideLuModal, setAriaHiddenOnApplicationRoot };
//# sourceMappingURL=lucca-front-ng-modal.mjs.map
