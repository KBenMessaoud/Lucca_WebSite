import { HttpClient } from '@angular/common/http';
import * as i0 from '@angular/core';
import { inject, Directive, Input } from '@angular/core';
import { Subject, scan, startWith, debounceTime, BehaviorSubject, takeUntil, combineLatest, switchMap, concatMap, catchError, of, tap, takeWhile, ReplaySubject, map, take } from 'rxjs';
import { ALuSelectInputComponent } from '@lucca-front/ng/core-select';

const MAGIC_PAGE_SIZE = 20;
const MAGIC_DEBOUNCE_DURATION = 250;
class ALuSimpleSelectApiDirective {
    constructor() {
        this.destroy$ = new Subject();
        this.pageSize = MAGIC_PAGE_SIZE;
        this.debounceDuration = MAGIC_DEBOUNCE_DURATION;
        this.select = inject(ALuSelectInputComponent);
        this.page$ = this.select.nextPage.pipe(scan((page) => page + 1, 0), startWith(0));
        this.clue$ = this.select.clueChange.pipe(startWith(''), debounceTime(this.debounceDuration));
        this.loading$ = new BehaviorSubject(false);
    }
    ngOnInit() {
        this.select.optionComparer = this.optionComparer;
        this.buildOptions().pipe(takeUntil(this.destroy$)).subscribe(this.select.options$);
        this.loading$.pipe(debounceTime(0), takeUntil(this.destroy$)).subscribe(this.select.loading$);
    }
    buildOptions() {
        return combineLatest([this.params$.pipe(debounceTime(0)), this.select.isPanelOpen$]).pipe(switchMap(([params, isOpened]) => isOpened
            ? this.page$.pipe(concatMap((page) => {
                this.loading$.next(true);
                return this.getOptions(params, page).pipe(catchError(() => of([])), tap(() => this.loading$.next(false)));
            }), takeWhile((items) => items.length === this.pageSize, true), scan((acc, items) => [...acc, ...items], []))
            : of([])));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuSimpleSelectApiDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: ALuSimpleSelectApiDirective, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuSimpleSelectApiDirective, decorators: [{
            type: Directive
        }] });

class LuSimpleSelectApiV3Directive extends ALuSimpleSelectApiDirective {
    constructor() {
        super(...arguments);
        this.url$ = new ReplaySubject(1);
        this.fields$ = new BehaviorSubject('id,name');
        this.orderBy$ = new BehaviorSubject('name,asc');
        this.filters$ = new BehaviorSubject({});
        this.httpClient = inject(HttpClient);
        this.params$ = combineLatest([this.fields$, this.filters$, this.orderBy$, this.clue$]).pipe(map(([fields, filters, orderBy, clue]) => ({
            ...filters,
            fields,
            ...(orderBy ? { orderBy } : {}),
            ...(clue ? { name: `like,${clue}` } : {}),
        })));
        this.optionComparer = (a, b) => a.id === b.id;
    }
    set apiV3(value) {
        this.url$.next(value);
    }
    set fields(value) {
        this.fields$.next(value);
    }
    set orderBy(value) {
        this.orderBy$.next(value);
    }
    set filters(value) {
        this.filters$.next(value);
    }
    getOptions(params, page) {
        return this.url$.pipe(take(1), switchMap((url) => this.httpClient.get(url, {
            params: {
                ...params,
                paging: `${page * this.pageSize},${this.pageSize}`,
            },
        })), map((res) => res.data.items));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSimpleSelectApiV3Directive, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuSimpleSelectApiV3Directive, isStandalone: true, selector: "lu-simple-select[apiV3],lu-multi-select[apiV3]", inputs: { apiV3: "apiV3", fields: "fields", orderBy: "orderBy", filters: "filters" }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSimpleSelectApiV3Directive, decorators: [{
            type: Directive,
            args: [{
                    // The attribute is already prefixed with "lu-simple-select"
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: 'lu-simple-select[apiV3],lu-multi-select[apiV3]',
                    standalone: true,
                }]
        }], propDecorators: { apiV3: [{
                type: Input
            }], fields: [{
                type: Input
            }], orderBy: [{
                type: Input
            }], filters: [{
                type: Input
            }] } });

class LuSimpleSelectApiV4Directive extends ALuSimpleSelectApiDirective {
    constructor() {
        super(...arguments);
        this.url$ = new ReplaySubject(1);
        this.sort$ = new BehaviorSubject('+name');
        this.filters$ = new BehaviorSubject({});
        this.httpClient = inject(HttpClient);
        this.params$ = combineLatest([this.filters$, this.sort$, this.clue$]).pipe(map(([filters, sort, clue]) => ({
            ...filters,
            ...(sort ? { sort } : {}),
            ...(clue ? { search: clue } : {}),
        })));
        this.optionComparer = (a, b) => a.id === b.id;
    }
    set apiV4(value) {
        this.url$.next(value);
    }
    set sort(value) {
        this.sort$.next(value);
    }
    set filters(value) {
        this.filters$.next(value);
    }
    getOptions(params, page) {
        return this.url$.pipe(take(1), switchMap((url) => this.httpClient.get(url, {
            params: {
                ...params,
                page: page + 1,
                limit: this.pageSize,
            },
        })), map((res) => (Array.isArray(res) ? res : res?.items) ?? []));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSimpleSelectApiV4Directive, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuSimpleSelectApiV4Directive, isStandalone: true, selector: "lu-simple-select[apiV4],lu-multi-select[apiV4]", inputs: { apiV4: "apiV4", sort: "sort", filters: "filters" }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSimpleSelectApiV4Directive, decorators: [{
            type: Directive,
            args: [{
                    // The attribute is already prefixed with "lu-simple-select"
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: 'lu-simple-select[apiV4],lu-multi-select[apiV4]',
                    standalone: true,
                }]
        }], propDecorators: { apiV4: [{
                type: Input
            }], sort: [{
                type: Input
            }], filters: [{
                type: Input
            }] } });

/**
 * Generated bundle index. Do not edit.
 */

export { ALuSimpleSelectApiDirective, LuSimpleSelectApiV3Directive, LuSimpleSelectApiV4Directive };
//# sourceMappingURL=lucca-front-ng-simple-select-api.mjs.map
