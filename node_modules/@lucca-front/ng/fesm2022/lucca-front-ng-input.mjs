import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { EventEmitter, forwardRef, Component, ChangeDetectionStrategy, Output, NgModule, Directive, Input } from '@angular/core';
import * as i1 from '@angular/forms';

class ALuClearer {
}

class LuInputClearerComponent extends ALuClearer {
    constructor() {
        super(...arguments);
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onClear = new EventEmitter();
    }
    onClick($event) {
        this.onClear.emit();
        $event.preventDefault();
        $event.stopPropagation();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputClearerComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuInputClearerComponent, isStandalone: true, selector: "lu-input-clearer", outputs: { onClear: "onClear" }, providers: [
            {
                provide: ALuClearer,
                useExisting: forwardRef(() => LuInputClearerComponent),
            },
        ], exportAs: ["luClearer"], usesInheritance: true, ngImport: i0, template: "<a href=\"#\" role=\"button\" class=\"clear\" (click)=\"onClick($event)\">\n\t<span class=\"u-mask\">Clear</span>\n</a>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{display:none}:host-context(.textfield-input.is-filled){display:block}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]){display:none}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputClearerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-input-clearer', changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'luClearer', standalone: true, imports: [CommonModule], providers: [
                        {
                            provide: ALuClearer,
                            useExisting: forwardRef(() => LuInputClearerComponent),
                        },
                    ], template: "<a href=\"#\" role=\"button\" class=\"clear\" (click)=\"onClick($event)\">\n\t<span class=\"u-mask\">Clear</span>\n</a>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{display:none}:host-context(.textfield-input.is-filled){display:block}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]){display:none}\n"] }]
        }], propDecorators: { onClear: [{
                type: Output
            }] } });

class LuInputClearerModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputClearerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuInputClearerModule, imports: [LuInputClearerComponent], exports: [LuInputClearerComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputClearerModule, imports: [LuInputClearerComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputClearerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuInputClearerComponent],
                    exports: [LuInputClearerComponent],
                }]
        }] });

class ALuInputDisplayer {
    constructor() {
        this.multiple = false;
    }
}

class LuInputDisplayerDirective extends ALuInputDisplayer {
    set argMultiple(m) {
        this.multiple = !!m;
    }
    set inputMultiple(m) {
        if (m === '') {
            // allows to have multiple = true when writing
            // <ng-template luDisplayer multiple>
            this.multiple = true;
        }
        else {
            this.multiple = !!m;
        }
    }
    constructor(template) {
        super();
        this.template = template;
    }
    getViewRef(value) {
        return this.template.createEmbeddedView({ $implicit: value });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputDisplayerDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuInputDisplayerDirective, isStandalone: true, selector: "[luDisplayer]", inputs: { argMultiple: ["luDisplayerMultiple", "argMultiple"], inputMultiple: ["multiple", "inputMultiple"] }, providers: [
            {
                provide: ALuInputDisplayer,
                useExisting: forwardRef(() => LuInputDisplayerDirective),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputDisplayerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luDisplayer]',
                    standalone: true,
                    providers: [
                        {
                            provide: ALuInputDisplayer,
                            useExisting: forwardRef(() => LuInputDisplayerDirective),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { argMultiple: [{
                type: Input,
                args: ['luDisplayerMultiple']
            }], inputMultiple: [{
                type: Input,
                args: ['multiple']
            }] } });
class LuInputDisplayerContext {
    constructor($implicit) {
        this.$implicit = $implicit;
    }
}

class LuInputDisplayerModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputDisplayerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuInputDisplayerModule, imports: [LuInputDisplayerDirective], exports: [LuInputDisplayerDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputDisplayerModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputDisplayerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuInputDisplayerDirective],
                    exports: [LuInputDisplayerDirective],
                }]
        }] });

class ALuInput {
    get placeholder() {
        return this._placeholder;
    }
    constructor(_changeDetectorRef, _elementRef, _renderer) {
        this._changeDetectorRef = _changeDetectorRef;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        // From ControlValueAccessor interface
        this._cvaOnChange = () => {
            return;
        };
        // From ControlValueAccessor interface
        this._onTouched = () => {
            return;
        };
    }
    setValue(value) {
        this.value = value;
        this._cvaOnChange(value);
        this._onTouched();
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
        this.render();
        this.applyClasses();
        this._changeDetectorRef.markForCheck();
    }
    // From ControlValueAccessor interface
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this._cvaOnChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    isEmpty() {
        return this.value === null || this.value === undefined;
    }
    applyClasses() {
        if (this.isEmpty()) {
            this._renderer.removeClass(this._elementRef.nativeElement, 'is-filled');
        }
        else {
            this._renderer.addClass(this._elementRef.nativeElement, 'is-filled');
        }
    }
}

/**
 * adds class is-filled when model is empty
 */
class LuInputDirective {
    constructor(_elementRef, _renderer, _ngControl) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._ngControl = _ngControl;
    }
    isEmpty(value) {
        if (typeof value === 'string') {
            return value === '';
        }
        return value === null || value === undefined;
    }
    applyClasses(value) {
        if (this.isEmpty(value)) {
            this._renderer.removeClass(this._elementRef.nativeElement, 'is-filled');
        }
        else {
            this._renderer.addClass(this._elementRef.nativeElement, 'is-filled');
        }
    }
    ngOnInit() {
        this._ngControl.valueChanges.subscribe((v) => this.applyClasses(v));
        const val = this._ngControl.value;
        this.applyClasses(val);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.NgControl }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuInputDirective, isStandalone: true, selector: "[luInput]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luInput]',
                    standalone: true,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.NgControl }]; } });

class LuInputModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuInputModule, imports: [LuInputDirective, LuInputDisplayerDirective, LuInputClearerComponent], exports: [LuInputDirective, LuInputDisplayerDirective, LuInputClearerComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputModule, imports: [LuInputClearerComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuInputModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuInputDirective, LuInputDisplayerDirective, LuInputClearerComponent],
                    exports: [LuInputDirective, LuInputDisplayerDirective, LuInputClearerComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ALuClearer, ALuInput, ALuInputDisplayer, LuInputClearerComponent, LuInputClearerModule, LuInputDirective, LuInputDisplayerContext, LuInputDisplayerDirective, LuInputDisplayerModule, LuInputModule };
//# sourceMappingURL=lucca-front-ng-input.mjs.map
