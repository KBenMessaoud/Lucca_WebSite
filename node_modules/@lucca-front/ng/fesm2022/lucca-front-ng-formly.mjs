import * as i1$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, ViewContainerRef, ViewChild, Input, NgModule } from '@angular/core';
import * as i1 from '@angular/forms';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import * as i2 from '@lucca-front/ng/api';
import { LuApiModule } from '@lucca-front/ng/api';
import * as i2$2 from '@lucca-front/ng/date';
import { LuDateModule } from '@lucca-front/ng/date';
import * as i2$3 from '@lucca-front/ng/department';
import { LuDepartmentModule } from '@lucca-front/ng/department';
import * as i2$1 from '@lucca-front/ng/establishment';
import { LuEstablishmentModule } from '@lucca-front/ng/establishment';
import * as i5 from '@lucca-front/ng/input';
import { LuInputModule } from '@lucca-front/ng/input';
import * as i4 from '@lucca-front/ng/option';
import { LuOptionModule } from '@lucca-front/ng/option';
import * as i2$5 from '@lucca-front/ng/qualification';
import { LuQualificationModule } from '@lucca-front/ng/qualification';
import * as i3$1 from '@lucca-front/ng/select';
import { LuSelectModule } from '@lucca-front/ng/select';
import * as i2$4 from '@lucca-front/ng/user';
import { LuUserModule } from '@lucca-front/ng/user';
import * as i3 from '@ngx-formly/core';
import { FieldType, FieldWrapper, FormlyModule } from '@ngx-formly/core';

class LuFormlyFieldApi extends FieldType {
    get _api() {
        return this.props['api'];
    }
    get _filters() {
        return (this.props['filters'] || []);
    }
    get _orderBy() {
        return this.props['orderBy'];
    }
    get _sort() {
        return this.props['sort'];
    }
    get _standard() {
        return (this.props['standard'] || 'v3');
    }
    focus() {
        this.props['_isFocused'] = true;
    }
    blur() {
        this.props['_isFocused'] = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldApi, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyFieldApi, selector: "lu-formly-field-api", usesInheritance: true, ngImport: i0, template: "<lu-api-select\n\tclass=\"textfield-input\"\n\t[formControl]=\"formControl\"\n\t[formlyAttributes]=\"field\"\n\t[multiple]=\"props['multiple']\"\n\t(focus)=\"focus()\"\n\t(blur)=\"blur()\"\n\t[placeholder]=\"props.placeholder\"\n\t[api]=\"_api\"\n\t[filters]=\"_filters\"\n\t[orderBy]=\"_orderBy\"\n\t[sort]=\"_sort\"\n\t[standard]=\"_standard\"\n>\n</lu-api-select>\n<span [attr.for]=\"id\" class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n", ":host-context(.mod-framed) lu-select{display:block}:host-context(.mod-framed) lu-api-select{display:block}:host-context(.mod-framed) lu-user-select{display:block}:host-context(.mod-framed) lu-date-select{display:block}:host-context(.mod-framed) lu-department-select{display:block}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i2.LuApiSelectInputComponent, selector: "lu-api-select", inputs: ["standard", "api", "fields", "filters", "orderBy", "sort"] }, { kind: "directive", type: i3.ɵFormlyAttributes, selector: "[formlyAttributes]", inputs: ["formlyAttributes", "id"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldApi, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-field-api', changeDetection: ChangeDetectionStrategy.OnPush, template: "<lu-api-select\n\tclass=\"textfield-input\"\n\t[formControl]=\"formControl\"\n\t[formlyAttributes]=\"field\"\n\t[multiple]=\"props['multiple']\"\n\t(focus)=\"focus()\"\n\t(blur)=\"blur()\"\n\t[placeholder]=\"props.placeholder\"\n\t[api]=\"_api\"\n\t[filters]=\"_filters\"\n\t[orderBy]=\"_orderBy\"\n\t[sort]=\"_sort\"\n\t[standard]=\"_standard\"\n>\n</lu-api-select>\n<span [attr.for]=\"id\" class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n", ":host-context(.mod-framed) lu-select{display:block}:host-context(.mod-framed) lu-api-select{display:block}:host-context(.mod-framed) lu-user-select{display:block}:host-context(.mod-framed) lu-date-select{display:block}:host-context(.mod-framed) lu-department-select{display:block}\n"] }]
        }] });

class LuFormlyFieldEstablishment extends FieldType {
    focus() {
        this.props['_isFocused'] = true;
    }
    blur() {
        this.props['_isFocused'] = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldEstablishment, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyFieldEstablishment, selector: "lu-formly-field-establishment", usesInheritance: true, ngImport: i0, template: "<lu-establishment-select\n\tclass=\"textfield-input\"\n\t[formControl]=\"formControl\"\n\t[formlyAttributes]=\"field\"\n\t[multiple]=\"props['multiple']\"\n\t(focus)=\"focus()\"\n\t(blur)=\"blur()\"\n\t[placeholder]=\"props.placeholder\"\n\t[filters]=\"props['filters']\"\n\t[appInstanceId]=\"props['appInstanceId']\"\n\t[operations]=\"props['operations']\"\n>\n</lu-establishment-select>\n<span class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n", ":host-context(.mod-framed) lu-select{display:block}:host-context(.mod-framed) lu-api-select{display:block}:host-context(.mod-framed) lu-user-select{display:block}:host-context(.mod-framed) lu-date-select{display:block}:host-context(.mod-framed) lu-department-select{display:block}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i2$1.LuEstablishmentSelectInputComponent, selector: "lu-establishment-select", inputs: ["filters", "appInstanceId", "operations"] }, { kind: "directive", type: i3.ɵFormlyAttributes, selector: "[formlyAttributes]", inputs: ["formlyAttributes", "id"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldEstablishment, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-field-establishment', changeDetection: ChangeDetectionStrategy.OnPush, template: "<lu-establishment-select\n\tclass=\"textfield-input\"\n\t[formControl]=\"formControl\"\n\t[formlyAttributes]=\"field\"\n\t[multiple]=\"props['multiple']\"\n\t(focus)=\"focus()\"\n\t(blur)=\"blur()\"\n\t[placeholder]=\"props.placeholder\"\n\t[filters]=\"props['filters']\"\n\t[appInstanceId]=\"props['appInstanceId']\"\n\t[operations]=\"props['operations']\"\n>\n</lu-establishment-select>\n<span class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n", ":host-context(.mod-framed) lu-select{display:block}:host-context(.mod-framed) lu-api-select{display:block}:host-context(.mod-framed) lu-user-select{display:block}:host-context(.mod-framed) lu-date-select{display:block}:host-context(.mod-framed) lu-department-select{display:block}\n"] }]
        }] });

class LuFormlyFieldCheckbox extends FieldType {
    focus() {
        this.props['_isFocused'] = true;
    }
    blur() {
        this.props['_isFocused'] = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldCheckbox, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyFieldCheckbox, selector: "lu-formly-field-checkbox", usesInheritance: true, ngImport: i0, template: "<label class=\"checkbox\" [ngClass]=\"props['mod']\">\n\t<input\n\t\tclass=\"checkbox-input\"\n\t\ttype=\"checkbox\"\n\t\t[name]=\"props['name']\"\n\t\t[id]=\"id\"\n\t\t[formControl]=\"formControl\"\n\t\t[formlyAttributes]=\"field\"\n\t\t(focus)=\"focus()\"\n\t\t(blur)=\"blur()\"\n\t/>\n\t<span class=\"checkbox-label\">{{props.label}}</span>\n</label>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.ɵFormlyAttributes, selector: "[formlyAttributes]", inputs: ["formlyAttributes", "id"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldCheckbox, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-field-checkbox', changeDetection: ChangeDetectionStrategy.OnPush, template: "<label class=\"checkbox\" [ngClass]=\"props['mod']\">\n\t<input\n\t\tclass=\"checkbox-input\"\n\t\ttype=\"checkbox\"\n\t\t[name]=\"props['name']\"\n\t\t[id]=\"id\"\n\t\t[formControl]=\"formControl\"\n\t\t[formlyAttributes]=\"field\"\n\t\t(focus)=\"focus()\"\n\t\t(blur)=\"blur()\"\n\t/>\n\t<span class=\"checkbox-label\">{{props.label}}</span>\n</label>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n"] }]
        }] });

class LuFormlyFieldDate extends FieldType {
    focus() {
        this.props['_isFocused'] = true;
    }
    blur() {
        this.props['_isFocused'] = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldDate, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyFieldDate, selector: "lu-formly-field-date", usesInheritance: true, ngImport: i0, template: "<lu-date-select\n\tclass=\"textfield-input\"\n\t[formControl]=\"formControl\"\n\t[formlyAttributes]=\"field\"\n\t(focus)=\"focus()\"\n\t(blur)=\"blur()\"\n\t[placeholder]=\"props.placeholder\"\n\t[min]=\"props.min\"\n\t[max]=\"props.max\"\n></lu-date-select>\n<span class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n", ":host-context(.mod-framed) lu-select{display:block}:host-context(.mod-framed) lu-api-select{display:block}:host-context(.mod-framed) lu-user-select{display:block}:host-context(.mod-framed) lu-date-select{display:block}:host-context(.mod-framed) lu-department-select{display:block}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i2$2.LuDateSelectInputComponent, selector: "lu-date-select", inputs: ["min", "max", "granularity", "placeholder", "hideClearer", "startOn"] }, { kind: "directive", type: i3.ɵFormlyAttributes, selector: "[formlyAttributes]", inputs: ["formlyAttributes", "id"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldDate, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-field-date', changeDetection: ChangeDetectionStrategy.OnPush, template: "<lu-date-select\n\tclass=\"textfield-input\"\n\t[formControl]=\"formControl\"\n\t[formlyAttributes]=\"field\"\n\t(focus)=\"focus()\"\n\t(blur)=\"blur()\"\n\t[placeholder]=\"props.placeholder\"\n\t[min]=\"props.min\"\n\t[max]=\"props.max\"\n></lu-date-select>\n<span class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n", ":host-context(.mod-framed) lu-select{display:block}:host-context(.mod-framed) lu-api-select{display:block}:host-context(.mod-framed) lu-user-select{display:block}:host-context(.mod-framed) lu-date-select{display:block}:host-context(.mod-framed) lu-department-select{display:block}\n"] }]
        }] });

class LuFormlyFieldDepartment extends FieldType {
    focus() {
        this.props['_isFocused'] = true;
    }
    blur() {
        this.props['_isFocused'] = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldDepartment, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyFieldDepartment, selector: "lu-formly-field-department", usesInheritance: true, ngImport: i0, template: "<lu-department-select\n\tclass=\"textfield-input\"\n\t[formControl]=\"formControl\"\n\t[formlyAttributes]=\"field\"\n\t[multiple]=\"props['multiple']\"\n\t(focus)=\"focus()\"\n\t(blur)=\"blur()\"\n\t[placeholder]=\"props.placeholder\"\n\t[filters]=\"props['filters']\"\n\t[appInstanceId]=\"props['appInstanceId']\"\n\t[operations]=\"props['operations']\"\n>\n</lu-department-select>\n<span class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n", ":host-context(.mod-framed) lu-select{display:block}:host-context(.mod-framed) lu-api-select{display:block}:host-context(.mod-framed) lu-user-select{display:block}:host-context(.mod-framed) lu-date-select{display:block}:host-context(.mod-framed) lu-department-select{display:block}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i2$3.LuDepartmentSelectInputComponent, selector: "lu-department-select", inputs: ["appInstanceId", "operations", "filters"] }, { kind: "directive", type: i3.ɵFormlyAttributes, selector: "[formlyAttributes]", inputs: ["formlyAttributes", "id"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldDepartment, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-field-department', changeDetection: ChangeDetectionStrategy.OnPush, template: "<lu-department-select\n\tclass=\"textfield-input\"\n\t[formControl]=\"formControl\"\n\t[formlyAttributes]=\"field\"\n\t[multiple]=\"props['multiple']\"\n\t(focus)=\"focus()\"\n\t(blur)=\"blur()\"\n\t[placeholder]=\"props.placeholder\"\n\t[filters]=\"props['filters']\"\n\t[appInstanceId]=\"props['appInstanceId']\"\n\t[operations]=\"props['operations']\"\n>\n</lu-department-select>\n<span class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n", ":host-context(.mod-framed) lu-select{display:block}:host-context(.mod-framed) lu-api-select{display:block}:host-context(.mod-framed) lu-user-select{display:block}:host-context(.mod-framed) lu-date-select{display:block}:host-context(.mod-framed) lu-department-select{display:block}\n"] }]
        }] });

class LuFormlyFieldInput extends FieldType {
    get type() {
        return this.props.type || 'text';
    }
    focus() {
        this.props['_isFocused'] = true;
    }
    blur() {
        this.props['_isFocused'] = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldInput, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyFieldInput, selector: "lu-formly-field-input", usesInheritance: true, ngImport: i0, template: "<ng-template [ngIf]=\"type !== 'number'\" [ngIfElse]=\"numberInput\">\n\t<input\n\t\t[type]=\"type\"\n\t\tclass=\"textfield-input\"\n\t\t[name]=\"props['name']\"\n\t\t[formControl]=\"formControl\"\n\t\t[formlyAttributes]=\"field\"\n\t\tluInput\n\t\t(focus)=\"focus()\"\n\t\t(blur)=\"blur()\"\n\t\t[placeholder]=\"props.placeholder\"\n\t/>\n</ng-template>\n<!-- type=\"number\" has to be static in order to have NumberValueAccessor instead of DefaultValueAccessor -->\n<ng-template #numberInput>\n\t<input\n\t\ttype=\"number\"\n\t\tclass=\"textfield-input\"\n\t\t[name]=\"props['name']\"\n\t\t[formControl]=\"formControl\"\n\t\t[formlyAttributes]=\"field\"\n\t\tluInput\n\t\t(focus)=\"focus()\"\n\t\t(blur)=\"blur()\"\n\t\t[placeholder]=\"props.placeholder\"\n\t/>\n</ng-template>\n<span class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n"], dependencies: [{ kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i5.LuInputDirective, selector: "[luInput]" }, { kind: "directive", type: i3.ɵFormlyAttributes, selector: "[formlyAttributes]", inputs: ["formlyAttributes", "id"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldInput, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-field-input', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template [ngIf]=\"type !== 'number'\" [ngIfElse]=\"numberInput\">\n\t<input\n\t\t[type]=\"type\"\n\t\tclass=\"textfield-input\"\n\t\t[name]=\"props['name']\"\n\t\t[formControl]=\"formControl\"\n\t\t[formlyAttributes]=\"field\"\n\t\tluInput\n\t\t(focus)=\"focus()\"\n\t\t(blur)=\"blur()\"\n\t\t[placeholder]=\"props.placeholder\"\n\t/>\n</ng-template>\n<!-- type=\"number\" has to be static in order to have NumberValueAccessor instead of DefaultValueAccessor -->\n<ng-template #numberInput>\n\t<input\n\t\ttype=\"number\"\n\t\tclass=\"textfield-input\"\n\t\t[name]=\"props['name']\"\n\t\t[formControl]=\"formControl\"\n\t\t[formlyAttributes]=\"field\"\n\t\tluInput\n\t\t(focus)=\"focus()\"\n\t\t(blur)=\"blur()\"\n\t\t[placeholder]=\"props.placeholder\"\n\t/>\n</ng-template>\n<span class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n"] }]
        }] });

class LuFormlyFieldRadios extends FieldType {
    get _options() {
        return (this.props.options || []);
    }
    focus() {
        this.props['_isFocused'] = true;
    }
    blur() {
        this.props['_isFocused'] = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldRadios, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyFieldRadios, selector: "lu-formly-field-radios", usesInheritance: true, ngImport: i0, template: "<legend class=\"radiosfield-label\">{{props.label}}</legend>\n<div class=\"radiosfield-input\">\n\t<label *ngFor=\"let option of _options, let i = index\" class=\"radio\">\n\t\t<input\n\t\t\tclass=\"radio-input\"\n\t\t\ttype=\"radio\"\n\t\t\t[name]=\"props['name']\"\n\t\t\t[value]=\"option.value\"\n\t\t\t[id]=\"id + '_'+ i\"\n\t\t\t[formControl]=\"formControl\"\n\t\t\t[formlyAttributes]=\"field\"\n\t\t/>\n\t\t<span class=\"radio-label\">{{option.label}}</span>\n\t</label>\n</div>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n"], dependencies: [{ kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.RadioControlValueAccessor, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.ɵFormlyAttributes, selector: "[formlyAttributes]", inputs: ["formlyAttributes", "id"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldRadios, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-field-radios', changeDetection: ChangeDetectionStrategy.OnPush, template: "<legend class=\"radiosfield-label\">{{props.label}}</legend>\n<div class=\"radiosfield-input\">\n\t<label *ngFor=\"let option of _options, let i = index\" class=\"radio\">\n\t\t<input\n\t\t\tclass=\"radio-input\"\n\t\t\ttype=\"radio\"\n\t\t\t[name]=\"props['name']\"\n\t\t\t[value]=\"option.value\"\n\t\t\t[id]=\"id + '_'+ i\"\n\t\t\t[formControl]=\"formControl\"\n\t\t\t[formlyAttributes]=\"field\"\n\t\t/>\n\t\t<span class=\"radio-label\">{{option.label}}</span>\n\t</label>\n</div>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n"] }]
        }] });

class LuFormlyFieldSelect extends FieldType {
    get _options() {
        return (this.props.options || []);
    }
    focus() {
        this.props['_isFocused'] = true;
    }
    blur() {
        this.props['_isFocused'] = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldSelect, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyFieldSelect, selector: "lu-formly-field-select", usesInheritance: true, ngImport: i0, template: "<lu-select\n\tclass=\"textfield-input\"\n\t[formControl]=\"formControl\"\n\t[formlyAttributes]=\"field\"\n\t(focus)=\"focus()\"\n\t(blur)=\"blur()\"\n\t[multiple]=\"props['multiple']\"\n\t[placeholder]=\"props.placeholder\"\n>\n\t<ng-container *luDisplayer=\"let option\">\n\t\t<span [class.chip]=\"props['multiple']\" [class.mod-unkillable]=\"props['multiple']\">{{ option.name }}</span>\n\t</ng-container>\n\t<lu-option-picker>\n\t\t<lu-option *ngFor=\"let option of _options\" [value]=\"option\"> {{ option.name }} </lu-option>\n\t</lu-option-picker>\n\t<lu-input-clearer *ngIf=\"!props.required && !props['multiple']\"></lu-input-clearer>\n</lu-select>\n<span class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n", ":host-context(.mod-framed) lu-select{display:block}:host-context(.mod-framed) lu-api-select{display:block}:host-context(.mod-framed) lu-user-select{display:block}:host-context(.mod-framed) lu-date-select{display:block}:host-context(.mod-framed) lu-department-select{display:block}\n"], dependencies: [{ kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i3$1.LuSelectInputComponent, selector: "lu-select" }, { kind: "component", type: i4.LuOptionItemComponent, selector: "lu-option", inputs: ["selected", "highlighted", "value", "disabled"], outputs: ["onSelect"] }, { kind: "component", type: i4.LuOptionPickerComponent, selector: "lu-option-picker", exportAs: ["LuOptionPicker"] }, { kind: "directive", type: i5.LuInputDisplayerDirective, selector: "[luDisplayer]", inputs: ["luDisplayerMultiple", "multiple"] }, { kind: "component", type: i5.LuInputClearerComponent, selector: "lu-input-clearer", outputs: ["onClear"], exportAs: ["luClearer"] }, { kind: "directive", type: i3.ɵFormlyAttributes, selector: "[formlyAttributes]", inputs: ["formlyAttributes", "id"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldSelect, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-field-select', changeDetection: ChangeDetectionStrategy.OnPush, template: "<lu-select\n\tclass=\"textfield-input\"\n\t[formControl]=\"formControl\"\n\t[formlyAttributes]=\"field\"\n\t(focus)=\"focus()\"\n\t(blur)=\"blur()\"\n\t[multiple]=\"props['multiple']\"\n\t[placeholder]=\"props.placeholder\"\n>\n\t<ng-container *luDisplayer=\"let option\">\n\t\t<span [class.chip]=\"props['multiple']\" [class.mod-unkillable]=\"props['multiple']\">{{ option.name }}</span>\n\t</ng-container>\n\t<lu-option-picker>\n\t\t<lu-option *ngFor=\"let option of _options\" [value]=\"option\"> {{ option.name }} </lu-option>\n\t</lu-option-picker>\n\t<lu-input-clearer *ngIf=\"!props.required && !props['multiple']\"></lu-input-clearer>\n</lu-select>\n<span class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n", ":host-context(.mod-framed) lu-select{display:block}:host-context(.mod-framed) lu-api-select{display:block}:host-context(.mod-framed) lu-user-select{display:block}:host-context(.mod-framed) lu-date-select{display:block}:host-context(.mod-framed) lu-department-select{display:block}\n"] }]
        }] });

class LuFormlyFieldTextarea extends FieldType {
    focus() {
        this.props['_isFocused'] = true;
    }
    blur() {
        this.props['_isFocused'] = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldTextarea, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyFieldTextarea, selector: "lu-formly-field-input", usesInheritance: true, ngImport: i0, template: "<textarea\n\tclass=\"textfield-input\"\n\t[name]=\"props['name']\"\n\t[formControl]=\"formControl\"\n\t[formlyAttributes]=\"field\"\n\tluInput\n\t(focus)=\"focus()\"\n\t(blur)=\"blur()\"\n\t[placeholder]=\"props.placeholder\"\n></textarea>\n<span class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n"], dependencies: [{ kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i5.LuInputDirective, selector: "[luInput]" }, { kind: "directive", type: i3.ɵFormlyAttributes, selector: "[formlyAttributes]", inputs: ["formlyAttributes", "id"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldTextarea, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-field-input', changeDetection: ChangeDetectionStrategy.OnPush, template: "<textarea\n\tclass=\"textfield-input\"\n\t[name]=\"props['name']\"\n\t[formControl]=\"formControl\"\n\t[formlyAttributes]=\"field\"\n\tluInput\n\t(focus)=\"focus()\"\n\t(blur)=\"blur()\"\n\t[placeholder]=\"props.placeholder\"\n></textarea>\n<span class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n"] }]
        }] });

class LuFormlyFieldUser extends FieldType {
    focus() {
        this.props['_isFocused'] = true;
    }
    blur() {
        this.props['_isFocused'] = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldUser, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyFieldUser, selector: "lu-formly-field-user", usesInheritance: true, ngImport: i0, template: "<lu-user-select\n\tclass=\"textfield-input\"\n\t[formControl]=\"formControl\"\n\t[formlyAttributes]=\"field\"\n\t[multiple]=\"props['multiple']\"\n\t(focus)=\"focus()\"\n\t(blur)=\"blur()\"\n\t[placeholder]=\"props.placeholder\"\n>\n</lu-user-select>\n<span class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n", ":host-context(.mod-framed) lu-select{display:block}:host-context(.mod-framed) lu-api-select{display:block}:host-context(.mod-framed) lu-user-select{display:block}:host-context(.mod-framed) lu-date-select{display:block}:host-context(.mod-framed) lu-department-select{display:block}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i2$4.LuUserSelectInputComponent, selector: "lu-user-select", inputs: ["placeholder", "fields", "filters", "orderBy", "appInstanceId", "operations", "enableFormerEmployees"] }, { kind: "directive", type: i3.ɵFormlyAttributes, selector: "[formlyAttributes]", inputs: ["formlyAttributes", "id"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldUser, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-field-user', changeDetection: ChangeDetectionStrategy.OnPush, template: "<lu-user-select\n\tclass=\"textfield-input\"\n\t[formControl]=\"formControl\"\n\t[formlyAttributes]=\"field\"\n\t[multiple]=\"props['multiple']\"\n\t(focus)=\"focus()\"\n\t(blur)=\"blur()\"\n\t[placeholder]=\"props.placeholder\"\n>\n</lu-user-select>\n<span class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n", ":host-context(.mod-framed) lu-select{display:block}:host-context(.mod-framed) lu-api-select{display:block}:host-context(.mod-framed) lu-user-select{display:block}:host-context(.mod-framed) lu-date-select{display:block}:host-context(.mod-framed) lu-department-select{display:block}\n"] }]
        }] });

class LuFormlyFieldQualification extends FieldType {
    focus() {
        this.props['_isFocused'] = true;
    }
    blur() {
        this.props['_isFocused'] = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldQualification, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyFieldQualification, selector: "lu-formly-field-qualification", usesInheritance: true, ngImport: i0, template: "<lu-qualification-select\n\tclass=\"textfield-input\"\n\t[formControl]=\"formControl\"\n\t[formlyAttributes]=\"field\"\n\t[multiple]=\"props['multiple']\"\n\t(focus)=\"focus()\"\n\t(blur)=\"blur()\"\n\t[placeholder]=\"props.placeholder\"\n\t[filters]=\"props['filters']\"\n>\n</lu-qualification-select>\n<span class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n", ":host-context(.mod-framed) lu-select{display:block}:host-context(.mod-framed) lu-api-select{display:block}:host-context(.mod-framed) lu-user-select{display:block}:host-context(.mod-framed) lu-date-select{display:block}:host-context(.mod-framed) lu-department-select{display:block}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i2$5.LuQualificationSelectInputComponent, selector: "lu-qualification-select", inputs: ["filters"] }, { kind: "directive", type: i3.ɵFormlyAttributes, selector: "[formlyAttributes]", inputs: ["formlyAttributes", "id"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyFieldQualification, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-field-qualification', changeDetection: ChangeDetectionStrategy.OnPush, template: "<lu-qualification-select\n\tclass=\"textfield-input\"\n\t[formControl]=\"formControl\"\n\t[formlyAttributes]=\"field\"\n\t[multiple]=\"props['multiple']\"\n\t(focus)=\"focus()\"\n\t(blur)=\"blur()\"\n\t[placeholder]=\"props.placeholder\"\n\t[filters]=\"props['filters']\"\n>\n</lu-qualification-select>\n<span class=\"textfield-label\">{{ props.label }}</span>\n", styles: [":host{width:100%;display:inherit;align-items:inherit;flex-direction:inherit}\n", ":host-context(.mod-framed) lu-select{display:block}:host-context(.mod-framed) lu-api-select{display:block}:host-context(.mod-framed) lu-user-select{display:block}:host-context(.mod-framed) lu-date-select{display:block}:host-context(.mod-framed) lu-department-select{display:block}\n"] }]
        }] });

function buildAddWrapperExtension(wrapperName, predicate) {
    return {
        postPopulate(field) {
            if (predicate(field)) {
                field.wrappers = [...(field.wrappers || []), wrapperName];
            }
        },
    };
}

// wrapper
class LuFormlyWrapperError extends FieldWrapper {
    get validationId() {
        return this.field.id + '-message';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyWrapperError, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyWrapperError, selector: "lu-formly-wrapper-error", viewQueries: [{ propertyName: "fieldComponent", first: true, predicate: ["fieldComponent"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0, template: "<ng-container #fieldComponent></ng-container>\n<div class=\"textfield-messages\" *ngIf=\"formControl.touched && formControl.invalid\" [id]=\"validationId\">\n\t<lu-formly-error-message [formControl]=\"formControl\" [field]=\"field\"></lu-formly-error-message>\n</div>\n", styles: [":host{display:inherit;flex-direction:inherit;flex:1 1 auto;width:100%}\n"], dependencies: [{ kind: "directive", type: i0.forwardRef(function () { return i1$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i0.forwardRef(function () { return i1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i0.forwardRef(function () { return i1.FormControlDirective; }), selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i0.forwardRef(function () { return LuFormlyErrorMessage; }), selector: "lu-formly-error-message", inputs: ["formControl", "field"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyWrapperError, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-wrapper-error', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container #fieldComponent></ng-container>\n<div class=\"textfield-messages\" *ngIf=\"formControl.touched && formControl.invalid\" [id]=\"validationId\">\n\t<lu-formly-error-message [formControl]=\"formControl\" [field]=\"field\"></lu-formly-error-message>\n</div>\n", styles: [":host{display:inherit;flex-direction:inherit;flex:1 1 auto;width:100%}\n"] }]
        }], propDecorators: { fieldComponent: [{
                type: ViewChild,
                args: ['fieldComponent', { read: ViewContainerRef, static: true }]
            }] } });
// component that display the right error message
class LuFormlyErrorMessage {
    get errorMessages() {
        const messages = [];
        if (this.formControl?.errors) {
            Object.keys(this.formControl.errors).forEach((key) => {
                if (this.field.validation?.messages?.[key]) {
                    messages.push(this.field.validation.messages[key]);
                }
            });
        }
        return messages;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyErrorMessage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyErrorMessage, selector: "lu-formly-error-message", inputs: { formControl: "formControl", field: "field" }, ngImport: i0, template: `<div class="textfield-messages-error" *ngFor="let message of errorMessages">
		{{ message }}
	</div>`, isInline: true, dependencies: [{ kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyErrorMessage, decorators: [{
            type: Component,
            args: [{
                    selector: 'lu-formly-error-message',
                    template: `<div class="textfield-messages-error" *ngFor="let message of errorMessages">
		{{ message }}
	</div>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { formControl: [{
                type: Input
            }], field: [{
                type: Input
            }] } });
const templateErrorExtension = buildAddWrapperExtension('error', (field) => !!field.validation);

// wrapper component
class LuFormlyWrapperHelper extends FieldWrapper {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyWrapperHelper, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyWrapperHelper, selector: "lu-formly-wrapper-helper", viewQueries: [{ propertyName: "fieldComponent", first: true, predicate: ["fieldComponent"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0, template: "<ng-container #fieldComponent></ng-container>\n<div class=\"textfield-messages mod-helper\">\n\t<div class=\"textfield-messages-helper\">{{ props['helper'] }}</div>\n</div>\n", styles: [":host{display:inherit;flex-direction:inherit;flex:1 1 auto;width:100%}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyWrapperHelper, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-wrapper-helper', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container #fieldComponent></ng-container>\n<div class=\"textfield-messages mod-helper\">\n\t<div class=\"textfield-messages-helper\">{{ props['helper'] }}</div>\n</div>\n", styles: [":host{display:inherit;flex-direction:inherit;flex:1 1 auto;width:100%}\n"] }]
        }], propDecorators: { fieldComponent: [{
                type: ViewChild,
                args: ['fieldComponent', { read: ViewContainerRef, static: true }]
            }] } });
const templateHelperExtension = buildAddWrapperExtension('helper', (field) => !!field?.props?.['helper']);

// wrapper component
class LuFormlyWrapperIcon extends FieldWrapper {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyWrapperIcon, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyWrapperIcon, selector: "lu-formly-wrapper-suffix", viewQueries: [{ propertyName: "fieldComponent", first: true, predicate: ["fieldComponent"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0, template: "<ng-container #fieldComponent></ng-container>\n<span aria-hidden=\"true\" class=\"textfield-suffix mod-icon lucca-icon\">{{ props['icon'] }}</span>\n", styles: [":host{display:inherit;flex-direction:inherit;flex:1 1 auto;width:100%}\n", ":host .textfield-suffix{pointer-events:none}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyWrapperIcon, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-wrapper-suffix', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container #fieldComponent></ng-container>\n<span aria-hidden=\"true\" class=\"textfield-suffix mod-icon lucca-icon\">{{ props['icon'] }}</span>\n", styles: [":host{display:inherit;flex-direction:inherit;flex:1 1 auto;width:100%}\n", ":host .textfield-suffix{pointer-events:none}\n"] }]
        }], propDecorators: { fieldComponent: [{
                type: ViewChild,
                args: ['fieldComponent', { read: ViewContainerRef, static: true }]
            }] } });
const templateIconExtension = buildAddWrapperExtension('icon', (field) => !!field?.props?.['icon']);

// wrapper component
class LuFormlyWrapperRadiosfieldLayout extends FieldWrapper {
    get mod() {
        return (this.props['mod'] || '');
    }
    get isRequired() {
        return !!this.props && !!this.props.required ? 'is-required' : '';
    }
    get isFocused() {
        return !!this.props && this.props['_isFocused'] ? 'is-focused' : '';
    }
    get isError() {
        return this.formControl.invalid && this.formControl.touched ? 'is-error' : '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyWrapperRadiosfieldLayout, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyWrapperRadiosfieldLayout, selector: "lu-formly-wrapper-radiosfield-layout", viewQueries: [{ propertyName: "fieldComponent", first: true, predicate: ["fieldComponent"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"fieldsetWrapper\">\n\t<fieldset class=\"radiosfield\" [ngClass]=\"[mod, isRequired, isFocused, isError]\">\n\t\t<ng-container #fieldComponent></ng-container>\n\t</fieldset>\n</div>\n", styles: [":host{display:inherit;flex-direction:inherit;flex:1 1 auto;width:100%}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyWrapperRadiosfieldLayout, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-wrapper-radiosfield-layout', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"fieldsetWrapper\">\n\t<fieldset class=\"radiosfield\" [ngClass]=\"[mod, isRequired, isFocused, isError]\">\n\t\t<ng-container #fieldComponent></ng-container>\n\t</fieldset>\n</div>\n", styles: [":host{display:inherit;flex-direction:inherit;flex:1 1 auto;width:100%}\n"] }]
        }], propDecorators: { fieldComponent: [{
                type: ViewChild,
                args: ['fieldComponent', { read: ViewContainerRef, static: true }]
            }] } });

// wrapper component
class LuFormlyWrapperSuffix extends FieldWrapper {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyWrapperSuffix, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyWrapperSuffix, selector: "lu-formly-wrapper-suffix", viewQueries: [{ propertyName: "fieldComponent", first: true, predicate: ["fieldComponent"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0, template: "<ng-container #fieldComponent></ng-container>\n<span class=\"textfield-suffix\">{{ props['suffix'] }}</span>\n", styles: [":host{display:inherit;flex-direction:inherit;flex:1 1 auto;width:100%}\n", ":host .textfield-suffix{pointer-events:none}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyWrapperSuffix, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-wrapper-suffix', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container #fieldComponent></ng-container>\n<span class=\"textfield-suffix\">{{ props['suffix'] }}</span>\n", styles: [":host{display:inherit;flex-direction:inherit;flex:1 1 auto;width:100%}\n", ":host .textfield-suffix{pointer-events:none}\n"] }]
        }], propDecorators: { fieldComponent: [{
                type: ViewChild,
                args: ['fieldComponent', { read: ViewContainerRef, static: true }]
            }] } });
const templateSuffixExtension = buildAddWrapperExtension('suffix', (field) => !!field?.props?.['suffix'] && !field?.props?.['icon']);

// wrapper component
class LuFormlyWrapperTextfieldLayout extends FieldWrapper {
    get mod() {
        return (this.props['mod'] || '');
    }
    get modMultiline() {
        return !!this.field && this.field.type === 'textarea' ? 'mod-multiline' : '';
    }
    get modWithSuffix() {
        return !!this.props && !!this.props['suffix'] ? 'mod-withSuffix' : '';
    }
    get isRequired() {
        return !!this.props && !!this.props.required ? 'is-required' : '';
    }
    get isDisabled() {
        return !!this.props && !!this.props.disabled ? 'is-disabled' : '';
    }
    get isFocused() {
        return !!this.props && this.props['_isFocused'] ? 'is-focused' : '';
    }
    get isError() {
        return this.formControl.invalid && this.formControl.touched ? 'is-error' : '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyWrapperTextfieldLayout, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyWrapperTextfieldLayout, selector: "lu-formly-wrapper-layout", viewQueries: [{ propertyName: "fieldComponent", first: true, predicate: ["fieldComponent"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0, template: "<label class=\"textfield\" [ngClass]=\"[mod, modWithSuffix, modMultiline, isRequired, isFocused, isError, isDisabled]\">\n\t<ng-container #fieldComponent></ng-container>\n</label>\n", styles: [":host{display:inherit;flex-direction:inherit;flex:1 1 auto;width:100%}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyWrapperTextfieldLayout, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-wrapper-layout', changeDetection: ChangeDetectionStrategy.OnPush, template: "<label class=\"textfield\" [ngClass]=\"[mod, modWithSuffix, modMultiline, isRequired, isFocused, isError, isDisabled]\">\n\t<ng-container #fieldComponent></ng-container>\n</label>\n", styles: [":host{display:inherit;flex-direction:inherit;flex:1 1 auto;width:100%}\n"] }]
        }], propDecorators: { fieldComponent: [{
                type: ViewChild,
                args: ['fieldComponent', { read: ViewContainerRef, static: true }]
            }] } });

// wrapper component
class LuFormlyWrapperCheckboxLayout extends FieldWrapper {
    get mod() {
        return (this.props['mod'] || '');
    }
    get isRequired() {
        return !!this.props && !!this.props.required ? 'is-required' : '';
    }
    get isFocused() {
        return !!this.props && this.props['_isFocused'] ? 'is-focused' : '';
    }
    get isError() {
        return this.formControl.invalid && this.formControl.touched ? 'is-error' : '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyWrapperCheckboxLayout, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuFormlyWrapperCheckboxLayout, selector: "lu-formly-wrapper-checkbox-layout", viewQueries: [{ propertyName: "fieldComponent", first: true, predicate: ["fieldComponent"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"fieldsetWrapper\">\n\t<fieldset class=\"checkboxesfield\" [ngClass]=\"[mod, isRequired, isFocused, isError]\">\n\t\t<ng-container #fieldComponent></ng-container>\n\t</fieldset>\n</div>\n", styles: [":host{display:inherit;flex-direction:inherit;flex:1 1 auto;width:100%}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyWrapperCheckboxLayout, decorators: [{
            type: Component,
            args: [{ selector: 'lu-formly-wrapper-checkbox-layout', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"fieldsetWrapper\">\n\t<fieldset class=\"checkboxesfield\" [ngClass]=\"[mod, isRequired, isFocused, isError]\">\n\t\t<ng-container #fieldComponent></ng-container>\n\t</fieldset>\n</div>\n", styles: [":host{display:inherit;flex-direction:inherit;flex:1 1 auto;width:100%}\n"] }]
        }], propDecorators: { fieldComponent: [{
                type: ViewChild,
                args: ['fieldComponent', { read: ViewContainerRef, static: true }]
            }] } });

// inputs
const LU_FORMLY_CONFIG = {
    types: [
        {
            name: 'input',
            component: LuFormlyFieldInput,
            wrappers: ['textfield-layout'],
        },
        {
            name: 'radio',
            component: LuFormlyFieldRadios,
            wrappers: ['radiosfield-layout'],
        },
        {
            name: 'checkbox',
            component: LuFormlyFieldCheckbox,
            wrappers: ['checkbox-layout'],
        },
        {
            name: 'date',
            component: LuFormlyFieldDate,
            wrappers: ['textfield-layout'],
        },
        {
            name: 'textarea',
            component: LuFormlyFieldTextarea,
            wrappers: ['textfield-layout'],
        },
        {
            name: 'select',
            component: LuFormlyFieldSelect,
            wrappers: ['textfield-layout'],
        },
        {
            name: 'user',
            component: LuFormlyFieldUser,
            wrappers: ['textfield-layout'],
        },
        {
            name: 'api',
            component: LuFormlyFieldApi,
            wrappers: ['textfield-layout'],
        },
        {
            name: 'department',
            component: LuFormlyFieldDepartment,
            wrappers: ['textfield-layout'],
        },
        {
            name: 'establishment',
            component: LuFormlyFieldEstablishment,
            wrappers: ['textfield-layout'],
        },
        {
            name: 'qualification',
            component: LuFormlyFieldQualification,
            wrappers: ['textfield-layout'],
        },
    ],
    wrappers: [
        { name: 'helper', component: LuFormlyWrapperHelper },
        { name: 'checkbox-layout', component: LuFormlyWrapperCheckboxLayout },
        { name: 'radiosfield-layout', component: LuFormlyWrapperRadiosfieldLayout },
        { name: 'textfield-layout', component: LuFormlyWrapperTextfieldLayout },
        { name: 'suffix', component: LuFormlyWrapperSuffix },
        { name: 'icon', component: LuFormlyWrapperIcon },
        { name: 'error', component: LuFormlyWrapperError },
    ],
    extensions: [
        { name: 'helper', extension: templateHelperExtension },
        { name: 'error', extension: templateErrorExtension },
        { name: 'suffix', extension: templateSuffixExtension },
        { name: 'icon', extension: templateIconExtension }, // second
    ],
};

/** HACK to avoid a 'Function calls are not supported in decorators' error */
const LuFormlyChild = FormlyModule.forChild(LU_FORMLY_CONFIG);
class LuFormlyModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyModule, declarations: [LuFormlyErrorMessage,
            LuFormlyFieldInput,
            LuFormlyFieldDate,
            LuFormlyFieldTextarea,
            LuFormlyFieldSelect,
            LuFormlyFieldUser,
            LuFormlyFieldApi,
            LuFormlyFieldDepartment,
            LuFormlyFieldEstablishment,
            LuFormlyFieldQualification,
            LuFormlyFieldRadios,
            LuFormlyFieldCheckbox,
            LuFormlyWrapperHelper,
            LuFormlyWrapperCheckboxLayout,
            LuFormlyWrapperTextfieldLayout,
            LuFormlyWrapperRadiosfieldLayout,
            LuFormlyWrapperSuffix,
            LuFormlyWrapperIcon,
            LuFormlyWrapperError], imports: [CommonModule,
            FormsModule,
            ReactiveFormsModule,
            LuSelectModule,
            LuOptionModule,
            LuUserModule,
            LuInputModule,
            LuApiModule,
            LuDepartmentModule,
            LuEstablishmentModule,
            LuQualificationModule,
            LuDateModule, i3.FormlyModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyModule, imports: [CommonModule,
            FormsModule,
            ReactiveFormsModule,
            LuSelectModule,
            LuOptionModule,
            LuUserModule,
            LuInputModule,
            LuApiModule,
            LuDepartmentModule,
            LuEstablishmentModule,
            LuQualificationModule,
            LuDateModule,
            LuFormlyChild] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuFormlyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        LuFormlyErrorMessage,
                        LuFormlyFieldInput,
                        LuFormlyFieldDate,
                        LuFormlyFieldTextarea,
                        LuFormlyFieldSelect,
                        LuFormlyFieldUser,
                        LuFormlyFieldApi,
                        LuFormlyFieldDepartment,
                        LuFormlyFieldEstablishment,
                        LuFormlyFieldQualification,
                        LuFormlyFieldRadios,
                        LuFormlyFieldCheckbox,
                        LuFormlyWrapperHelper,
                        LuFormlyWrapperCheckboxLayout,
                        LuFormlyWrapperTextfieldLayout,
                        LuFormlyWrapperRadiosfieldLayout,
                        LuFormlyWrapperSuffix,
                        LuFormlyWrapperIcon,
                        LuFormlyWrapperError,
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        LuSelectModule,
                        LuOptionModule,
                        LuUserModule,
                        LuInputModule,
                        LuApiModule,
                        LuDepartmentModule,
                        LuEstablishmentModule,
                        LuQualificationModule,
                        LuDateModule,
                        LuFormlyChild,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { LU_FORMLY_CONFIG, LuFormlyChild, LuFormlyErrorMessage, LuFormlyFieldApi, LuFormlyFieldCheckbox, LuFormlyFieldDate, LuFormlyFieldDepartment, LuFormlyFieldEstablishment, LuFormlyFieldInput, LuFormlyFieldQualification, LuFormlyFieldRadios, LuFormlyFieldSelect, LuFormlyFieldTextarea, LuFormlyFieldUser, LuFormlyModule, LuFormlyWrapperCheckboxLayout, LuFormlyWrapperError, LuFormlyWrapperHelper, LuFormlyWrapperIcon, LuFormlyWrapperRadiosfieldLayout, LuFormlyWrapperSuffix, LuFormlyWrapperTextfieldLayout, templateErrorExtension, templateHelperExtension, templateIconExtension, templateSuffixExtension };
//# sourceMappingURL=lucca-front-ng-formly.mjs.map
