import * as i0 from '@angular/core';
import { InjectionToken, inject, Injectable, NgModule } from '@angular/core';
import { luDefaultSidepanelConfig, LU_MODAL_DATA, luModalTranslations, LuModal, LuModalModule } from '@lucca-front/ng/modal';
export { ALuModalRef as ALuSidepanelRef } from '@lucca-front/ng/modal';

/**
 * For backward compatibility, we re-export modal tokens as sidepanel tokens.
 * We should remove all sidepanel related files in the next major version (16+).
 */
/**
 * @deprecated Use LU_MODAL_CONFIG from @lucca-front/ng/modal instead.
 */
const LU_SIDEPANEL_CONFIG = new InjectionToken('LuSidepanelDefaultConfig', {
    factory: () => luDefaultSidepanelConfig,
});
/**
 * @deprecated Use LU_MODAL_DATA from @lucca-front/ng/modal instead.
 */
const LU_SIDEPANEL_DATA = LU_MODAL_DATA;
/**
 * @deprecated Use LU_MODAL_TRANSLATIONS from @lucca-front/ng/modal instead.
 */
const LU_SIDEPANEL_TRANSLATIONS = new InjectionToken('LuSidepanelTranslations', {
    factory: () => luSidepanelTranslations,
});
/**
 * @deprecated Use luModalTranslations from @lucca-front/ng/modal instead.
 */
const luSidepanelTranslations = luModalTranslations;

/**
 * @deprecated Use LuModal with `modal.open(component, data, { mode: 'sidepanel' })` instead.
 */
class LuSidepanel extends LuModal {
    constructor() {
        super(...arguments);
        this._config = inject(LU_SIDEPANEL_CONFIG);
    }
    /**
     * @deprecated Use LuModal with `modal.open(component, data, { mode: 'sidepanel' })` instead.
     */
    open(component, data = undefined, config = {}) {
        return super.open(component, data, config);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSidepanel, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSidepanel }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSidepanel, decorators: [{
            type: Injectable
        }] });

/**
 * @deprecated Use LuModal with `modal.open(component, data, { mode: 'sidepanel' })` instead.
 */
class LuSidepanelModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSidepanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuSidepanelModule, imports: [LuModalModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSidepanelModule, providers: [LuSidepanel], imports: [LuModalModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSidepanelModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuModalModule],
                    providers: [LuSidepanel],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { LU_SIDEPANEL_CONFIG, LU_SIDEPANEL_DATA, LU_SIDEPANEL_TRANSLATIONS, LuSidepanel, LuSidepanelModule, luSidepanelTranslations };
//# sourceMappingURL=lucca-front-ng-sidepanel.mjs.map
