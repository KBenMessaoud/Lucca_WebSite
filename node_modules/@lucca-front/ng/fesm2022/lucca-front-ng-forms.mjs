import * as i0 from '@angular/core';
import { inject, DestroyRef, booleanAttribute, Component, Directive, Input, HostBinding, InjectionToken, ViewChild } from '@angular/core';
import * as i2 from '@angular/forms';
import { NgControl, NgModel, FormControlDirective, FormControlName, NG_VALIDATORS, RequiredValidator, Validators, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { FormFieldComponent, InputDirective } from '@lucca-front/ng/form-field';
import { filter, take } from 'rxjs/operators';
import { NgIf, NgTemplateOutlet, NgSwitchCase } from '@angular/common';
import { getIntl } from '@lucca-front/ng/core';

//Source: https://netbasal.com/forwarding-form-controls-to-custom-control-components-in-angular-701e8406cc55
function injectNgControl() {
    const ngControl = inject(NgControl, { self: true, optional: true });
    if (!ngControl) {
        throw new Error('NgControl not found');
    }
    if (ngControl instanceof NgModel) {
        const destroyRef = inject(DestroyRef);
        ngControl.control.valueChanges.pipe(takeUntilDestroyed(destroyRef)).subscribe((value) => {
            if (ngControl.model !== value || ngControl.viewModel !== value) {
                ngControl.viewToModelUpdate(value);
            }
        });
        return ngControl;
    }
    if (ngControl instanceof FormControlDirective || ngControl instanceof FormControlName) {
        return ngControl;
    }
    throw new Error(`NgControl is not an instance of FormControlDirective, FormControlName or NgModel`);
}

class AbstractFieldComponent {
    constructor() {
        this.ngControl = injectNgControl();
        this.#ngModelRequiredValidator = inject(NG_VALIDATORS, { optional: true })?.find((v) => v instanceof RequiredValidator);
    }
    #ngModelRequiredValidator;
    get required() {
        return this.ngControl.control.hasValidator(Validators.required) || booleanAttribute(this.#ngModelRequiredValidator.required);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: AbstractFieldComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: AbstractFieldComponent, isStandalone: true, selector: "ng-component", ngImport: i0, template: '', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: AbstractFieldComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                    standalone: true,
                }]
        }] });

//Source: https://netbasal.com/forwarding-form-controls-to-custom-control-components-in-angular-701e8406cc55
class NoopValueAccessorDirective {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    writeValue() { }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    registerOnChange() { }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    registerOnTouched() { }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: NoopValueAccessorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: NoopValueAccessorDirective, isStandalone: true, selector: "[luNoopValueAccessor]", providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: NoopValueAccessorDirective,
            },
        ], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: NoopValueAccessorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luNoopValueAccessor]',
                    standalone: true,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: NoopValueAccessorDirective,
                        },
                    ],
                }]
        }] });

class FormFieldIdDirective {
    #formFieldComponent;
    #suffix;
    set suffix(suffix) {
        this.#suffix = suffix;
        if (this.#formFieldComponent.ready) {
            this.applyLabelledBy();
        }
    }
    get id() {
        return `${this.#formFieldComponent.id}-${this.#suffix}`;
    }
    constructor() {
        this.#formFieldComponent = inject(FormFieldComponent);
        this.labelledByStrategy = 'append';
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        this.#formFieldComponent.ready$.pipe(filter(Boolean), take(1)).subscribe(() => {
            this.applyLabelledBy();
        });
    }
    applyLabelledBy() {
        this.#formFieldComponent.addLabelledBy(`${this.#formFieldComponent.id}-${this.#suffix}`, this.labelledByStrategy === 'prepend');
    }
    ngOnDestroy() {
        this.#formFieldComponent.removeLabelledBy(`${this.#formFieldComponent.id}-${this.#suffix}`);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: FormFieldIdDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: FormFieldIdDirective, isStandalone: true, selector: "[luFormFieldId]", inputs: { suffix: ["luFormFieldId", "suffix"], labelledByStrategy: "labelledByStrategy" }, host: { properties: { "attr.id": "this.id" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: FormFieldIdDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luFormFieldId]',
                    standalone: true,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { suffix: [{
                type: Input,
                args: [{
                        required: true,
                        alias: 'luFormFieldId',
                    }]
            }], labelledByStrategy: [{
                type: Input
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }] } });

const LU_TEXTFIELD_TRANSLATIONS = new InjectionToken('LuTextfieldTranslations', {
    factory: () => luTextfieldTranslations,
});
const luTextfieldTranslations = {
    en: {
        clear: 'Empty this field',
    },
    fr: {
        clear: 'Vider ce champ',
    },
};

class TextfieldComponent extends AbstractFieldComponent {
    constructor() {
        super(...arguments);
        this.hiddenLabel = false;
        this.hasClearer = false;
        this.hasSearchIcon = false;
        this.type = 'text';
        this.searchIcon = 'search';
        this.intl = getIntl(LU_TEXTFIELD_TRANSLATIONS);
    }
    clearValue() {
        this.ngControl.reset();
        this.inputElementRef.nativeElement.focus();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: TextfieldComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: TextfieldComponent, isStandalone: true, selector: "lu-textfield", inputs: { label: "label", placeholder: "placeholder", hiddenLabel: ["hiddenLabel", "hiddenLabel", booleanAttribute], tooltip: "tooltip", inlineMessage: "inlineMessage", inlineMessageState: "inlineMessageState", size: "size", hasClearer: ["hasClearer", "hasClearer", booleanAttribute], hasSearchIcon: ["hasSearchIcon", "hasSearchIcon", booleanAttribute], prefix: "prefix", suffix: "suffix", type: "type", searchIcon: "searchIcon" }, viewQueries: [{ propertyName: "inputElementRef", first: true, predicate: ["inputElement"], descendants: true, static: true }], usesInheritance: true, hostDirectives: [{ directive: NoopValueAccessorDirective }], ngImport: i0, template: "<lu-form-field\n\t[label]=\"label\"\n\t[required]=\"required\"\n\t[hiddenLabel]=\"hiddenLabel\"\n\t[inlineMessage]=\"inlineMessage\"\n\t[inlineMessageState]=\"inlineMessageState\"\n\t[size]=\"size\"\n\t[invalid]=\"ngControl.control.touched && ngControl.control.invalid\"\n\t[tooltip]=\"tooltip\"\n>\n\t<ng-template #textfieldAddon let-addon=\"addon\" let-type=\"type\">\n\t\t<span class=\"textField-{{type}}\" luFormFieldId=\"{{type}}\" *ngIf=\"addon.content\">\n\t\t\t<span class=\"textField-label-{{type}}-item\" [attr.aria-label]=\"addon.ariaLabel\">{{addon.content}}</span>\n\t\t</span>\n\t\t<span class=\"textField-{{type}}\" luFormFieldId=\"{{type}}\" *ngIf=\"addon.icon\">\n\t\t\t<span class=\"textField-label-{{type}}-item\" [attr.aria-label]=\"addon.ariaLabel\"\n\t\t\t\t><span class=\"lucca-icon icon-{{addon.icon}}\"></span\n\t\t\t></span>\n\t\t</span>\n\t</ng-template>\n\n\t<ng-container *ngIf=\"prefix\">\n\t\t<ng-container\n\t\t\t*ngTemplateOutlet=\"textfieldAddon; context:{\n\t\t\ttype: 'prefix',\n\t\t\taddon: prefix\n     }\"\n\t\t>\n\t\t</ng-container>\n\t</ng-container>\n\t<ng-container *ngIf=\"suffix\">\n\t\t<ng-container\n\t\t\t*ngTemplateOutlet=\"textfieldAddon; context:{\n\t\t\ttype: 'suffix',\n\t\t\taddon: suffix\n     }\"\n\t\t>\n\t\t</ng-container>\n\t</ng-container>\n\t<div class=\"textField-input\">\n\t\t<input luInput [type]=\"type\" [placeholder]=\"placeholder\" [formControl]=\"ngControl.control\" #inputElement />\n\t\t<div class=\"textField-input-affix\">\n\t\t\t<button class=\"textField-input-affix-clear clear\" (click)=\"clearValue()\" *ngIf=\"hasClearer && inputElement.value\">\n\t\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon icon-close\"></span>\n\t\t\t\t<span class=\"u-mask\">{{intl.clear}}</span>\n\t\t\t</button>\n\t\t\t<span aria-hidden=\"true\" class=\"textField-input-affix-icon lucca-icon icon-{{searchIcon}}\" *ngIf=\"hasSearchIcon\"></span>\n\t\t</div>\n\t</div>\n</lu-form-field>\n", dependencies: [{ kind: "component", type: FormFieldComponent, selector: "lu-form-field", inputs: ["label", "hiddenLabel", "tooltip", "required", "invalid", "inlineMessage", "inlineMessageState", "size", "layout"] }, { kind: "directive", type: InputDirective, selector: "[luInput]" }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: FormFieldIdDirective, selector: "[luFormFieldId]", inputs: ["luFormFieldId", "labelledByStrategy"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: TextfieldComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-textfield', standalone: true, imports: [FormFieldComponent, InputDirective, NgIf, ReactiveFormsModule, FormFieldIdDirective, NgTemplateOutlet], hostDirectives: [NoopValueAccessorDirective], template: "<lu-form-field\n\t[label]=\"label\"\n\t[required]=\"required\"\n\t[hiddenLabel]=\"hiddenLabel\"\n\t[inlineMessage]=\"inlineMessage\"\n\t[inlineMessageState]=\"inlineMessageState\"\n\t[size]=\"size\"\n\t[invalid]=\"ngControl.control.touched && ngControl.control.invalid\"\n\t[tooltip]=\"tooltip\"\n>\n\t<ng-template #textfieldAddon let-addon=\"addon\" let-type=\"type\">\n\t\t<span class=\"textField-{{type}}\" luFormFieldId=\"{{type}}\" *ngIf=\"addon.content\">\n\t\t\t<span class=\"textField-label-{{type}}-item\" [attr.aria-label]=\"addon.ariaLabel\">{{addon.content}}</span>\n\t\t</span>\n\t\t<span class=\"textField-{{type}}\" luFormFieldId=\"{{type}}\" *ngIf=\"addon.icon\">\n\t\t\t<span class=\"textField-label-{{type}}-item\" [attr.aria-label]=\"addon.ariaLabel\"\n\t\t\t\t><span class=\"lucca-icon icon-{{addon.icon}}\"></span\n\t\t\t></span>\n\t\t</span>\n\t</ng-template>\n\n\t<ng-container *ngIf=\"prefix\">\n\t\t<ng-container\n\t\t\t*ngTemplateOutlet=\"textfieldAddon; context:{\n\t\t\ttype: 'prefix',\n\t\t\taddon: prefix\n     }\"\n\t\t>\n\t\t</ng-container>\n\t</ng-container>\n\t<ng-container *ngIf=\"suffix\">\n\t\t<ng-container\n\t\t\t*ngTemplateOutlet=\"textfieldAddon; context:{\n\t\t\ttype: 'suffix',\n\t\t\taddon: suffix\n     }\"\n\t\t>\n\t\t</ng-container>\n\t</ng-container>\n\t<div class=\"textField-input\">\n\t\t<input luInput [type]=\"type\" [placeholder]=\"placeholder\" [formControl]=\"ngControl.control\" #inputElement />\n\t\t<div class=\"textField-input-affix\">\n\t\t\t<button class=\"textField-input-affix-clear clear\" (click)=\"clearValue()\" *ngIf=\"hasClearer && inputElement.value\">\n\t\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon icon-close\"></span>\n\t\t\t\t<span class=\"u-mask\">{{intl.clear}}</span>\n\t\t\t</button>\n\t\t\t<span aria-hidden=\"true\" class=\"textField-input-affix-icon lucca-icon icon-{{searchIcon}}\" *ngIf=\"hasSearchIcon\"></span>\n\t\t</div>\n\t</div>\n</lu-form-field>\n" }]
        }], propDecorators: { label: [{
                type: Input,
                args: [{ required: true }]
            }], placeholder: [{
                type: Input
            }], hiddenLabel: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], tooltip: [{
                type: Input
            }], inlineMessage: [{
                type: Input
            }], inlineMessageState: [{
                type: Input
            }], size: [{
                type: Input
            }], hasClearer: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], hasSearchIcon: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], inputElementRef: [{
                type: ViewChild,
                args: ['inputElement', { static: true }]
            }], prefix: [{
                type: Input
            }], suffix: [{
                type: Input
            }], type: [{
                type: Input
            }], 
        /**
         * Search icon to use for when `hasSearchIcon` is true, defaults to 'search'
         */
        searchIcon: [{
                type: Input
            }] } });

class CheckboxfieldComponent extends AbstractFieldComponent {
    constructor() {
        super(...arguments);
        this.hiddenLabel = false;
    }
    get required() {
        return this.ngControl.control.hasValidator(Validators.requiredTrue);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: CheckboxfieldComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: CheckboxfieldComponent, isStandalone: true, selector: "lu-checkboxfield", inputs: { label: "label", hiddenLabel: ["hiddenLabel", "hiddenLabel", booleanAttribute], tooltip: "tooltip", inlineMessage: "inlineMessage", inlineMessageState: "inlineMessageState", size: "size" }, usesInheritance: true, hostDirectives: [{ directive: NoopValueAccessorDirective }], ngImport: i0, template: "<lu-form-field\n\t[label]=\"label\"\n\t[required]=\"required\"\n\t[hiddenLabel]=\"hiddenLabel\"\n\t[inlineMessage]=\"inlineMessage\"\n\t[inlineMessageState]=\"inlineMessageState\"\n\t[size]=\"size\"\n\t[invalid]=\"ngControl.control.touched && ngControl.control.invalid\"\n\t[tooltip]=\"tooltip\"\n\tlayout=\"checkbox\"\n>\n\t<span class=\"checkboxField\">\n\t\t<input luInput type=\"checkbox\" class=\"checkboxField-input\" [formControl]=\"ngControl.control\" />\n\t\t<span class=\"checkboxField-icon\" aria-hidden=\"true\"><span class=\"checkboxField-icon-check\"></span></span>\n\t</span>\n</lu-form-field>\n", dependencies: [{ kind: "component", type: FormFieldComponent, selector: "lu-form-field", inputs: ["label", "hiddenLabel", "tooltip", "required", "invalid", "inlineMessage", "inlineMessageState", "size", "layout"] }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: InputDirective, selector: "[luInput]" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: CheckboxfieldComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-checkboxfield', standalone: true, imports: [FormFieldComponent, ReactiveFormsModule, InputDirective, NgSwitchCase, NgTemplateOutlet], hostDirectives: [NoopValueAccessorDirective], template: "<lu-form-field\n\t[label]=\"label\"\n\t[required]=\"required\"\n\t[hiddenLabel]=\"hiddenLabel\"\n\t[inlineMessage]=\"inlineMessage\"\n\t[inlineMessageState]=\"inlineMessageState\"\n\t[size]=\"size\"\n\t[invalid]=\"ngControl.control.touched && ngControl.control.invalid\"\n\t[tooltip]=\"tooltip\"\n\tlayout=\"checkbox\"\n>\n\t<span class=\"checkboxField\">\n\t\t<input luInput type=\"checkbox\" class=\"checkboxField-input\" [formControl]=\"ngControl.control\" />\n\t\t<span class=\"checkboxField-icon\" aria-hidden=\"true\"><span class=\"checkboxField-icon-check\"></span></span>\n\t</span>\n</lu-form-field>\n" }]
        }], propDecorators: { label: [{
                type: Input,
                args: [{ required: true }]
            }], hiddenLabel: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], tooltip: [{
                type: Input
            }], inlineMessage: [{
                type: Input
            }], inlineMessageState: [{
                type: Input
            }], size: [{
                type: Input
            }] } });

class SwitchfieldComponent extends AbstractFieldComponent {
    constructor() {
        super(...arguments);
        this.hiddenLabel = false;
    }
    get required() {
        return this.ngControl.control.hasValidator(Validators.requiredTrue);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: SwitchfieldComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: SwitchfieldComponent, isStandalone: true, selector: "lu-switchfield", inputs: { label: "label", hiddenLabel: ["hiddenLabel", "hiddenLabel", booleanAttribute], tooltip: "tooltip", inlineMessage: "inlineMessage", inlineMessageState: "inlineMessageState", size: "size" }, usesInheritance: true, hostDirectives: [{ directive: NoopValueAccessorDirective }], ngImport: i0, template: "<lu-form-field\n\t[label]=\"label\"\n\t[required]=\"required\"\n\t[hiddenLabel]=\"hiddenLabel\"\n\t[inlineMessage]=\"inlineMessage\"\n\t[inlineMessageState]=\"inlineMessageState\"\n\t[size]=\"size\"\n\t[invalid]=\"ngControl.control.touched && ngControl.control.invalid\"\n\t[tooltip]=\"tooltip\"\n\tlayout=\"checkbox\"\n>\n\t<span class=\"switchField\">\n\t\t<input luInput type=\"checkbox\" class=\"switchField-input\" [formControl]=\"ngControl.control\" />\n\t\t<span class=\"switchField-icon\" aria-hidden=\"true\"><span class=\"switchField-icon-check\"></span></span>\n\t</span>\n</lu-form-field>\n", dependencies: [{ kind: "component", type: FormFieldComponent, selector: "lu-form-field", inputs: ["label", "hiddenLabel", "tooltip", "required", "invalid", "inlineMessage", "inlineMessageState", "size", "layout"] }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: InputDirective, selector: "[luInput]" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: SwitchfieldComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-switchfield', standalone: true, imports: [FormFieldComponent, ReactiveFormsModule, InputDirective], hostDirectives: [NoopValueAccessorDirective], template: "<lu-form-field\n\t[label]=\"label\"\n\t[required]=\"required\"\n\t[hiddenLabel]=\"hiddenLabel\"\n\t[inlineMessage]=\"inlineMessage\"\n\t[inlineMessageState]=\"inlineMessageState\"\n\t[size]=\"size\"\n\t[invalid]=\"ngControl.control.touched && ngControl.control.invalid\"\n\t[tooltip]=\"tooltip\"\n\tlayout=\"checkbox\"\n>\n\t<span class=\"switchField\">\n\t\t<input luInput type=\"checkbox\" class=\"switchField-input\" [formControl]=\"ngControl.control\" />\n\t\t<span class=\"switchField-icon\" aria-hidden=\"true\"><span class=\"switchField-icon-check\"></span></span>\n\t</span>\n</lu-form-field>\n" }]
        }], propDecorators: { label: [{
                type: Input,
                args: [{ required: true }]
            }], hiddenLabel: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], tooltip: [{
                type: Input
            }], inlineMessage: [{
                type: Input
            }], inlineMessageState: [{
                type: Input
            }], size: [{
                type: Input
            }] } });

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractFieldComponent, CheckboxfieldComponent, FormFieldIdDirective, NoopValueAccessorDirective, SwitchfieldComponent, TextfieldComponent, injectNgControl };
//# sourceMappingURL=lucca-front-ng-forms.mjs.map
