import * as i0 from '@angular/core';
import { inject, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { NgIf } from '@angular/common';
import * as i1 from '@lucca-front/ng/core';
import { NgClazz } from '@lucca-front/ng/core';
import { IconComponent } from '@lucca-front/ng/icon';

class InlineMessageComponent {
    #ngClass = inject(NgClazz);
    ngOnChanges() {
        this.#ngClass.ngClass = {
            [`mod-${this.size}`]: true,
            [`is-${this.state}`]: true,
            inlineMessage: true,
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: InlineMessageComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: InlineMessageComponent, isStandalone: true, selector: "lu-inline-message", inputs: { label: "label", state: "state", size: "size" }, usesOnChanges: true, hostDirectives: [{ directive: i1.NgClazz }], ngImport: i0, template: "<lu-icon [icon]=\"state\" *ngIf=\"state && state !== 'default'\" [alt]=\"state\"></lu-icon>{{label}}\n", styles: [".inlineMessage{--components-inlineMessage-fontSize: var(--sizes-S-fontSize);--components-inlineMessage-lineHeight: var(--sizes-S-lineHeight);--components-inlineMessage-icon-fontSize: var(--sizes-XS-lineHeight);--components-inlineMessage-color: var(--palettes-grey-700);--components-inlineMessage-icon-color: var(--palettes-grey-600);display:flex;gap:var(--components-inlineMessage-gap);font-size:var(--components-inlineMessage-fontSize);line-height:var(--components-inlineMessage-lineHeight);color:var(--components-inlineMessage-color)}.inlineMessage .lucca-icon{font-size:var(--components-inlineMessage-icon-fontSize);color:var(--components-inlineMessage-icon-color);margin-top:2px}.inlineMessage.mod-S{--components-inlineMessage-fontSize: var(--sizes-XS-fontSize);--components-inlineMessage-lineHeight: var(--sizes-XS-lineHeight);--components-inlineMessage-icon-fontSize: .75rem}.inlineMessage.is-success{--components-inlineMessage-icon-color: var(--palettes-success-700);--components-inlineMessage-gap: var(--spacings-XXS)}.inlineMessage.is-success .lucca-icon:before{content:\"\\e9ed\";content:\"\\e9ed\"/\"\"}.inlineMessage.is-warning{--components-inlineMessage-icon-color: var(--palettes-warning-700);--components-inlineMessage-gap: var(--spacings-XXS)}.inlineMessage.is-warning .lucca-icon:before{content:\"\\e992\";content:\"\\e992\"/\"\"}.inlineMessage.is-error{--components-inlineMessage-icon-color: var(--palettes-error-700);--components-inlineMessage-color: var(--palettes-error-700);--components-inlineMessage-gap: var(--spacings-XXS)}.inlineMessage.is-error .lucca-icon:before{content:\"\\e92c\";content:\"\\e92c\"/\"\"}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IconComponent, selector: "lu-icon", inputs: ["icon", "alt", "size", "color"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: InlineMessageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-inline-message', standalone: true, imports: [NgIf, IconComponent], hostDirectives: [NgClazz], changeDetection: ChangeDetectionStrategy.OnPush, template: "<lu-icon [icon]=\"state\" *ngIf=\"state && state !== 'default'\" [alt]=\"state\"></lu-icon>{{label}}\n", styles: [".inlineMessage{--components-inlineMessage-fontSize: var(--sizes-S-fontSize);--components-inlineMessage-lineHeight: var(--sizes-S-lineHeight);--components-inlineMessage-icon-fontSize: var(--sizes-XS-lineHeight);--components-inlineMessage-color: var(--palettes-grey-700);--components-inlineMessage-icon-color: var(--palettes-grey-600);display:flex;gap:var(--components-inlineMessage-gap);font-size:var(--components-inlineMessage-fontSize);line-height:var(--components-inlineMessage-lineHeight);color:var(--components-inlineMessage-color)}.inlineMessage .lucca-icon{font-size:var(--components-inlineMessage-icon-fontSize);color:var(--components-inlineMessage-icon-color);margin-top:2px}.inlineMessage.mod-S{--components-inlineMessage-fontSize: var(--sizes-XS-fontSize);--components-inlineMessage-lineHeight: var(--sizes-XS-lineHeight);--components-inlineMessage-icon-fontSize: .75rem}.inlineMessage.is-success{--components-inlineMessage-icon-color: var(--palettes-success-700);--components-inlineMessage-gap: var(--spacings-XXS)}.inlineMessage.is-success .lucca-icon:before{content:\"\\e9ed\";content:\"\\e9ed\"/\"\"}.inlineMessage.is-warning{--components-inlineMessage-icon-color: var(--palettes-warning-700);--components-inlineMessage-gap: var(--spacings-XXS)}.inlineMessage.is-warning .lucca-icon:before{content:\"\\e992\";content:\"\\e992\"/\"\"}.inlineMessage.is-error{--components-inlineMessage-icon-color: var(--palettes-error-700);--components-inlineMessage-color: var(--palettes-error-700);--components-inlineMessage-gap: var(--spacings-XXS)}.inlineMessage.is-error .lucca-icon:before{content:\"\\e92c\";content:\"\\e92c\"/\"\"}\n"] }]
        }], propDecorators: { label: [{
                type: Input,
                args: [{ required: true }]
            }], state: [{
                type: Input
            }], size: [{
                type: Input
            }] } });

/**
 * Generated bundle index. Do not edit.
 */

export { InlineMessageComponent };
//# sourceMappingURL=lucca-front-ng-inline-message.mjs.map
