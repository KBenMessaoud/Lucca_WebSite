import * as i0 from '@angular/core';
import { Injectable, forwardRef, Component, ChangeDetectionStrategy, Inject, Optional, SkipSelf, Self, Input, NgModule, ElementRef, ViewChild } from '@angular/core';
import { BehaviorSubject, Subject, of, merge } from 'rxjs';
import { ALuOnOpenSubscriber, ALuOnScrollBottomSubscriber, ALuOnCloseSubscriber } from '@lucca-front/ng/core';
import { ALuOptionOperator, LuOptionPlaceholderComponent, LuOptionPickerAdvancedComponent, LuOptionItemComponent, LuForOptionsDirective } from '@lucca-front/ng/option';
import { map, switchMap, catchError, share, scan, startWith, debounceTime, distinctUntilChanged, tap } from 'rxjs/operators';
import * as i1 from '@angular/common/http';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1$1 from '@angular/forms';
import { FormControl, ReactiveFormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';
import { LuInputClearerComponent, LuInputDisplayerDirective } from '@lucca-front/ng/input';
import { ALuSelectInputComponent } from '@lucca-front/ng/select';
import * as i1$2 from '@angular/cdk/overlay';

class ALuApiOptionFeeder {
    constructor(service) {
        this.outOptions$ = new BehaviorSubject([]);
        this._service = service;
    }
    onOpen() {
        this._service.getAll().subscribe((items) => this.outOptions$.next(items));
    }
}

class ALuApiService {
}

const MAGIC_PAGE_SIZE = 20;
class LuApiV3Service extends ALuApiService {
    set api(api) {
        this._api = api;
    }
    set fields(fields) {
        if (fields) {
            this._fields = `fields=${fields}`;
        }
    }
    set filters(filters) {
        if (filters) {
            this._filters = filters || [];
        }
    }
    set orderBy(orderBy) {
        if (orderBy) {
            this._orderBy = `orderBy=${orderBy}`;
        }
    }
    get url() {
        return `${this._api}?${[...this._filters, this._orderBy, this._fields].filter((f) => !!f).join('&')}`;
    }
    constructor(_http) {
        super();
        this._http = _http;
        this._fields = 'fields=id,name';
        this._filters = [];
        this._orderBy = 'orderBy=name,asc';
    }
    getAll(filters = []) {
        return this._get([this.url, ...filters].join('&'));
    }
    getPaged(page, filters = []) {
        const paging = `paging=${page * MAGIC_PAGE_SIZE},${MAGIC_PAGE_SIZE}`;
        const url = [this.url, paging, ...filters].join('&');
        return this._get(url);
    }
    searchAll(clue, filters = []) {
        if (!clue) {
            return this.getAll(filters);
        }
        const url = [this.url, this._clueFilter(clue), ...filters].join('&');
        return this._get(url);
    }
    searchPaged(clue, page, filters = []) {
        if (!clue) {
            return this.getPaged(page, filters);
        }
        const paging = `paging=${page * MAGIC_PAGE_SIZE},${MAGIC_PAGE_SIZE}`;
        const url = [this.url, this._clueFilter(clue), paging, ...filters].join('&');
        return this._get(url);
    }
    _get(url) {
        return this._http.get(url).pipe(map((response) => response.data.items));
    }
    _clueFilter(clue) {
        const urlSafeClue = encodeURIComponent(clue);
        return `name=like,${urlSafeClue}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiV3Service, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiV3Service }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiV3Service, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });

class LuApiV4Service extends ALuApiService {
    set api(api) {
        this._api = api;
    }
    set filters(filters) {
        this._filters = filters || [];
    }
    get filters() {
        return this._filters;
    }
    set sort(sort) {
        if (sort) {
            this._sort = `sort=${sort}`;
        }
    }
    constructor(_http) {
        super();
        this._http = _http;
        this._filters = [];
    }
    getAll(filters = []) {
        const query = [...this.filters, ...filters, this._sort].filter((f) => !!f);
        const url = [this._api, query.join('&')].join('?');
        return this._http.get(url).pipe(map((res) => res.items));
    }
    getPaged(page = 0, filters = []) {
        const query = [`page=${page + 1}`, ...this.filters, ...filters, this._sort].filter((f) => !!f);
        const url = [this._api, query.join('&')].join('?');
        return this._http.get(url).pipe(map((res) => res.items));
    }
    searchAll(clue = '', filters = []) {
        if (!clue) {
            return this.getAll(filters);
        }
        const urlSafeClues = clue
            .split(' ')
            .map((c) => encodeURIComponent(c))
            .join(',');
        const query = [`search=${urlSafeClues}`, ...this.filters, ...filters, this._sort].filter((f) => !!f);
        const url = [this._api, query.join('&')].join('?');
        return this._http.get(url).pipe(map((res) => res.items));
    }
    searchPaged(clue = '', page = 0, filters = []) {
        if (!clue) {
            return this.getPaged(page, filters);
        }
        const urlSafeClues = clue
            .split(' ')
            .map((c) => encodeURIComponent(c))
            .join(',');
        const query = [`search=${urlSafeClues}`, `page=${page + 1}`, ...this.filters, ...filters, this._sort].filter((f) => !!f);
        const url = [this._api, query.join('&')].join('?');
        return this._http.get(url).pipe(map((res) => res.items));
    }
    count() {
        const query = [...this.filters, 'fields.root=count', 'limit=0'].filter((f) => !!f);
        const url = [this._api, query.join('&')].join('?');
        return this._http.get(url).pipe(map((res) => res.count));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiV4Service, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiV4Service }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiV4Service, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });

class LuApiHybridService extends ALuApiService {
    set standard(std) {
        this._standard = std;
    }
    // both
    set api(api) {
        this._v3Service.api = api;
        this._v4Service.api = api;
    }
    set filters(filters) {
        this._v3Service.filters = filters;
        this._v4Service.filters = filters;
    }
    // api v3 only
    set fields(fields) {
        this._v3Service.fields = fields;
    }
    set orderBy(orderBy) {
        this._v3Service.orderBy = orderBy;
    }
    // api v4 only
    set sort(sort) {
        this._v4Service.sort = sort;
    }
    get _service() {
        switch (this._standard) {
            case 'v4':
                return this._v4Service;
            case 'v3':
            default:
                return this._v3Service;
        }
    }
    constructor(_http) {
        super();
        this._http = _http;
        this._standard = 'v3';
        this._v3Service = new LuApiV3Service(this._http);
        this._v4Service = new LuApiV4Service(this._http);
    }
    getAll(filters = []) {
        return this._service.getAll(filters);
    }
    getPaged(page, filters = []) {
        return this._service.getPaged(page, filters);
    }
    searchAll(clue, filters = []) {
        return this._service.searchAll(clue, filters);
    }
    searchPaged(clue, page, filters = []) {
        return this._service.searchPaged(clue, page, filters);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiHybridService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiHybridService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiHybridService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });

class LuApiFeederComponent extends ALuApiOptionFeeder {
    constructor(hostService, selfService) {
        super(hostService || selfService);
        this.outOptions$ = new BehaviorSubject([]);
    }
    set standard(standard) {
        this._service.standard = standard;
    }
    set api(api) {
        this._service.api = api;
    }
    set fields(fields) {
        this._service.fields = fields;
    }
    set filters(filters) {
        this._service.filters = filters;
    }
    set orderBy(orderBy) {
        this._service.orderBy = orderBy;
    }
    set sort(sort) {
        this._service.sort = sort;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiFeederComponent, deps: [{ token: ALuApiService, optional: true, skipSelf: true }, { token: ALuApiService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuApiFeederComponent, isStandalone: true, selector: "lu-api-feeder", inputs: { standard: "standard", api: "api", fields: "fields", filters: "filters", orderBy: "orderBy", sort: "sort" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuApiFeederComponent),
                multi: true,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuApiFeederComponent),
                multi: true,
            },
            {
                provide: ALuApiService,
                useClass: LuApiHybridService,
            },
        ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiFeederComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-api-feeder', template: '', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuApiFeederComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuApiFeederComponent),
                            multi: true,
                        },
                        {
                            provide: ALuApiService,
                            useClass: LuApiHybridService,
                        },
                    ] }]
        }], ctorParameters: function () { return [{ type: LuApiHybridService, decorators: [{
                    type: Inject,
                    args: [ALuApiService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: LuApiHybridService, decorators: [{
                    type: Inject,
                    args: [ALuApiService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { standard: [{
                type: Input
            }], api: [{
                type: Input
            }], fields: [{
                type: Input
            }], filters: [{
                type: Input
            }], orderBy: [{
                type: Input
            }], sort: [{
                type: Input
            }] } });

class LuApiFeederModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiFeederModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuApiFeederModule, imports: [LuApiFeederComponent], exports: [LuApiFeederComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiFeederModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiFeederModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuApiFeederComponent],
                    exports: [LuApiFeederComponent],
                }]
        }] });

class ALuApiOptionSearcher {
    set clue$(clue$) {
        // this.initObservables(clue$);
        this._clue$ = clue$;
    }
    constructor(_service) {
        this._service = _service;
        this.outOptions$ = new Subject();
    }
    init() {
        this.initObservables();
    }
    onOpen() {
        this.resetClue();
    }
    onClose() {
        this.clearOptions();
    }
    initObservables() {
        // this._clue$ = clue$.pipe(share());
        const results$ = this._clue$.pipe(switchMap((clue) => this._service.searchAll(clue)), catchError(() => of([])), share());
        results$.subscribe((items) => this.outOptions$.next(items));
        this.loading$ = merge(this._clue$.pipe(map(() => true)), results$.pipe(map(() => false)));
        this.empty$ = results$.pipe(map((o) => o.length === 0));
    }
    clearOptions() {
        this.outOptions$.next([]);
    }
}
class ALuApiOptionPagedSearcher extends ALuApiOptionSearcher {
    constructor(service) {
        super(service);
        this.outOptions$ = new Subject();
        this._loading = false;
        this._page$ = new Subject();
        this._options = [];
    }
    onOpen() {
        this.resetClue();
    }
    onScrollBottom() {
        if (!this._loading && !this._isLastPage) {
            this._page$.next();
        }
    }
    initObservables() {
        const pager$ = this._page$.pipe(scan((acc) => acc + 1, 0), startWith(0));
        const query$ = this._clue$.pipe(switchMap((clue) => pager$.pipe(map((page) => [page, clue]))), share());
        const results$ = query$.pipe(switchMap(([page, clue]) => this._service.searchPaged(clue, page).pipe(catchError(() => of([])), map((items) => [items, page]))), share());
        results$.subscribe(([items, page]) => {
            if (page === 0) {
                this._options = [...items];
            }
            else {
                this._options.push(...items);
            }
            this._isLastPage = !items.length;
            this.outOptions$.next([...this._options]);
        });
        this.loading$ = merge(query$.pipe(map(() => true)), results$.pipe(map(() => false)));
        this.loading$.subscribe((l) => (this._loading = l));
        this.empty$ = this.outOptions$.pipe(map((o) => o.length === 0));
    }
}

class LuApiSearcherComponent extends ALuApiOptionSearcher {
    set standard(standard) {
        this._service.standard = standard;
    }
    set api(api) {
        this._service.api = api;
    }
    set fields(fields) {
        this._service.fields = fields;
    }
    set filters(filters) {
        this._service.filters = filters;
    }
    set orderBy(orderBy) {
        this._service.orderBy = orderBy;
    }
    set sort(sort) {
        this._service.sort = sort;
    }
    constructor(hostService, selfService) {
        super(hostService || selfService);
        this.debounceTime = 250;
    }
    ngOnInit() {
        this.clueControl = new FormControl(undefined);
        this.clue$ = this.clueControl.valueChanges.pipe(debounceTime(this.debounceTime));
        super.init();
    }
    onOpen() {
        this.searchInput.nativeElement.focus();
        super.onOpen();
    }
    resetClue() {
        this.clueControl.setValue('');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiSearcherComponent, deps: [{ token: ALuApiService, optional: true, skipSelf: true }, { token: ALuApiService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuApiSearcherComponent, isStandalone: true, selector: "lu-api-searcher", inputs: { standard: "standard", api: "api", fields: "fields", filters: "filters", orderBy: "orderBy", sort: "sort", debounceTime: "debounceTime" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuApiSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuApiSearcherComponent),
                multi: true,
            },
            {
                provide: ALuApiService,
                useClass: LuApiHybridService,
            },
        ], viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true, read: ElementRef, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"textfield mod-search\" [class.is-loading]=\"loading$ | async\">\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"clueControl\" />\n</div>\n<lu-option-placeholder *ngIf=\"(empty$ | async) && (loading$ | async) === false\" (onClear)=\"resetClue()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"], dependencies: [{ kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1$1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "component", type: LuOptionPlaceholderComponent, selector: "lu-option-placeholder", outputs: ["onClear"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiSearcherComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-api-searcher', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [ReactiveFormsModule, CommonModule, LuOptionPlaceholderComponent], providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuApiSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuApiSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuApiService,
                            useClass: LuApiHybridService,
                        },
                    ], template: "<div class=\"textfield mod-search\" [class.is-loading]=\"loading$ | async\">\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"clueControl\" />\n</div>\n<lu-option-placeholder *ngIf=\"(empty$ | async) && (loading$ | async) === false\" (onClear)=\"resetClue()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"] }]
        }], ctorParameters: function () { return [{ type: LuApiHybridService, decorators: [{
                    type: Inject,
                    args: [ALuApiService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: LuApiHybridService, decorators: [{
                    type: Inject,
                    args: [ALuApiService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { searchInput: [{
                type: ViewChild,
                args: ['searchInput', { read: ElementRef, static: true }]
            }], standard: [{
                type: Input
            }], api: [{
                type: Input
            }], fields: [{
                type: Input
            }], filters: [{
                type: Input
            }], orderBy: [{
                type: Input
            }], sort: [{
                type: Input
            }], debounceTime: [{
                type: Input
            }] } });
class LuApiPagedSearcherComponent extends ALuApiOptionPagedSearcher {
    set standard(standard) {
        this._service.standard = standard;
    }
    set api(api) {
        this._service.api = api;
    }
    set fields(fields) {
        this._service.fields = fields;
    }
    set filters(filters) {
        this._service.filters = filters;
    }
    set orderBy(orderBy) {
        this._service.orderBy = orderBy;
    }
    set sort(sort) {
        this._service.sort = sort;
    }
    constructor(hostService, selfService) {
        super(hostService || selfService);
        this.debounceTime = 250;
    }
    ngOnInit() {
        this.clueControl = new FormControl(undefined);
        this.clue$ = this.clueControl.valueChanges.pipe(debounceTime(this.debounceTime));
        super.init();
    }
    onOpen() {
        this.searchInput.nativeElement.focus();
        super.onOpen();
    }
    resetClue() {
        this.clueControl.reset('');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiPagedSearcherComponent, deps: [{ token: ALuApiService, optional: true, skipSelf: true }, { token: ALuApiService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuApiPagedSearcherComponent, isStandalone: true, selector: "lu-api-paged-searcher", inputs: { standard: "standard", api: "api", fields: "fields", filters: "filters", orderBy: "orderBy", sort: "sort", debounceTime: "debounceTime" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuApiPagedSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuApiPagedSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnScrollBottomSubscriber,
                useExisting: forwardRef(() => LuApiPagedSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnCloseSubscriber,
                useExisting: forwardRef(() => LuApiPagedSearcherComponent),
                multi: true,
            },
            {
                provide: ALuApiService,
                useClass: LuApiHybridService,
            },
        ], viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true, read: ElementRef, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"textfield mod-search\" [class.is-loading]=\"loading$ | async\">\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"clueControl\" />\n</div>\n<lu-option-placeholder *ngIf=\"(empty$ | async) && (loading$ | async) === false\" (onClear)=\"resetClue()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"], dependencies: [{ kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1$1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "component", type: LuOptionPlaceholderComponent, selector: "lu-option-placeholder", outputs: ["onClear"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiPagedSearcherComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-api-paged-searcher', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [ReactiveFormsModule, CommonModule, LuOptionPlaceholderComponent], providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuApiPagedSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuApiPagedSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnScrollBottomSubscriber,
                            useExisting: forwardRef(() => LuApiPagedSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnCloseSubscriber,
                            useExisting: forwardRef(() => LuApiPagedSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuApiService,
                            useClass: LuApiHybridService,
                        },
                    ], template: "<div class=\"textfield mod-search\" [class.is-loading]=\"loading$ | async\">\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"clueControl\" />\n</div>\n<lu-option-placeholder *ngIf=\"(empty$ | async) && (loading$ | async) === false\" (onClear)=\"resetClue()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"] }]
        }], ctorParameters: function () { return [{ type: LuApiHybridService, decorators: [{
                    type: Inject,
                    args: [ALuApiService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: LuApiHybridService, decorators: [{
                    type: Inject,
                    args: [ALuApiService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { searchInput: [{
                type: ViewChild,
                args: ['searchInput', { read: ElementRef, static: true }]
            }], standard: [{
                type: Input
            }], api: [{
                type: Input
            }], fields: [{
                type: Input
            }], filters: [{
                type: Input
            }], orderBy: [{
                type: Input
            }], sort: [{
                type: Input
            }], debounceTime: [{
                type: Input
            }] } });

class LuApiSearcherModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiSearcherModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuApiSearcherModule, imports: [LuApiPagedSearcherComponent, LuApiSearcherComponent], exports: [LuApiPagedSearcherComponent, LuApiSearcherComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiSearcherModule, imports: [LuApiPagedSearcherComponent, LuApiSearcherComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiSearcherModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuApiPagedSearcherComponent, LuApiSearcherComponent],
                    exports: [LuApiPagedSearcherComponent, LuApiSearcherComponent],
                }]
        }] });

class LuApiSelectInputComponent extends ALuSelectInputComponent {
    constructor(_changeDetectorRef, _overlay, _elementRef, _viewContainerRef, _renderer) {
        super(_changeDetectorRef, _overlay, _elementRef, _viewContainerRef, _renderer);
        this._changeDetectorRef = _changeDetectorRef;
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._renderer = _renderer;
        this.standard = 'v3';
        this.byId = (option1, option2) => option1 && option2 && option1.id === option2.id;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiSelectInputComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1$2.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuApiSelectInputComponent, isStandalone: true, selector: "lu-api-select", inputs: { standard: "standard", api: "api", fields: "fields", filters: "filters", orderBy: "orderBy", sort: "sort" }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => LuApiSelectInputComponent),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0, template: "<div class=\"lu-select-placeholder\">{{ placeholder }}</div>\n<div class=\"lu-select-value\">\n\t<div class=\"lu-select-display-wrapper\">\n\t\t<ng-container #display></ng-container>\n\t</div>\n</div>\n<div class=\"lu-select-suffix\">\n\t<lu-input-clearer></lu-input-clearer>\n</div>\n<span [class.chip]=\"multiple\" *luDisplayer=\"let option\">{{ option.name }}</span>\n<lu-option-picker-advanced [option-comparer]=\"byId\">\n\t<header class=\"lu-picker-header\">\n\t\t<lu-api-paged-searcher\n\t\t\t[standard]=\"standard\"\n\t\t\t[api]=\"api\"\n\t\t\t[fields]=\"fields\"\n\t\t\t[filters]=\"filters\"\n\t\t\t[orderBy]=\"orderBy\"\n\t\t\t[sort]=\"sort\"\n\t\t></lu-api-paged-searcher>\n\t</header>\n\t<div class=\"lu-picker-content-option\">\n\t\t<lu-option *luForOptions=\"let option\" [value]=\"option\">{{ option.name }}</lu-option>\n\t</div>\n</lu-option-picker-advanced>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{--components-select-input-padding-horizontal: var(--spacings-XS);--components-select-input-padding-vertical: var(--spacings-XS);--components-select-framed-color: var(--palettes-grey-500);--components-select-framed-color50: var(--palettes-grey-50);--components-select-framed-see-through: var(--palettes-grey-50);--components-select-framed-text: var(--palettes-grey-800);--components-select-framed-placeholder: #cccccc;--components-select-framed-side-padding: var(--spacings-S);--components-select-framed-top-padding: var(--spacings-L);--components-select-framed-bottom-padding: var(--spacings-S);--components-select-framed-label-top-offset: var(--spacings-XS);cursor:pointer;outline:none;padding:0;gap:0}:host:after{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons;color:var(--palettes-grey-600);bottom:var(--components-select-input-padding-vertical);font-size:var(--sizes-M-lineHeight);line-height:var(--sizes-M-lineHeight);pointer-events:none;position:absolute;right:var(--components-select-input-padding-horizontal);transition:transform var(--commons-animations-durations-standard) ease}@supports (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"/\"\"}}@supports not (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"}}:host[disabled],:host.is-disabled{cursor:not-allowed;pointer-events:all}.lu-select-display-wrapper{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.lu-select-value{line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);display:none}.lu-select-placeholder{color:var(--palettes-grey-400);line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.lu-select-suffix,.lu-select-clearer{position:absolute;bottom:.75rem;right:2.25rem}::ng-deep .lu-select-value .label{padding:var(--spacings-XXS) var(--spacings-XS);margin-left:0}::ng-deep .lu-select-value .chip{vertical-align:baseline;max-width:100%;margin:0 var(--spacings-XXS) var(--spacings-XXS) 0;text-overflow:ellipsis;overflow:hidden;vertical-align:top;white-space:nowrap}:host-context(.textfield.mod-S){padding:0}:host-context(.textfield.mod-S) .lu-select-value,:host-context(.textfield.mod-S) .lu-select-placeholder{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-XS-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-XS-lineHeight))}:host-context(.textfield.mod-S) .lu-select-clearer{bottom:var(--spacings-XS)}:host-context(.textfield.mod-S):after{line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-S-lineHeight)}:host-context(.textfield.mod-S) .lu-select-suffix{bottom:.5rem;right:2rem}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .label{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-S-lineHeight);font-weight:600;margin:0;padding:0;background-color:transparent}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .chip{height:var(--sizes-XS-lineHeight);line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-XS-fontSize);padding-left:var(--spacings-XXS);padding-right:var(--spacings-XXS);gap:var(--spacings-XXS)}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .numericBadge{--components-numericBadge-size: 1.25rem;--components-numericBadge-borderRadius: 6px;--components-numericBadge-fontSize: var(--sizes-XS-fontSize);--components-numericBadge-lineHeight: var(--sizes-XS-lineHeight)}:host-context(.textfield.mod-framed).textfield-input,:host-context(.form.mod-framed).textfield-input{padding:var(--components-select-framed-top-padding) 0 0}:host-context(.textfield.mod-framed).textfield-input:after,:host-context(.form.mod-framed).textfield-input:after{color:var(--palettes-grey-500);bottom:var(--components-select-framed-bottom-padding);right:var(--spacings-XS)}:host-context(.textfield.mod-framed).textfield-input .lu-select-value,:host-context(.form.mod-framed).textfield-input .lu-select-value{padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-placeholder,:host-context(.form.mod-framed).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400);padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-suffix,:host-context(.form.mod-framed).textfield-input .lu-select-suffix{bottom:var(--components-select-framed-bottom-padding);right:1.7rem}:host-context(.textfield.mod-filter) .lu-select-value,:host-context(.textfield.mod-filter) .lu-select-placeholder{padding:0;height:auto;padding-top:var(--spacings-S);color:var(--palettes-grey-800)}:host-context(.textfield.mod-material):after{color:var(--palettes-grey-500);bottom:.6rem;right:0}:host-context(.textfield.mod-material) .lu-select-value,:host-context(.textfield.mod-material) .lu-select-placeholder{padding-left:0;padding-right:.8rem}:host-context(.textfield.mod-material) .lu-select-suffix{right:calc(2 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material).is-select .lu-select-placeholder{display:none}:host-context(.textfield.mod-material).mod-search:after{bottom:0}:host-context(.textfield.mod-material).mod-search .lu-select-suffix{right:calc(2.75 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material .textfield-input.is-focused) .lu-select-placeholder{display:none}:host(.mod-multiple) .lu-select-value{height:auto;align-items:center}:host(.mod-multiple) .lu-select-display-wrapper{overflow:visible;white-space:normal;margin-bottom:calc(var(--spacings-XXS) * -1)}:host-context(.textfield.mod-outlined).textfield-input:after{color:var(--palettes-grey-600)}:host-context(.textfield.mod-outlined).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error):after{color:var(--palettes-error-600)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-filled) .lu-select-placeholder{display:none}:host-context(.textfield-input.is-filled) .lu-select-value{display:flex;align-items:flex-start}:host-context(.textfield .textfield-input.is-focused):after{transform:rotate(-180deg)}:host-context(.textfield-input.is-clearable) .lu-select-value{padding-right:3.5rem}:host-context(.textfield-input.is-error):after{color:var(--palettes-error-700)}:host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]):after{color:var(--commons-disabled-color)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]) .lu-select-placeholder{color:var(--commons-disabled-placeholder)}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "component", type: LuInputClearerComponent, selector: "lu-input-clearer", outputs: ["onClear"], exportAs: ["luClearer"] }, { kind: "component", type: LuOptionPickerAdvancedComponent, selector: "lu-option-picker-advanced", exportAs: ["LuOptionPickerAdvanced"] }, { kind: "component", type: LuApiPagedSearcherComponent, selector: "lu-api-paged-searcher", inputs: ["standard", "api", "fields", "filters", "orderBy", "sort", "debounceTime"] }, { kind: "component", type: LuOptionItemComponent, selector: "lu-option", inputs: ["selected", "highlighted", "value", "disabled"], outputs: ["onSelect"] }, { kind: "directive", type: LuForOptionsDirective, selector: "[luForOptions]", inputs: ["luForOptionsTrackBy"] }, { kind: "directive", type: LuInputDisplayerDirective, selector: "[luDisplayer]", inputs: ["luDisplayerMultiple", "multiple"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiSelectInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-api-select', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [CommonModule, LuInputClearerComponent, LuOptionPickerAdvancedComponent, LuApiPagedSearcherComponent, LuOptionItemComponent, LuForOptionsDirective, LuInputDisplayerDirective], providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => LuApiSelectInputComponent),
                            multi: true,
                        },
                    ], template: "<div class=\"lu-select-placeholder\">{{ placeholder }}</div>\n<div class=\"lu-select-value\">\n\t<div class=\"lu-select-display-wrapper\">\n\t\t<ng-container #display></ng-container>\n\t</div>\n</div>\n<div class=\"lu-select-suffix\">\n\t<lu-input-clearer></lu-input-clearer>\n</div>\n<span [class.chip]=\"multiple\" *luDisplayer=\"let option\">{{ option.name }}</span>\n<lu-option-picker-advanced [option-comparer]=\"byId\">\n\t<header class=\"lu-picker-header\">\n\t\t<lu-api-paged-searcher\n\t\t\t[standard]=\"standard\"\n\t\t\t[api]=\"api\"\n\t\t\t[fields]=\"fields\"\n\t\t\t[filters]=\"filters\"\n\t\t\t[orderBy]=\"orderBy\"\n\t\t\t[sort]=\"sort\"\n\t\t></lu-api-paged-searcher>\n\t</header>\n\t<div class=\"lu-picker-content-option\">\n\t\t<lu-option *luForOptions=\"let option\" [value]=\"option\">{{ option.name }}</lu-option>\n\t</div>\n</lu-option-picker-advanced>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{--components-select-input-padding-horizontal: var(--spacings-XS);--components-select-input-padding-vertical: var(--spacings-XS);--components-select-framed-color: var(--palettes-grey-500);--components-select-framed-color50: var(--palettes-grey-50);--components-select-framed-see-through: var(--palettes-grey-50);--components-select-framed-text: var(--palettes-grey-800);--components-select-framed-placeholder: #cccccc;--components-select-framed-side-padding: var(--spacings-S);--components-select-framed-top-padding: var(--spacings-L);--components-select-framed-bottom-padding: var(--spacings-S);--components-select-framed-label-top-offset: var(--spacings-XS);cursor:pointer;outline:none;padding:0;gap:0}:host:after{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons;color:var(--palettes-grey-600);bottom:var(--components-select-input-padding-vertical);font-size:var(--sizes-M-lineHeight);line-height:var(--sizes-M-lineHeight);pointer-events:none;position:absolute;right:var(--components-select-input-padding-horizontal);transition:transform var(--commons-animations-durations-standard) ease}@supports (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"/\"\"}}@supports not (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"}}:host[disabled],:host.is-disabled{cursor:not-allowed;pointer-events:all}.lu-select-display-wrapper{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.lu-select-value{line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);display:none}.lu-select-placeholder{color:var(--palettes-grey-400);line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.lu-select-suffix,.lu-select-clearer{position:absolute;bottom:.75rem;right:2.25rem}::ng-deep .lu-select-value .label{padding:var(--spacings-XXS) var(--spacings-XS);margin-left:0}::ng-deep .lu-select-value .chip{vertical-align:baseline;max-width:100%;margin:0 var(--spacings-XXS) var(--spacings-XXS) 0;text-overflow:ellipsis;overflow:hidden;vertical-align:top;white-space:nowrap}:host-context(.textfield.mod-S){padding:0}:host-context(.textfield.mod-S) .lu-select-value,:host-context(.textfield.mod-S) .lu-select-placeholder{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-XS-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-XS-lineHeight))}:host-context(.textfield.mod-S) .lu-select-clearer{bottom:var(--spacings-XS)}:host-context(.textfield.mod-S):after{line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-S-lineHeight)}:host-context(.textfield.mod-S) .lu-select-suffix{bottom:.5rem;right:2rem}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .label{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-S-lineHeight);font-weight:600;margin:0;padding:0;background-color:transparent}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .chip{height:var(--sizes-XS-lineHeight);line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-XS-fontSize);padding-left:var(--spacings-XXS);padding-right:var(--spacings-XXS);gap:var(--spacings-XXS)}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .numericBadge{--components-numericBadge-size: 1.25rem;--components-numericBadge-borderRadius: 6px;--components-numericBadge-fontSize: var(--sizes-XS-fontSize);--components-numericBadge-lineHeight: var(--sizes-XS-lineHeight)}:host-context(.textfield.mod-framed).textfield-input,:host-context(.form.mod-framed).textfield-input{padding:var(--components-select-framed-top-padding) 0 0}:host-context(.textfield.mod-framed).textfield-input:after,:host-context(.form.mod-framed).textfield-input:after{color:var(--palettes-grey-500);bottom:var(--components-select-framed-bottom-padding);right:var(--spacings-XS)}:host-context(.textfield.mod-framed).textfield-input .lu-select-value,:host-context(.form.mod-framed).textfield-input .lu-select-value{padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-placeholder,:host-context(.form.mod-framed).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400);padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-suffix,:host-context(.form.mod-framed).textfield-input .lu-select-suffix{bottom:var(--components-select-framed-bottom-padding);right:1.7rem}:host-context(.textfield.mod-filter) .lu-select-value,:host-context(.textfield.mod-filter) .lu-select-placeholder{padding:0;height:auto;padding-top:var(--spacings-S);color:var(--palettes-grey-800)}:host-context(.textfield.mod-material):after{color:var(--palettes-grey-500);bottom:.6rem;right:0}:host-context(.textfield.mod-material) .lu-select-value,:host-context(.textfield.mod-material) .lu-select-placeholder{padding-left:0;padding-right:.8rem}:host-context(.textfield.mod-material) .lu-select-suffix{right:calc(2 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material).is-select .lu-select-placeholder{display:none}:host-context(.textfield.mod-material).mod-search:after{bottom:0}:host-context(.textfield.mod-material).mod-search .lu-select-suffix{right:calc(2.75 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material .textfield-input.is-focused) .lu-select-placeholder{display:none}:host(.mod-multiple) .lu-select-value{height:auto;align-items:center}:host(.mod-multiple) .lu-select-display-wrapper{overflow:visible;white-space:normal;margin-bottom:calc(var(--spacings-XXS) * -1)}:host-context(.textfield.mod-outlined).textfield-input:after{color:var(--palettes-grey-600)}:host-context(.textfield.mod-outlined).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error):after{color:var(--palettes-error-600)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-filled) .lu-select-placeholder{display:none}:host-context(.textfield-input.is-filled) .lu-select-value{display:flex;align-items:flex-start}:host-context(.textfield .textfield-input.is-focused):after{transform:rotate(-180deg)}:host-context(.textfield-input.is-clearable) .lu-select-value{padding-right:3.5rem}:host-context(.textfield-input.is-error):after{color:var(--palettes-error-700)}:host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]):after{color:var(--commons-disabled-color)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]) .lu-select-placeholder{color:var(--commons-disabled-placeholder)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1$2.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }]; }, propDecorators: { standard: [{
                type: Input
            }], api: [{
                type: Input
            }], fields: [{
                type: Input
            }], filters: [{
                type: Input
            }], orderBy: [{
                type: Input
            }], sort: [{
                type: Input
            }] } });

class LuApiSelectInputModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiSelectInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuApiSelectInputModule, imports: [LuApiSelectInputComponent], exports: [LuApiSelectInputComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiSelectInputModule, imports: [LuApiSelectInputComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiSelectInputModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuApiSelectInputComponent],
                    exports: [LuApiSelectInputComponent],
                }]
        }] });

var Strategy;
(function (Strategy) {
    Strategy[Strategy["append"] = 0] = "append";
    Strategy[Strategy["replace"] = 1] = "replace";
})(Strategy || (Strategy = {}));
class ALuApiOptionPager {
    constructor(_service) {
        this._service = _service;
        this.outOptions$ = new Subject();
        this._loading = false;
        this._options = [];
        this._page$ = new Subject();
        this._initialized = false;
    }
    init() {
        this.initObservables();
    }
    onOpen() {
        if (!this._initialized) {
            this._page$.next(0);
            this._initialized = true;
        }
    }
    // onClose() {
    // 	this._page$.next(0);
    // }
    onScrollBottom() {
        if (!this._loading) {
            this._page$.next(this._page + 1);
        }
    }
    initObservables() {
        const _results$ = this._page$.pipe(distinctUntilChanged(), tap((p) => (this._page = p)), switchMap((page) => {
            if (page === undefined) {
                return of({ items: [], strategy: Strategy.replace });
            }
            return this._service.getPaged(page).pipe(map((items) => ({
                items: items,
                strategy: page === 0 ? Strategy.replace : Strategy.append,
            })));
        }), catchError(() => of({ items: [], strategy: Strategy.replace })), tap((results) => {
            if (results.strategy === Strategy.replace) {
                this._options = [...results.items];
            }
            else {
                this._options.push(...results.items);
            }
            this.outOptions$.next([...this._options]);
        }));
        this.loading$ = merge(this._page$.pipe(map(() => true)), _results$.pipe(map(() => false)));
        this.loading$.subscribe((l) => (this._loading = l));
    }
}

class LuApiPagerComponent extends ALuApiOptionPager {
    constructor(hostService, selfService) {
        super(hostService || selfService);
    }
    set standard(standard) {
        this._service.standard = standard;
    }
    set api(api) {
        this._service.api = api;
    }
    set fields(fields) {
        this._service.fields = fields;
    }
    set filters(filters) {
        this._service.filters = filters;
    }
    set orderBy(orderBy) {
        this._service.orderBy = orderBy;
    }
    ngOnInit() {
        super.init();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiPagerComponent, deps: [{ token: ALuApiService, optional: true, skipSelf: true }, { token: ALuApiService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuApiPagerComponent, isStandalone: true, selector: "lu-api-pager", inputs: { standard: "standard", api: "api", fields: "fields", filters: "filters", orderBy: "orderBy" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuApiPagerComponent),
                multi: true,
            },
            {
                provide: ALuApiService,
                useClass: LuApiHybridService,
            },
            {
                provide: ALuOnScrollBottomSubscriber,
                useExisting: forwardRef(() => LuApiPagerComponent),
                multi: true,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuApiPagerComponent),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiPagerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-api-pager', template: '', standalone: true, changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuApiPagerComponent),
                            multi: true,
                        },
                        {
                            provide: ALuApiService,
                            useClass: LuApiHybridService,
                        },
                        {
                            provide: ALuOnScrollBottomSubscriber,
                            useExisting: forwardRef(() => LuApiPagerComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuApiPagerComponent),
                            multi: true,
                        },
                    ] }]
        }], ctorParameters: function () { return [{ type: LuApiHybridService, decorators: [{
                    type: Inject,
                    args: [ALuApiService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: LuApiHybridService, decorators: [{
                    type: Inject,
                    args: [ALuApiService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { standard: [{
                type: Input
            }], api: [{
                type: Input
            }], fields: [{
                type: Input
            }], filters: [{
                type: Input
            }], orderBy: [{
                type: Input
            }] } });

class LuApiPagerModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiPagerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuApiPagerModule, imports: [LuApiPagerComponent], exports: [LuApiPagerComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiPagerModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiPagerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuApiPagerComponent],
                    exports: [LuApiPagerComponent],
                }]
        }] });

class LuApiSelectModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuApiSelectModule, imports: [LuApiFeederComponent, LuApiPagedSearcherComponent, LuApiSearcherComponent, LuApiPagerComponent, LuApiSelectInputComponent], exports: [LuApiFeederComponent, LuApiPagedSearcherComponent, LuApiSearcherComponent, LuApiPagerComponent, LuApiSelectInputComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiSelectModule, imports: [LuApiPagedSearcherComponent, LuApiSearcherComponent, LuApiSelectInputComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiSelectModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuApiFeederComponent, LuApiPagedSearcherComponent, LuApiSearcherComponent, LuApiPagerComponent, LuApiSelectInputComponent],
                    exports: [LuApiFeederComponent, LuApiPagedSearcherComponent, LuApiSearcherComponent, LuApiPagerComponent, LuApiSelectInputComponent],
                }]
        }] });

class LuApiModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuApiModule, imports: [LuApiSelectModule], exports: [LuApiSelectModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiModule, imports: [LuApiSelectModule, LuApiSelectModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuApiSelectModule],
                    exports: [LuApiSelectModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ALuApiOptionFeeder, ALuApiOptionPagedSearcher, ALuApiOptionPager, ALuApiOptionSearcher, ALuApiService, LuApiFeederComponent, LuApiFeederModule, LuApiHybridService, LuApiModule, LuApiPagedSearcherComponent, LuApiPagerComponent, LuApiPagerModule, LuApiSearcherComponent, LuApiSearcherModule, LuApiSelectInputComponent, LuApiSelectInputModule, LuApiSelectModule, LuApiV3Service, LuApiV4Service };
//# sourceMappingURL=lucca-front-ng-api.mjs.map
