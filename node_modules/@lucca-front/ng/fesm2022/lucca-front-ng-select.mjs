import * as i0 from '@angular/core';
import { EventEmitter, ViewContainerRef, Directive, ViewChild, HostBinding, Input, Output, ContentChild, HostListener, forwardRef, ElementRef, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ALuInputDisplayer, ALuClearer } from '@lucca-front/ng/input';
import { ALuPickerPanel } from '@lucca-front/ng/picker';
import { ALuPopoverTrigger, LuPopoverTarget } from '@lucca-front/ng/popover';
import { Subscription } from 'rxjs';
import * as i1 from '@angular/cdk/overlay';

class ALuSelectInput extends ALuPopoverTrigger {
    constructor(_changeDetectorRef, _overlay, _elementRef, _viewContainerRef, _renderer) {
        super(_overlay, _elementRef, _viewContainerRef);
        this._changeDetectorRef = _changeDetectorRef;
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._renderer = _renderer;
        this._subs = new Subscription();
        this._isContentInitialized = false;
        // From ControlValueAccessor interface
        this._cvaOnChange = (v) => void v;
        // From ControlValueAccessor interface
        this._onTouched = () => void {};
        // multiple
        this._multiple = false;
        this.target = new LuPopoverTarget();
        this.target.elementRef = this._elementRef;
        this.target.position = 'below';
        this.target.alignment = 'left';
    }
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(p) {
        this._placeholder = p;
    }
    setValue(value) {
        if (this.disabled) {
            return;
        }
        this.value = value;
        this._cvaOnChange(value);
        this._onTouched();
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
        this.render();
        this.applyClasses();
        if (this._picker) {
            this._picker.setValue(value);
        }
        this._changeDetectorRef.markForCheck();
    }
    // From ControlValueAccessor interface
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this._cvaOnChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    set disabled(d) {
        this._disabled = d;
    }
    get disabled() {
        return this._disabled;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
        this._changeDetectorRef.markForCheck();
    }
    isEmpty() {
        const isEmptyArray = Array.isArray(this.value) && this.value.length === 0;
        return this.value === null || this.value === undefined || isEmptyArray;
    }
    applyClasses() {
        if (this.isEmpty()) {
            this._renderer.removeClass(this._elementRef.nativeElement, 'is-filled');
        }
        else {
            this._renderer.addClass(this._elementRef.nativeElement, 'is-filled');
        }
    }
    /**
     * popover trigger class extension
     */
    set _picker(picker) {
        this.panel = picker;
        picker.multiple = this._multiple;
        this.subToPickerEvts();
    }
    get _picker() {
        return this.panel;
    }
    set _clearer(clearer) {
        if (!!clearer && !!clearer.onClear) {
            this._subs.add(clearer.onClear.subscribe(() => this.setValue(this._multiple ? [] : undefined)));
        }
    }
    subToPickerEvts() {
        if (this.panel) {
            this._subs.add(this.panel.onSelectValue.subscribe((value) => this.setValue(value)));
        }
    }
    closePopover() {
        this._onTouched();
        super.closePopover();
    }
    onDestroy() {
        if (this._popoverOpen) {
            this.closePopover();
        }
        this.destroyPopover();
        this._subs.unsubscribe();
        this._cleanUpSubscriptions();
    }
    _getOverlayConfig() {
        const config = super._getOverlayConfig();
        const clientRect = this._elementRef.nativeElement.getBoundingClientRect();
        config.minWidth = `${Math.max(185, clientRect.width)}px`; // might become min/maxWidth
        return config;
    }
    set displayer(d) {
        this._displayer = d;
        this.render();
    }
    set displayContainer(vcr) {
        this._displayContainer = vcr;
    }
    render() {
        if (!this._displayer || !this._isContentInitialized) {
            return;
        }
        if (this.useMultipleViews()) {
            this.renderMultipleViews();
        }
        else {
            this.renderSingleView();
        }
    }
    useMultipleViews() {
        return this._multiple && !!this._displayer && !this._displayer.multiple;
    }
    renderSingleView() {
        this.clearDisplay();
        if (this.value !== null && this.value !== undefined) {
            const newView = this.getView(this.value);
            this.displayView(newView);
        }
    }
    clearDisplay() {
        this._displayContainer.clear();
    }
    getView(value) {
        if (this._displayer) {
            return this._displayer.getViewRef(value);
        }
        return undefined;
    }
    displayView(view) {
        if (view) {
            this._displayContainer.insert(view);
        }
    }
    renderMultipleViews() {
        this.clearDisplay();
        const values = this.value || [];
        const views = values.map((value) => this.getView(value));
        views.forEach((view) => this.displayView(view));
    }
    set multiple(m) {
        this._multiple = m;
        if (this._picker) {
            this._picker.multiple = m;
        }
    }
    get multiple() {
        return this._multiple;
    }
}

class ALuSelectInputComponent extends ALuSelectInput {
    set _vcDisplayContainer(vcr) {
        this.displayContainer = vcr;
    }
    set overlapInput(o) {
        this.target.overlap = o;
    }
    set inputPlaceholder(p) {
        this._placeholder = p;
    }
    set inputMultiple(m) {
        if (m === '') {
            // allows to have multiple = true when writing
            // <lu-select multiple>
            this.multiple = true;
        }
        else {
            this.multiple = !!m;
        }
    }
    constructor(_changeDetectorRef, _overlay, _elementRef, _viewContainerRef, _renderer) {
        super(_changeDetectorRef, _overlay, _elementRef, _viewContainerRef, _renderer);
        this._changeDetectorRef = _changeDetectorRef;
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._renderer = _renderer;
        this.tabindex = 0;
        /** Event emitted when the associated popover is opened. */
        this.onOpen = new EventEmitter();
        /** Event emitted when the associated popover is closed. */
        this.onClose = new EventEmitter();
    }
    get isDisabled() {
        return this.disabled;
    }
    set inputDisabled(d) {
        this._disabled = d;
    }
    get isFocused() {
        return this._popoverOpen && !this.target.overlap;
    }
    get modMultiple() {
        return this._multiple;
    }
    get isClearable() {
        return !!this._clearer;
    }
    onClick() {
        super.onClick();
    }
    onMouseEnter() {
        super.onMouseEnter();
    }
    onMouseLeave() {
        super.onMouseLeave();
    }
    onFocus() {
        super.onFocus();
    }
    onBlur() {
        super.onBlur();
    }
    onKeydown($event) {
        if (!this._popoverOpen) {
            this.openPopover();
            $event.stopPropagation();
            $event.preventDefault();
        }
    }
    ngAfterViewInit() {
        this._isContentInitialized = true;
        // init picker and displayer and clearer
        const picker = this.ccPicker || this.vcPicker;
        if (picker) {
            this._picker = picker;
        }
        const displayer = this.ccDisplayer || this.vcDisplayer;
        if (displayer) {
            this._displayer = displayer;
        }
        const clearer = this.ccClearer || this.vcClearer;
        if (clearer) {
            this._clearer = clearer;
        }
        this.render();
        this._picker.setValue(this.value);
        // strange bug where the view renderred in the displayer was only injected after a hover
        // no matter how many cdr.markforchack i added
        // but with a timeout it works
        // shrug emoji
        setTimeout(() => {
            this._changeDetectorRef.markForCheck();
        }, 1);
    }
    ngOnDestroy() {
        if (this._popoverOpen) {
            this.closePopover();
        }
        this.destroyPopover();
        this.onDestroy();
    }
    _emitOpen() {
        this.onOpen.emit();
    }
    _emitClose() {
        this.onClose.emit();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuSelectInputComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: ALuSelectInputComponent, inputs: { overlapInput: ["pickerOverlap", "overlapInput"], inputPlaceholder: ["placeholder", "inputPlaceholder"], inputMultiple: ["multiple", "inputMultiple"], inputDisabled: ["disabled", "inputDisabled"] }, outputs: { onOpen: "onOpen", onClose: "onClose" }, host: { listeners: { "click": "onClick()", "mouseenter": "onMouseEnter()", "mouseleave": "onMouseLeave()", "focus": "onFocus()", "blur": "onBlur()", "keydown.space": "onKeydown($event)", "keydown.enter": "onKeydown($event)" }, properties: { "tabindex": "this.tabindex", "class.is-disabled": "this.isDisabled", "class.is-focused": "this.isFocused", "class.mod-multiple": "this.modMultiple", "class.is-clearable": "this.isClearable" } }, queries: [{ propertyName: "ccPicker", first: true, predicate: ALuPickerPanel, descendants: true, static: true }, { propertyName: "ccDisplayer", first: true, predicate: ALuInputDisplayer, descendants: true, static: true }, { propertyName: "ccClearer", first: true, predicate: ALuClearer, descendants: true, static: true }], viewQueries: [{ propertyName: "_vcDisplayContainer", first: true, predicate: ["display"], descendants: true, read: ViewContainerRef, static: true }, { propertyName: "vcPicker", first: true, predicate: ALuPickerPanel, descendants: true, static: true }, { propertyName: "vcDisplayer", first: true, predicate: ALuInputDisplayer, descendants: true, static: true }, { propertyName: "vcClearer", first: true, predicate: ALuClearer, descendants: true, static: true }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuSelectInputComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }]; }, propDecorators: { _vcDisplayContainer: [{
                type: ViewChild,
                args: ['display', { read: ViewContainerRef, static: true }]
            }], tabindex: [{
                type: HostBinding,
                args: ['tabindex']
            }], overlapInput: [{
                type: Input,
                args: ['pickerOverlap']
            }], inputPlaceholder: [{
                type: Input,
                args: ['placeholder']
            }], inputMultiple: [{
                type: Input,
                args: ['multiple']
            }], onOpen: [{
                type: Output
            }], onClose: [{
                type: Output
            }], isDisabled: [{
                type: HostBinding,
                args: ['class.is-disabled']
            }], inputDisabled: [{
                type: Input,
                args: ['disabled']
            }], isFocused: [{
                type: HostBinding,
                args: ['class.is-focused']
            }], modMultiple: [{
                type: HostBinding,
                args: ['class.mod-multiple']
            }], isClearable: [{
                type: HostBinding,
                args: ['class.is-clearable']
            }], ccPicker: [{
                type: ContentChild,
                args: [ALuPickerPanel, { static: true }]
            }], vcPicker: [{
                type: ViewChild,
                args: [ALuPickerPanel, { static: true }]
            }], ccDisplayer: [{
                type: ContentChild,
                args: [ALuInputDisplayer, { static: true }]
            }], vcDisplayer: [{
                type: ViewChild,
                args: [ALuInputDisplayer, { static: true }]
            }], ccClearer: [{
                type: ContentChild,
                args: [ALuClearer, { static: true }]
            }], vcClearer: [{
                type: ViewChild,
                args: [ALuClearer, { static: true }]
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }], onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }], onFocus: [{
                type: HostListener,
                args: ['focus']
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }], onKeydown: [{
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }] } });
/**
 * select input
 */
class LuSelectInputComponent extends ALuSelectInputComponent {
    get modMultipleView() {
        return this.useMultipleViews();
    }
    constructor(_changeDetectorRef, _overlay, _elementRef, _viewContainerRef, _renderer) {
        super(_changeDetectorRef, _overlay, _elementRef, _viewContainerRef, _renderer);
        this._changeDetectorRef = _changeDetectorRef;
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._renderer = _renderer;
    }
    displayClearer() {
        if (this.clearerEltRef) {
            this._renderer.appendChild(this.suffixEltRef.nativeElement, this.clearerEltRef.nativeElement);
        }
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.displayClearer(); // dont keep
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSelectInputComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuSelectInputComponent, isStandalone: true, selector: "lu-select", host: { properties: { "class.mod-multipleView": "this.modMultipleView" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => LuSelectInputComponent),
                multi: true,
            },
        ], queries: [{ propertyName: "clearerEltRef", first: true, predicate: ALuClearer, descendants: true, read: ElementRef }], viewQueries: [{ propertyName: "suffixEltRef", first: true, predicate: ["suffix"], descendants: true, read: ElementRef, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"lu-select-placeholder\">{{ placeholder }}</div>\n<div class=\"lu-select-value\">\n\t<div class=\"lu-select-display-wrapper\">\n\t\t<ng-container #display></ng-container>\n\t</div>\n</div>\n<div #suffix class=\"lu-select-suffix\"></div>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{--components-select-input-padding-horizontal: var(--spacings-XS);--components-select-input-padding-vertical: var(--spacings-XS);--components-select-framed-color: var(--palettes-grey-500);--components-select-framed-color50: var(--palettes-grey-50);--components-select-framed-see-through: var(--palettes-grey-50);--components-select-framed-text: var(--palettes-grey-800);--components-select-framed-placeholder: #cccccc;--components-select-framed-side-padding: var(--spacings-S);--components-select-framed-top-padding: var(--spacings-L);--components-select-framed-bottom-padding: var(--spacings-S);--components-select-framed-label-top-offset: var(--spacings-XS);cursor:pointer;outline:none;padding:0;gap:0}:host:after{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons;color:var(--palettes-grey-600);bottom:var(--components-select-input-padding-vertical);font-size:var(--sizes-M-lineHeight);line-height:var(--sizes-M-lineHeight);pointer-events:none;position:absolute;right:var(--components-select-input-padding-horizontal);transition:transform var(--commons-animations-durations-standard) ease}@supports (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"/\"\"}}@supports not (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"}}:host[disabled],:host.is-disabled{cursor:not-allowed;pointer-events:all}.lu-select-display-wrapper{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.lu-select-value{line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);display:none}.lu-select-placeholder{color:var(--palettes-grey-400);line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.lu-select-suffix,.lu-select-clearer{position:absolute;bottom:.75rem;right:2.25rem}::ng-deep .lu-select-value .label{padding:var(--spacings-XXS) var(--spacings-XS);margin-left:0}::ng-deep .lu-select-value .chip{vertical-align:baseline;max-width:100%;margin:0 var(--spacings-XXS) var(--spacings-XXS) 0;text-overflow:ellipsis;overflow:hidden;vertical-align:top;white-space:nowrap}:host-context(.textfield.mod-S){padding:0}:host-context(.textfield.mod-S) .lu-select-value,:host-context(.textfield.mod-S) .lu-select-placeholder{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-XS-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-XS-lineHeight))}:host-context(.textfield.mod-S) .lu-select-clearer{bottom:var(--spacings-XS)}:host-context(.textfield.mod-S):after{line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-S-lineHeight)}:host-context(.textfield.mod-S) .lu-select-suffix{bottom:.5rem;right:2rem}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .label{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-S-lineHeight);font-weight:600;margin:0;padding:0;background-color:transparent}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .chip{height:var(--sizes-XS-lineHeight);line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-XS-fontSize);padding-left:var(--spacings-XXS);padding-right:var(--spacings-XXS);gap:var(--spacings-XXS)}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .numericBadge{--components-numericBadge-size: 1.25rem;--components-numericBadge-borderRadius: 6px;--components-numericBadge-fontSize: var(--sizes-XS-fontSize);--components-numericBadge-lineHeight: var(--sizes-XS-lineHeight)}:host-context(.textfield.mod-framed).textfield-input,:host-context(.form.mod-framed).textfield-input{padding:var(--components-select-framed-top-padding) 0 0}:host-context(.textfield.mod-framed).textfield-input:after,:host-context(.form.mod-framed).textfield-input:after{color:var(--palettes-grey-500);bottom:var(--components-select-framed-bottom-padding);right:var(--spacings-XS)}:host-context(.textfield.mod-framed).textfield-input .lu-select-value,:host-context(.form.mod-framed).textfield-input .lu-select-value{padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-placeholder,:host-context(.form.mod-framed).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400);padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-suffix,:host-context(.form.mod-framed).textfield-input .lu-select-suffix{bottom:var(--components-select-framed-bottom-padding);right:1.7rem}:host-context(.textfield.mod-filter) .lu-select-value,:host-context(.textfield.mod-filter) .lu-select-placeholder{padding:0;height:auto;padding-top:var(--spacings-S);color:var(--palettes-grey-800)}:host-context(.textfield.mod-material):after{color:var(--palettes-grey-500);bottom:.6rem;right:0}:host-context(.textfield.mod-material) .lu-select-value,:host-context(.textfield.mod-material) .lu-select-placeholder{padding-left:0;padding-right:.8rem}:host-context(.textfield.mod-material) .lu-select-suffix{right:calc(2 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material).is-select .lu-select-placeholder{display:none}:host-context(.textfield.mod-material).mod-search:after{bottom:0}:host-context(.textfield.mod-material).mod-search .lu-select-suffix{right:calc(2.75 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material .textfield-input.is-focused) .lu-select-placeholder{display:none}:host(.mod-multiple) .lu-select-value{height:auto;align-items:center}:host(.mod-multiple) .lu-select-display-wrapper{overflow:visible;white-space:normal;margin-bottom:calc(var(--spacings-XXS) * -1)}:host-context(.textfield.mod-outlined).textfield-input:after{color:var(--palettes-grey-600)}:host-context(.textfield.mod-outlined).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error):after{color:var(--palettes-error-600)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-filled) .lu-select-placeholder{display:none}:host-context(.textfield-input.is-filled) .lu-select-value{display:flex;align-items:flex-start}:host-context(.textfield .textfield-input.is-focused):after{transform:rotate(-180deg)}:host-context(.textfield-input.is-clearable) .lu-select-value{padding-right:3.5rem}:host-context(.textfield-input.is-error):after{color:var(--palettes-error-700)}:host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]):after{color:var(--commons-disabled-color)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]) .lu-select-placeholder{color:var(--commons-disabled-placeholder)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSelectInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-select', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => LuSelectInputComponent),
                            multi: true,
                        },
                    ], template: "<div class=\"lu-select-placeholder\">{{ placeholder }}</div>\n<div class=\"lu-select-value\">\n\t<div class=\"lu-select-display-wrapper\">\n\t\t<ng-container #display></ng-container>\n\t</div>\n</div>\n<div #suffix class=\"lu-select-suffix\"></div>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{--components-select-input-padding-horizontal: var(--spacings-XS);--components-select-input-padding-vertical: var(--spacings-XS);--components-select-framed-color: var(--palettes-grey-500);--components-select-framed-color50: var(--palettes-grey-50);--components-select-framed-see-through: var(--palettes-grey-50);--components-select-framed-text: var(--palettes-grey-800);--components-select-framed-placeholder: #cccccc;--components-select-framed-side-padding: var(--spacings-S);--components-select-framed-top-padding: var(--spacings-L);--components-select-framed-bottom-padding: var(--spacings-S);--components-select-framed-label-top-offset: var(--spacings-XS);cursor:pointer;outline:none;padding:0;gap:0}:host:after{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons;color:var(--palettes-grey-600);bottom:var(--components-select-input-padding-vertical);font-size:var(--sizes-M-lineHeight);line-height:var(--sizes-M-lineHeight);pointer-events:none;position:absolute;right:var(--components-select-input-padding-horizontal);transition:transform var(--commons-animations-durations-standard) ease}@supports (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"/\"\"}}@supports not (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"}}:host[disabled],:host.is-disabled{cursor:not-allowed;pointer-events:all}.lu-select-display-wrapper{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.lu-select-value{line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);display:none}.lu-select-placeholder{color:var(--palettes-grey-400);line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.lu-select-suffix,.lu-select-clearer{position:absolute;bottom:.75rem;right:2.25rem}::ng-deep .lu-select-value .label{padding:var(--spacings-XXS) var(--spacings-XS);margin-left:0}::ng-deep .lu-select-value .chip{vertical-align:baseline;max-width:100%;margin:0 var(--spacings-XXS) var(--spacings-XXS) 0;text-overflow:ellipsis;overflow:hidden;vertical-align:top;white-space:nowrap}:host-context(.textfield.mod-S){padding:0}:host-context(.textfield.mod-S) .lu-select-value,:host-context(.textfield.mod-S) .lu-select-placeholder{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-XS-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-XS-lineHeight))}:host-context(.textfield.mod-S) .lu-select-clearer{bottom:var(--spacings-XS)}:host-context(.textfield.mod-S):after{line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-S-lineHeight)}:host-context(.textfield.mod-S) .lu-select-suffix{bottom:.5rem;right:2rem}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .label{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-S-lineHeight);font-weight:600;margin:0;padding:0;background-color:transparent}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .chip{height:var(--sizes-XS-lineHeight);line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-XS-fontSize);padding-left:var(--spacings-XXS);padding-right:var(--spacings-XXS);gap:var(--spacings-XXS)}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .numericBadge{--components-numericBadge-size: 1.25rem;--components-numericBadge-borderRadius: 6px;--components-numericBadge-fontSize: var(--sizes-XS-fontSize);--components-numericBadge-lineHeight: var(--sizes-XS-lineHeight)}:host-context(.textfield.mod-framed).textfield-input,:host-context(.form.mod-framed).textfield-input{padding:var(--components-select-framed-top-padding) 0 0}:host-context(.textfield.mod-framed).textfield-input:after,:host-context(.form.mod-framed).textfield-input:after{color:var(--palettes-grey-500);bottom:var(--components-select-framed-bottom-padding);right:var(--spacings-XS)}:host-context(.textfield.mod-framed).textfield-input .lu-select-value,:host-context(.form.mod-framed).textfield-input .lu-select-value{padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-placeholder,:host-context(.form.mod-framed).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400);padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-suffix,:host-context(.form.mod-framed).textfield-input .lu-select-suffix{bottom:var(--components-select-framed-bottom-padding);right:1.7rem}:host-context(.textfield.mod-filter) .lu-select-value,:host-context(.textfield.mod-filter) .lu-select-placeholder{padding:0;height:auto;padding-top:var(--spacings-S);color:var(--palettes-grey-800)}:host-context(.textfield.mod-material):after{color:var(--palettes-grey-500);bottom:.6rem;right:0}:host-context(.textfield.mod-material) .lu-select-value,:host-context(.textfield.mod-material) .lu-select-placeholder{padding-left:0;padding-right:.8rem}:host-context(.textfield.mod-material) .lu-select-suffix{right:calc(2 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material).is-select .lu-select-placeholder{display:none}:host-context(.textfield.mod-material).mod-search:after{bottom:0}:host-context(.textfield.mod-material).mod-search .lu-select-suffix{right:calc(2.75 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material .textfield-input.is-focused) .lu-select-placeholder{display:none}:host(.mod-multiple) .lu-select-value{height:auto;align-items:center}:host(.mod-multiple) .lu-select-display-wrapper{overflow:visible;white-space:normal;margin-bottom:calc(var(--spacings-XXS) * -1)}:host-context(.textfield.mod-outlined).textfield-input:after{color:var(--palettes-grey-600)}:host-context(.textfield.mod-outlined).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error):after{color:var(--palettes-error-600)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-filled) .lu-select-placeholder{display:none}:host-context(.textfield-input.is-filled) .lu-select-value{display:flex;align-items:flex-start}:host-context(.textfield .textfield-input.is-focused):after{transform:rotate(-180deg)}:host-context(.textfield-input.is-clearable) .lu-select-value{padding-right:3.5rem}:host-context(.textfield-input.is-error):after{color:var(--palettes-error-700)}:host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]):after{color:var(--commons-disabled-color)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]) .lu-select-placeholder{color:var(--commons-disabled-placeholder)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }]; }, propDecorators: { modMultipleView: [{
                type: HostBinding,
                args: ['class.mod-multipleView']
            }], clearerEltRef: [{
                type: ContentChild,
                args: [ALuClearer, { read: ElementRef, static: false }]
            }], suffixEltRef: [{
                type: ViewChild,
                args: ['suffix', { read: ElementRef, static: true }]
            }] } });

class LuSelectInputModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSelectInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuSelectInputModule, imports: [LuSelectInputComponent], exports: [LuSelectInputComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSelectInputModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSelectInputModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuSelectInputComponent],
                    exports: [LuSelectInputComponent],
                }]
        }] });

class LuSelectModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuSelectModule, imports: [LuSelectInputModule], exports: [LuSelectInputModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSelectModule, imports: [LuSelectInputModule, LuSelectInputModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuSelectModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuSelectInputModule],
                    exports: [LuSelectInputModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ALuSelectInput, ALuSelectInputComponent, LuSelectInputComponent, LuSelectInputModule, LuSelectModule };
//# sourceMappingURL=lucca-front-ng-select.mjs.map
