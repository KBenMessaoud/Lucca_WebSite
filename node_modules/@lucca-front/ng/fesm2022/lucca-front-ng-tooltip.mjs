import { trigger, state, style, transition, animate } from '@angular/animations';
import * as i1$1 from '@angular/cdk/overlay';
import { OverlayModule } from '@angular/cdk/overlay';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { EventEmitter, TemplateRef, Component, ChangeDetectionStrategy, HostBinding, Output, ViewChild, NgModule, Directive, Input, HostListener } from '@angular/core';
import { ALuPopoverPanel, ALuPopoverTrigger, LuPopoverTarget } from '@lucca-front/ng/popover';
import { ComponentPortal } from '@angular/cdk/portal';

const luTransformTooltip = trigger('transformTooltip', [
    state('enter', style({
        opacity: 1,
        transform: `scale(1)`,
    })),
    transition('void => *', [
        style({
            opacity: 0,
            transform: `scale(0)`,
        }),
        animate(`150ms cubic-bezier(0.25, 0.8, 0.25, 1)`),
    ]),
    transition('* => void', [animate('50ms 100ms linear', style({ opacity: 0 }))]),
]);

class LuTooltipPanelComponent extends ALuPopoverPanel {
    get content() {
        return this._content;
    }
    set content(c) {
        this._content = c;
        this._changeDetectorRef.markForCheck();
    }
    set vcTemplateRef(tr) {
        this.templateRef = tr;
    }
    constructor(_changeDetectorRef) {
        super();
        this._changeDetectorRef = _changeDetectorRef;
        this.animationState = 'enter';
        //FIXME output event
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.close = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.open = new EventEmitter();
        this.hovered = new EventEmitter();
        this.scrollStrategy = 'close';
    }
    _emitCloseEvent() {
        this.close.emit();
    }
    _emitOpenEvent() {
        this.open.emit();
    }
    _emitHoveredEvent(hovered) {
        this.hovered.emit(hovered);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipPanelComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuTooltipPanelComponent, isStandalone: true, selector: "lu-tooltip-panel", outputs: { close: "close", open: "open", hovered: "hovered" }, host: { properties: { "@transformTooltip": "this.animationState" } }, viewQueries: [{ propertyName: "vcTemplateRef", first: true, predicate: TemplateRef, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<div\n\tclass=\"lu-tooltip-panel\"\n\trole=\"tooltip\"\n\t[ngClass]=\"panelClassesMap\"\n\t(mouseover)=\"onMouseOver()\"\n\t(mouseleave)=\"onMouseLeave()\"\n\t[attr.id]=\"panelId\"\n\t[@transformTooltip]=\"'enter'\"\n>\n\t<div class=\"lu-tooltip-content\" [ngClass]=\"contentClassesMap\" [innerHtml]=\"content\"></div>\n</div>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.lu-tooltip-panel{--components-tooltip-background-color: var(--palettes-grey-900);--components-tooltip-color: var(--colors-white-color);--components-tooltip-max-width: 15rem;background:var(--components-tooltip-background-color);color:var(--components-tooltip-color);padding:var(--spacings-XXS) var(--spacings-XS);max-width:var(--components-tooltip-max-width);border-radius:var(--commons-borderRadius-M);font-size:var(--sizes-XS-fontSize);line-height:var(--sizes-XS-lineHeight);display:block;text-align:center}.lu-tooltip-panel.is-above{transform-origin:bottom center}.lu-tooltip-panel.is-below{transform-origin:top center;margin-top:2px}.lu-tooltip-panel.is-before{transform-origin:center right;margin-right:5px}.lu-tooltip-panel.is-after{transform-origin:center left;margin-left:5px}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "ngmodule", type: OverlayModule }], animations: [luTransformTooltip], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-tooltip-panel', animations: [luTransformTooltip], standalone: true, imports: [CommonModule, OverlayModule], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n\tclass=\"lu-tooltip-panel\"\n\trole=\"tooltip\"\n\t[ngClass]=\"panelClassesMap\"\n\t(mouseover)=\"onMouseOver()\"\n\t(mouseleave)=\"onMouseLeave()\"\n\t[attr.id]=\"panelId\"\n\t[@transformTooltip]=\"'enter'\"\n>\n\t<div class=\"lu-tooltip-content\" [ngClass]=\"contentClassesMap\" [innerHtml]=\"content\"></div>\n</div>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.lu-tooltip-panel{--components-tooltip-background-color: var(--palettes-grey-900);--components-tooltip-color: var(--colors-white-color);--components-tooltip-max-width: 15rem;background:var(--components-tooltip-background-color);color:var(--components-tooltip-color);padding:var(--spacings-XXS) var(--spacings-XS);max-width:var(--components-tooltip-max-width);border-radius:var(--commons-borderRadius-M);font-size:var(--sizes-XS-fontSize);line-height:var(--sizes-XS-lineHeight);display:block;text-align:center}.lu-tooltip-panel.is-above{transform-origin:bottom center}.lu-tooltip-panel.is-below{transform-origin:top center;margin-top:2px}.lu-tooltip-panel.is-before{transform-origin:center right;margin-right:5px}.lu-tooltip-panel.is-after{transform-origin:center left;margin-left:5px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { animationState: [{
                type: HostBinding,
                args: ['@transformTooltip']
            }], close: [{
                type: Output
            }], open: [{
                type: Output
            }], hovered: [{
                type: Output
            }], vcTemplateRef: [{
                type: ViewChild,
                args: [TemplateRef, { static: true }]
            }] } });

class LuTooltipPanelModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipPanelModule, imports: [LuTooltipPanelComponent], exports: [LuTooltipPanelComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipPanelModule, imports: [LuTooltipPanelComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipPanelModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuTooltipPanelComponent],
                    exports: [LuTooltipPanelComponent],
                }]
        }] });

class LuTooltipTriggerDirective extends ALuPopoverTrigger {
    set tooltipContent(c) {
        if (this.panel) {
            this.panel.content = c;
        }
        this._tooltipContent = c;
    }
    /** when trigger = hover, delay before the popover panel appears, default 300ms */
    set inputEnterDelay(d) {
        this.enterDelay = d;
    }
    /** when trigger = hover, delay before the popover panel disappears, default 100ms */
    set inputLeaveDelay(d) {
        this.leaveDelay = d;
    }
    /** disable popover apparition */
    set inputDisabled(d) {
        this.disabled = d;
        if (this._handleTabindex) {
            this._setTabindex(d ? null : 0);
        }
    }
    set inputPosition(pos) {
        this.target.position = pos;
    }
    set inputWhenEllipsis(we) {
        this.whenEllipsis = we;
    }
    onMouseEnter() {
        super.onMouseEnter();
    }
    onMouseLeave() {
        super.onMouseLeave();
    }
    onFocus() {
        super.onFocus();
    }
    onBlur() {
        super.onBlur();
    }
    // @HostBinding('attr.tabindex') tabindex;
    // private set tabindex(i: number = null) {
    // }
    /** accessibility attribute - dont override */
    get _attrId() {
        return this._triggerId;
    }
    /** accessibility attribute - dont override */
    get _attrAriaDescribedBy() {
        return this._panelId;
    }
    constructor(_overlay, _elementRef, _viewContainerRef) {
        super(_overlay, _elementRef, _viewContainerRef);
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        // FIXME output native
        /** Event emitted when the associated popover is opened. */
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onOpen = new EventEmitter();
        /** Event emitted when the associated popover is closed. */
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onClose = new EventEmitter();
        this._handleTabindex = false;
        this._tooltipContent = '';
        this.target = new LuPopoverTarget();
        this.target.elementRef = this._elementRef;
        this._triggerId = this._elementRef.nativeElement.getAttribute('id') || this._triggerId;
        this.triggerEvent = 'hover';
        this.target.position = 'above';
        this.enterDelay = 300;
        this.leaveDelay = 100;
        this._handleTabindex = this._shouldHandleTabindex();
        if (this._handleTabindex) {
            this._setTabindex(0);
        }
    }
    ngAfterViewInit() {
        this._checkTarget();
    }
    ngOnDestroy() {
        this._cleanUpSubscriptions();
        if (this._popoverOpen) {
            this.closePopover();
        }
        this.destroyPopover();
    }
    _emitOpen() {
        this.onOpen.emit();
    }
    _emitClose() {
        this.onClose.emit();
    }
    _createOverlay() {
        if (!this._overlayRef) {
            this._portal = new ComponentPortal(LuTooltipPanelComponent, this._viewContainerRef);
            const config = this._getOverlayConfig();
            this._subscribeToPositions(config.positionStrategy);
            this._overlayRef = this._overlay.create(config);
        }
        return this._overlayRef;
    }
    _attachPortalToOverlay() {
        const componentRef = this._overlayRef.attach(this._portal);
        this._panel = componentRef.instance;
        this._panel.content = this._tooltipContent;
    }
    _getPanelScrollStrategy() {
        return 'close';
    }
    _shouldHandleTabindex() {
        const tag = this._elementRef.nativeElement.tagName?.toLowerCase();
        // https://allyjs.io/data-tables/focusable.html
        // i'm choosing to not support area and iframe, dont @ me
        const nativelyFocusableTags = ['a', 'button', 'input', 'select', 'textarea'];
        const isNatevelyFocusableTag = nativelyFocusableTags.includes(tag);
        const hasATabIndex = this._elementRef.nativeElement.getAttribute('tabindex') !== null;
        return !isNatevelyFocusableTag && !hasATabIndex;
    }
    _setTabindex(i = null) {
        this._elementRef.nativeElement.setAttribute('tabindex', `${i}`);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipTriggerDirective, deps: [{ token: i1$1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuTooltipTriggerDirective, isStandalone: true, selector: "[luTooltip]", inputs: { tooltipContent: ["luTooltip", "tooltipContent"], inputEnterDelay: ["luTooltipEnterDelay", "inputEnterDelay"], inputLeaveDelay: ["luTooltipLeaveDelay", "inputLeaveDelay"], inputDisabled: ["luTooltipDisabled", "inputDisabled"], inputPosition: ["luTooltipPosition", "inputPosition"], inputWhenEllipsis: ["luTooltipWhenEllipsis", "inputWhenEllipsis"] }, outputs: { onOpen: "luTooltipOnOpen", onClose: "luTooltipOnClose" }, host: { listeners: { "mouseenter": "onMouseEnter()", "mouseleave": "onMouseLeave()", "focus": "onFocus()", "blur": "onBlur()" }, properties: { "attr.id": "this._attrId", "attr.aria-describedby": "this._attrAriaDescribedBy" } }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luTooltip]',
                    standalone: true,
                }]
        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }]; }, propDecorators: { tooltipContent: [{
                type: Input,
                args: ['luTooltip']
            }], inputEnterDelay: [{
                type: Input,
                args: ['luTooltipEnterDelay']
            }], inputLeaveDelay: [{
                type: Input,
                args: ['luTooltipLeaveDelay']
            }], inputDisabled: [{
                type: Input,
                args: ['luTooltipDisabled']
            }], inputPosition: [{
                type: Input,
                args: ['luTooltipPosition']
            }], inputWhenEllipsis: [{
                type: Input,
                args: ['luTooltipWhenEllipsis']
            }], onOpen: [{
                type: Output,
                args: ['luTooltipOnOpen']
            }], onClose: [{
                type: Output,
                args: ['luTooltipOnClose']
            }], onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }], onFocus: [{
                type: HostListener,
                args: ['focus']
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }], _attrId: [{
                type: HostBinding,
                args: ['attr.id']
            }], _attrAriaDescribedBy: [{
                type: HostBinding,
                args: ['attr.aria-describedby']
            }] } });

class LuTooltipTriggerModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipTriggerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipTriggerModule, imports: [LuTooltipTriggerDirective, OverlayModule], exports: [LuTooltipTriggerDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipTriggerModule, imports: [OverlayModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipTriggerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuTooltipTriggerDirective, OverlayModule],
                    exports: [LuTooltipTriggerDirective],
                }]
        }] });

class LuTooltipModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipModule, imports: [LuTooltipTriggerModule, LuTooltipPanelModule], exports: [LuTooltipTriggerModule, LuTooltipPanelModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipModule, imports: [LuTooltipTriggerModule, LuTooltipPanelModule, LuTooltipTriggerModule, LuTooltipPanelModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTooltipModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuTooltipTriggerModule, LuTooltipPanelModule],
                    exports: [LuTooltipTriggerModule, LuTooltipPanelModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { LuTooltipModule, LuTooltipPanelComponent, LuTooltipPanelModule, LuTooltipTriggerDirective, LuTooltipTriggerModule, luTransformTooltip };
//# sourceMappingURL=lucca-front-ng-tooltip.mjs.map
