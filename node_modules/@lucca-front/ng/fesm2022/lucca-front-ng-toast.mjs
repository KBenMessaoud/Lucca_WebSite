import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Component, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';
import { getIntl } from '@lucca-front/ng/core';
import { BehaviorSubject, merge, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

const LU_TOAST_TRANSLATIONS = new InjectionToken('LuToastTranslations', {
    factory: () => luToastTranslations,
});
const luToastTranslations = {
    en: {
        close: 'Close',
    },
    fr: {
        close: 'Fermer',
    },
    es: {
        close: 'Cerrar',
    },
};

const defaultToastDuration = 5000;

class LuToastsService {
    constructor() {
        this.toasts$ = new BehaviorSubject([]);
    }
    addToast(toastInput) {
        const toast = this.getToast(toastInput);
        this.toasts$.next([...this.toasts$.value, toast]);
        return toast;
    }
    removeToast(toast) {
        const updatedToasts = this.toasts$.value.filter(({ id }) => id !== toast.id);
        this.toasts$.next(updatedToasts);
    }
    isOnlyDismissibleManually({ duration }) {
        return duration === null;
    }
    getToast(toastInput) {
        const id = this.generateId();
        const duration = this.isOnlyDismissibleManually(toastInput) ? toastInput.duration : toastInput.duration ?? defaultToastDuration;
        return { ...toastInput, id, duration };
    }
    generateId() {
        const randomString = Math.random().toString(36).substring(2, 9);
        return `_${randomString}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuToastsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuToastsService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuToastsService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });

class LuToastsComponent {
    set sources(sources) {
        merge(...sources)
            .pipe(takeUntil(this.destroy$))
            .subscribe((toast) => this.toastsService.addToast(toast));
    }
    constructor(toastsService) {
        this.toastsService = toastsService;
        this.bottom = false;
        this.toasts$ = this.toastsService.toasts$;
        this.destroy$ = new Subject();
        this.intl = getIntl(LU_TOAST_TRANSLATIONS);
        this.iconClassByToastType = {
            Info: 'icon-info',
            Success: 'icon-success',
            Error: 'icon-error',
            Warning: 'icon-warning',
        };
        this.paletteClassByToastType = {
            Info: '',
            Success: 'palette-success',
            Error: 'palette-error',
            Warning: 'palette-warning',
        };
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    removeToast(toast) {
        this.toastsService.removeToast(toast);
    }
    trackToast(_index, toast) {
        return toast.id;
    }
    isOnlyDismissibleManually(toast) {
        return this.toastsService.isOnlyDismissibleManually(toast);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuToastsComponent, deps: [{ token: LuToastsService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuToastsComponent, isStandalone: true, selector: "lu-toasts", inputs: { bottom: "bottom", sources: "sources" }, ngImport: i0, template: "<div class=\"toasts mod-withCircularGauge\" aria-live=\"polite\" [class.mod-bottom]=\"bottom\">\n\t<div *ngFor=\"let toast of toasts$ | async; trackBy: trackToast\" class=\"toasts-item\" [ngClass]=\"paletteClassByToastType[toast.type]\">\n\t\t<span *ngIf=\"toast.type\" class=\"toast-item-icon lucca-icon\" aria-hidden=\"true\" [ngClass]=\"iconClassByToastType[toast.type]\"></span>\n\t\t<div class=\"toast-item-content\">\n\t\t\t<div *ngIf=\"toast.title\"><strong>{{ toast.title }}</strong></div>\n\t\t\t<div [innerHtml]=\"toast.message\"></div>\n\t\t</div>\n\t\t<button type=\"button\" class=\"toasts-item-kill\" (click)=\"removeToast(toast)\" (animationend)=\"removeToast(toast)\">\n\t\t\t<span class=\"lucca-icon icon-signClose mod-XS\" aria-hidden=\"true\"></span>\n\t\t\t<div class=\"circularGauge\" *ngIf=\"!isOnlyDismissibleManually(toast) && toast.duration > 0\">\n\t\t\t\t<svg viewBox=\"0 0 32 32\">\n\t\t\t\t\t<circle r=\"16\" cx=\"16\" cy=\"16\" [style.animation-duration]=\"toast.duration + 'ms'\" />\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<span class=\"u-mask\">{{ intl.close }}</span>\n\t\t</button>\n\t</div>\n</div>\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuToastsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-toasts', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [CommonModule], template: "<div class=\"toasts mod-withCircularGauge\" aria-live=\"polite\" [class.mod-bottom]=\"bottom\">\n\t<div *ngFor=\"let toast of toasts$ | async; trackBy: trackToast\" class=\"toasts-item\" [ngClass]=\"paletteClassByToastType[toast.type]\">\n\t\t<span *ngIf=\"toast.type\" class=\"toast-item-icon lucca-icon\" aria-hidden=\"true\" [ngClass]=\"iconClassByToastType[toast.type]\"></span>\n\t\t<div class=\"toast-item-content\">\n\t\t\t<div *ngIf=\"toast.title\"><strong>{{ toast.title }}</strong></div>\n\t\t\t<div [innerHtml]=\"toast.message\"></div>\n\t\t</div>\n\t\t<button type=\"button\" class=\"toasts-item-kill\" (click)=\"removeToast(toast)\" (animationend)=\"removeToast(toast)\">\n\t\t\t<span class=\"lucca-icon icon-signClose mod-XS\" aria-hidden=\"true\"></span>\n\t\t\t<div class=\"circularGauge\" *ngIf=\"!isOnlyDismissibleManually(toast) && toast.duration > 0\">\n\t\t\t\t<svg viewBox=\"0 0 32 32\">\n\t\t\t\t\t<circle r=\"16\" cx=\"16\" cy=\"16\" [style.animation-duration]=\"toast.duration + 'ms'\" />\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<span class=\"u-mask\">{{ intl.close }}</span>\n\t\t</button>\n\t</div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: LuToastsService }]; }, propDecorators: { bottom: [{
                type: Input
            }], sources: [{
                type: Input
            }] } });

class LuToastsModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuToastsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuToastsModule, imports: [LuToastsComponent], exports: [LuToastsComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuToastsModule, imports: [LuToastsComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuToastsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuToastsComponent],
                    exports: [LuToastsComponent],
                }]
        }] });

/*
 * Public API Surface of toast
 */

/**
 * Generated bundle index. Do not edit.
 */

export { LU_TOAST_TRANSLATIONS, LuToastsComponent, LuToastsModule, LuToastsService, defaultToastDuration, luToastTranslations };
//# sourceMappingURL=lucca-front-ng-toast.mjs.map
