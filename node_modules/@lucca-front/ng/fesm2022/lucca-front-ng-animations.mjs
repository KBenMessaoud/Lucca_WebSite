import { transition, style, animate, trigger } from '@angular/animations';

function luFadingAnimation(inTiming, outTiming) {
    return [
        transition('void => *', [style({ opacity: '0' }), animate(inTiming, style({ opacity: '1' }))]),
        transition('* => void', [style({ opacity: '1' }), animate(outTiming, style({ opacity: '0' }))]),
    ];
}

function luScalingAnimation(inTiming, outTiming) {
    return [
        transition('void => left', [
            // ---> entering --->
            style({
                transformOrigin: 'left center',
                transform: 'scaleX(0)',
                opacity: '0',
            }),
            animate(inTiming, style({
                transformOrigin: 'left center',
                transform: 'scaleX(1)',
                opacity: '1',
            })),
        ]),
        transition('left => void', [
            // <--- leaving <---
            style({
                transformOrigin: 'left center',
                transform: 'scaleX(1)',
                opacity: '1',
            }),
            animate(outTiming, style({
                transformOrigin: 'left center',
                transform: 'scaleX(0)',
                opacity: '0',
            })),
        ]),
        transition('void => right', [
            // <--- entering <---
            style({
                transformOrigin: 'right center',
                transform: 'scaleX(0)',
                opacity: '0',
            }),
            animate(inTiming, style({
                transformOrigin: 'right center',
                transform: 'scaleX(1)',
                opacity: '1',
            })),
        ]),
        transition('right => void', [
            // ---> leaving --->
            style({
                transformOrigin: 'right center',
                transform: 'scaleX(1)',
                opacity: '1',
            }),
            animate(outTiming, style({
                transformOrigin: 'right center',
                transform: 'scaleX(0)',
                opacity: '0',
            })),
        ]),
        transition('void => top', [
            // \/ entering
            style({
                transformOrigin: 'center top',
                transform: 'scaleY(0)',
                opacity: '0',
            }),
            animate(inTiming, style({
                transformOrigin: 'center top',
                transform: 'scaleY(1)',
                opacity: '1',
            })),
        ]),
        transition('top => void', [
            // /\ leaving
            style({
                transformOrigin: 'center top',
                transform: 'scaleY(1)',
                opacity: '1',
            }),
            animate(outTiming, style({
                transformOrigin: 'center top',
                transform: 'scaleY(0)',
                opacity: '0',
            })),
        ]),
        transition('void => bottom', [
            // /\ entering
            style({
                transformOrigin: 'center bottom',
                transform: 'scaleY(0)',
                opacity: '0',
            }),
            animate(inTiming, style({
                transformOrigin: 'center bottom',
                transform: 'scaleY(1)',
                opacity: '1',
            })),
        ]),
        transition('bottom => void', [
            // \/ leaving
            style({
                transformOrigin: 'center bottom',
                transform: 'scaleY(1)',
                opacity: '1',
            }),
            animate(outTiming, style({
                transformOrigin: 'center bottom',
                transform: 'scaleY(0)',
                opacity: '0',
            })),
        ]),
        transition('void => center, void => *', [
            style({ transformOrigin: 'center', transform: 'scale(0)', opacity: '0' }),
            animate(inTiming, style({
                transformOrigin: 'center',
                transform: 'scale(1)',
                opacity: '1',
            })),
        ]),
        transition('center => void , * => void', [
            style({ transformOrigin: 'center', transform: 'scale(1)', opacity: '1' }),
            animate(outTiming, style({
                transformOrigin: 'center',
                transform: 'scale(0)',
                opacity: '0',
            })),
        ]),
    ];
}

function luSlidingAnimation(inTiming, outTiming) {
    return [
        transition('void => right', [
            // <--- entering <---
            style({
                transformOrigin: 'right center',
                transform: 'translateX(50px)',
                opacity: '0',
            }),
            animate(inTiming, style({
                transformOrigin: 'right center',
                transform: 'translateX(0)',
                opacity: '1',
            })),
        ]),
        transition('right => void', [
            // ---> leaving --->
            style({
                transformOrigin: 'right center',
                transform: 'translateX(0)',
                opacity: '1',
            }),
            animate(outTiming, style({
                transformOrigin: 'right center',
                transform: 'translateX(50px)',
                opacity: '0',
            })),
        ]),
        transition('void => top', [
            // \/ entering
            style({
                transformOrigin: 'center',
                transform: 'translateY(-20px)',
                opacity: '0',
            }),
            animate(inTiming, style({
                transformOrigin: 'center',
                transform: 'translateY(0)',
                opacity: '1',
            })),
        ]),
        transition('top => void', [
            // /\ leaving
            style({
                transformOrigin: 'center',
                transform: 'translateY(0)',
                opacity: '1',
            }),
            animate(outTiming, style({
                transformOrigin: 'center',
                transform: 'translateY(-20px)',
                opacity: '0',
            })),
        ]),
        transition('void => bottom', [
            // /\ entering
            style({
                transformOrigin: 'center',
                transform: 'translateY(20px)',
                opacity: '0',
            }),
            animate(inTiming, style({
                transformOrigin: 'center',
                transform: 'translateY(0)',
                opacity: '1',
            })),
        ]),
        transition('bottom => void', [
            // \/ leaving
            style({
                transformOrigin: 'center',
                transform: 'translateY(0)',
                opacity: '1',
            }),
            animate(outTiming, style({
                transformOrigin: 'center',
                transform: 'translateY(20px)',
                opacity: '0',
            })),
        ]),
        transition('void => left, void => *', [
            // ---> entering --->
            style({
                transformOrigin: 'left center',
                transform: 'translateX(-50px)',
                opacity: '0',
            }),
            animate(inTiming, style({
                transformOrigin: 'left center',
                transform: 'translateX(0)',
                opacity: '1',
            })),
        ]),
        transition('left => void, * => void', [
            // <--- leaving <---
            style({
                transformOrigin: 'left center',
                transform: 'translateX(0)',
                opacity: '1',
            }),
            animate(outTiming, style({
                transformOrigin: 'left center',
                transform: 'translateX(-50px)',
                opacity: '0',
            })),
        ]),
    ];
}

const LU_DEFAULT_ANIMATION_TIMING = '250ms 0ms ease-out';
function luFadeAnimationFactory(animationInTiming = LU_DEFAULT_ANIMATION_TIMING, animationOutTiming = LU_DEFAULT_ANIMATION_TIMING, triggerName = 'fadeAnimation') {
    return trigger(triggerName, [...luFadingAnimation(animationInTiming, animationOutTiming)]);
}
function luScaleAnimationFactory(animationInTiming = LU_DEFAULT_ANIMATION_TIMING, animationOutTiming = LU_DEFAULT_ANIMATION_TIMING, triggerName = 'scaleAnimation') {
    return trigger(triggerName, [...luScalingAnimation(animationInTiming, animationOutTiming)]);
}
function luSlideAnimationFactory(animationInTiming = LU_DEFAULT_ANIMATION_TIMING, animationOutTiming = LU_DEFAULT_ANIMATION_TIMING, triggerName = 'slideAnimation') {
    return trigger(triggerName, [...luSlidingAnimation(animationInTiming, animationOutTiming)]);
}

/**
 * Generated bundle index. Do not edit.
 */

export { LU_DEFAULT_ANIMATION_TIMING, luFadeAnimationFactory, luFadingAnimation, luScaleAnimationFactory, luScalingAnimation, luSlideAnimationFactory, luSlidingAnimation };
//# sourceMappingURL=lucca-front-ng-animations.mjs.map
