import * as i0 from '@angular/core';
import { forwardRef, Directive, NgModule, Injectable, Inject, Optional, SkipSelf, Self, Input, HostListener, EventEmitter, ElementRef, Component, ChangeDetectionStrategy, HostBinding, ViewChild, Output, InjectionToken } from '@angular/core';
import { LuForGroupsDirective, ALuOptionOperator, ALuOptionSelector, LuOptionPlaceholderComponent, LuOptionSelectAllComponent, LuOptionPickerAdvancedComponent, LuOptionItemComponent } from '@lucca-front/ng/option';
import * as i1$2 from '@angular/cdk/overlay';
import { OverlayModule } from '@angular/cdk/overlay';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1$1 from '@angular/forms';
import { FormControl, ReactiveFormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ALuOnOpenSubscriber, ALuOnCloseSubscriber, ALuOnScrollBottomSubscriber, getIntl } from '@lucca-front/ng/core';
import { LuInputClearerComponent, LuInputDisplayerDirective } from '@lucca-front/ng/input';
import { ALuSelectInputComponent } from '@lucca-front/ng/select';
import { Subject, Subscription, of, combineLatest } from 'rxjs';
import { ALuApiService, LuApiV4Service } from '@lucca-front/ng/api';
import * as i1 from '@angular/common/http';
import { scan, startWith, switchMap, debounceTime, tap, catchError, takeWhile, share, map } from 'rxjs/operators';

class LuForLegalUnitsDirective extends LuForGroupsDirective {
    constructor(_vcr, _cdr, _templateRef) {
        super(_vcr, _cdr, _templateRef);
        this._vcr = _vcr;
        this._cdr = _cdr;
        this._templateRef = _templateRef;
    }
    groupBy(items) {
        const groups = [];
        items.forEach((item) => {
            const legalUnit = item?.legalUnit;
            let group = groups.find((g) => g.key.id === legalUnit.id);
            if (!group) {
                group = { key: legalUnit, items: [] };
                groups.push(group);
            }
            group.items.push(item);
        });
        return groups;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForLegalUnitsDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.ChangeDetectorRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuForLegalUnitsDirective, isStandalone: true, selector: "[luForLegalUnits]", providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuForLegalUnitsDirective),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForLegalUnitsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luForLegalUnits]',
                    standalone: true,
                    providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuForLegalUnitsDirective),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }, { type: i0.TemplateRef }]; } });

class LuForLegalUnitsModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForLegalUnitsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuForLegalUnitsModule, imports: [LuForLegalUnitsDirective], exports: [LuForLegalUnitsDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForLegalUnitsModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForLegalUnitsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuForLegalUnitsDirective],
                    exports: [LuForLegalUnitsDirective],
                }]
        }] });

class ALuEstablishmentService extends ALuApiService {
}

class LuEstablishmentService extends LuApiV4Service {
    set appInstanceId(id) {
        this._appInstanceId = id;
    }
    set operations(ops) {
        this._operations = ops || [];
    }
    get filters() {
        const isScopeFiltered = this._appInstanceId && this._operations.length;
        if (isScopeFiltered) {
            const appIdFilter = `appInstanceId=${this._appInstanceId}`;
            const operationFilter = `operations=${this._operations.join(',')}`;
            return [...this._filters, appIdFilter, operationFilter];
        }
        return this._filters;
    }
    set filters(filters) {
        this._filters = filters || [];
    }
    constructor(_http) {
        super(_http);
        this._http = _http;
        this._api = `/organization/structure/api/establishments`;
        this._appInstanceId = null;
        this._operations = [];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });

class ALuLegalUnitService extends ALuApiService {
}

class LuLegalUnitService extends LuApiV4Service {
    set appInstanceId(id) {
        this._appInstanceId = id;
    }
    set operations(ops) {
        this._operations = ops || [];
    }
    get filters() {
        const isScopeFiltered = this._appInstanceId && this._operations.length;
        if (isScopeFiltered) {
            const appIdFilter = `appInstanceId=${this._appInstanceId}`;
            const operationFilter = `operations=${this._operations.join(',')}`;
            return [...this._filters, appIdFilter, operationFilter];
        }
        return this._filters;
    }
    set filters(filters) {
        this._filters = filters || [];
    }
    constructor(_http) {
        super(_http);
        this._http = _http;
        this._api = `/organization/structure/api/legal-units`;
        this._appInstanceId = null;
        this._operations = [];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuLegalUnitService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuLegalUnitService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuLegalUnitService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });

class LuLegalUnitSelectorDirective {
    set filters(filters) {
        this._service.filters = filters;
    }
    set appInstanceId(appId) {
        this._service.appInstanceId = appId;
    }
    set operations(ops) {
        this._service.operations = ops;
    }
    constructor(hostService, selfService) {
        this.multiple = true;
        this.onSelectValue = new Subject();
        this._subs = new Subscription();
        this._service = hostService || selfService;
    }
    onClick() {
        const sub = this._service.getAll([`legalUnitId=${this.legalUnit.id}`]).subscribe((establishments) => {
            if (this.shouldAdd(establishments)) {
                const selectedEstablishmentIds = new Set((this._values ?? []).map((ets) => ets.id));
                this.onSelectValue.next(Array.from([...(this._values ?? []), ...establishments.filter((ets) => !selectedEstablishmentIds.has(ets.id))]));
            }
            else {
                const establishmentIds = new Set(establishments.map((ets) => ets.id));
                this.onSelectValue.next((this._values ?? []).filter((ets) => !establishmentIds.has(ets.id)));
            }
        });
        this._subs.add(sub);
    }
    setValue(values) {
        this._values = values;
    }
    ngOnDestroy() {
        this._subs.unsubscribe();
    }
    shouldAdd(establishments) {
        const selectedCount = (this._values ?? []).filter((ets) => ets.legalUnitId === this.legalUnit.id).length;
        return establishments.length > selectedCount;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuLegalUnitSelectorDirective, deps: [{ token: ALuEstablishmentService, optional: true, skipSelf: true }, { token: ALuEstablishmentService, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuLegalUnitSelectorDirective, isStandalone: true, selector: "[luLegalUnitSelector]", inputs: { legalUnit: ["luLegalUnitSelector", "legalUnit"], filters: ["luLegalUnitSelectorFilters", "filters"], appInstanceId: ["luLegalUnitSelectorAppInstanceId", "appInstanceId"], operations: ["luLegalUnitSelectorOperations", "operations"] }, host: { listeners: { "click": "onClick()" } }, providers: [
            {
                provide: ALuOptionSelector,
                useExisting: forwardRef(() => LuLegalUnitSelectorDirective),
                multi: true,
            },
            {
                provide: ALuEstablishmentService,
                useClass: LuEstablishmentService,
            },
        ], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuLegalUnitSelectorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luLegalUnitSelector]',
                    standalone: true,
                    providers: [
                        {
                            provide: ALuOptionSelector,
                            useExisting: forwardRef(() => LuLegalUnitSelectorDirective),
                            multi: true,
                        },
                        {
                            provide: ALuEstablishmentService,
                            useClass: LuEstablishmentService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: LuEstablishmentService, decorators: [{
                    type: Inject,
                    args: [ALuEstablishmentService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: LuEstablishmentService, decorators: [{
                    type: Inject,
                    args: [ALuEstablishmentService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { legalUnit: [{
                type: Input,
                args: ['luLegalUnitSelector']
            }], filters: [{
                type: Input,
                args: ['luLegalUnitSelectorFilters']
            }], appInstanceId: [{
                type: Input,
                args: ['luLegalUnitSelectorAppInstanceId']
            }], operations: [{
                type: Input,
                args: ['luLegalUnitSelectorOperations']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });

class LuLegalUnitSelectorModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuLegalUnitSelectorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuLegalUnitSelectorModule, imports: [LuLegalUnitSelectorDirective], exports: [LuLegalUnitSelectorDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuLegalUnitSelectorModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuLegalUnitSelectorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuLegalUnitSelectorDirective],
                    exports: [LuLegalUnitSelectorDirective],
                }]
        }] });

/* eslint-disable max-len */
class LuEstablishmentSearcherComponent {
    set filters(filters) {
        this._service.filters = filters;
    }
    set appInstanceId(appId) {
        this._service.appInstanceId = appId;
    }
    set operations(ops) {
        this._service.operations = ops;
    }
    set sort(sort) {
        this._service.sort = sort;
    }
    constructor(hostService, selfService) {
        this.fixed = true;
        this.isSearching = new EventEmitter();
        this._isSearching = false;
        this.clueControl = new FormControl('');
        this.loading = false;
        this._nextPage$ = new Subject();
        this._page$ = this._nextPage$.pipe(scan((acc) => acc + 1, 0), startWith(0));
        this._resetOutOptions = new Subject();
        this.outOptions$ = this._resetOutOptions.pipe(startWith(undefined), switchMap(() => this.clueControl.valueChanges.pipe(debounceTime(100), switchMap((clue) => this._page$.pipe(tap(() => (this.loading = true)), tap(() => {
            // FIXME refactor, add some spec anywhere
            const isSearching = clue != null && clue !== '';
            if (this._isSearching !== isSearching) {
                this._isSearching = isSearching;
                this.isSearching.emit(this._isSearching);
            }
        }), switchMap((page) => this._service.searchPaged(clue, page).pipe(catchError(() => of([])))), takeWhile((loadedItems) => !!loadedItems.length), scan((acc, next) => [...acc, ...next]))), tap(() => (this.loading = false)))), share());
        this.displayPlaceholder$ = this.outOptions$.pipe(map((o) => o?.length === 0 && this._isSearching));
        this._service = hostService || selfService;
    }
    onOpen() {
        this.searchInput.nativeElement.focus();
        this.reset();
    }
    onScrollBottom() {
        if (!this.loading) {
            this._nextPage$.next();
        }
    }
    onClose() {
        this._resetOutOptions.next();
    }
    reset() {
        this.clueControl.reset();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSearcherComponent, deps: [{ token: ALuEstablishmentService, optional: true, skipSelf: true }, { token: ALuEstablishmentService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuEstablishmentSearcherComponent, isStandalone: true, selector: "lu-establishment-searcher", inputs: { filters: "filters", appInstanceId: "appInstanceId", operations: "operations", sort: "sort" }, outputs: { isSearching: "isSearching" }, host: { properties: { "class.position-fixed": "this.fixed" } }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuEstablishmentSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuEstablishmentSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnCloseSubscriber,
                useExisting: forwardRef(() => LuEstablishmentSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnScrollBottomSubscriber,
                useExisting: forwardRef(() => LuEstablishmentSearcherComponent),
                multi: true,
            },
            {
                provide: ALuEstablishmentService,
                useClass: LuEstablishmentService,
            },
        ], viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: "<form>\n\t<div class=\"textfield mod-search\" [class.is-loading]=\"loading\">\n\t\t<input #searchInput class=\"textfield-input\" [formControl]=\"clueControl\" />\n\t</div>\n</form>\n\n<lu-option-placeholder *ngIf=\"displayPlaceholder$ | async\" (onClear)=\"reset()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"], dependencies: [{ kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1$1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "component", type: LuOptionPlaceholderComponent, selector: "lu-option-placeholder", outputs: ["onClear"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSearcherComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-establishment-searcher', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [ReactiveFormsModule, CommonModule, LuOptionPlaceholderComponent], providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuEstablishmentSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuEstablishmentSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnCloseSubscriber,
                            useExisting: forwardRef(() => LuEstablishmentSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnScrollBottomSubscriber,
                            useExisting: forwardRef(() => LuEstablishmentSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuEstablishmentService,
                            useClass: LuEstablishmentService,
                        },
                    ], template: "<form>\n\t<div class=\"textfield mod-search\" [class.is-loading]=\"loading\">\n\t\t<input #searchInput class=\"textfield-input\" [formControl]=\"clueControl\" />\n\t</div>\n</form>\n\n<lu-option-placeholder *ngIf=\"displayPlaceholder$ | async\" (onClear)=\"reset()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"] }]
        }], ctorParameters: function () { return [{ type: LuEstablishmentService, decorators: [{
                    type: Inject,
                    args: [ALuEstablishmentService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: LuEstablishmentService, decorators: [{
                    type: Inject,
                    args: [ALuEstablishmentService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { filters: [{
                type: Input
            }], appInstanceId: [{
                type: Input
            }], operations: [{
                type: Input
            }], sort: [{
                type: Input
            }], fixed: [{
                type: HostBinding,
                args: ['class.position-fixed']
            }], searchInput: [{
                type: ViewChild,
                args: ['searchInput', { read: ElementRef, static: true }]
            }], isSearching: [{
                type: Output
            }] } });

class LuEstablishmentSearcherModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSearcherModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSearcherModule, imports: [LuEstablishmentSearcherComponent], exports: [LuEstablishmentSearcherComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSearcherModule, imports: [LuEstablishmentSearcherComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSearcherModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuEstablishmentSearcherComponent],
                    exports: [LuEstablishmentSearcherComponent],
                }]
        }] });

class LuEstablishmentSelectAllComponent extends LuOptionSelectAllComponent {
    set filters(filters) {
        this._service.filters = filters;
    }
    set appInstanceId(appInstanceId) {
        this._service.appInstanceId = appInstanceId;
    }
    set operations(operations) {
        this._service.operations = operations;
    }
    constructor(_changeDetectorRef, hostService, selfService) {
        super();
        this._changeDetectorRef = _changeDetectorRef;
        this.loading = false;
        this._subs = new Subscription();
        this._service = hostService || selfService;
    }
    selectAll() {
        this.loading = true;
        const sub = this._service.getAll().subscribe({
            next: (establishments) => {
                this.onSelectValue.next([...establishments]);
            },
            complete: () => {
                this.loading = false;
                this._changeDetectorRef.detectChanges();
            },
        });
        this._subs.add(sub);
    }
    ngOnDestroy() {
        this._subs.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectAllComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: ALuEstablishmentService, optional: true, skipSelf: true }, { token: ALuEstablishmentService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuEstablishmentSelectAllComponent, isStandalone: true, selector: "lu-establishment-select-all", inputs: { filters: "filters", appInstanceId: "appInstanceId", operations: "operations" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuEstablishmentSelectAllComponent),
                multi: true,
            },
            {
                provide: ALuOptionSelector,
                useExisting: forwardRef(() => LuEstablishmentSelectAllComponent),
                multi: true,
            },
            {
                provide: ALuEstablishmentService,
                useClass: LuEstablishmentService,
            },
        ], usesInheritance: true, ngImport: i0, template: "<button type=\"button\" (click)=\"selectAll()\" [disabled]=\"loading\" class=\"link selectAll-button\">{{ intl.select }}</button>\n<button type=\"button\" (click)=\"deselectAll()\" [disabled]=\"loading\" class=\"link selectAll-button u-marginLeftXS\">{{ intl.deselect }}</button>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host .selectAll-button{color:var(--palettes-grey-600);font-size:var(--sizes-S-fontSize);outline:none}:host .selectAll-button:hover{color:var(--palettes-grey-800)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectAllComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-establishment-select-all', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuEstablishmentSelectAllComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOptionSelector,
                            useExisting: forwardRef(() => LuEstablishmentSelectAllComponent),
                            multi: true,
                        },
                        {
                            provide: ALuEstablishmentService,
                            useClass: LuEstablishmentService,
                        },
                    ], template: "<button type=\"button\" (click)=\"selectAll()\" [disabled]=\"loading\" class=\"link selectAll-button\">{{ intl.select }}</button>\n<button type=\"button\" (click)=\"deselectAll()\" [disabled]=\"loading\" class=\"link selectAll-button u-marginLeftXS\">{{ intl.deselect }}</button>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host .selectAll-button{color:var(--palettes-grey-600);font-size:var(--sizes-S-fontSize);outline:none}:host .selectAll-button:hover{color:var(--palettes-grey-800)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: LuEstablishmentService, decorators: [{
                    type: Inject,
                    args: [ALuEstablishmentService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: LuEstablishmentService, decorators: [{
                    type: Inject,
                    args: [ALuEstablishmentService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { filters: [{
                type: Input
            }], appInstanceId: [{
                type: Input
            }], operations: [{
                type: Input
            }] } });

const luEstablishmentSelectAllTranslations = {
    en: {
        select: 'Select all',
        deselect: 'Deselect all',
    },
    fr: {
        select: 'Tout sélectionner',
        deselect: 'Tout déselectionner',
    },
    de: {
        select: 'Alle auswählen',
        deselect: 'Alle abwählen',
    },
    pt: {
        select: 'Selecionar tudo',
        deselect: 'Desselecionar tudo',
    },
    es: {
        select: 'Seleccionar todo',
        deselect: 'Desmarcar todo',
    },
};

class LuEstablishmentSelectAllModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectAllModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectAllModule, imports: [LuEstablishmentSelectAllComponent], exports: [LuEstablishmentSelectAllComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectAllModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectAllModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuEstablishmentSelectAllComponent],
                    exports: [LuEstablishmentSelectAllComponent],
                }]
        }] });

const LU_ESTABLISHMENT_SELECT_INPUT_TRANSLATIONS = new InjectionToken('LuEstablishmentSelectTranslations', {
    factory: () => luEstablishmentSelectInputTranslations,
});
const luEstablishmentSelectInputTranslations = {
    en: {
        establishments: 'establishments',
    },
    fr: {
        establishments: 'établissements',
    },
    es: {
        establishments: 'establecimiento',
    },
};

class LuEstablishmentSelectInputComponent extends ALuSelectInputComponent {
    get sort() {
        return this.isSearching ? 'name' : 'legalunit.name,name';
    }
    constructor(_changeDetectorRef, _overlay, _elementRef, _viewContainerRef, _renderer, hostLuService, selfLuService, hostEstablishmentService, selfEstablishmentService) {
        super(_changeDetectorRef, _overlay, _elementRef, _viewContainerRef, _renderer);
        this._changeDetectorRef = _changeDetectorRef;
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._renderer = _renderer;
        this.byId = (option1, option2) => option1 && option2 && option1.id === option2.id;
        this.isSearching = false;
        this.groupByLu = true;
        this.intl = getIntl(LU_ESTABLISHMENT_SELECT_INPUT_TRANSLATIONS);
        this._establishmentService = hostEstablishmentService || selfEstablishmentService;
        this._legalUnitService = hostLuService || selfLuService;
    }
    ngOnInit() {
        this._subs.add(combineLatest([this._legalUnitService.count(), this._establishmentService.count()]).subscribe(([luCount, establishmentCount]) => {
            this.groupByLu = luCount > 1 && establishmentCount > 1 && luCount !== establishmentCount;
        }));
    }
    onIsSearchingChanged(isSearching) {
        this.isSearching = isSearching;
        this._changeDetectorRef.detectChanges();
    }
    trackById(idx, item) {
        return item.id;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectInputComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1$2.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }, { token: ALuLegalUnitService, optional: true, skipSelf: true }, { token: ALuLegalUnitService, self: true }, { token: ALuEstablishmentService, optional: true, skipSelf: true }, { token: ALuEstablishmentService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuEstablishmentSelectInputComponent, isStandalone: true, selector: "lu-establishment-select", inputs: { filters: "filters", appInstanceId: "appInstanceId", operations: "operations" }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => LuEstablishmentSelectInputComponent),
                multi: true,
            },
            {
                provide: ALuEstablishmentService,
                useClass: LuEstablishmentService,
            },
            {
                provide: ALuLegalUnitService,
                useClass: LuLegalUnitService,
            },
        ], usesInheritance: true, ngImport: i0, template: "<div class=\"lu-select-placeholder\">{{ placeholder }}</div>\n<div class=\"lu-select-value\">\n\t<div class=\"lu-select-display-wrapper\">\n\t\t<ng-container #display></ng-container>\n\t</div>\n</div>\n<div class=\"lu-select-suffix\">\n\t<lu-input-clearer></lu-input-clearer>\n</div>\n\n<ng-template luDisplayer [luDisplayerMultiple]=\"true\" let-values>\n\t<span *ngIf=\"multiple && values?.length > 1; else singleView\"\n\t\t><span class=\"numericBadge\">{{ values.length }}</span> {{ intl.establishments }}</span\n\t>\n\t<ng-template #singleView>{{ (values[0] || values).name }}</ng-template>\n</ng-template>\n\n<lu-option-picker-advanced [option-comparer]=\"byId\">\n\t<header class=\"lu-picker-header\">\n\t\t<lu-establishment-searcher\n\t\t\t[filters]=\"filters\"\n\t\t\t[appInstanceId]=\"appInstanceId\"\n\t\t\t[operations]=\"operations\"\n\t\t\t[sort]=\"sort\"\n\t\t\t(isSearching)=\"onIsSearchingChanged($event)\"\n\t\t></lu-establishment-searcher>\n\t\t<lu-establishment-select-all\n\t\t\t*ngIf=\"multiple\"\n\t\t\tclass=\"u-displayBlock\"\n\t\t\t[class.u-displayNone]=\"isSearching\"\n\t\t\t[filters]=\"filters\"\n\t\t\t[appInstanceId]=\"appInstanceId\"\n\t\t\t[operations]=\"operations\"\n\t\t></lu-establishment-select-all>\n\t</header>\n\n\t<ng-template luForLegalUnits let-group>\n\t\t<div class=\"optionGroup\">\n\t\t\t<ng-container *ngIf=\"groupByLu && !isSearching\">\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t*ngIf=\"multiple; else singleViewGroup\"\n\t\t\t\t\tclass=\"optionGroupName button mod-text mod-block\"\n\t\t\t\t\t[luLegalUnitSelector]=\"group.key\"\n\t\t\t\t\t[luLegalUnitSelectorFilters]=\"filters\"\n\t\t\t\t\t[luLegalUnitSelectorAppInstanceId]=\"appInstanceId\"\n\t\t\t\t\t[luLegalUnitSelectorOperations]=\"operations\"\n\t\t\t\t>\n\t\t\t\t\t{{ group.key.name }}\n\t\t\t\t</button>\n\t\t\t\t<ng-template #singleViewGroup>\n\t\t\t\t\t<h5 class=\"optionGroupName mod-readonly u-margin0\">{{ group.key.name }}</h5>\n\t\t\t\t</ng-template>\n\t\t\t</ng-container>\n\n\t\t\t<div class=\"lu-picker-content-option\">\n\t\t\t\t<lu-option *ngFor=\"let establishment of group.items; trackBy: trackById\" [value]=\"establishment\" class=\"establishmentOption\">\n\t\t\t\t\t<ng-container *ngIf=\"isSearching; else emptySearch\">\n\t\t\t\t\t\t<span class=\"u-displayBlock\">{{ establishment.name }}</span>\n\t\t\t\t\t\t<span *ngIf=\"groupByLu\" class=\"u-displayBlock u-textLight u-textS\">{{ group.key.name }}</span>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-template #emptySearch>\n\t\t\t\t\t\t<span>{{ establishment.name }}</span>\n\t\t\t\t\t</ng-template>\n\t\t\t\t</lu-option>\n\t\t\t</div>\n\t\t</div>\n\t</ng-template>\n</lu-option-picker-advanced>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{--components-select-input-padding-horizontal: var(--spacings-XS);--components-select-input-padding-vertical: var(--spacings-XS);--components-select-framed-color: var(--palettes-grey-500);--components-select-framed-color50: var(--palettes-grey-50);--components-select-framed-see-through: var(--palettes-grey-50);--components-select-framed-text: var(--palettes-grey-800);--components-select-framed-placeholder: #cccccc;--components-select-framed-side-padding: var(--spacings-S);--components-select-framed-top-padding: var(--spacings-L);--components-select-framed-bottom-padding: var(--spacings-S);--components-select-framed-label-top-offset: var(--spacings-XS);cursor:pointer;outline:none;padding:0;gap:0}:host:after{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons;color:var(--palettes-grey-600);bottom:var(--components-select-input-padding-vertical);font-size:var(--sizes-M-lineHeight);line-height:var(--sizes-M-lineHeight);pointer-events:none;position:absolute;right:var(--components-select-input-padding-horizontal);transition:transform var(--commons-animations-durations-standard) ease}@supports (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"/\"\"}}@supports not (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"}}:host[disabled],:host.is-disabled{cursor:not-allowed;pointer-events:all}.lu-select-display-wrapper{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.lu-select-value{line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);display:none}.lu-select-placeholder{color:var(--palettes-grey-400);line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.lu-select-suffix,.lu-select-clearer{position:absolute;bottom:.75rem;right:2.25rem}::ng-deep .lu-select-value .label{padding:var(--spacings-XXS) var(--spacings-XS);margin-left:0}::ng-deep .lu-select-value .chip{vertical-align:baseline;max-width:100%;margin:0 var(--spacings-XXS) var(--spacings-XXS) 0;text-overflow:ellipsis;overflow:hidden;vertical-align:top;white-space:nowrap}:host-context(.textfield.mod-S){padding:0}:host-context(.textfield.mod-S) .lu-select-value,:host-context(.textfield.mod-S) .lu-select-placeholder{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-XS-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-XS-lineHeight))}:host-context(.textfield.mod-S) .lu-select-clearer{bottom:var(--spacings-XS)}:host-context(.textfield.mod-S):after{line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-S-lineHeight)}:host-context(.textfield.mod-S) .lu-select-suffix{bottom:.5rem;right:2rem}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .label{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-S-lineHeight);font-weight:600;margin:0;padding:0;background-color:transparent}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .chip{height:var(--sizes-XS-lineHeight);line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-XS-fontSize);padding-left:var(--spacings-XXS);padding-right:var(--spacings-XXS);gap:var(--spacings-XXS)}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .numericBadge{--components-numericBadge-size: 1.25rem;--components-numericBadge-borderRadius: 6px;--components-numericBadge-fontSize: var(--sizes-XS-fontSize);--components-numericBadge-lineHeight: var(--sizes-XS-lineHeight)}:host-context(.textfield.mod-framed).textfield-input,:host-context(.form.mod-framed).textfield-input{padding:var(--components-select-framed-top-padding) 0 0}:host-context(.textfield.mod-framed).textfield-input:after,:host-context(.form.mod-framed).textfield-input:after{color:var(--palettes-grey-500);bottom:var(--components-select-framed-bottom-padding);right:var(--spacings-XS)}:host-context(.textfield.mod-framed).textfield-input .lu-select-value,:host-context(.form.mod-framed).textfield-input .lu-select-value{padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-placeholder,:host-context(.form.mod-framed).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400);padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-suffix,:host-context(.form.mod-framed).textfield-input .lu-select-suffix{bottom:var(--components-select-framed-bottom-padding);right:1.7rem}:host-context(.textfield.mod-filter) .lu-select-value,:host-context(.textfield.mod-filter) .lu-select-placeholder{padding:0;height:auto;padding-top:var(--spacings-S);color:var(--palettes-grey-800)}:host-context(.textfield.mod-material):after{color:var(--palettes-grey-500);bottom:.6rem;right:0}:host-context(.textfield.mod-material) .lu-select-value,:host-context(.textfield.mod-material) .lu-select-placeholder{padding-left:0;padding-right:.8rem}:host-context(.textfield.mod-material) .lu-select-suffix{right:calc(2 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material).is-select .lu-select-placeholder{display:none}:host-context(.textfield.mod-material).mod-search:after{bottom:0}:host-context(.textfield.mod-material).mod-search .lu-select-suffix{right:calc(2.75 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material .textfield-input.is-focused) .lu-select-placeholder{display:none}:host(.mod-multiple) .lu-select-value{height:auto;align-items:center}:host(.mod-multiple) .lu-select-display-wrapper{overflow:visible;white-space:normal;margin-bottom:calc(var(--spacings-XXS) * -1)}:host-context(.textfield.mod-outlined).textfield-input:after{color:var(--palettes-grey-600)}:host-context(.textfield.mod-outlined).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error):after{color:var(--palettes-error-600)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-filled) .lu-select-placeholder{display:none}:host-context(.textfield-input.is-filled) .lu-select-value{display:flex;align-items:flex-start}:host-context(.textfield .textfield-input.is-focused):after{transform:rotate(-180deg)}:host-context(.textfield-input.is-clearable) .lu-select-value{padding-right:3.5rem}:host-context(.textfield-input.is-error):after{color:var(--palettes-error-700)}:host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]):after{color:var(--commons-disabled-color)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]) .lu-select-placeholder{color:var(--commons-disabled-placeholder)}.lu-picker-header .option-selector{display:none}.lu-picker-header.mod-multiple .option-selector{display:inherit}.optionGroupName{padding:var(--components-options-item-padding-vertical) var(--components-options-item-padding-horizontal) var(--spacings-XXS);border-radius:0;font-size:var(--sizes-S-fontSize);line-height:var(--sizes-S-lineHeight);width:100%;justify-content:flex-start;font-weight:600;color:var(--palettes-grey-600);text-decoration:underline}.optionGroupName.mod-readonly{text-decoration:none}.optionGroupName.button{text-decoration:underline;margin:0}.optionGroupName.button:active,.optionGroupName.button:focus,.optionGroupName.button:hover{box-shadow:none;background-color:transparent}.optionGroupName.button:active~.lu-picker-content-option lu-option,.optionGroupName.button:focus~.lu-picker-content-option lu-option,.optionGroupName.button:hover~.lu-picker-content-option lu-option{background-color:var(--palettes-grey-50);border-radius:var(--commons-borderRadius-M)}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: OverlayModule }, { kind: "component", type: LuInputClearerComponent, selector: "lu-input-clearer", outputs: ["onClear"], exportAs: ["luClearer"] }, { kind: "component", type: LuOptionPickerAdvancedComponent, selector: "lu-option-picker-advanced", exportAs: ["LuOptionPickerAdvanced"] }, { kind: "component", type: LuEstablishmentSearcherComponent, selector: "lu-establishment-searcher", inputs: ["filters", "appInstanceId", "operations", "sort"], outputs: ["isSearching"] }, { kind: "component", type: LuEstablishmentSelectAllComponent, selector: "lu-establishment-select-all", inputs: ["filters", "appInstanceId", "operations"] }, { kind: "directive", type: LuLegalUnitSelectorDirective, selector: "[luLegalUnitSelector]", inputs: ["luLegalUnitSelector", "luLegalUnitSelectorFilters", "luLegalUnitSelectorAppInstanceId", "luLegalUnitSelectorOperations"] }, { kind: "component", type: LuOptionItemComponent, selector: "lu-option", inputs: ["selected", "highlighted", "value", "disabled"], outputs: ["onSelect"] }, { kind: "directive", type: LuForLegalUnitsDirective, selector: "[luForLegalUnits]" }, { kind: "directive", type: LuInputDisplayerDirective, selector: "[luDisplayer]", inputs: ["luDisplayerMultiple", "multiple"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-establishment-select', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [
                        CommonModule,
                        OverlayModule,
                        LuInputClearerComponent,
                        LuOptionPickerAdvancedComponent,
                        LuEstablishmentSearcherComponent,
                        LuEstablishmentSelectAllComponent,
                        LuLegalUnitSelectorDirective,
                        LuOptionItemComponent,
                        LuForLegalUnitsDirective,
                        LuInputDisplayerDirective,
                    ], providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => LuEstablishmentSelectInputComponent),
                            multi: true,
                        },
                        {
                            provide: ALuEstablishmentService,
                            useClass: LuEstablishmentService,
                        },
                        {
                            provide: ALuLegalUnitService,
                            useClass: LuLegalUnitService,
                        },
                    ], template: "<div class=\"lu-select-placeholder\">{{ placeholder }}</div>\n<div class=\"lu-select-value\">\n\t<div class=\"lu-select-display-wrapper\">\n\t\t<ng-container #display></ng-container>\n\t</div>\n</div>\n<div class=\"lu-select-suffix\">\n\t<lu-input-clearer></lu-input-clearer>\n</div>\n\n<ng-template luDisplayer [luDisplayerMultiple]=\"true\" let-values>\n\t<span *ngIf=\"multiple && values?.length > 1; else singleView\"\n\t\t><span class=\"numericBadge\">{{ values.length }}</span> {{ intl.establishments }}</span\n\t>\n\t<ng-template #singleView>{{ (values[0] || values).name }}</ng-template>\n</ng-template>\n\n<lu-option-picker-advanced [option-comparer]=\"byId\">\n\t<header class=\"lu-picker-header\">\n\t\t<lu-establishment-searcher\n\t\t\t[filters]=\"filters\"\n\t\t\t[appInstanceId]=\"appInstanceId\"\n\t\t\t[operations]=\"operations\"\n\t\t\t[sort]=\"sort\"\n\t\t\t(isSearching)=\"onIsSearchingChanged($event)\"\n\t\t></lu-establishment-searcher>\n\t\t<lu-establishment-select-all\n\t\t\t*ngIf=\"multiple\"\n\t\t\tclass=\"u-displayBlock\"\n\t\t\t[class.u-displayNone]=\"isSearching\"\n\t\t\t[filters]=\"filters\"\n\t\t\t[appInstanceId]=\"appInstanceId\"\n\t\t\t[operations]=\"operations\"\n\t\t></lu-establishment-select-all>\n\t</header>\n\n\t<ng-template luForLegalUnits let-group>\n\t\t<div class=\"optionGroup\">\n\t\t\t<ng-container *ngIf=\"groupByLu && !isSearching\">\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t*ngIf=\"multiple; else singleViewGroup\"\n\t\t\t\t\tclass=\"optionGroupName button mod-text mod-block\"\n\t\t\t\t\t[luLegalUnitSelector]=\"group.key\"\n\t\t\t\t\t[luLegalUnitSelectorFilters]=\"filters\"\n\t\t\t\t\t[luLegalUnitSelectorAppInstanceId]=\"appInstanceId\"\n\t\t\t\t\t[luLegalUnitSelectorOperations]=\"operations\"\n\t\t\t\t>\n\t\t\t\t\t{{ group.key.name }}\n\t\t\t\t</button>\n\t\t\t\t<ng-template #singleViewGroup>\n\t\t\t\t\t<h5 class=\"optionGroupName mod-readonly u-margin0\">{{ group.key.name }}</h5>\n\t\t\t\t</ng-template>\n\t\t\t</ng-container>\n\n\t\t\t<div class=\"lu-picker-content-option\">\n\t\t\t\t<lu-option *ngFor=\"let establishment of group.items; trackBy: trackById\" [value]=\"establishment\" class=\"establishmentOption\">\n\t\t\t\t\t<ng-container *ngIf=\"isSearching; else emptySearch\">\n\t\t\t\t\t\t<span class=\"u-displayBlock\">{{ establishment.name }}</span>\n\t\t\t\t\t\t<span *ngIf=\"groupByLu\" class=\"u-displayBlock u-textLight u-textS\">{{ group.key.name }}</span>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-template #emptySearch>\n\t\t\t\t\t\t<span>{{ establishment.name }}</span>\n\t\t\t\t\t</ng-template>\n\t\t\t\t</lu-option>\n\t\t\t</div>\n\t\t</div>\n\t</ng-template>\n</lu-option-picker-advanced>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{--components-select-input-padding-horizontal: var(--spacings-XS);--components-select-input-padding-vertical: var(--spacings-XS);--components-select-framed-color: var(--palettes-grey-500);--components-select-framed-color50: var(--palettes-grey-50);--components-select-framed-see-through: var(--palettes-grey-50);--components-select-framed-text: var(--palettes-grey-800);--components-select-framed-placeholder: #cccccc;--components-select-framed-side-padding: var(--spacings-S);--components-select-framed-top-padding: var(--spacings-L);--components-select-framed-bottom-padding: var(--spacings-S);--components-select-framed-label-top-offset: var(--spacings-XS);cursor:pointer;outline:none;padding:0;gap:0}:host:after{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons;color:var(--palettes-grey-600);bottom:var(--components-select-input-padding-vertical);font-size:var(--sizes-M-lineHeight);line-height:var(--sizes-M-lineHeight);pointer-events:none;position:absolute;right:var(--components-select-input-padding-horizontal);transition:transform var(--commons-animations-durations-standard) ease}@supports (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"/\"\"}}@supports not (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"}}:host[disabled],:host.is-disabled{cursor:not-allowed;pointer-events:all}.lu-select-display-wrapper{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.lu-select-value{line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);display:none}.lu-select-placeholder{color:var(--palettes-grey-400);line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.lu-select-suffix,.lu-select-clearer{position:absolute;bottom:.75rem;right:2.25rem}::ng-deep .lu-select-value .label{padding:var(--spacings-XXS) var(--spacings-XS);margin-left:0}::ng-deep .lu-select-value .chip{vertical-align:baseline;max-width:100%;margin:0 var(--spacings-XXS) var(--spacings-XXS) 0;text-overflow:ellipsis;overflow:hidden;vertical-align:top;white-space:nowrap}:host-context(.textfield.mod-S){padding:0}:host-context(.textfield.mod-S) .lu-select-value,:host-context(.textfield.mod-S) .lu-select-placeholder{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-XS-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-XS-lineHeight))}:host-context(.textfield.mod-S) .lu-select-clearer{bottom:var(--spacings-XS)}:host-context(.textfield.mod-S):after{line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-S-lineHeight)}:host-context(.textfield.mod-S) .lu-select-suffix{bottom:.5rem;right:2rem}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .label{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-S-lineHeight);font-weight:600;margin:0;padding:0;background-color:transparent}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .chip{height:var(--sizes-XS-lineHeight);line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-XS-fontSize);padding-left:var(--spacings-XXS);padding-right:var(--spacings-XXS);gap:var(--spacings-XXS)}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .numericBadge{--components-numericBadge-size: 1.25rem;--components-numericBadge-borderRadius: 6px;--components-numericBadge-fontSize: var(--sizes-XS-fontSize);--components-numericBadge-lineHeight: var(--sizes-XS-lineHeight)}:host-context(.textfield.mod-framed).textfield-input,:host-context(.form.mod-framed).textfield-input{padding:var(--components-select-framed-top-padding) 0 0}:host-context(.textfield.mod-framed).textfield-input:after,:host-context(.form.mod-framed).textfield-input:after{color:var(--palettes-grey-500);bottom:var(--components-select-framed-bottom-padding);right:var(--spacings-XS)}:host-context(.textfield.mod-framed).textfield-input .lu-select-value,:host-context(.form.mod-framed).textfield-input .lu-select-value{padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-placeholder,:host-context(.form.mod-framed).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400);padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-suffix,:host-context(.form.mod-framed).textfield-input .lu-select-suffix{bottom:var(--components-select-framed-bottom-padding);right:1.7rem}:host-context(.textfield.mod-filter) .lu-select-value,:host-context(.textfield.mod-filter) .lu-select-placeholder{padding:0;height:auto;padding-top:var(--spacings-S);color:var(--palettes-grey-800)}:host-context(.textfield.mod-material):after{color:var(--palettes-grey-500);bottom:.6rem;right:0}:host-context(.textfield.mod-material) .lu-select-value,:host-context(.textfield.mod-material) .lu-select-placeholder{padding-left:0;padding-right:.8rem}:host-context(.textfield.mod-material) .lu-select-suffix{right:calc(2 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material).is-select .lu-select-placeholder{display:none}:host-context(.textfield.mod-material).mod-search:after{bottom:0}:host-context(.textfield.mod-material).mod-search .lu-select-suffix{right:calc(2.75 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material .textfield-input.is-focused) .lu-select-placeholder{display:none}:host(.mod-multiple) .lu-select-value{height:auto;align-items:center}:host(.mod-multiple) .lu-select-display-wrapper{overflow:visible;white-space:normal;margin-bottom:calc(var(--spacings-XXS) * -1)}:host-context(.textfield.mod-outlined).textfield-input:after{color:var(--palettes-grey-600)}:host-context(.textfield.mod-outlined).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error):after{color:var(--palettes-error-600)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-filled) .lu-select-placeholder{display:none}:host-context(.textfield-input.is-filled) .lu-select-value{display:flex;align-items:flex-start}:host-context(.textfield .textfield-input.is-focused):after{transform:rotate(-180deg)}:host-context(.textfield-input.is-clearable) .lu-select-value{padding-right:3.5rem}:host-context(.textfield-input.is-error):after{color:var(--palettes-error-700)}:host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]):after{color:var(--commons-disabled-color)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]) .lu-select-placeholder{color:var(--commons-disabled-placeholder)}.lu-picker-header .option-selector{display:none}.lu-picker-header.mod-multiple .option-selector{display:inherit}.optionGroupName{padding:var(--components-options-item-padding-vertical) var(--components-options-item-padding-horizontal) var(--spacings-XXS);border-radius:0;font-size:var(--sizes-S-fontSize);line-height:var(--sizes-S-lineHeight);width:100%;justify-content:flex-start;font-weight:600;color:var(--palettes-grey-600);text-decoration:underline}.optionGroupName.mod-readonly{text-decoration:none}.optionGroupName.button{text-decoration:underline;margin:0}.optionGroupName.button:active,.optionGroupName.button:focus,.optionGroupName.button:hover{box-shadow:none;background-color:transparent}.optionGroupName.button:active~.lu-picker-content-option lu-option,.optionGroupName.button:focus~.lu-picker-content-option lu-option,.optionGroupName.button:hover~.lu-picker-content-option lu-option{background-color:var(--palettes-grey-50);border-radius:var(--commons-borderRadius-M)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1$2.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }, { type: LuLegalUnitService, decorators: [{
                    type: Inject,
                    args: [ALuLegalUnitService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: LuLegalUnitService, decorators: [{
                    type: Inject,
                    args: [ALuLegalUnitService]
                }, {
                    type: Self
                }] }, { type: LuEstablishmentService, decorators: [{
                    type: Inject,
                    args: [ALuEstablishmentService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: LuEstablishmentService, decorators: [{
                    type: Inject,
                    args: [ALuEstablishmentService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { filters: [{
                type: Input
            }], appInstanceId: [{
                type: Input
            }], operations: [{
                type: Input
            }] } });

class LuEstablishmentSelectInputModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectInputModule, imports: [LuEstablishmentSelectInputComponent], exports: [LuEstablishmentSelectInputComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectInputModule, imports: [LuEstablishmentSelectInputComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectInputModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuEstablishmentSelectInputComponent],
                    exports: [LuEstablishmentSelectInputComponent],
                }]
        }] });

class LuEstablishmentSelectModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectModule, imports: [LuEstablishmentSelectInputComponent, LuEstablishmentSearcherComponent, LuForLegalUnitsDirective, LuLegalUnitSelectorDirective, LuEstablishmentSelectAllComponent], exports: [LuEstablishmentSelectInputComponent, LuEstablishmentSearcherComponent, LuForLegalUnitsDirective, LuLegalUnitSelectorDirective, LuEstablishmentSelectAllComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectModule, imports: [LuEstablishmentSelectInputComponent, LuEstablishmentSearcherComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentSelectModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuEstablishmentSelectInputComponent, LuEstablishmentSearcherComponent, LuForLegalUnitsDirective, LuLegalUnitSelectorDirective, LuEstablishmentSelectAllComponent],
                    exports: [LuEstablishmentSelectInputComponent, LuEstablishmentSearcherComponent, LuForLegalUnitsDirective, LuLegalUnitSelectorDirective, LuEstablishmentSelectAllComponent],
                }]
        }] });

class LuEstablishmentModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentModule, imports: [LuEstablishmentSelectModule], exports: [LuEstablishmentSelectModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentModule, imports: [LuEstablishmentSelectModule, LuEstablishmentSelectModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuEstablishmentModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuEstablishmentSelectModule],
                    exports: [LuEstablishmentSelectModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ALuEstablishmentService, ALuLegalUnitService, LU_ESTABLISHMENT_SELECT_INPUT_TRANSLATIONS, LuEstablishmentModule, LuEstablishmentSearcherComponent, LuEstablishmentSearcherModule, LuEstablishmentSelectAllComponent, LuEstablishmentSelectAllModule, LuEstablishmentSelectInputComponent, LuEstablishmentSelectInputModule, LuEstablishmentSelectModule, LuEstablishmentService, LuForLegalUnitsDirective, LuForLegalUnitsModule, LuLegalUnitSelectorDirective, LuLegalUnitSelectorModule, LuLegalUnitService, luEstablishmentSelectAllTranslations, luEstablishmentSelectInputTranslations };
//# sourceMappingURL=lucca-front-ng-establishment.mjs.map
