import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Inject, NgModule } from '@angular/core';
import * as i1 from '@angular/router';
import { ActivationEnd, RouterModule, TitleStrategy } from '@angular/router';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { switchMap, map, filter, distinctUntilChanged, tap } from 'rxjs/operators';
import * as i2 from '@angular/platform-browser';

const LU_TITLE_TRANSLATE_SERVICE = new InjectionToken('LU_TITLE_TRANSLATE_SERVICE');

const TitleSeparator = ' – ';

/**
 * @deprecated use Title strategy instead
 */
class LuTitleService {
    constructor(router, title, translateService) {
        this.router = router;
        this.title = title;
        this.translateService = translateService;
        this.titlePartsSubject = new BehaviorSubject(['Lucca']);
        this.titleParts$ = this.titlePartsSubject.asObservable();
        this.title$ = this.titleParts$.pipe(switchMap((titleParts) => combineLatest(titleParts.map((part) => (typeof part === 'string' ? of(part) : part)))), map((parts) => parts.join(TitleSeparator)));
    }
    init(applicationNameTranslationKey) {
        this.router.events
            .pipe(filter((event) => {
            return event instanceof ActivationEnd && event.snapshot.children.length === 0;
        }), map((event) => getPageTitleParts(event.snapshot)), map((titleParts) => uniqTitle$1(titleParts)), map((titleParts) => titleParts.filter(({ title }) => title !== '').map(({ title, params }) => this.translateService.translate(title, params))), map((titleParts) => [...titleParts, this.translateService.translate(applicationNameTranslationKey, {}), 'Lucca'].filter((x) => !!x)), distinctUntilChanged(), tap((titleParts) => this.titlePartsSubject.next(titleParts)))
            .subscribe();
        this.title$.pipe(tap((title) => this.title.setTitle(title))).subscribe();
    }
    prependTitle(title) {
        this.titlePartsSubject.next([title, ...this.titlePartsSubject.value]);
    }
    overrideFirstTitlePart(title) {
        this.titlePartsSubject.next([title, ...this.titlePartsSubject.value.slice(1)]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTitleService, deps: [{ token: i1.Router }, { token: i2.Title }, { token: LU_TITLE_TRANSLATE_SERVICE }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTitleService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTitleService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.Title }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LU_TITLE_TRANSLATE_SERVICE]
                }] }]; } });
function getPageTitleParts(snapshot) {
    const pageTitle = {
        title: (snapshot.data?.['title'] || ''),
        params: { ...snapshot.params, ...snapshot.data },
    };
    return snapshot.parent ? [pageTitle, ...getPageTitleParts(snapshot.parent)] : [pageTitle];
}
function uniqTitle$1(titleParts) {
    return titleParts.filter(({ title }, index) => titleParts.findIndex((pageTitle) => pageTitle.title === title) === index);
}

/**
 * @deprecated use title streatgy instead
 */
class LuTitleModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTitleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuTitleModule, imports: [RouterModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTitleModule, providers: [LuTitleService], imports: [RouterModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTitleModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [RouterModule],
                    providers: [LuTitleService],
                }]
        }] });

const APP_TITLE = new InjectionToken('APP_TITLE');
class LuTitleStrategy extends TitleStrategy {
    constructor(title, translateService, appTitle) {
        super();
        this.title = title;
        this.translateService = translateService;
        this.appTitle = appTitle;
        this.titlePartsSubject = new BehaviorSubject(['Lucca']);
        this.titleParts$ = this.titlePartsSubject.asObservable();
        this.title$ = this.titleParts$.pipe(switchMap((titleParts) => combineLatest(titleParts.map((part) => (typeof part === 'string' ? of(part) : part)))), map((parts) => parts.join(TitleSeparator)), distinctUntilChanged());
        this.title$.pipe(tap((title) => this.title.setTitle(title))).subscribe();
    }
    updateTitle(routerState) {
        // Title page is display from child to root
        const pageTitles = this.#getPageTitleParts(routerState.root).reverse();
        const translatedPageTitles = uniqTitle(pageTitles)
            .filter(({ title }) => title !== '')
            .map(({ title, params }) => this.translateService.translate(title, params));
        // Add the name app and 'Lucca' at the end of the title
        const titleParts = [...translatedPageTitles, this.translateService.translate(this.appTitle), 'Lucca'].filter((x) => !!x);
        this.titlePartsSubject.next(titleParts);
    }
    prependTitle(title) {
        this.titlePartsSubject.next([title, ...this.titlePartsSubject.value]);
    }
    overrideFirstTitlePart(title) {
        this.titlePartsSubject.next([title, ...this.titlePartsSubject.value.slice(1)]);
    }
    #getPageTitleParts(snapshot) {
        const pageTitle = {
            title: this.getResolvedTitleForRoute(snapshot),
            params: { ...snapshot.params, ...snapshot.data },
        };
        return snapshot.firstChild ? [pageTitle, ...this.#getPageTitleParts(snapshot.firstChild)] : [pageTitle];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTitleStrategy, deps: [{ token: i2.Title }, { token: LU_TITLE_TRANSLATE_SERVICE }, { token: APP_TITLE }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTitleStrategy, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTitleStrategy, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i2.Title }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LU_TITLE_TRANSLATE_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [APP_TITLE]
                }] }]; } });
function uniqTitle(titleParts) {
    return titleParts.filter(({ title }, index) => titleParts.findIndex((pageTitle) => pageTitle.title === title) === index);
}

/**
 * Generated bundle index. Do not edit.
 */

export { APP_TITLE, LU_TITLE_TRANSLATE_SERVICE, LuTitleModule, LuTitleService, LuTitleStrategy, TitleSeparator };
//# sourceMappingURL=lucca-front-ng-title.mjs.map
