import * as i0 from '@angular/core';
import { EventEmitter, Directive, Input, Output, HostBinding, HostListener, NgModule, forwardRef, TemplateRef, Component, ChangeDetectionStrategy, ViewChild, ContentChildren } from '@angular/core';
import { ALuPopoverTrigger, LuPopoverTarget, ALuPopoverPanel, luTransformPopover } from '@lucca-front/ng/popover';
import * as i1 from '@angular/cdk/overlay';
import { OverlayModule } from '@angular/cdk/overlay';
import { Subscription, merge } from 'rxjs';
import { startWith, map, delay, share, switchMap, debounceTime } from 'rxjs/operators';
import * as i1$1 from '@angular/common';
import { CommonModule } from '@angular/common';

/**
 * This directive is intended to be used in conjunction with an lu-dropdown tag.  It is
 * responsible for toggling the display of the provided dropdown instance.
 */
class LuDropdownTriggerDirective extends ALuPopoverTrigger {
    /** References the popover instance that the trigger is associated with. */
    set inputPanel(p) {
        this.panel = p;
    }
    /** how you want to position the panel relative to the target, allowed values: above, below, before, after */
    set inputPosition(pos) {
        this.target.position = pos;
    }
    /** how the panel will be align with the target, allowed values: top, bottom, left, right */
    set inputAlignment(al) {
        this.target.alignment = al;
    }
    /** disable popover apparition */
    set inputDisabled(d) {
        this.disabled = d;
    }
    /** set to true if you want the panel to appear on top of the target */
    set inputOverlap(ov) {
        this.target.overlap = ov;
    }
    /** accessibility attribute - dont override */
    get _attrAriaExpanded() {
        return this._popoverOpen;
    }
    /** accessibility attribute - dont override */
    get _attrId() {
        return this._triggerId;
    }
    /** accessibility attribute - dont override */
    get _attrAriaControls() {
        return this._panelId;
    }
    constructor(_overlay, _elementRef, _viewContainerRef) {
        super(_overlay, _elementRef, _viewContainerRef);
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        /** Event emitted when the associated popover is opened. */
        this.onOpen = new EventEmitter();
        /** Event emitted when the associated popover is closed. */
        this.onClose = new EventEmitter();
        this.target = new LuPopoverTarget();
        this.target.elementRef = this._elementRef;
        this._triggerId = this._elementRef.nativeElement.getAttribute('id') || this._triggerId;
        this.triggerEvent = 'click';
        this.target.position = 'below';
        this.target.alignment = 'right';
    }
    onClick() {
        super.onClick();
    }
    ngAfterViewInit() {
        this._checkPanel();
        this._checkTarget();
    }
    ngOnDestroy() {
        this._cleanUpSubscriptions();
        if (this._popoverOpen) {
            this.closePopover();
        }
        this.destroyPopover();
    }
    _emitOpen() {
        this.onOpen.emit();
    }
    _emitClose() {
        this.onClose.emit();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownTriggerDirective, deps: [{ token: i1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuDropdownTriggerDirective, selector: "[luDropdown]", inputs: { inputPanel: ["luDropdown", "inputPanel"], inputPosition: ["luDropdownPosition", "inputPosition"], inputAlignment: ["luDropdownAlignment", "inputAlignment"], inputDisabled: ["luDropdownDisabled", "inputDisabled"], inputOverlap: ["luDropdownOverlap", "inputOverlap"] }, outputs: { onOpen: "luDropdownOnOpen", onClose: "luDropdownOnClose" }, host: { listeners: { "click": "onClick()" }, properties: { "attr.aria-expanded": "this._attrAriaExpanded", "attr.id": "this._attrId", "attr.aria-controls": "this._attrAriaControls" } }, exportAs: ["LuDropdownTrigger"], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luDropdown]',
                    exportAs: 'LuDropdownTrigger',
                }]
        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }]; }, propDecorators: { inputPanel: [{
                type: Input,
                args: ['luDropdown']
            }], inputPosition: [{
                type: Input,
                args: ['luDropdownPosition']
            }], inputAlignment: [{
                type: Input,
                args: ['luDropdownAlignment']
            }], inputDisabled: [{
                type: Input,
                args: ['luDropdownDisabled']
            }], inputOverlap: [{
                type: Input,
                args: ['luDropdownOverlap']
            }], onOpen: [{
                type: Output,
                args: ['luDropdownOnOpen']
            }], onClose: [{
                type: Output,
                args: ['luDropdownOnClose']
            }], _attrAriaExpanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }], _attrId: [{
                type: HostBinding,
                args: ['attr.id']
            }], _attrAriaControls: [{
                type: HostBinding,
                args: ['attr.aria-controls']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });

class LuDropdownTriggerModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownTriggerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownTriggerModule, declarations: [LuDropdownTriggerDirective], imports: [OverlayModule], exports: [LuDropdownTriggerDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownTriggerModule, imports: [OverlayModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownTriggerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [LuDropdownTriggerDirective],
                    imports: [OverlayModule],
                    exports: [LuDropdownTriggerDirective],
                }]
        }] });

class ALuDropdownItem {
}

class LuDropdownItemDirective extends ALuDropdownItem {
    constructor(_eltRef) {
        super();
        this._eltRef = _eltRef;
        // arreter les ONxxxx
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onSelect = new EventEmitter();
    }
    onClick() {
        this.onSelect.emit(true);
    }
    onEnter() {
        this.onSelect.emit(true);
    }
    focus() {
        this._eltRef.nativeElement.focus();
    }
    ngOnDestroy() {
        this.onSelect.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownItemDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuDropdownItemDirective, selector: "[luDropdownItem]", outputs: { onSelect: "onSelect" }, host: { listeners: { "click": "onClick($event)", "keydown.enter": "onEnter($event)" } }, providers: [
            {
                provide: ALuDropdownItem,
                useExisting: forwardRef(() => LuDropdownItemDirective),
                multi: true,
            },
        ], exportAs: ["LuDropdownItem"], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luDropdownItem]',
                    exportAs: 'LuDropdownItem',
                    providers: [
                        {
                            provide: ALuDropdownItem,
                            useExisting: forwardRef(() => LuDropdownItemDirective),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { onSelect: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }], onEnter: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }] } });

class LuDropdownItemModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownItemModule, declarations: [LuDropdownItemDirective], exports: [LuDropdownItemDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownItemModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownItemModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [LuDropdownItemDirective],
                    imports: [],
                    exports: [LuDropdownItemDirective],
                }]
        }] });

class LuDropdownPanelComponent extends ALuPopoverPanel {
    /**
     * This method takes classes set on the host lu-popover element and applies them on the
     * popover template that displays in the overlay container.  Otherwise, it's difficult
     * to style the containing popover from outside the component.
     * @param classes list of class names
     */
    set inputPanelClasses(classes) {
        this.panelClasses = classes;
    }
    /**
     * This method takes classes set on the host lu-popover element and applies them on the
     * popover template that displays in the overlay container. Otherwise, it's difficult
     * to style the containing popover from outside the component.
     * @param classes list of class names
     */
    set inputContentClasses(classes) {
        this.contentClasses = classes;
    }
    set vcTemplateRef(tr) {
        this.templateRef = tr;
    }
    set optionsQL(ql) {
        this._itemsQL = ql;
    }
    constructor() {
        super();
        /** Event emitted when the popover is closed. */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.close = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.open = new EventEmitter();
        this.hovered = new EventEmitter();
        // protected _highlightIndex = -1;
        // get highlightIndex() { return this._highlightIndex; }
        // set highlightIndex(i: number) {
        // 	this._highlightIndex = i;
        // 	this._applyHighlight();
        // }
        this._items = [];
        this._subs = new Subscription();
    }
    initItems() {
        const items$ = this._itemsQL.changes.pipe(startWith(this._itemsQL), map((ql) => ql.toArray()), delay(0), share());
        const itemsSub = items$.subscribe((i) => (this._items = i || []));
        this._subs.add(itemsSub);
        // this.highlightIndex = -1;
        const singleFlow$ = items$.pipe(switchMap((items) => merge(...items.map((i) => i.onSelect))), debounceTime(1));
        const itemSelectSub = singleFlow$.subscribe(() => this.close.emit());
        this._subs.add(itemSelectSub);
    }
    ngAfterViewInit() {
        this.initItems();
    }
    ngOnDestroy() {
        this.onClose();
        this.close.complete();
        this._subs.unsubscribe();
    }
    _emitCloseEvent() {
        this.close.emit();
    }
    _emitOpenEvent() {
        this.open.emit();
    }
    _emitHoveredEvent(hovered) {
        this.hovered.emit(hovered);
    }
    onOpen() {
        this.focusFirstItem();
    }
    focusFirstItem() {
        const firstItem = this._items[0];
        if (firstItem) {
            firstItem.focus();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuDropdownPanelComponent, selector: "lu-dropdown", inputs: { inputPanelClasses: ["panel-classes", "inputPanelClasses"], inputContentClasses: ["content-classes", "inputContentClasses"] }, outputs: { close: "close", open: "open", hovered: "hovered" }, queries: [{ propertyName: "optionsQL", predicate: ALuDropdownItem, descendants: true }], viewQueries: [{ propertyName: "vcTemplateRef", first: true, predicate: TemplateRef, descendants: true, static: true }], exportAs: ["LuDropdownPanel"], usesInheritance: true, ngImport: i0, template: "<ng-template>\n\t<div\n\t\tclass=\"lu-dropdown-panel lu-popover-panel\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t(keydown)=\"_handleKeydown($event)\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t\t[attr.id]=\"panelId\"\n\t\t[attr.aria-labelledby]=\"triggerId\"\n\t\t[@transformPopover]=\"'enter'\"\n\t>\n\t\t<div class=\"lu-popover-content lu-dropdown-content\" [ngClass]=\"contentClassesMap\">\n\t\t\t<ul class=\"lu-dropdown-options\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], animations: [luTransformPopover], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-dropdown', changeDetection: ChangeDetectionStrategy.OnPush, animations: [luTransformPopover], exportAs: 'LuDropdownPanel', template: "<ng-template>\n\t<div\n\t\tclass=\"lu-dropdown-panel lu-popover-panel\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t(keydown)=\"_handleKeydown($event)\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t\t[attr.id]=\"panelId\"\n\t\t[attr.aria-labelledby]=\"triggerId\"\n\t\t[@transformPopover]=\"'enter'\"\n\t>\n\t\t<div class=\"lu-popover-content lu-dropdown-content\" [ngClass]=\"contentClassesMap\">\n\t\t\t<ul class=\"lu-dropdown-options\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return []; }, propDecorators: { inputPanelClasses: [{
                type: Input,
                args: ['panel-classes']
            }], inputContentClasses: [{
                type: Input,
                args: ['content-classes']
            }], close: [{
                type: Output
            }], open: [{
                type: Output
            }], hovered: [{
                type: Output
            }], vcTemplateRef: [{
                type: ViewChild,
                args: [TemplateRef, { static: true }]
            }], optionsQL: [{
                type: ContentChildren,
                args: [ALuDropdownItem, { descendants: true }]
            }] } });

class LuDropdownPanelModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownPanelModule, declarations: [LuDropdownPanelComponent], imports: [CommonModule], exports: [LuDropdownPanelComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownPanelModule, imports: [CommonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownPanelModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [LuDropdownPanelComponent],
                    imports: [CommonModule],
                    exports: [LuDropdownPanelComponent],
                }]
        }] });

class LuDropdownModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownModule, imports: [LuDropdownTriggerModule, LuDropdownPanelModule, LuDropdownItemModule], exports: [LuDropdownTriggerModule, LuDropdownPanelModule, LuDropdownItemModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownModule, imports: [LuDropdownTriggerModule, LuDropdownPanelModule, LuDropdownItemModule, LuDropdownTriggerModule, LuDropdownPanelModule, LuDropdownItemModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDropdownModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuDropdownTriggerModule, LuDropdownPanelModule, LuDropdownItemModule],
                    exports: [LuDropdownTriggerModule, LuDropdownPanelModule, LuDropdownItemModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ALuDropdownItem, LuDropdownItemDirective, LuDropdownItemModule, LuDropdownModule, LuDropdownPanelComponent, LuDropdownPanelModule, LuDropdownTriggerDirective, LuDropdownTriggerModule };
//# sourceMappingURL=lucca-front-ng-dropdown.mjs.map
