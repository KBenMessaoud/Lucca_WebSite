import * as i0 from '@angular/core';
import { Pipe, NgModule, Injectable, LOCALE_ID, forwardRef, Component, ChangeDetectionStrategy, Inject, Input, InjectionToken, Directive, HostListener, EventEmitter, TemplateRef, Output, ViewChild } from '@angular/core';
import * as i1 from '@lucca-front/ng/core';
import { ELuDateGranularity, getIntl } from '@lucca-front/ng/core';
import * as i3 from '@angular/common';
import { getLocaleDayNames, FormStyle, TranslationWidth, getLocaleFirstDayOfWeek, CommonModule } from '@angular/common';
import * as i2 from '@angular/forms';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';
import { ALuInput, LuInputClearerComponent, LuInputDisplayerDirective, LuInputDirective } from '@lucca-front/ng/input';
import * as i4 from '@angular/cdk/a11y';
import { A11yModule } from '@angular/cdk/a11y';
import { ALuPickerPanel } from '@lucca-front/ng/picker';
import { luTransformPopover } from '@lucca-front/ng/popover';
import * as i1$1 from '@angular/cdk/overlay';
import { OverlayModule } from '@angular/cdk/overlay';
import { ALuSelectInputComponent } from '@lucca-front/ng/select';

class LuDateAdapterPipe {
    constructor(_adapter) {
        this._adapter = _adapter;
    }
    transform(d, format = 'mediumDate') {
        if (d && this._adapter.isValid(d)) {
            return this._adapter.format(d, format);
        }
        return '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateAdapterPipe, deps: [{ token: i1.ALuDateAdapter }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuDateAdapterPipe, isStandalone: true, name: "luDate" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateAdapterPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'luDate',
                    pure: true,
                    standalone: true,
                }]
        }], ctorParameters: function () { return [{ type: i1.ALuDateAdapter }]; } });

class LuDateAdapterModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateAdapterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuDateAdapterModule, imports: [LuDateAdapterPipe], exports: [LuDateAdapterPipe] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateAdapterModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateAdapterModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuDateAdapterPipe],
                    exports: [LuDateAdapterPipe],
                }]
        }] });

class ACalendarItem {
    constructor() {
        this.mods = [];
        this.isDisabled = false;
    }
    get id() {
        return `${this.granularity}-${this.date.toString()}`;
    }
}
class DayItem extends ACalendarItem {
    constructor(date, label) {
        super();
        this.date = date;
        this.label = label;
        this.granularity = ELuDateGranularity.day;
    }
}
class MonthItem extends ACalendarItem {
    constructor(date, label) {
        super();
        this.date = date;
        this.label = label;
        this.granularity = ELuDateGranularity.month;
    }
}
class YearItem extends ACalendarItem {
    constructor(date, label) {
        super();
        this.date = date;
        this.label = label;
        this.granularity = ELuDateGranularity.year;
    }
}
class DecadeItem extends ACalendarItem {
    constructor(date, label) {
        super();
        this.date = date;
        this.label = label;
        this.granularity = ELuDateGranularity.decade;
    }
}

class LuCalendarItemFactory {
    constructor(_adapter) {
        this._adapter = _adapter;
    }
    forgeDay(d, format = 'd') {
        const date = this._adapter.clone(d);
        return new DayItem(date, this._adapter.format(date, format));
    }
    forgeMonth(d, format = 'MMM') {
        const year = this._adapter.getYear(d);
        const month = this._adapter.getMonth(d);
        const monthStart = this._adapter.forge(year, month, 1);
        return new MonthItem(monthStart, this._adapter.format(monthStart, format));
    }
    forgeYear(d, format = 'y') {
        const year = this._adapter.getYear(d);
        const yearStart = this._adapter.forge(year, 1, 1);
        return new YearItem(yearStart, this._adapter.format(yearStart, format));
    }
    forgeDecade(d, format = 'y') {
        const year = this._adapter.getYear(d);
        const decadeStart = this._adapter.forge(10 * Math.floor(year / 10), 1, 1);
        const decadeEnd = this._adapter.forge(10 * Math.floor(year / 10) + 9, 1, 1);
        const label = `${this._adapter.format(decadeStart, format)} - ${this._adapter.format(decadeEnd, format)}`;
        return new DecadeItem(decadeStart, label);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuCalendarItemFactory, deps: [{ token: i1.ALuDateAdapter }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuCalendarItemFactory }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuCalendarItemFactory, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ALuDateAdapter }]; } });

class LuCalendarInputComponent extends ALuInput {
    get mod() {
        switch (this.viewGranularity) {
            case ELuDateGranularity.year:
                return 'mod-yearlyView';
            case ELuDateGranularity.month:
                return 'mod-monthlyView';
            case ELuDateGranularity.day:
            default:
                return 'mod-dailyView';
        }
    }
    constructor(_changeDetectorRef, _elementRef, _renderer, _locale, _factory, _adapter) {
        super(_changeDetectorRef, _elementRef, _renderer);
        this._locale = _locale;
        this._factory = _factory;
        this._adapter = _adapter;
        this.granularity = ELuDateGranularity.day;
        this.startOn = this._adapter.forgeToday();
        this.items = [];
        // daily view
        this.labels = [];
    }
    ngOnInit() {
        this.viewGranularity = this.granularity;
        this.initDayLabels();
    }
    writeValue(value) {
        const date = value && this._adapter.isValid(value) ? this._adapter.clone(value) : this.startOn;
        this.header = this._factory.forgeMonth(date);
        super.writeValue(value);
    }
    initDayLabels() {
        this.labels = [...getLocaleDayNames(this._locale, FormStyle.Standalone, TranslationWidth.Abbreviated)];
        if (getLocaleFirstDayOfWeek(this._locale) === 1) {
            this.labels.push(this.labels.shift());
        }
    }
    render() {
        switch (this.viewGranularity) {
            case ELuDateGranularity.year:
                this.renderYearlyView();
                break;
            case ELuDateGranularity.month:
                this.renderMonthlyView();
                break;
            case ELuDateGranularity.day:
            default:
                this.renderDailyView();
                break;
        }
    }
    renderDailyView(month = this.header.date) {
        this.items = [];
        const start = this._adapter.forge(this._adapter.getYear(month), this._adapter.getMonth(month), 1);
        let index = 0;
        const isFirstDayOfWeek = this._adapter.getDay(start) === getLocaleFirstDayOfWeek(this._locale);
        this.header = this._factory.forgeMonth(month, 'MMMM y');
        if (!isFirstDayOfWeek) {
            const offset = (this._adapter.getDay(start) - getLocaleFirstDayOfWeek(this._locale) + 7) % 7;
            index = -1 * offset;
        }
        // TODO
        let isFDOW = false;
        let isNextMonth = false;
        do {
            const d = this._adapter.add(start, index++, ELuDateGranularity.day);
            const day = this._factory.forgeDay(d);
            isNextMonth = this._adapter.compare(d, month, ELuDateGranularity.month) > 0;
            isFDOW = this._adapter.getDay(d) === getLocaleFirstDayOfWeek(this._locale);
            this.items.push(day);
        } while (!isFDOW || !isNextMonth);
        this.applyDailyMods();
    }
    renderMonthlyView(year = this.header.date) {
        this.header = this._factory.forgeYear(year);
        this.items = [...Array(12).keys()].map((i) => {
            const d = this._adapter.forge(this._adapter.getYear(year), i + 1, 1);
            return this._factory.forgeMonth(d);
        });
        this.applyMonthlyMods();
    }
    renderYearlyView(decade = this.header.date) {
        const year = Math.floor(this._adapter.getYear(decade) / 10) * 10;
        const d = this._adapter.forge(year, 1, 1);
        this.header = this._factory.forgeDecade(d);
        this.items = [...Array(10).keys()].map((i) => {
            const y = this._adapter.forge(year + i, 1, 1);
            return this._factory.forgeYear(y);
        });
        this.applyYearlyMods();
    }
    applyDailyMods() {
        const month = this.header.date;
        const today = this._adapter.forgeToday();
        const min = this.min && this._adapter.isValid(this.min) ? this.min : undefined;
        const max = this.max && this._adapter.isValid(this.max) ? this.max : undefined;
        this.items.forEach((item) => {
            const day = item.date;
            if (this._adapter.compare(day, month, ELuDateGranularity.month) < 0) {
                item.mods.push('is-previousMonth');
            }
            if (this._adapter.compare(day, month, ELuDateGranularity.month) > 0) {
                item.mods.push('is-nextMonth');
            }
            if (this._adapter.compare(day, today, ELuDateGranularity.day) === 0) {
                item.mods.push('is-today');
            }
            if (this.value && this._adapter.isValid(this.value) && this._adapter.compare(day, this.value, ELuDateGranularity.day) === 0) {
                item.mods.push('is-active');
            }
            if (min && this._adapter.compare(day, min, ELuDateGranularity.day) < 0) {
                item.isDisabled = true;
            }
            if (max && this._adapter.compare(day, max, ELuDateGranularity.day) > 0) {
                item.isDisabled = true;
            }
        });
    }
    applyMonthlyMods() {
        const today = this._adapter.forgeToday();
        const min = this.min && this._adapter.isValid(this.min) ? this.min : undefined;
        const max = this.max && this._adapter.isValid(this.max) ? this.max : undefined;
        this.items.forEach((item) => {
            const month = item.date;
            if (this._adapter.compare(month, today, ELuDateGranularity.month) === 0) {
                item.mods.push('is-today');
            }
            if (this.value && this._adapter.isValid(this.value) && this._adapter.compare(month, this.value, ELuDateGranularity.month) === 0) {
                item.mods.push('is-active');
            }
            if (min && this._adapter.compare(month, min, ELuDateGranularity.month) < 0) {
                item.isDisabled = true;
            }
            if (max && this._adapter.compare(month, max, ELuDateGranularity.month) > 0) {
                item.isDisabled = true;
            }
        });
    }
    applyYearlyMods() {
        const today = this._adapter.forgeToday();
        const min = this.min && this._adapter.isValid(this.min) ? this.min : undefined;
        const max = this.max && this._adapter.isValid(this.max) ? this.max : undefined;
        this.items.forEach((item) => {
            const year = item.date;
            if (this._adapter.compare(year, today, ELuDateGranularity.year) === 0) {
                item.mods.push('is-today');
            }
            if (this.value && this._adapter.isValid(this.value) && this._adapter.compare(year, this.value, ELuDateGranularity.year) === 0) {
                item.mods.push('is-active');
            }
            if (min && this._adapter.compare(year, min, ELuDateGranularity.year) < 0) {
                item.isDisabled = true;
            }
            if (max && this._adapter.compare(year, max, ELuDateGranularity.year) > 0) {
                item.isDisabled = true;
            }
        });
    }
    select(item) {
        switch (this.viewGranularity) {
            case ELuDateGranularity.year:
                this.selectYear(item);
                break;
            case ELuDateGranularity.month:
                this.selectMonth(item);
                break;
            case ELuDateGranularity.day:
            default:
                this.selectDay(item);
                break;
        }
    }
    selectDay(item) {
        const year = this._adapter.getYear(item.date);
        const month = this._adapter.getMonth(item.date);
        const d = this._adapter.forge(year, month, 1);
        this.header = this._factory.forgeMonth(d);
        this.setValue(item.date);
    }
    selectMonth(item) {
        if (this.granularity === ELuDateGranularity.month) {
            this.setValue(item.date);
        }
        else {
            this.header = item;
            this.viewGranularity = ELuDateGranularity.day;
            this.render();
        }
    }
    selectYear(item) {
        if (this.granularity === ELuDateGranularity.year) {
            this.setValue(item.date);
        }
        else {
            this.header = item;
            this.viewGranularity = ELuDateGranularity.month;
            this.render();
        }
    }
    previous() {
        switch (this.viewGranularity) {
            case ELuDateGranularity.year:
                this.previousDecade();
                break;
            case ELuDateGranularity.month:
                this.previousYear();
                break;
            case ELuDateGranularity.day:
            default:
                this.previousMonth();
                break;
        }
        this.render();
    }
    next() {
        switch (this.viewGranularity) {
            case ELuDateGranularity.year:
                this.nextDecade();
                break;
            case ELuDateGranularity.month:
                this.nextYear();
                break;
            case ELuDateGranularity.day:
            default:
                this.nextMonth();
                break;
        }
        this.render();
    }
    trackBy(_idx, item) {
        return item.id;
    }
    increaseGranularity() {
        if (this.header.granularity !== ELuDateGranularity.decade) {
            this.viewGranularity = this.header.granularity;
            this.render();
        }
    }
    nextMonth() {
        const d = this._adapter.add(this.header.date, 1, ELuDateGranularity.month);
        this.header = this._factory.forgeMonth(d);
    }
    nextYear() {
        const d = this._adapter.add(this.header.date, 1, ELuDateGranularity.year);
        this.header = this._factory.forgeYear(d);
    }
    nextDecade() {
        const d = this._adapter.add(this.header.date, 1, ELuDateGranularity.decade);
        this.header = this._factory.forgeDecade(d);
    }
    previousMonth() {
        const d = this._adapter.add(this.header.date, -1, ELuDateGranularity.month);
        this.header = this._factory.forgeMonth(d);
    }
    previousYear() {
        const d = this._adapter.add(this.header.date, -1, ELuDateGranularity.year);
        this.header = this._factory.forgeYear(d);
    }
    previousDecade() {
        const d = this._adapter.add(this.header.date, -1, ELuDateGranularity.decade);
        this.header = this._factory.forgeDecade(d);
    }
    validate(control) {
        const d = control.value;
        if (!d) {
            return null;
        }
        if (!this._adapter.isValid(d)) {
            return { date: true };
        }
        if (!!this.min && this._adapter.isValid(this.min) && this._adapter.compare(this.min, d, ELuDateGranularity.day) > 0) {
            return { min: true };
        }
        if (!!this.max && this._adapter.isValid(this.max) && this._adapter.compare(this.max, d, ELuDateGranularity.day) < 0) {
            return { max: true };
        }
        return null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuCalendarInputComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: LOCALE_ID }, { token: LuCalendarItemFactory }, { token: i1.ALuDateAdapter }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuCalendarInputComponent, isStandalone: true, selector: "lu-calendar", inputs: { min: "min", max: "max", granularity: "granularity", startOn: "startOn" }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => LuCalendarInputComponent),
                multi: true,
            },
            {
                provide: NG_VALIDATORS,
                useExisting: LuCalendarInputComponent,
                multi: true,
            },
            LuCalendarItemFactory,
        ], usesInheritance: true, ngImport: i0, template: "<section class=\"calendar\">\n\t<header class=\"calendar-header\">\n\t\t<button type=\"button\" class=\"actionIcon mod-S\" (click)=\"previous()\">\n\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon icon-arrowChevronLeft\"></span>\n\t\t\t<span class=\"u-mask\">Previous</span>\n\t\t</button>\n\t\t<button type=\"button\" class=\"calendar-header-date\" (click)=\"increaseGranularity()\">{{ header.label }}</button>\n\t\t<button type=\"button\" class=\"actionIcon mod-S\" (click)=\"next()\">\n\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon icon-arrowChevronRight\"></span>\n\t\t\t<span class=\"u-mask\">Next</span>\n\t\t</button>\n\t</header>\n\t<section class=\"calendar-labels\" [ngClass]=\"mod\">\n\t\t<div class=\"calendar-labels-item\" *ngFor=\"let label of labels\">{{ label }}</div>\n\t</section>\n\t<section class=\"calendar-grid\" [ngClass]=\"mod\">\n\t\t<button\n\t\t\ttype=\"button\"\n\t\t\t*ngFor=\"let item of items; trackBy: trackBy\"\n\t\t\tclass=\"calendar-grid-item\"\n\t\t\t[ngClass]=\"item.mods\"\n\t\t\t[disabled]=\"item.isDisabled\"\n\t\t\t(click)=\"select(item)\"\n\t\t>\n\t\t\t<div class=\"calendar-grid-item-content\">{{ item.label }}</div>\n\t\t</button>\n\t</section>\n</section>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.calendar{background-color:var(--colors-white-color);width:var(--components-calendar-width)}:host-context(.mod-block) .calendar{width:auto;max-width:var(--components-calendar-width)}.calendar-header{display:flex;align-items:center;justify-content:space-between}.calendar-header-date{font-weight:600;color:var(--palettes-grey-900);font-size:var(--sizes-L-fontSize);line-height:var(--sizes-L-lineHeight);padding:0;background:transparent;border:none;cursor:pointer}.calendar-header-date:focus-visible{outline:2px solid var(--palettes-primary-700);outline-offset:2px;border-radius:4px}.calendar-labels{display:none}.calendar-labels.mod-dailyView{display:flex;align-items:center;flex-wrap:wrap;text-align:center;height:var(--components-calendar-day-size);font-size:var(--sizes-S-fontSize);color:var(--palettes-primary-700)}.calendar-labels.mod-dailyView .calendar-labels-item{width:var(--components-calendar-day-size)}.calendar-grid{display:flex;text-align:center;align-self:stretch;flex-wrap:wrap;width:var(--components-calendar-width)}.calendar-grid.mod-dailyView .calendar-grid-item{width:var(--components-calendar-day-size)}.calendar-grid.mod-monthlyView .calendar-grid-item-content,.calendar-grid.mod-yearlyView .calendar-grid-item-content{width:5.83rem}.calendar-grid-item{height:var(--components-calendar-day-size);border:none;cursor:pointer;background:transparent;position:relative;padding:0;outline:none;color:var(--palettes-grey-800)}.calendar-grid-item.is-previousMonth,.calendar-grid-item.is-nextMonth{color:var(--palettes-grey-500)}.calendar-grid-item.is-today{color:var(--palettes-primary-700);font-weight:600}.calendar-grid-item.is-today:after{content:\"\";position:absolute;bottom:var(--spacings-XXS);left:var(--spacings-XS);right:var(--spacings-XS);height:2px;background:var(--palettes-primary-700);z-index:1}.calendar-grid-item:hover .calendar-grid-item-content{background:var(--palettes-grey-50)}.calendar-grid-item:active .calendar-grid-item-content{background:var(--palettes-grey-100)}.calendar-grid-item:focus-visible{outline:2px solid var(--palettes-primary-700);outline-offset:2px;border-radius:var(--commons-borderRadius-L);z-index:1}.calendar-grid-item.is-active .calendar-grid-item-content{background:var(--palettes-primary-700);color:var(--palettes-primary-text)}.calendar-grid-item.is-active.is-today:after{background:white!important;transition:background-color var(--commons-animations-durations-fast)}.calendar-grid-item.is-disabled,.calendar-grid-item[disabled]{color:var(--palettes-grey-500);pointer-events:none}.calendar-grid-item.is-disabled:hover .calendar-grid-item-content,.calendar-grid-item[disabled]:hover .calendar-grid-item-content{background-color:#fff}.calendar-grid-item-content{position:relative;height:var(--components-calendar-day-size);width:var(--components-calendar-day-size);line-height:var(--components-calendar-day-size);border-radius:var(--commons-borderRadius-L);transition-duration:var(--commons-animations-durations-fast);transition-property:background-color,color}\n"], dependencies: [{ kind: "ngmodule", type: FormsModule }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuCalendarInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-calendar', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [FormsModule, CommonModule], providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => LuCalendarInputComponent),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: LuCalendarInputComponent,
                            multi: true,
                        },
                        LuCalendarItemFactory,
                    ], template: "<section class=\"calendar\">\n\t<header class=\"calendar-header\">\n\t\t<button type=\"button\" class=\"actionIcon mod-S\" (click)=\"previous()\">\n\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon icon-arrowChevronLeft\"></span>\n\t\t\t<span class=\"u-mask\">Previous</span>\n\t\t</button>\n\t\t<button type=\"button\" class=\"calendar-header-date\" (click)=\"increaseGranularity()\">{{ header.label }}</button>\n\t\t<button type=\"button\" class=\"actionIcon mod-S\" (click)=\"next()\">\n\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon icon-arrowChevronRight\"></span>\n\t\t\t<span class=\"u-mask\">Next</span>\n\t\t</button>\n\t</header>\n\t<section class=\"calendar-labels\" [ngClass]=\"mod\">\n\t\t<div class=\"calendar-labels-item\" *ngFor=\"let label of labels\">{{ label }}</div>\n\t</section>\n\t<section class=\"calendar-grid\" [ngClass]=\"mod\">\n\t\t<button\n\t\t\ttype=\"button\"\n\t\t\t*ngFor=\"let item of items; trackBy: trackBy\"\n\t\t\tclass=\"calendar-grid-item\"\n\t\t\t[ngClass]=\"item.mods\"\n\t\t\t[disabled]=\"item.isDisabled\"\n\t\t\t(click)=\"select(item)\"\n\t\t>\n\t\t\t<div class=\"calendar-grid-item-content\">{{ item.label }}</div>\n\t\t</button>\n\t</section>\n</section>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.calendar{background-color:var(--colors-white-color);width:var(--components-calendar-width)}:host-context(.mod-block) .calendar{width:auto;max-width:var(--components-calendar-width)}.calendar-header{display:flex;align-items:center;justify-content:space-between}.calendar-header-date{font-weight:600;color:var(--palettes-grey-900);font-size:var(--sizes-L-fontSize);line-height:var(--sizes-L-lineHeight);padding:0;background:transparent;border:none;cursor:pointer}.calendar-header-date:focus-visible{outline:2px solid var(--palettes-primary-700);outline-offset:2px;border-radius:4px}.calendar-labels{display:none}.calendar-labels.mod-dailyView{display:flex;align-items:center;flex-wrap:wrap;text-align:center;height:var(--components-calendar-day-size);font-size:var(--sizes-S-fontSize);color:var(--palettes-primary-700)}.calendar-labels.mod-dailyView .calendar-labels-item{width:var(--components-calendar-day-size)}.calendar-grid{display:flex;text-align:center;align-self:stretch;flex-wrap:wrap;width:var(--components-calendar-width)}.calendar-grid.mod-dailyView .calendar-grid-item{width:var(--components-calendar-day-size)}.calendar-grid.mod-monthlyView .calendar-grid-item-content,.calendar-grid.mod-yearlyView .calendar-grid-item-content{width:5.83rem}.calendar-grid-item{height:var(--components-calendar-day-size);border:none;cursor:pointer;background:transparent;position:relative;padding:0;outline:none;color:var(--palettes-grey-800)}.calendar-grid-item.is-previousMonth,.calendar-grid-item.is-nextMonth{color:var(--palettes-grey-500)}.calendar-grid-item.is-today{color:var(--palettes-primary-700);font-weight:600}.calendar-grid-item.is-today:after{content:\"\";position:absolute;bottom:var(--spacings-XXS);left:var(--spacings-XS);right:var(--spacings-XS);height:2px;background:var(--palettes-primary-700);z-index:1}.calendar-grid-item:hover .calendar-grid-item-content{background:var(--palettes-grey-50)}.calendar-grid-item:active .calendar-grid-item-content{background:var(--palettes-grey-100)}.calendar-grid-item:focus-visible{outline:2px solid var(--palettes-primary-700);outline-offset:2px;border-radius:var(--commons-borderRadius-L);z-index:1}.calendar-grid-item.is-active .calendar-grid-item-content{background:var(--palettes-primary-700);color:var(--palettes-primary-text)}.calendar-grid-item.is-active.is-today:after{background:white!important;transition:background-color var(--commons-animations-durations-fast)}.calendar-grid-item.is-disabled,.calendar-grid-item[disabled]{color:var(--palettes-grey-500);pointer-events:none}.calendar-grid-item.is-disabled:hover .calendar-grid-item-content,.calendar-grid-item[disabled]:hover .calendar-grid-item-content{background-color:#fff}.calendar-grid-item-content{position:relative;height:var(--components-calendar-day-size);width:var(--components-calendar-day-size);line-height:var(--components-calendar-day-size);border-radius:var(--commons-borderRadius-L);transition-duration:var(--commons-animations-durations-fast);transition-property:background-color,color}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }, { type: LuCalendarItemFactory }, { type: i1.ALuDateAdapter }]; }, propDecorators: { min: [{
                type: Input
            }], max: [{
                type: Input
            }], granularity: [{
                type: Input
            }], startOn: [{
                type: Input
            }] } });

class LuCalendarInputModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuCalendarInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuCalendarInputModule, imports: [LuCalendarInputComponent], exports: [LuCalendarInputComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuCalendarInputModule, imports: [LuCalendarInputComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuCalendarInputModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuCalendarInputComponent],
                    exports: [LuCalendarInputComponent],
                }]
        }] });

const LU_DATE_INPUT_TRANSLATIONS = new InjectionToken('LuDateInputtranslations', {
    factory: () => luDateInputTranslations,
});
const luDateInputTranslations = {
    en: {
        placeholderDay: 'DD/MM/YYYY',
        placeholderMonth: 'MM/YYYY',
        placeholderYear: 'YYYY',
        formatDay: 'shortDate',
        formatMonth: 'MM/Y',
        formatYear: 'Y',
    },
    'en-GB': {
        placeholderDay: 'DD/MM/YYYY',
        placeholderMonth: 'MM/YYYY',
        placeholderYear: 'YYYY',
        formatDay: 'shortDate',
        formatMonth: 'MM/Y',
        formatYear: 'Y',
    },
    'en-US': {
        placeholderDay: 'MM/DD/YYYY',
        placeholderMonth: 'MM/YYYY',
        placeholderYear: 'YYYY',
        formatDay: 'shortDate',
        formatMonth: 'MM/Y',
        formatYear: 'Y',
    },
    fr: {
        placeholderDay: 'JJ/MM/AAAA',
        placeholderMonth: 'MM/AAAA',
        placeholderYear: 'AAAA',
        formatDay: 'shortDate',
        formatMonth: 'MM/Y',
        formatYear: 'Y',
    },
};

class LuDateInputDirective extends ALuInput {
    set placeholder(p) {
        this._elementRef.nativeElement.placeholder = p;
    }
    constructor(_changeDetectorRef, _elementRef, _renderer, _adapter) {
        super(_changeDetectorRef, _elementRef, _renderer);
        this._adapter = _adapter;
        this._focused = false;
        this.granularity = ELuDateGranularity.day;
        this._intl = getIntl(LU_DATE_INPUT_TRANSLATIONS);
    }
    ngOnInit() {
        switch (this.granularity) {
            case ELuDateGranularity.year:
                this.placeholder = this._intl.placeholderYear;
                break;
            case ELuDateGranularity.month:
                this.placeholder = this._intl.placeholderMonth;
                break;
            case ELuDateGranularity.day:
            default:
                this.placeholder = this._intl.placeholderDay;
                break;
        }
    }
    render() {
        if (this._focused) {
            return;
        }
        let format;
        switch (this.granularity) {
            case ELuDateGranularity.year:
                format = this._intl.formatYear;
                break;
            case ELuDateGranularity.month:
                format = this._intl.formatMonth;
                break;
            case ELuDateGranularity.day:
            default:
                format = this._intl.formatDay;
                break;
        }
        const text = this.value && this._adapter.isValid(this.value) ? this._adapter.format(this.value, format) : '';
        this._elementRef.nativeElement.value = text;
    }
    onInput(event) {
        // FIXME
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        const text = event.target.value;
        const value = this.parse(text);
        this.setValue(value);
    }
    parse(text) {
        const date = this._adapter.parse(text, this.granularity);
        return date;
    }
    onFocus() {
        this._focused = true;
    }
    onBlur() {
        this._focused = false;
        this.render();
    }
    validate(control) {
        const d = control.value;
        if (!d) {
            return null;
        }
        if (!this._adapter.isValid(d)) {
            return { date: true };
        }
        if (!!this.min && this._adapter.isValid(this.min) && this._adapter.compare(this.min, d, ELuDateGranularity.day) > 0) {
            return { min: true };
        }
        if (!!this.max && this._adapter.isValid(this.max) && this._adapter.compare(this.max, d, ELuDateGranularity.day) < 0) {
            return { max: true };
        }
        return null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateInputDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.ALuDateAdapter }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuDateInputDirective, isStandalone: true, selector: "input[luDateInput]", inputs: { min: "min", max: "max", granularity: "granularity", placeholder: "placeholder" }, host: { listeners: { "input": "onInput($event)", "focus": "onFocus()", "blur": "onBlur()" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => LuDateInputDirective),
                multi: true,
            },
            {
                provide: NG_VALIDATORS,
                useExisting: LuDateInputDirective,
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateInputDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[luDateInput]',
                    standalone: true,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => LuDateInputDirective),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: LuDateInputDirective,
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.ALuDateAdapter }]; }, propDecorators: { min: [{
                type: Input
            }], max: [{
                type: Input
            }], granularity: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], onInput: [{
                type: HostListener,
                args: ['input', ['$event']]
            }], onFocus: [{
                type: HostListener,
                args: ['focus']
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }] } });

class LuDateInputModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuDateInputModule, imports: [LuDateInputDirective], exports: [LuDateInputDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateInputModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateInputModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuDateInputDirective],
                    exports: [LuDateInputDirective],
                }]
        }] });

//FIXME
class LuDatePickerComponent extends ALuPickerPanel {
    set vcTemplateRef(tr) {
        this.templateRef = tr;
    }
    constructor(_adapter) {
        super();
        this._adapter = _adapter;
        this.granularity = ELuDateGranularity.day;
        this.startOn = this._adapter.forgeToday();
        this.close = new EventEmitter();
        this.open = new EventEmitter();
        this.hovered = new EventEmitter();
        this.onSelectValue = new EventEmitter();
    }
    _emitOpenEvent() {
        this.open.emit();
    }
    _emitCloseEvent() {
        this.close.emit();
    }
    _emitHoveredEvent(h) {
        this.hovered.emit(h);
    }
    _emitSelectValue(val) {
        this.onSelectValue.emit(val);
    }
    setValue(value) {
        this._value = value;
    }
    _onCalendar(val) {
        this._value = val;
        this._emitSelectValue(val);
        // if (!this.multiple) {
        this._emitCloseEvent();
        // }
    }
    _onInput(val) {
        this._value = val;
        this._emitSelectValue(val);
    }
    _onEnter() {
        this._emitCloseEvent();
    }
    _handleKeydown(event) {
        switch (event.key) {
            case 'Escape':
                this._emitCloseEvent();
                event.preventDefault();
                event.stopPropagation();
                break;
            case 'Tab':
                this._emitCloseEvent();
                break;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDatePickerComponent, deps: [{ token: i1.ALuDateAdapter }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuDatePickerComponent, isStandalone: true, selector: "lu-date-picker", inputs: { min: "min", max: "max", granularity: "granularity", startOn: "startOn" }, outputs: { close: "close", open: "open", hovered: "hovered", onSelectValue: "onSelectValue" }, providers: [
            {
                provide: ALuPickerPanel,
                useExisting: forwardRef(() => LuDatePickerComponent),
            },
        ], viewQueries: [{ propertyName: "vcTemplateRef", first: true, predicate: TemplateRef, descendants: true, static: true }], exportAs: ["LuDatePicker"], usesInheritance: true, ngImport: i0, template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-date-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" cdkTrapFocus=\"false\" cdkTrapFocusAutoCapture=\"true\">\n\t\t\t<label class=\"textfield lu-picker-textfield\">\n\t\t\t\t<input\n\t\t\t\t\tluDateInput\n\t\t\t\t\tclass=\"textfield-input\"\n\t\t\t\t\t[ngModel]=\"_value\"\n\t\t\t\t\t(ngModelChange)=\"_onInput($event)\"\n\t\t\t\t\t(keydown.enter)=\"_onEnter()\"\n\t\t\t\t\t[min]=\"min\"\n\t\t\t\t\t[max]=\"max\"\n\t\t\t\t\t[granularity]=\"granularity\"\n\t\t\t\t/>\n\t\t\t</label>\n\t\t\t<lu-calendar\n\t\t\t\t[ngModel]=\"_value\"\n\t\t\t\t(ngModelChange)=\"_onCalendar($event)\"\n\t\t\t\t[min]=\"min\"\n\t\t\t\t[max]=\"max\"\n\t\t\t\t[granularity]=\"granularity\"\n\t\t\t\t[startOn]=\"startOn\"\n\t\t\t></lu-calendar>\n\t\t</div>\n\t</div>\n</ng-template>\n", dependencies: [{ kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: LuCalendarInputComponent, selector: "lu-calendar", inputs: ["min", "max", "granularity", "startOn"] }, { kind: "directive", type: LuDateInputDirective, selector: "input[luDateInput]", inputs: ["min", "max", "granularity", "placeholder"] }, { kind: "ngmodule", type: A11yModule }, { kind: "directive", type: i4.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }], animations: [luTransformPopover], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDatePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-date-picker', changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'LuDatePicker', animations: [luTransformPopover], standalone: true, imports: [FormsModule, CommonModule, LuCalendarInputComponent, LuDateInputDirective, A11yModule], providers: [
                        {
                            provide: ALuPickerPanel,
                            useExisting: forwardRef(() => LuDatePickerComponent),
                        },
                    ], template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-date-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" cdkTrapFocus=\"false\" cdkTrapFocusAutoCapture=\"true\">\n\t\t\t<label class=\"textfield lu-picker-textfield\">\n\t\t\t\t<input\n\t\t\t\t\tluDateInput\n\t\t\t\t\tclass=\"textfield-input\"\n\t\t\t\t\t[ngModel]=\"_value\"\n\t\t\t\t\t(ngModelChange)=\"_onInput($event)\"\n\t\t\t\t\t(keydown.enter)=\"_onEnter()\"\n\t\t\t\t\t[min]=\"min\"\n\t\t\t\t\t[max]=\"max\"\n\t\t\t\t\t[granularity]=\"granularity\"\n\t\t\t\t/>\n\t\t\t</label>\n\t\t\t<lu-calendar\n\t\t\t\t[ngModel]=\"_value\"\n\t\t\t\t(ngModelChange)=\"_onCalendar($event)\"\n\t\t\t\t[min]=\"min\"\n\t\t\t\t[max]=\"max\"\n\t\t\t\t[granularity]=\"granularity\"\n\t\t\t\t[startOn]=\"startOn\"\n\t\t\t></lu-calendar>\n\t\t</div>\n\t</div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ALuDateAdapter }]; }, propDecorators: { min: [{
                type: Input
            }], max: [{
                type: Input
            }], granularity: [{
                type: Input
            }], startOn: [{
                type: Input
            }], close: [{
                type: Output
            }], open: [{
                type: Output
            }], hovered: [{
                type: Output
            }], onSelectValue: [{
                type: Output
            }], vcTemplateRef: [{
                type: ViewChild,
                args: [TemplateRef, { static: true }]
            }] } });

class LuDatePickerModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDatePickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuDatePickerModule, imports: [LuDatePickerComponent], exports: [LuDatePickerComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDatePickerModule, imports: [LuDatePickerComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDatePickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuDatePickerComponent],
                    exports: [LuDatePickerComponent],
                }]
        }] });

const LU_DATE_SELECT_INPUT_TRANSLATIONS = new InjectionToken('LuDateSelectInputtranslations', {
    factory: () => luDateSelectInputTranslations,
});
const luDateSelectInputTranslations = {
    en: {
        placeholderDay: 'DD/MM/YYYYY',
        placeholderMonth: 'MM/YYYYY',
        placeholderYear: 'YYYYY',
        formatDay: 'shortDate',
        formatMonth: 'MM/Y',
        formatYear: 'Y',
    },
    'en-US': {
        placeholderDay: 'MM/DD/YYYYY',
        placeholderMonth: 'MM/YYYYY',
        placeholderYear: 'YYYYY',
        formatDay: 'shortDate',
        formatMonth: 'MM/Y',
        formatYear: 'Y',
    },
    fr: {
        placeholderDay: 'JJ/MM/AAAA',
        placeholderMonth: 'MM/AAAA',
        placeholderYear: 'AAAA',
        formatDay: 'shortDate',
        formatMonth: 'MM/Y',
        formatYear: 'Y',
    },
};

class LuDateSelectInputComponent extends ALuSelectInputComponent {
    set inputPlaceholder(p) {
        this._placeholder = p;
    }
    set startOn(s) {
        this._startOn = s ?? this._adapter.forgeToday();
    }
    get startOn() {
        return this._startOn;
    }
    get format() {
        switch (this.granularity) {
            case ELuDateGranularity.year:
                return this._intl.formatYear;
            case ELuDateGranularity.month:
                return this._intl.formatMonth;
            case ELuDateGranularity.day:
            default:
                return this._intl.formatDay;
        }
    }
    constructor(_changeDetectorRef, _overlay, _elementRef, _viewContainerRef, _renderer, _adapter) {
        super(_changeDetectorRef, _overlay, _elementRef, _viewContainerRef, _renderer);
        this._changeDetectorRef = _changeDetectorRef;
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._renderer = _renderer;
        this._adapter = _adapter;
        this.granularity = ELuDateGranularity.day;
        this.hideClearer = false;
        this._startOn = this._adapter.forgeToday();
        this._intl = getIntl(LU_DATE_SELECT_INPUT_TRANSLATIONS);
        this.overlapInput = true;
    }
    validate(control) {
        const d = control.value;
        if (!d) {
            return null;
        }
        if (!this._adapter.isValid(d)) {
            return { date: true };
        }
        if (!!this.min && this._adapter.isValid(this.min) && this._adapter.compare(this.min, d, ELuDateGranularity.day) > 0) {
            return { min: true };
        }
        if (!!this.max && this._adapter.isValid(this.max) && this._adapter.compare(this.max, d, ELuDateGranularity.day) < 0) {
            return { max: true };
        }
        return null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateSelectInputComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1$1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }, { token: i1.ALuDateAdapter }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuDateSelectInputComponent, isStandalone: true, selector: "lu-date-select", inputs: { min: "min", max: "max", granularity: "granularity", inputPlaceholder: ["placeholder", "inputPlaceholder"], hideClearer: "hideClearer", startOn: "startOn" }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => LuDateSelectInputComponent),
                multi: true,
            },
            {
                provide: NG_VALIDATORS,
                useExisting: LuDateSelectInputComponent,
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0, template: "<div class=\"lu-select-placeholder\">{{ placeholder }}</div>\n<div class=\"lu-select-value\">\n\t<div class=\"lu-select-display-wrapper notranslate\">\n\t\t<ng-container #display></ng-container>\n\t</div>\n</div>\n<div class=\"lu-select-suffix\">\n\t<lu-input-clearer [class.u-displayNone]=\"hideClearer\" [attr.aria-hidden]=\"hideClearer\"></lu-input-clearer>\n</div>\n<ng-template luDisplayer let-value> {{ value | luDate: format }} </ng-template>\n<lu-date-picker [min]=\"min\" [max]=\"max\" [granularity]=\"granularity\" [startOn]=\"startOn\"></lu-date-picker>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{--components-select-input-padding-horizontal: var(--spacings-XS);--components-select-input-padding-vertical: var(--spacings-XS);--components-select-framed-color: var(--palettes-grey-500);--components-select-framed-color50: var(--palettes-grey-50);--components-select-framed-see-through: var(--palettes-grey-50);--components-select-framed-text: var(--palettes-grey-800);--components-select-framed-placeholder: #cccccc;--components-select-framed-side-padding: var(--spacings-S);--components-select-framed-top-padding: var(--spacings-L);--components-select-framed-bottom-padding: var(--spacings-S);--components-select-framed-label-top-offset: var(--spacings-XS);cursor:pointer;outline:none;padding:0;gap:0}:host:after{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons;color:var(--palettes-grey-600);bottom:var(--components-select-input-padding-vertical);font-size:var(--sizes-M-lineHeight);line-height:var(--sizes-M-lineHeight);pointer-events:none;position:absolute;right:var(--components-select-input-padding-horizontal);transition:transform var(--commons-animations-durations-standard) ease}@supports (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"/\"\"}}@supports not (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"}}:host[disabled],:host.is-disabled{cursor:not-allowed;pointer-events:all}.lu-select-display-wrapper{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.lu-select-value{line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);display:none}.lu-select-placeholder{color:var(--palettes-grey-400);line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.lu-select-suffix,.lu-select-clearer{position:absolute;bottom:.75rem;right:2.25rem}::ng-deep .lu-select-value .label{padding:var(--spacings-XXS) var(--spacings-XS);margin-left:0}::ng-deep .lu-select-value .chip{vertical-align:baseline;max-width:100%;margin:0 var(--spacings-XXS) var(--spacings-XXS) 0;text-overflow:ellipsis;overflow:hidden;vertical-align:top;white-space:nowrap}:host-context(.textfield.mod-S){padding:0}:host-context(.textfield.mod-S) .lu-select-value,:host-context(.textfield.mod-S) .lu-select-placeholder{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-XS-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-XS-lineHeight))}:host-context(.textfield.mod-S) .lu-select-clearer{bottom:var(--spacings-XS)}:host-context(.textfield.mod-S):after{line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-S-lineHeight)}:host-context(.textfield.mod-S) .lu-select-suffix{bottom:.5rem;right:2rem}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .label{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-S-lineHeight);font-weight:600;margin:0;padding:0;background-color:transparent}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .chip{height:var(--sizes-XS-lineHeight);line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-XS-fontSize);padding-left:var(--spacings-XXS);padding-right:var(--spacings-XXS);gap:var(--spacings-XXS)}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .numericBadge{--components-numericBadge-size: 1.25rem;--components-numericBadge-borderRadius: 6px;--components-numericBadge-fontSize: var(--sizes-XS-fontSize);--components-numericBadge-lineHeight: var(--sizes-XS-lineHeight)}:host-context(.textfield.mod-framed).textfield-input,:host-context(.form.mod-framed).textfield-input{padding:var(--components-select-framed-top-padding) 0 0}:host-context(.textfield.mod-framed).textfield-input:after,:host-context(.form.mod-framed).textfield-input:after{color:var(--palettes-grey-500);bottom:var(--components-select-framed-bottom-padding);right:var(--spacings-XS)}:host-context(.textfield.mod-framed).textfield-input .lu-select-value,:host-context(.form.mod-framed).textfield-input .lu-select-value{padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-placeholder,:host-context(.form.mod-framed).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400);padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-suffix,:host-context(.form.mod-framed).textfield-input .lu-select-suffix{bottom:var(--components-select-framed-bottom-padding);right:1.7rem}:host-context(.textfield.mod-filter) .lu-select-value,:host-context(.textfield.mod-filter) .lu-select-placeholder{padding:0;height:auto;padding-top:var(--spacings-S);color:var(--palettes-grey-800)}:host-context(.textfield.mod-material):after{color:var(--palettes-grey-500);bottom:.6rem;right:0}:host-context(.textfield.mod-material) .lu-select-value,:host-context(.textfield.mod-material) .lu-select-placeholder{padding-left:0;padding-right:.8rem}:host-context(.textfield.mod-material) .lu-select-suffix{right:calc(2 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material).is-select .lu-select-placeholder{display:none}:host-context(.textfield.mod-material).mod-search:after{bottom:0}:host-context(.textfield.mod-material).mod-search .lu-select-suffix{right:calc(2.75 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material .textfield-input.is-focused) .lu-select-placeholder{display:none}:host(.mod-multiple) .lu-select-value{height:auto;align-items:center}:host(.mod-multiple) .lu-select-display-wrapper{overflow:visible;white-space:normal;margin-bottom:calc(var(--spacings-XXS) * -1)}:host-context(.textfield.mod-outlined).textfield-input:after{color:var(--palettes-grey-600)}:host-context(.textfield.mod-outlined).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error):after{color:var(--palettes-error-600)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-filled) .lu-select-placeholder{display:none}:host-context(.textfield-input.is-filled) .lu-select-value{display:flex;align-items:flex-start}:host-context(.textfield .textfield-input.is-focused):after{transform:rotate(-180deg)}:host-context(.textfield-input.is-clearable) .lu-select-value{padding-right:3.5rem}:host-context(.textfield-input.is-error):after{color:var(--palettes-error-700)}:host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]):after{color:var(--commons-disabled-color)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]) .lu-select-placeholder{color:var(--commons-disabled-placeholder)}:host:after{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons}@supports (content: \"*\"/\"\"){:host:after{content:\"\\e920\"/\"\"}}@supports not (content: \"*\"/\"\"){:host:after{content:\"\\e920\"}}\n"], dependencies: [{ kind: "pipe", type: LuDateAdapterPipe, name: "luDate" }, { kind: "component", type: LuDatePickerComponent, selector: "lu-date-picker", inputs: ["min", "max", "granularity", "startOn"], outputs: ["close", "open", "hovered", "onSelectValue"], exportAs: ["LuDatePicker"] }, { kind: "ngmodule", type: OverlayModule }, { kind: "component", type: LuInputClearerComponent, selector: "lu-input-clearer", outputs: ["onClear"], exportAs: ["luClearer"] }, { kind: "directive", type: LuInputDisplayerDirective, selector: "[luDisplayer]", inputs: ["luDisplayerMultiple", "multiple"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateSelectInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-date-select', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [LuDateAdapterPipe, LuDatePickerComponent, LuInputDirective, OverlayModule, LuInputClearerComponent, LuInputDisplayerDirective], providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => LuDateSelectInputComponent),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: LuDateSelectInputComponent,
                            multi: true,
                        },
                    ], template: "<div class=\"lu-select-placeholder\">{{ placeholder }}</div>\n<div class=\"lu-select-value\">\n\t<div class=\"lu-select-display-wrapper notranslate\">\n\t\t<ng-container #display></ng-container>\n\t</div>\n</div>\n<div class=\"lu-select-suffix\">\n\t<lu-input-clearer [class.u-displayNone]=\"hideClearer\" [attr.aria-hidden]=\"hideClearer\"></lu-input-clearer>\n</div>\n<ng-template luDisplayer let-value> {{ value | luDate: format }} </ng-template>\n<lu-date-picker [min]=\"min\" [max]=\"max\" [granularity]=\"granularity\" [startOn]=\"startOn\"></lu-date-picker>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{--components-select-input-padding-horizontal: var(--spacings-XS);--components-select-input-padding-vertical: var(--spacings-XS);--components-select-framed-color: var(--palettes-grey-500);--components-select-framed-color50: var(--palettes-grey-50);--components-select-framed-see-through: var(--palettes-grey-50);--components-select-framed-text: var(--palettes-grey-800);--components-select-framed-placeholder: #cccccc;--components-select-framed-side-padding: var(--spacings-S);--components-select-framed-top-padding: var(--spacings-L);--components-select-framed-bottom-padding: var(--spacings-S);--components-select-framed-label-top-offset: var(--spacings-XS);cursor:pointer;outline:none;padding:0;gap:0}:host:after{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons;color:var(--palettes-grey-600);bottom:var(--components-select-input-padding-vertical);font-size:var(--sizes-M-lineHeight);line-height:var(--sizes-M-lineHeight);pointer-events:none;position:absolute;right:var(--components-select-input-padding-horizontal);transition:transform var(--commons-animations-durations-standard) ease}@supports (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"/\"\"}}@supports not (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"}}:host[disabled],:host.is-disabled{cursor:not-allowed;pointer-events:all}.lu-select-display-wrapper{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.lu-select-value{line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);display:none}.lu-select-placeholder{color:var(--palettes-grey-400);line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.lu-select-suffix,.lu-select-clearer{position:absolute;bottom:.75rem;right:2.25rem}::ng-deep .lu-select-value .label{padding:var(--spacings-XXS) var(--spacings-XS);margin-left:0}::ng-deep .lu-select-value .chip{vertical-align:baseline;max-width:100%;margin:0 var(--spacings-XXS) var(--spacings-XXS) 0;text-overflow:ellipsis;overflow:hidden;vertical-align:top;white-space:nowrap}:host-context(.textfield.mod-S){padding:0}:host-context(.textfield.mod-S) .lu-select-value,:host-context(.textfield.mod-S) .lu-select-placeholder{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-XS-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-XS-lineHeight))}:host-context(.textfield.mod-S) .lu-select-clearer{bottom:var(--spacings-XS)}:host-context(.textfield.mod-S):after{line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-S-lineHeight)}:host-context(.textfield.mod-S) .lu-select-suffix{bottom:.5rem;right:2rem}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .label{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-S-lineHeight);font-weight:600;margin:0;padding:0;background-color:transparent}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .chip{height:var(--sizes-XS-lineHeight);line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-XS-fontSize);padding-left:var(--spacings-XXS);padding-right:var(--spacings-XXS);gap:var(--spacings-XXS)}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .numericBadge{--components-numericBadge-size: 1.25rem;--components-numericBadge-borderRadius: 6px;--components-numericBadge-fontSize: var(--sizes-XS-fontSize);--components-numericBadge-lineHeight: var(--sizes-XS-lineHeight)}:host-context(.textfield.mod-framed).textfield-input,:host-context(.form.mod-framed).textfield-input{padding:var(--components-select-framed-top-padding) 0 0}:host-context(.textfield.mod-framed).textfield-input:after,:host-context(.form.mod-framed).textfield-input:after{color:var(--palettes-grey-500);bottom:var(--components-select-framed-bottom-padding);right:var(--spacings-XS)}:host-context(.textfield.mod-framed).textfield-input .lu-select-value,:host-context(.form.mod-framed).textfield-input .lu-select-value{padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-placeholder,:host-context(.form.mod-framed).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400);padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-suffix,:host-context(.form.mod-framed).textfield-input .lu-select-suffix{bottom:var(--components-select-framed-bottom-padding);right:1.7rem}:host-context(.textfield.mod-filter) .lu-select-value,:host-context(.textfield.mod-filter) .lu-select-placeholder{padding:0;height:auto;padding-top:var(--spacings-S);color:var(--palettes-grey-800)}:host-context(.textfield.mod-material):after{color:var(--palettes-grey-500);bottom:.6rem;right:0}:host-context(.textfield.mod-material) .lu-select-value,:host-context(.textfield.mod-material) .lu-select-placeholder{padding-left:0;padding-right:.8rem}:host-context(.textfield.mod-material) .lu-select-suffix{right:calc(2 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material).is-select .lu-select-placeholder{display:none}:host-context(.textfield.mod-material).mod-search:after{bottom:0}:host-context(.textfield.mod-material).mod-search .lu-select-suffix{right:calc(2.75 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material .textfield-input.is-focused) .lu-select-placeholder{display:none}:host(.mod-multiple) .lu-select-value{height:auto;align-items:center}:host(.mod-multiple) .lu-select-display-wrapper{overflow:visible;white-space:normal;margin-bottom:calc(var(--spacings-XXS) * -1)}:host-context(.textfield.mod-outlined).textfield-input:after{color:var(--palettes-grey-600)}:host-context(.textfield.mod-outlined).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error):after{color:var(--palettes-error-600)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-filled) .lu-select-placeholder{display:none}:host-context(.textfield-input.is-filled) .lu-select-value{display:flex;align-items:flex-start}:host-context(.textfield .textfield-input.is-focused):after{transform:rotate(-180deg)}:host-context(.textfield-input.is-clearable) .lu-select-value{padding-right:3.5rem}:host-context(.textfield-input.is-error):after{color:var(--palettes-error-700)}:host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]):after{color:var(--commons-disabled-color)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]) .lu-select-placeholder{color:var(--commons-disabled-placeholder)}:host:after{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons}@supports (content: \"*\"/\"\"){:host:after{content:\"\\e920\"/\"\"}}@supports not (content: \"*\"/\"\"){:host:after{content:\"\\e920\"}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1$1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }, { type: i1.ALuDateAdapter }]; }, propDecorators: { min: [{
                type: Input
            }], max: [{
                type: Input
            }], granularity: [{
                type: Input
            }], inputPlaceholder: [{
                type: Input,
                args: ['placeholder']
            }], hideClearer: [{
                type: Input
            }], startOn: [{
                type: Input
            }] } });

class LuDateSelectInputModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateSelectInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuDateSelectInputModule, imports: [LuDateSelectInputComponent], exports: [LuDateSelectInputComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateSelectInputModule, imports: [LuDateSelectInputComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateSelectInputModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuDateSelectInputComponent],
                    exports: [LuDateSelectInputComponent],
                }]
        }] });

class LuDateModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuDateModule, imports: [LuCalendarInputComponent, LuDatePickerComponent, LuDateInputDirective, LuDateAdapterPipe, LuDateSelectInputComponent], exports: [LuCalendarInputComponent, LuDatePickerComponent, LuDateInputDirective, LuDateAdapterPipe, LuDateSelectInputComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateModule, imports: [LuCalendarInputComponent, LuDatePickerComponent, LuDateSelectInputComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuDateModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuCalendarInputComponent, LuDatePickerComponent, LuDateInputDirective, LuDateAdapterPipe, LuDateSelectInputComponent],
                    exports: [LuCalendarInputComponent, LuDatePickerComponent, LuDateInputDirective, LuDateAdapterPipe, LuDateSelectInputComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { LU_DATE_INPUT_TRANSLATIONS, LU_DATE_SELECT_INPUT_TRANSLATIONS, LuCalendarInputComponent, LuCalendarInputModule, LuDateAdapterModule, LuDateAdapterPipe, LuDateInputDirective, LuDateInputModule, LuDateModule, LuDatePickerComponent, LuDatePickerModule, LuDateSelectInputComponent, LuDateSelectInputModule, luDateInputTranslations, luDateSelectInputTranslations };
//# sourceMappingURL=lucca-front-ng-date.mjs.map
