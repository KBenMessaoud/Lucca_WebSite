import * as i0 from '@angular/core';
import { InjectionToken, inject, Pipe, NgModule, Component, ChangeDetectionStrategy, Input, Optional, Injectable, forwardRef, Inject, SkipSelf, Self, Directive, ElementRef, HostBinding, ViewChild, Output } from '@angular/core';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1$1 from '@angular/cdk/overlay';
import { OverlayModule } from '@angular/cdk/overlay';
import * as i1 from '@angular/forms';
import { FormControl, FormGroup, ReactiveFormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ALuOnOpenSubscriber, getIntl, ALuOnCloseSubscriber, ALuOnScrollBottomSubscriber } from '@lucca-front/ng/core';
import { LuInputClearerComponent, LuInputDisplayerDirective } from '@lucca-front/ng/input';
import { ALuOptionOperator, LuOptionPlaceholderComponent, LuOptionPickerAdvancedComponent, LuOptionItemComponent, LuForOptionsDirective } from '@lucca-front/ng/option';
import { ALuSelectInputComponent } from '@lucca-front/ng/select';
import { of, merge, combineLatest, BehaviorSubject, Subscription, Subject } from 'rxjs';
import { map, catchError, switchMap, withLatestFrom, startWith, scan, debounceTime, filter, share } from 'rxjs/operators';
import * as i2$1 from '@angular/common/http';
import { ALuApiService, LuApiV3Service } from '@lucca-front/ng/api';

var LuDisplayFullname;
(function (LuDisplayFullname) {
    LuDisplayFullname["firstlast"] = "fl";
    LuDisplayFullname["lastfirst"] = "lf";
    LuDisplayFullname["first"] = "f";
    LuDisplayFullname["last"] = "l";
})(LuDisplayFullname || (LuDisplayFullname = {}));
var LuDisplayInitials;
(function (LuDisplayInitials) {
    LuDisplayInitials["firstlast"] = "FL";
    LuDisplayInitials["lastfirst"] = "LF";
    LuDisplayInitials["last"] = "L";
    LuDisplayInitials["first"] = "F";
})(LuDisplayInitials || (LuDisplayInitials = {}));
var LuDisplayHybrid;
(function (LuDisplayHybrid) {
    LuDisplayHybrid["firstIlastFull"] = "Fl";
    LuDisplayHybrid["firstFulllastI"] = "fL";
    LuDisplayHybrid["lastIfirstFull"] = "Lf";
    LuDisplayHybrid["lastFullfirstI"] = "lF";
})(LuDisplayHybrid || (LuDisplayHybrid = {}));
/** Injection token that can be used to change the default displayed user format. */
const LU_DEFAULT_DISPLAY_POLICY = new InjectionToken('LuDisplayFormat', { factory: () => LuDisplayFullname.lastfirst });

/**
 * Displays a user name according to specified format. Supported formats: f for first name,
 * F for first initial, l for last name, L for last initial.
 */
function luUserDisplay(user, format = LuDisplayFullname.lastfirst) {
    let result = '';
    if (!!user && !!user.firstName && !!user.lastName) {
        switch (format) {
            case LuDisplayFullname.lastfirst:
                result = user.lastName + ' ' + user.firstName;
                break;
            case LuDisplayFullname.firstlast:
                result = user.firstName + ' ' + user.lastName;
                break;
            case LuDisplayFullname.first:
                result = user.firstName;
                break;
            case LuDisplayFullname.last:
                result = user.lastName;
                break;
            case LuDisplayInitials.lastfirst:
                result = user.lastName.charAt(0) + user.firstName.charAt(0);
                break;
            case LuDisplayInitials.firstlast:
                result = user.firstName.charAt(0) + user.lastName.charAt(0);
                break;
            case LuDisplayInitials.first:
                result = user.firstName.charAt(0);
                break;
            case LuDisplayInitials.last:
                result = user.lastName.charAt(0);
                break;
            case LuDisplayHybrid.firstIlastFull:
                result = user.firstName.charAt(0) + '. ' + user.lastName;
                break;
            case LuDisplayHybrid.lastIfirstFull:
                result = user.lastName.charAt(0) + '. ' + user.firstName;
                break;
            case LuDisplayHybrid.lastFullfirstI:
                result = user.lastName + ' ' + user.firstName.charAt(0) + '.';
                break;
            case LuDisplayHybrid.firstFulllastI:
                result = user.firstName + ' ' + user.lastName.charAt(0) + '.';
                break;
            default:
                break;
        }
    }
    return result;
}
/**
 * Displays a user name according to specified format. Supported formats: f for first name,
 * F for first initial, l for last name, L for last initial.
 */
class LuUserDisplayPipe {
    constructor() {
        this.defaultFormat = inject(LU_DEFAULT_DISPLAY_POLICY);
    }
    transform(user, format = this.defaultFormat) {
        return luUserDisplay(user, format);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserDisplayPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuUserDisplayPipe, isStandalone: true, name: "luUserDisplay" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserDisplayPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'luUserDisplay', standalone: true }]
        }] });

class LuUserDisplayModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserDisplayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuUserDisplayModule, imports: [LuUserDisplayPipe], exports: [LuUserDisplayPipe] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserDisplayModule, providers: [LuUserDisplayPipe] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserDisplayModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuUserDisplayPipe],
                    providers: [LuUserDisplayPipe],
                    exports: [LuUserDisplayPipe],
                }]
        }] });

/**
 * Displays user's picture or a placeholder with his/her initials and random bg color'
 */
class LuUserPictureComponent {
    /**
     * User Display format.
     * It is set to 'LF' by default
     */
    set displayFormat(displayFormat) {
        this._displayFormat = displayFormat;
        this._changeDetector.markForCheck();
    }
    get displayFormat() {
        return this._displayFormat;
    }
    set user(user) {
        this._user = user;
        this.initials = this.displayPipe.transform(user, this.displayFormat);
        const pictureHref = user?.picture?.href || user?.pictureHref;
        this.hasPicture = !!pictureHref;
        this.pictureHref = pictureHref;
        if (!this.hasPicture) {
            const hsl = this.getNameHue();
            this.style = { 'background-color': `hsl(${hsl}, 60%, 60%)` };
        }
        this._changeDetector.markForCheck();
    }
    get user() {
        return this._user;
    }
    constructor(displayPipe, _changeDetector) {
        this.displayPipe = displayPipe;
        this._changeDetector = _changeDetector;
        this._displayFormat = LuDisplayInitials.lastfirst;
        this.initials = '';
        this.hasPicture = false;
        this.pictureHref = '';
        this.style = {};
    }
    pictureError() {
        this.hasPicture = false;
        const hsl = this.getNameHue();
        this.style = { 'background-color': `hsl(${hsl}, 60%, 60%)` };
    }
    getNameHue() {
        // we sum the chars in user's firstname + lastname
        const charSum = this.displayPipe
            .transform(this._user, LuDisplayFullname.firstlast)
            .split('')
            .reduce((sum, a) => sum + a.charCodeAt(0), 0);
        // and take a modulo 360 for hue
        return charSum % 360;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserPictureComponent, deps: [{ token: LuUserDisplayPipe }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuUserPictureComponent, selector: "lu-user-picture", inputs: { displayFormat: "displayFormat", user: "user" }, ngImport: i0, template: "<ng-container *ngIf=\"hasPicture; else displayInitials\">\n\t<img class=\"picture\" [src]=\"pictureHref\" alt=\"\" (error)=\"pictureError()\" />\n</ng-container>\n\n<ng-template #displayInitials>\n\t<div class=\"picture\" [ngStyle]=\"style\">\n\t\t<span class=\"userPicture-initials\">{{ initials }}</span>\n\t</div>\n</ng-template>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{--components-userPicture-XS-image: 1.5rem;--components-userPicture-XS-fontSize: var(--sizes-XS-fontSize);--components-userPicture-XS-placeholder: .75rem;--components-userPicture-S-image: 2rem;--components-userPicture-S-fontSize: var(--sizes-S-fontSize);--components-userPicture-S-placeholder: var(--sizes-XS-lineHeight);--components-userPicture-M-image: 2.5rem;--components-userPicture-M-fontSize: var(--sizes-M-fontSize);--components-userPicture-M-placeholder: var(--sizes-S-lineHeight);--components-userPicture-L-image: 3rem;--components-userPicture-L-fontSize: var(--sizes-L-fontSize);--components-userPicture-L-placeholder: var(--sizes-M-lineHeight);--components-userPicture-XXS-image: 1rem;--components-userPicture-XXS-fontSize: .5625rem;--components-userPicture-XL-image: 4.5rem;--components-userPicture-XL-fontSize: 1.8rem;--components-userPicture-XXL-image: 7.5rem;--components-userPicture-XXL-fontSize: 3rem;display:inline-block;vertical-align:middle}:host .picture{align-items:center;aspect-ratio:1;border-radius:50%;background-color:var(--palettes-grey-50);background-position:center;background-size:cover;background-repeat:no-repeat;color:var(--colors-white-color);display:flex;font-size:var(--components-user-picture-font-size, var(--components-userPicture-M-fontSize));font-weight:600;line-height:1;justify-content:center;width:var(--components-user-picture-image-size, var(--components-userPicture-M-image))}:host.mod-XXS{--components-user-picture-image-size: var(--components-userPicture-XXS-image);--components-user-picture-font-size: var(--components-userPicture-XXS-fontSize)}:host.mod-XS{--components-user-picture-image-size: var(--components-userPicture-XS-image);--components-user-picture-font-size: var(--components-userPicture-XS-fontSize);--components-user-picture-placeholder: var(--components-userPicture-XS-placeholder)}:host.mod-S{--components-user-picture-image-size: var(--components-userPicture-S-image);--components-user-picture-font-size: var(--components-userPicture-S-fontSize);--components-user-picture-placeholder: var(--components-userPicture-S-placeholder)}:host.mod-L{--components-user-picture-image-size: var(--components-userPicture-L-image);--components-user-picture-font-size: var(--components-userPicture-L-fontSize);--components-user-picture-placeholder: var(--components-userPicture-L-placeholder)}:host.mod-XL{--components-user-picture-image-size: var(--components-userPicture-XL-image);--components-user-picture-font-size: var(--components-userPicture-XL-fontSize)}:host.mod-XXL{--components-user-picture-image-size: var(--components-userPicture-XXL-image);--components-user-picture-font-size: var(--components-userPicture-XXL-fontSize)}:host.mod-border{box-shadow:0 0 0 2px var(--colors-white-color)}:host.mod-placeholder .picture{background:var(--palettes-grey-200)!important}:host.mod-placeholder .picture:before{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons;color:var(--palettes-grey-600);font-weight:400;font-size:var(--components-user-picture-placeholder, var(--components-userPicture-M-placeholder))}@supports (content: \"*\"/\"\"){:host.mod-placeholder .picture:before{content:\"\\e990\"/\"\"}}@supports not (content: \"*\"/\"\"){:host.mod-placeholder .picture:before{content:\"\\e990\"}}:host.mod-placeholder .userPicture-initials{display:none}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserPictureComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-user-picture', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"hasPicture; else displayInitials\">\n\t<img class=\"picture\" [src]=\"pictureHref\" alt=\"\" (error)=\"pictureError()\" />\n</ng-container>\n\n<ng-template #displayInitials>\n\t<div class=\"picture\" [ngStyle]=\"style\">\n\t\t<span class=\"userPicture-initials\">{{ initials }}</span>\n\t</div>\n</ng-template>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{--components-userPicture-XS-image: 1.5rem;--components-userPicture-XS-fontSize: var(--sizes-XS-fontSize);--components-userPicture-XS-placeholder: .75rem;--components-userPicture-S-image: 2rem;--components-userPicture-S-fontSize: var(--sizes-S-fontSize);--components-userPicture-S-placeholder: var(--sizes-XS-lineHeight);--components-userPicture-M-image: 2.5rem;--components-userPicture-M-fontSize: var(--sizes-M-fontSize);--components-userPicture-M-placeholder: var(--sizes-S-lineHeight);--components-userPicture-L-image: 3rem;--components-userPicture-L-fontSize: var(--sizes-L-fontSize);--components-userPicture-L-placeholder: var(--sizes-M-lineHeight);--components-userPicture-XXS-image: 1rem;--components-userPicture-XXS-fontSize: .5625rem;--components-userPicture-XL-image: 4.5rem;--components-userPicture-XL-fontSize: 1.8rem;--components-userPicture-XXL-image: 7.5rem;--components-userPicture-XXL-fontSize: 3rem;display:inline-block;vertical-align:middle}:host .picture{align-items:center;aspect-ratio:1;border-radius:50%;background-color:var(--palettes-grey-50);background-position:center;background-size:cover;background-repeat:no-repeat;color:var(--colors-white-color);display:flex;font-size:var(--components-user-picture-font-size, var(--components-userPicture-M-fontSize));font-weight:600;line-height:1;justify-content:center;width:var(--components-user-picture-image-size, var(--components-userPicture-M-image))}:host.mod-XXS{--components-user-picture-image-size: var(--components-userPicture-XXS-image);--components-user-picture-font-size: var(--components-userPicture-XXS-fontSize)}:host.mod-XS{--components-user-picture-image-size: var(--components-userPicture-XS-image);--components-user-picture-font-size: var(--components-userPicture-XS-fontSize);--components-user-picture-placeholder: var(--components-userPicture-XS-placeholder)}:host.mod-S{--components-user-picture-image-size: var(--components-userPicture-S-image);--components-user-picture-font-size: var(--components-userPicture-S-fontSize);--components-user-picture-placeholder: var(--components-userPicture-S-placeholder)}:host.mod-L{--components-user-picture-image-size: var(--components-userPicture-L-image);--components-user-picture-font-size: var(--components-userPicture-L-fontSize);--components-user-picture-placeholder: var(--components-userPicture-L-placeholder)}:host.mod-XL{--components-user-picture-image-size: var(--components-userPicture-XL-image);--components-user-picture-font-size: var(--components-userPicture-XL-fontSize)}:host.mod-XXL{--components-user-picture-image-size: var(--components-userPicture-XXL-image);--components-user-picture-font-size: var(--components-userPicture-XXL-fontSize)}:host.mod-border{box-shadow:0 0 0 2px var(--colors-white-color)}:host.mod-placeholder .picture{background:var(--palettes-grey-200)!important}:host.mod-placeholder .picture:before{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons;color:var(--palettes-grey-600);font-weight:400;font-size:var(--components-user-picture-placeholder, var(--components-userPicture-M-placeholder))}@supports (content: \"*\"/\"\"){:host.mod-placeholder .picture:before{content:\"\\e990\"/\"\"}}@supports not (content: \"*\"/\"\"){:host.mod-placeholder .picture:before{content:\"\\e990\"}}:host.mod-placeholder .userPicture-initials{display:none}\n"] }]
        }], ctorParameters: function () { return [{ type: LuUserDisplayPipe }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { displayFormat: [{
                type: Input
            }, {
                type: Optional
            }], user: [{
                type: Input
            }] } });

class LuUserPictureModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserPictureModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuUserPictureModule, declarations: [LuUserPictureComponent], imports: [CommonModule, LuUserDisplayModule], exports: [LuUserPictureComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserPictureModule, imports: [CommonModule, LuUserDisplayModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserPictureModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, LuUserDisplayModule],
                    declarations: [LuUserPictureComponent],
                    exports: [LuUserPictureComponent],
                }]
        }] });

/**
 * Displays user picture and name. ILuUser's role can be specified, and the footer is customizable.
 */
class LuUserTileComponent {
    /**
     * ILuUser to display.
     */
    set user(user) {
        this._user = user;
        this._changeDetector.markForCheck();
    }
    get user() {
        return this._user;
    }
    /**
     * ILuUser role to display
     */
    set role(role) {
        this._role = role;
        this._changeDetector.markForCheck();
    }
    get role() {
        return this._role;
    }
    get displayPictureFormat() {
        switch (this.displayFormat) {
            case LuDisplayFullname.lastfirst:
            case LuDisplayInitials.lastfirst:
            case LuDisplayHybrid.lastIfirstFull:
            case LuDisplayHybrid.lastFullfirstI:
                return LuDisplayInitials.lastfirst;
            case LuDisplayFullname.last:
            case LuDisplayInitials.last:
                return LuDisplayInitials.last;
            case LuDisplayFullname.first:
            case LuDisplayInitials.first:
                return LuDisplayInitials.first;
            case LuDisplayFullname.firstlast:
            case LuDisplayInitials.firstlast:
            case LuDisplayHybrid.firstIlastFull:
            case LuDisplayHybrid.firstFulllastI:
            default:
                return LuDisplayInitials.firstlast;
        }
    }
    constructor(_changeDetector) {
        this._changeDetector = _changeDetector;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserTileComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuUserTileComponent, selector: "lu-user-tile", inputs: { user: "user", displayFormat: "displayFormat", role: "role" }, ngImport: i0, template: "<lu-user-picture [user]=\"user\" [displayFormat]=\"displayPictureFormat\"></lu-user-picture>\n<div class=\"user-info\">\n\t<div class=\"user-tile-label\">{{ role ? role : user?.jobTitle }}</div>\n\t<div class=\"user-tile-title\">{{ user | luUserDisplay: displayFormat }}</div>\n\t<div class=\"user-tile-footnote\"><ng-content></ng-content></div>\n</div>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{--components-userPicture-XS-image: 1.5rem;--components-userPicture-XS-fontSize: var(--sizes-XS-fontSize);--components-userPicture-XS-placeholder: .75rem;--components-userPicture-S-image: 2rem;--components-userPicture-S-fontSize: var(--sizes-S-fontSize);--components-userPicture-S-placeholder: var(--sizes-XS-lineHeight);--components-userPicture-M-image: 2.5rem;--components-userPicture-M-fontSize: var(--sizes-M-fontSize);--components-userPicture-M-placeholder: var(--sizes-S-lineHeight);--components-userPicture-L-image: 3rem;--components-userPicture-L-fontSize: var(--sizes-L-fontSize);--components-userPicture-L-placeholder: var(--sizes-M-lineHeight);--components-userPicture-XXS-image: 1rem;--components-userPicture-XXS-fontSize: .5625rem;--components-userPicture-XL-image: 4.5rem;--components-userPicture-XL-fontSize: 1.8rem;--components-userPicture-XXL-image: 7.5rem;--components-userPicture-XXL-fontSize: 3rem;display:flex;align-items:center;padding:var(--spacings-XS);gap:var(--spacings-XS)}:host .user-tile-title{font-size:var(--sizes-M-fontSize);line-height:var(--sizes-M-lineHeight);font-weight:600;margin:0}:host .user-tile-label{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-XS-lineHeight);color:var(--palettes-grey-600)}:host .user-tile-footnote{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-S-lineHeight)}:host .user-info{margin:auto 0}:host.mod-wordBreak{word-break:break-all}:host.mod-nameOnly .user-tile-label,:host.mod-nameOnly .user-tile-footnote{display:none}:host.mod-vertical{flex-direction:column}:host.mod-vertical lu-user-picture{margin-right:0;margin-bottom:.8em}:host.mod-vertical .user-info{text-align:center}:host.mod-XXS{--components-user-picture-image-size: var(--components-userPicture-XXS-image);--components-user-picture-font-size: var(--components-userPicture-XXS-fontSize)}:host.mod-XS{--components-user-picture-image-size: var(--components-userPicture-XS-image);--components-user-picture-font-size: var(--components-userPicture-XS-fontSize)}:host.mod-S{--components-user-picture-image-size: var(--components-userPicture-S-image);--components-user-picture-font-size: var(--components-userPicture-S-fontSize)}:host.mod-L{--components-user-picture-image-size: var(--components-userPicture-L-image);--components-user-picture-font-size: var(--components-userPicture-L-fontSize)}:host.mod-XL{--components-user-picture-image-size: var(--components-userPicture-XL-image);--components-user-picture-font-size: var(--components-userPicture-XL-fontSize)}:host.mod-XXL{--components-user-picture-image-size: var(--components-userPicture-XXL-image);--components-user-picture-font-size: var(--components-userPicture-XXL-fontSize)}\n"], dependencies: [{ kind: "component", type: LuUserPictureComponent, selector: "lu-user-picture", inputs: ["displayFormat", "user"] }, { kind: "pipe", type: LuUserDisplayPipe, name: "luUserDisplay" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserTileComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-user-tile', changeDetection: ChangeDetectionStrategy.OnPush, template: "<lu-user-picture [user]=\"user\" [displayFormat]=\"displayPictureFormat\"></lu-user-picture>\n<div class=\"user-info\">\n\t<div class=\"user-tile-label\">{{ role ? role : user?.jobTitle }}</div>\n\t<div class=\"user-tile-title\">{{ user | luUserDisplay: displayFormat }}</div>\n\t<div class=\"user-tile-footnote\"><ng-content></ng-content></div>\n</div>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{--components-userPicture-XS-image: 1.5rem;--components-userPicture-XS-fontSize: var(--sizes-XS-fontSize);--components-userPicture-XS-placeholder: .75rem;--components-userPicture-S-image: 2rem;--components-userPicture-S-fontSize: var(--sizes-S-fontSize);--components-userPicture-S-placeholder: var(--sizes-XS-lineHeight);--components-userPicture-M-image: 2.5rem;--components-userPicture-M-fontSize: var(--sizes-M-fontSize);--components-userPicture-M-placeholder: var(--sizes-S-lineHeight);--components-userPicture-L-image: 3rem;--components-userPicture-L-fontSize: var(--sizes-L-fontSize);--components-userPicture-L-placeholder: var(--sizes-M-lineHeight);--components-userPicture-XXS-image: 1rem;--components-userPicture-XXS-fontSize: .5625rem;--components-userPicture-XL-image: 4.5rem;--components-userPicture-XL-fontSize: 1.8rem;--components-userPicture-XXL-image: 7.5rem;--components-userPicture-XXL-fontSize: 3rem;display:flex;align-items:center;padding:var(--spacings-XS);gap:var(--spacings-XS)}:host .user-tile-title{font-size:var(--sizes-M-fontSize);line-height:var(--sizes-M-lineHeight);font-weight:600;margin:0}:host .user-tile-label{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-XS-lineHeight);color:var(--palettes-grey-600)}:host .user-tile-footnote{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-S-lineHeight)}:host .user-info{margin:auto 0}:host.mod-wordBreak{word-break:break-all}:host.mod-nameOnly .user-tile-label,:host.mod-nameOnly .user-tile-footnote{display:none}:host.mod-vertical{flex-direction:column}:host.mod-vertical lu-user-picture{margin-right:0;margin-bottom:.8em}:host.mod-vertical .user-info{text-align:center}:host.mod-XXS{--components-user-picture-image-size: var(--components-userPicture-XXS-image);--components-user-picture-font-size: var(--components-userPicture-XXS-fontSize)}:host.mod-XS{--components-user-picture-image-size: var(--components-userPicture-XS-image);--components-user-picture-font-size: var(--components-userPicture-XS-fontSize)}:host.mod-S{--components-user-picture-image-size: var(--components-userPicture-S-image);--components-user-picture-font-size: var(--components-userPicture-S-fontSize)}:host.mod-L{--components-user-picture-image-size: var(--components-userPicture-L-image);--components-user-picture-font-size: var(--components-userPicture-L-fontSize)}:host.mod-XL{--components-user-picture-image-size: var(--components-userPicture-XL-image);--components-user-picture-font-size: var(--components-userPicture-XL-fontSize)}:host.mod-XXL{--components-user-picture-image-size: var(--components-userPicture-XXL-image);--components-user-picture-font-size: var(--components-userPicture-XXL-fontSize)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { user: [{
                type: Input
            }], displayFormat: [{
                type: Input
            }], role: [{
                type: Input
            }] } });

class LuUserTileModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserTileModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuUserTileModule, declarations: [LuUserTileComponent], imports: [CommonModule, LuUserPictureModule, LuUserDisplayModule], exports: [LuUserTileComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserTileModule, imports: [CommonModule, LuUserPictureModule, LuUserDisplayModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserTileModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, LuUserPictureModule, LuUserDisplayModule],
                    declarations: [LuUserTileComponent],
                    exports: [LuUserTileComponent],
                }]
        }] });

class ALuUserHomonymsService {
}
class LuUserHomonymsService extends ALuUserHomonymsService {
    extractHomonyms(users) {
        const usersByName = {};
        users.forEach((user) => {
            const name = this._pipe.transform(user, this._format);
            usersByName[name] = [...(usersByName[name] || []), user];
        });
        const nonUniqNames = Object.keys(usersByName).filter((key) => usersByName[key].length > 1);
        const homonyms = [];
        nonUniqNames.forEach((name) => homonyms.push(...usersByName[name]));
        return homonyms;
    }
    enrichHomonyms(homonyms) {
        if (!homonyms || homonyms.length === 0) {
            return of([]);
        }
        return this._http
            .get(`/api/v3/users`, {
            params: {
                id: homonyms.map((u) => u.id).join(','),
                fields: 'id,department.name',
            },
        })
            .pipe(map((res) => res.data.items), map((infos) => infos.map((info) => {
            const homonym = homonyms.find((h) => h.id === info.id);
            return {
                ...homonym,
                additionalInformation: info.department ? info.department.name : '',
            };
        })), catchError(() => of([])));
    }
    constructor(_pipe, _http) {
        super();
        this._pipe = _pipe;
        this._http = _http;
        this._format = LuDisplayFullname.lastfirst;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserHomonymsService, deps: [{ token: LuUserDisplayPipe }, { token: i2$1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserHomonymsService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserHomonymsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: LuUserDisplayPipe }, { type: i2$1.HttpClient }]; } });

class LuUserHomonymsComponent {
    set inOptions$(in$) {
        this._outOptions$ = merge(in$, in$.pipe(map((users) => this._service.extractHomonyms(users)), switchMap((homonyms) => this._service.enrichHomonyms(homonyms)), withLatestFrom(in$), map(([enrichedUsers, users]) => {
            const result = [...users];
            enrichedUsers.forEach((user) => {
                const i = result.findIndex((u) => u.id === user.id);
                result[i] = user;
            });
            return result;
        })));
    }
    get outOptions$() {
        return this._outOptions$;
    }
    constructor(hostService, selfService) {
        this._service = hostService || selfService;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserHomonymsComponent, deps: [{ token: ALuUserHomonymsService, optional: true, skipSelf: true }, { token: ALuUserHomonymsService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuUserHomonymsComponent, isStandalone: true, selector: "lu-user-homonyms", providers: [
            LuUserDisplayPipe,
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuUserHomonymsComponent),
                multi: true,
            },
            {
                provide: ALuUserHomonymsService,
                useClass: LuUserHomonymsService,
            },
        ], ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserHomonymsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lu-user-homonyms',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    standalone: true,
                    providers: [
                        LuUserDisplayPipe,
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuUserHomonymsComponent),
                            multi: true,
                        },
                        {
                            provide: ALuUserHomonymsService,
                            useClass: LuUserHomonymsService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [ALuUserHomonymsService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [ALuUserHomonymsService]
                }, {
                    type: Self
                }] }]; } });

class LuUserHomonymsModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserHomonymsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuUserHomonymsModule, imports: [LuUserHomonymsComponent], exports: [LuUserHomonymsComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserHomonymsModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserHomonymsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuUserHomonymsComponent],
                    exports: [LuUserHomonymsComponent],
                }]
        }] });

class ALuUserService extends ALuApiService {
}

class LuUserV3Service extends LuApiV3Service {
    set appInstanceId(appInstanceId) {
        this._appInstanceId = appInstanceId;
    }
    set operations(operations) {
        this._operations = operations;
    }
    constructor(_http) {
        super(_http);
        this._http = _http;
        this._operations = [];
        this.api = '/api/v3/users/search';
        this.fields = 'id,firstname,lastname,picture[href]';
        this.orderBy = 'lastname,asc,firstname,asc';
    }
    getMe() {
        return this._http.get(`/api/v3/users/me?fields=id`).pipe(switchMap((r) => this._get(this.url + `&id=${r.data.id}`)), map((users) => users[0]));
    }
    get url() {
        if (!this._appInstanceId || !this._operations || !this._operations.length) {
            return `${this._api}?${[...this._filters, this._orderBy, this._fields].filter((f) => !!f).join('&')}`;
        }
        else {
            return `/api/v3/users/scopedsearch?${[...this._filters, `appInstanceId=${this._appInstanceId}`, `operations=${this._operations.join(',')}`, this._orderBy, this._fields]
                .filter((f) => !!f)
                .join('&')}`;
        }
    }
    // FIXME typing
    _get(url) {
        return super._get(url).pipe(map((suggestions) => suggestions.map((s) => s.item)));
    }
    _clueFilter(clue) {
        const urlSafeClue = clue
            .split(' ')
            .map((c) => encodeURIComponent(c))
            .join(',');
        return `clue=${urlSafeClue}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserV3Service, deps: [{ token: i2$1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserV3Service }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserV3Service, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i2$1.HttpClient }]; } });

class LuUserMeOptionDirective {
    set luUserMeOptionFields(fields) {
        this._service.fields = fields;
    }
    set luUserMeOptionFilters(filters) {
        this._service.filters = filters;
    }
    set luUserMeOptionOrderBy(orderBy) {
        this._service.orderBy = orderBy;
    }
    set luUserMeOptionAppInstanceId(appInstanceId) {
        this._service.appInstanceId = appInstanceId;
    }
    set luUserMeOptionOperations(operations) {
        this._service.operations = operations;
    }
    set luUserMeOptionClue(clue) {
        clue ? this.hideMe() : this.displayMe();
    }
    set inOptions$(in$) {
        this.outOptions$ = combineLatest([in$, this.meDisplayed$]).pipe(map(([options, meDisplayed]) => (meDisplayed ? options?.filter((o) => o.id !== this.me?.id) : options)));
    }
    constructor(hostService, selfService, _vcr, _templateRef) {
        this._vcr = _vcr;
        this._templateRef = _templateRef;
        this.me = undefined;
        this.meDisplayed$ = new BehaviorSubject(false);
        this._service = hostService || selfService;
    }
    onOpen() {
        this._service.getMe().subscribe((me) => {
            this.me = me;
            this.displayMe();
        });
    }
    displayMe() {
        if (this.me && !this.meDisplayed$.value) {
            this.meDisplayed$.next(true);
            this._viewRef = this._vcr.createEmbeddedView(this._templateRef, {
                $implicit: this.me,
            });
        }
    }
    hideMe() {
        if (this.me && this.meDisplayed$.value && this._viewRef) {
            this.meDisplayed$.next(false);
            this._viewRef.destroy();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserMeOptionDirective, deps: [{ token: ALuUserService, optional: true, skipSelf: true }, { token: ALuUserService, self: true }, { token: i0.ViewContainerRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuUserMeOptionDirective, isStandalone: true, selector: "[luUserMeOption]", inputs: { luUserMeOptionFields: "luUserMeOptionFields", luUserMeOptionFilters: "luUserMeOptionFilters", luUserMeOptionOrderBy: "luUserMeOptionOrderBy", luUserMeOptionAppInstanceId: "luUserMeOptionAppInstanceId", luUserMeOptionOperations: "luUserMeOptionOperations", luUserMeOptionClue: "luUserMeOptionClue" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuUserMeOptionDirective),
                multi: true,
            },
            {
                provide: ALuUserService,
                useClass: LuUserV3Service,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuUserMeOptionDirective),
                multi: true,
            },
        ], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserMeOptionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luUserMeOption]',
                    standalone: true,
                    providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuUserMeOptionDirective),
                            multi: true,
                        },
                        {
                            provide: ALuUserService,
                            useClass: LuUserV3Service,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuUserMeOptionDirective),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: LuUserV3Service, decorators: [{
                    type: Inject,
                    args: [ALuUserService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: LuUserV3Service, decorators: [{
                    type: Inject,
                    args: [ALuUserService]
                }, {
                    type: Self
                }] }, { type: i0.ViewContainerRef }, { type: i0.TemplateRef }]; }, propDecorators: { luUserMeOptionFields: [{
                type: Input
            }], luUserMeOptionFilters: [{
                type: Input
            }], luUserMeOptionOrderBy: [{
                type: Input
            }], luUserMeOptionAppInstanceId: [{
                type: Input
            }], luUserMeOptionOperations: [{
                type: Input
            }], luUserMeOptionClue: [{
                type: Input
            }] } });

class LuUserMeOptionModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserMeOptionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuUserMeOptionModule, imports: [LuUserMeOptionDirective], exports: [LuUserMeOptionDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserMeOptionModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserMeOptionModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuUserMeOptionDirective],
                    exports: [LuUserMeOptionDirective],
                }]
        }] });

const LU_USER_SEARCHER_TRANSLATIONS = new InjectionToken('LuUserSearcherTranslations', {
    factory: () => luUserSearcherTranslations,
});
const luUserSearcherTranslations = {
    en: {
        includeFormerEmployees: 'Include former employees',
    },
    fr: {
        includeFormerEmployees: 'Inclure les salariés partis',
    },
    es: {
        includeFormerEmployees: 'Incluir a los antiguos empleados',
    },
};

class LuUserPagedSearcherComponent {
    set fields(fields) {
        this._service.fields = fields;
    }
    set filters(filters) {
        this._service.filters = filters;
    }
    set orderBy(orderBy) {
        this._service.orderBy = orderBy;
    }
    set appInstanceId(appInstanceId) {
        this._service.appInstanceId = appInstanceId;
    }
    set operations(operations) {
        this._service.operations = operations;
    }
    constructor(hostService, selfService) {
        this._subs = new Subscription();
        this.fixed = true;
        this.enableFormerEmployees = false;
        // page$: Subject<number>;
        this.outOptions$ = new Subject();
        this._loading = false;
        this._isOpened$ = new BehaviorSubject(false);
        this._page$ = new Subject();
        this._options = [];
        this.intl = getIntl(LU_USER_SEARCHER_TRANSLATIONS);
        this._service = hostService || selfService;
        const clue = new FormControl('');
        this.form = new FormGroup({
            clue,
            formerEmployees: new FormControl(false),
        });
        this.clueChange = clue.valueChanges;
    }
    ngOnInit() {
        const formValue$ = this.form.valueChanges.pipe(startWith(this.form.value));
        const pager$ = this._page$.pipe(scan((acc) => acc + 1, 0), startWith(0));
        const query$ = combineLatest([formValue$.pipe(debounceTime(250)), this._isOpened$]).pipe(filter(([, isOpened]) => isOpened), switchMap(([val]) => pager$.pipe(map((page) => [val, page]))), share());
        const results$ = query$.pipe(switchMap(([val, page]) => {
            const filters = [];
            if (val.formerEmployees) {
                filters.push(`formerEmployees=true`);
            }
            return this._service.searchPaged(val.clue, page, filters).pipe(catchError(() => of([])), map((items) => [items, page]));
        }), share());
        const resultsSub = results$.subscribe(([items, page]) => {
            if (page === 0) {
                this._options = [...items];
            }
            else {
                this._options.push(...items);
            }
            this._isLastPage = !items.length;
            this.outOptions$.next([...this._options]);
        });
        this._subs.add(resultsSub);
        this.loading$ = merge(query$.pipe(map(() => true)), results$.pipe(map(() => false)));
        const loadingSub = this.loading$.subscribe((l) => (this._loading = l));
        this._subs.add(loadingSub);
        this.empty$ = this.outOptions$.pipe(map((o) => o.length === 0));
    }
    ngOnDestroy() {
        this._subs.unsubscribe();
    }
    onOpen() {
        this.searchInput.nativeElement.focus();
        this._isOpened$.next(true);
    }
    onScrollBottom() {
        if (!this._loading && !this._isLastPage) {
            this._page$.next();
        }
    }
    onClose() {
        this._isOpened$.next(false);
        this.outOptions$.next([]);
        this.reset();
    }
    reset() {
        if (this.form.dirty) {
            this.form.reset();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserPagedSearcherComponent, deps: [{ token: ALuUserService, optional: true, skipSelf: true }, { token: ALuUserService, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuUserPagedSearcherComponent, isStandalone: true, selector: "lu-user-paged-searcher", inputs: { fields: "fields", filters: "filters", orderBy: "orderBy", appInstanceId: "appInstanceId", operations: "operations", enableFormerEmployees: "enableFormerEmployees" }, outputs: { clueChange: "clueChange" }, host: { properties: { "class.position-fixed": "this.fixed" } }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuUserPagedSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuUserPagedSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnCloseSubscriber,
                useExisting: forwardRef(() => LuUserPagedSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnScrollBottomSubscriber,
                useExisting: forwardRef(() => LuUserPagedSearcherComponent),
                multi: true,
            },
            {
                provide: ALuUserService,
                useClass: LuUserV3Service,
            },
        ], viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: "<form [formGroup]=\"form\">\n\t<div class=\"textfield mod-search\" [class.is-loading]=\"loading$ | async\">\n\t\t<input #searchInput class=\"textfield-input\" formControlName=\"clue\" />\n\t</div>\n\n\t<label class=\"checkbox mod-formerEmployee mod-S\" *ngIf=\"enableFormerEmployees\">\n\t\t<input class=\"checkbox-input\" type=\"checkbox\" formControlName=\"formerEmployees\" />\n\t\t<span class=\"checkbox-label\">{{ intl.includeFormerEmployees }}</span>\n\t</label>\n</form>\n\n<lu-option-placeholder *ngIf=\"(empty$ | async) && (loading$ | async) === false\" (onClear)=\"reset()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"], dependencies: [{ kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "component", type: LuOptionPlaceholderComponent, selector: "lu-option-placeholder", outputs: ["onClear"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserPagedSearcherComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-user-paged-searcher', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [ReactiveFormsModule, CommonModule, LuOptionPlaceholderComponent], providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuUserPagedSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuUserPagedSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnCloseSubscriber,
                            useExisting: forwardRef(() => LuUserPagedSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnScrollBottomSubscriber,
                            useExisting: forwardRef(() => LuUserPagedSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuUserService,
                            useClass: LuUserV3Service,
                        },
                    ], template: "<form [formGroup]=\"form\">\n\t<div class=\"textfield mod-search\" [class.is-loading]=\"loading$ | async\">\n\t\t<input #searchInput class=\"textfield-input\" formControlName=\"clue\" />\n\t</div>\n\n\t<label class=\"checkbox mod-formerEmployee mod-S\" *ngIf=\"enableFormerEmployees\">\n\t\t<input class=\"checkbox-input\" type=\"checkbox\" formControlName=\"formerEmployees\" />\n\t\t<span class=\"checkbox-label\">{{ intl.includeFormerEmployees }}</span>\n\t</label>\n</form>\n\n<lu-option-placeholder *ngIf=\"(empty$ | async) && (loading$ | async) === false\" (onClear)=\"reset()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"] }]
        }], ctorParameters: function () { return [{ type: LuUserV3Service, decorators: [{
                    type: Inject,
                    args: [ALuUserService]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: LuUserV3Service, decorators: [{
                    type: Inject,
                    args: [ALuUserService]
                }, {
                    type: Self
                }] }]; }, propDecorators: { fixed: [{
                type: HostBinding,
                args: ['class.position-fixed']
            }], searchInput: [{
                type: ViewChild,
                args: ['searchInput', { read: ElementRef, static: true }]
            }], fields: [{
                type: Input
            }], filters: [{
                type: Input
            }], orderBy: [{
                type: Input
            }], appInstanceId: [{
                type: Input
            }], operations: [{
                type: Input
            }], enableFormerEmployees: [{
                type: Input
            }], clueChange: [{
                type: Output
            }] } });

class LuUserSearcherModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserSearcherModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuUserSearcherModule, imports: [LuUserPagedSearcherComponent], exports: [LuUserPagedSearcherComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserSearcherModule, imports: [LuUserPagedSearcherComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserSearcherModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuUserPagedSearcherComponent],
                    exports: [LuUserPagedSearcherComponent],
                }]
        }] });

const LU_USER_SELECT_INPUT_TRANSLATIONS = new InjectionToken('LuUserSelectTranslations', {
    factory: () => luUserSelectInputTranslations,
});
const luUserSelectInputTranslations = {
    en: {
        users: 'users',
        me: 'Me:',
    },
    fr: {
        users: 'utilisateurs',
        me: 'Moi :',
    },
    es: {
        users: 'empleados',
        me: 'Yo :',
    },
};

/**
 * Displays user'picture or a placeholder with his/her initials and random bg color'
 */
class LuUserSelectInputComponent extends ALuSelectInputComponent {
    set inputPlaceholder(p) {
        this._placeholder = p;
    }
    constructor(_changeDetectorRef, _overlay, _elementRef, _viewContainerRef, _renderer) {
        super(_changeDetectorRef, _overlay, _elementRef, _viewContainerRef, _renderer);
        this._changeDetectorRef = _changeDetectorRef;
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._renderer = _renderer;
        this.searchFormat = LuDisplayFullname.lastfirst;
        this.enableFormerEmployees = false;
        this.clue = '';
        this.byId = (option1, option2) => option1 && option2 && option1.id === option2.id;
        this.intl = getIntl(LU_USER_SELECT_INPUT_TRANSLATIONS);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserSelectInputComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1$1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuUserSelectInputComponent, isStandalone: true, selector: "lu-user-select", inputs: { inputPlaceholder: ["placeholder", "inputPlaceholder"], fields: "fields", filters: "filters", orderBy: "orderBy", appInstanceId: "appInstanceId", operations: "operations", enableFormerEmployees: "enableFormerEmployees" }, providers: [
            LuUserDisplayPipe,
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => LuUserSelectInputComponent),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0, template: "<div class=\"lu-select-placeholder\">{{ placeholder }}</div>\n<div class=\"lu-select-value\">\n\t<div class=\"lu-select-display-wrapper\">\n\t\t<ng-container #display></ng-container>\n\t</div>\n</div>\n<div class=\"lu-select-suffix\">\n\t<lu-input-clearer></lu-input-clearer>\n</div>\n<ng-template luDisplayer [luDisplayerMultiple]=\"true\" let-values>\n\t<span *ngIf=\"multiple && values?.length > 1; else singleView\"\n\t\t><span class=\"numericBadge\">{{ values.length }}</span> {{ intl.users }}</span\n\t>\n\t<ng-template #singleView>{{ values[0] || values | luUserDisplay }}</ng-template>\n</ng-template>\n<lu-option-picker-advanced [option-comparer]=\"byId\">\n\t<header class=\"lu-picker-header\">\n\t\t<lu-user-paged-searcher\n\t\t\t[fields]=\"fields\"\n\t\t\t[filters]=\"filters\"\n\t\t\t[orderBy]=\"orderBy\"\n\t\t\t[appInstanceId]=\"appInstanceId\"\n\t\t\t[operations]=\"operations\"\n\t\t\t[enableFormerEmployees]=\"enableFormerEmployees\"\n\t\t\t(clueChange)=\"clue = $event\"\n\t\t></lu-user-paged-searcher>\n\t</header>\n\t<lu-user-homonyms></lu-user-homonyms>\n\t<lu-option\n\t\t*luUserMeOption=\"\n\t\t\tlet user;\n\t\t\tfields: fields;\n\t\t\tfilters: filters;\n\t\t\torderBy: orderBy;\n\t\t\tappInstanceId: appInstanceId;\n\t\t\toperations: operations;\n\t\t\tclue: clue\n\t\t\"\n\t\t[value]=\"user\"\n\t>\n\t\t<div>\n\t\t\t<b>{{ intl.me }} {{ user | luUserDisplay: searchFormat }}</b>\n\t\t</div>\n\t\t<div class=\"lu-select-additionalInformation\" *ngIf=\"user.additionalInformation\">({{ user.additionalInformation }})</div>\n\t</lu-option>\n\n\t<lu-option *luForOptions=\"let user\" [value]=\"user\">\n\t\t<div>{{ user | luUserDisplay: searchFormat }}</div>\n\t\t<div class=\"lu-select-additionalInformation\" *ngIf=\"user.additionalInformation\">({{ user.additionalInformation }})</div>\n\t</lu-option>\n</lu-option-picker-advanced>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{--components-select-input-padding-horizontal: var(--spacings-XS);--components-select-input-padding-vertical: var(--spacings-XS);--components-select-framed-color: var(--palettes-grey-500);--components-select-framed-color50: var(--palettes-grey-50);--components-select-framed-see-through: var(--palettes-grey-50);--components-select-framed-text: var(--palettes-grey-800);--components-select-framed-placeholder: #cccccc;--components-select-framed-side-padding: var(--spacings-S);--components-select-framed-top-padding: var(--spacings-L);--components-select-framed-bottom-padding: var(--spacings-S);--components-select-framed-label-top-offset: var(--spacings-XS);cursor:pointer;outline:none;padding:0;gap:0}:host:after{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons;color:var(--palettes-grey-600);bottom:var(--components-select-input-padding-vertical);font-size:var(--sizes-M-lineHeight);line-height:var(--sizes-M-lineHeight);pointer-events:none;position:absolute;right:var(--components-select-input-padding-horizontal);transition:transform var(--commons-animations-durations-standard) ease}@supports (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"/\"\"}}@supports not (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"}}:host[disabled],:host.is-disabled{cursor:not-allowed;pointer-events:all}.lu-select-display-wrapper{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.lu-select-value{line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);display:none}.lu-select-placeholder{color:var(--palettes-grey-400);line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.lu-select-suffix,.lu-select-clearer{position:absolute;bottom:.75rem;right:2.25rem}::ng-deep .lu-select-value .label{padding:var(--spacings-XXS) var(--spacings-XS);margin-left:0}::ng-deep .lu-select-value .chip{vertical-align:baseline;max-width:100%;margin:0 var(--spacings-XXS) var(--spacings-XXS) 0;text-overflow:ellipsis;overflow:hidden;vertical-align:top;white-space:nowrap}:host-context(.textfield.mod-S){padding:0}:host-context(.textfield.mod-S) .lu-select-value,:host-context(.textfield.mod-S) .lu-select-placeholder{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-XS-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-XS-lineHeight))}:host-context(.textfield.mod-S) .lu-select-clearer{bottom:var(--spacings-XS)}:host-context(.textfield.mod-S):after{line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-S-lineHeight)}:host-context(.textfield.mod-S) .lu-select-suffix{bottom:.5rem;right:2rem}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .label{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-S-lineHeight);font-weight:600;margin:0;padding:0;background-color:transparent}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .chip{height:var(--sizes-XS-lineHeight);line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-XS-fontSize);padding-left:var(--spacings-XXS);padding-right:var(--spacings-XXS);gap:var(--spacings-XXS)}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .numericBadge{--components-numericBadge-size: 1.25rem;--components-numericBadge-borderRadius: 6px;--components-numericBadge-fontSize: var(--sizes-XS-fontSize);--components-numericBadge-lineHeight: var(--sizes-XS-lineHeight)}:host-context(.textfield.mod-framed).textfield-input,:host-context(.form.mod-framed).textfield-input{padding:var(--components-select-framed-top-padding) 0 0}:host-context(.textfield.mod-framed).textfield-input:after,:host-context(.form.mod-framed).textfield-input:after{color:var(--palettes-grey-500);bottom:var(--components-select-framed-bottom-padding);right:var(--spacings-XS)}:host-context(.textfield.mod-framed).textfield-input .lu-select-value,:host-context(.form.mod-framed).textfield-input .lu-select-value{padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-placeholder,:host-context(.form.mod-framed).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400);padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-suffix,:host-context(.form.mod-framed).textfield-input .lu-select-suffix{bottom:var(--components-select-framed-bottom-padding);right:1.7rem}:host-context(.textfield.mod-filter) .lu-select-value,:host-context(.textfield.mod-filter) .lu-select-placeholder{padding:0;height:auto;padding-top:var(--spacings-S);color:var(--palettes-grey-800)}:host-context(.textfield.mod-material):after{color:var(--palettes-grey-500);bottom:.6rem;right:0}:host-context(.textfield.mod-material) .lu-select-value,:host-context(.textfield.mod-material) .lu-select-placeholder{padding-left:0;padding-right:.8rem}:host-context(.textfield.mod-material) .lu-select-suffix{right:calc(2 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material).is-select .lu-select-placeholder{display:none}:host-context(.textfield.mod-material).mod-search:after{bottom:0}:host-context(.textfield.mod-material).mod-search .lu-select-suffix{right:calc(2.75 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material .textfield-input.is-focused) .lu-select-placeholder{display:none}:host(.mod-multiple) .lu-select-value{height:auto;align-items:center}:host(.mod-multiple) .lu-select-display-wrapper{overflow:visible;white-space:normal;margin-bottom:calc(var(--spacings-XXS) * -1)}:host-context(.textfield.mod-outlined).textfield-input:after{color:var(--palettes-grey-600)}:host-context(.textfield.mod-outlined).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error):after{color:var(--palettes-error-600)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-filled) .lu-select-placeholder{display:none}:host-context(.textfield-input.is-filled) .lu-select-value{display:flex;align-items:flex-start}:host-context(.textfield .textfield-input.is-focused):after{transform:rotate(-180deg)}:host-context(.textfield-input.is-clearable) .lu-select-value{padding-right:3.5rem}:host-context(.textfield-input.is-error):after{color:var(--palettes-error-700)}:host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]):after{color:var(--commons-disabled-color)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]) .lu-select-placeholder{color:var(--commons-disabled-placeholder)}.lu-select-value{padding-right:3.5rem}.lu-select-additionalInformation{font-size:80%;font-style:italic;margin-top:-.25em}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: OverlayModule }, { kind: "component", type: LuInputClearerComponent, selector: "lu-input-clearer", outputs: ["onClear"], exportAs: ["luClearer"] }, { kind: "directive", type: LuInputDisplayerDirective, selector: "[luDisplayer]", inputs: ["luDisplayerMultiple", "multiple"] }, { kind: "component", type: LuOptionPickerAdvancedComponent, selector: "lu-option-picker-advanced", exportAs: ["LuOptionPickerAdvanced"] }, { kind: "component", type: LuUserPagedSearcherComponent, selector: "lu-user-paged-searcher", inputs: ["fields", "filters", "orderBy", "appInstanceId", "operations", "enableFormerEmployees"], outputs: ["clueChange"] }, { kind: "component", type: LuUserHomonymsComponent, selector: "lu-user-homonyms" }, { kind: "component", type: LuOptionItemComponent, selector: "lu-option", inputs: ["selected", "highlighted", "value", "disabled"], outputs: ["onSelect"] }, { kind: "directive", type: LuUserMeOptionDirective, selector: "[luUserMeOption]", inputs: ["luUserMeOptionFields", "luUserMeOptionFilters", "luUserMeOptionOrderBy", "luUserMeOptionAppInstanceId", "luUserMeOptionOperations", "luUserMeOptionClue"] }, { kind: "directive", type: LuForOptionsDirective, selector: "[luForOptions]", inputs: ["luForOptionsTrackBy"] }, { kind: "pipe", type: LuUserDisplayPipe, name: "luUserDisplay" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserSelectInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-user-select', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [
                        CommonModule,
                        OverlayModule,
                        LuInputClearerComponent,
                        LuInputDisplayerDirective,
                        LuOptionPickerAdvancedComponent,
                        LuUserPagedSearcherComponent,
                        LuUserHomonymsComponent,
                        LuOptionItemComponent,
                        LuOptionPickerAdvancedComponent,
                        LuUserMeOptionDirective,
                        LuForOptionsDirective,
                        LuUserDisplayPipe,
                    ], providers: [
                        LuUserDisplayPipe,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => LuUserSelectInputComponent),
                            multi: true,
                        },
                    ], template: "<div class=\"lu-select-placeholder\">{{ placeholder }}</div>\n<div class=\"lu-select-value\">\n\t<div class=\"lu-select-display-wrapper\">\n\t\t<ng-container #display></ng-container>\n\t</div>\n</div>\n<div class=\"lu-select-suffix\">\n\t<lu-input-clearer></lu-input-clearer>\n</div>\n<ng-template luDisplayer [luDisplayerMultiple]=\"true\" let-values>\n\t<span *ngIf=\"multiple && values?.length > 1; else singleView\"\n\t\t><span class=\"numericBadge\">{{ values.length }}</span> {{ intl.users }}</span\n\t>\n\t<ng-template #singleView>{{ values[0] || values | luUserDisplay }}</ng-template>\n</ng-template>\n<lu-option-picker-advanced [option-comparer]=\"byId\">\n\t<header class=\"lu-picker-header\">\n\t\t<lu-user-paged-searcher\n\t\t\t[fields]=\"fields\"\n\t\t\t[filters]=\"filters\"\n\t\t\t[orderBy]=\"orderBy\"\n\t\t\t[appInstanceId]=\"appInstanceId\"\n\t\t\t[operations]=\"operations\"\n\t\t\t[enableFormerEmployees]=\"enableFormerEmployees\"\n\t\t\t(clueChange)=\"clue = $event\"\n\t\t></lu-user-paged-searcher>\n\t</header>\n\t<lu-user-homonyms></lu-user-homonyms>\n\t<lu-option\n\t\t*luUserMeOption=\"\n\t\t\tlet user;\n\t\t\tfields: fields;\n\t\t\tfilters: filters;\n\t\t\torderBy: orderBy;\n\t\t\tappInstanceId: appInstanceId;\n\t\t\toperations: operations;\n\t\t\tclue: clue\n\t\t\"\n\t\t[value]=\"user\"\n\t>\n\t\t<div>\n\t\t\t<b>{{ intl.me }} {{ user | luUserDisplay: searchFormat }}</b>\n\t\t</div>\n\t\t<div class=\"lu-select-additionalInformation\" *ngIf=\"user.additionalInformation\">({{ user.additionalInformation }})</div>\n\t</lu-option>\n\n\t<lu-option *luForOptions=\"let user\" [value]=\"user\">\n\t\t<div>{{ user | luUserDisplay: searchFormat }}</div>\n\t\t<div class=\"lu-select-additionalInformation\" *ngIf=\"user.additionalInformation\">({{ user.additionalInformation }})</div>\n\t</lu-option>\n</lu-option-picker-advanced>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{--components-select-input-padding-horizontal: var(--spacings-XS);--components-select-input-padding-vertical: var(--spacings-XS);--components-select-framed-color: var(--palettes-grey-500);--components-select-framed-color50: var(--palettes-grey-50);--components-select-framed-see-through: var(--palettes-grey-50);--components-select-framed-text: var(--palettes-grey-800);--components-select-framed-placeholder: #cccccc;--components-select-framed-side-padding: var(--spacings-S);--components-select-framed-top-padding: var(--spacings-L);--components-select-framed-bottom-padding: var(--spacings-S);--components-select-framed-label-top-offset: var(--spacings-XS);cursor:pointer;outline:none;padding:0;gap:0}:host:after{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons;color:var(--palettes-grey-600);bottom:var(--components-select-input-padding-vertical);font-size:var(--sizes-M-lineHeight);line-height:var(--sizes-M-lineHeight);pointer-events:none;position:absolute;right:var(--components-select-input-padding-horizontal);transition:transform var(--commons-animations-durations-standard) ease}@supports (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"/\"\"}}@supports not (content: \"*\"/\"\"){:host:after{content:\"\\e97c\"}}:host[disabled],:host.is-disabled{cursor:not-allowed;pointer-events:all}.lu-select-display-wrapper{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.lu-select-value{line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);display:none}.lu-select-placeholder{color:var(--palettes-grey-400);line-height:var(--sizes-M-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-M-lineHeight));padding:var(--components-select-input-padding-vertical) 3.5rem var(--components-select-input-padding-vertical) var(--components-select-input-padding-horizontal);transition:all var(--commons-animations-durations-standard);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.lu-select-suffix,.lu-select-clearer{position:absolute;bottom:.75rem;right:2.25rem}::ng-deep .lu-select-value .label{padding:var(--spacings-XXS) var(--spacings-XS);margin-left:0}::ng-deep .lu-select-value .chip{vertical-align:baseline;max-width:100%;margin:0 var(--spacings-XXS) var(--spacings-XXS) 0;text-overflow:ellipsis;overflow:hidden;vertical-align:top;white-space:nowrap}:host-context(.textfield.mod-S){padding:0}:host-context(.textfield.mod-S) .lu-select-value,:host-context(.textfield.mod-S) .lu-select-placeholder{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-XS-lineHeight);min-height:calc(var(--components-select-framed-bottom-padding) + var(--sizes-XS-lineHeight))}:host-context(.textfield.mod-S) .lu-select-clearer{bottom:var(--spacings-XS)}:host-context(.textfield.mod-S):after{line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-S-lineHeight)}:host-context(.textfield.mod-S) .lu-select-suffix{bottom:.5rem;right:2rem}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .label{font-size:var(--sizes-S-fontSize);line-height:var(--sizes-S-lineHeight);font-weight:600;margin:0;padding:0;background-color:transparent}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .chip{height:var(--sizes-XS-lineHeight);line-height:var(--sizes-XS-lineHeight);font-size:var(--sizes-XS-fontSize);padding-left:var(--spacings-XXS);padding-right:var(--spacings-XXS);gap:var(--spacings-XXS)}:host-context(.textfield.mod-S) ::ng-deep .lu-select-value .numericBadge{--components-numericBadge-size: 1.25rem;--components-numericBadge-borderRadius: 6px;--components-numericBadge-fontSize: var(--sizes-XS-fontSize);--components-numericBadge-lineHeight: var(--sizes-XS-lineHeight)}:host-context(.textfield.mod-framed).textfield-input,:host-context(.form.mod-framed).textfield-input{padding:var(--components-select-framed-top-padding) 0 0}:host-context(.textfield.mod-framed).textfield-input:after,:host-context(.form.mod-framed).textfield-input:after{color:var(--palettes-grey-500);bottom:var(--components-select-framed-bottom-padding);right:var(--spacings-XS)}:host-context(.textfield.mod-framed).textfield-input .lu-select-value,:host-context(.form.mod-framed).textfield-input .lu-select-value{padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-placeholder,:host-context(.form.mod-framed).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400);padding:0 calc(var(--components-select-framed-side-padding) * 3) var(--components-select-framed-bottom-padding) var(--components-select-framed-side-padding)}:host-context(.textfield.mod-framed).textfield-input .lu-select-suffix,:host-context(.form.mod-framed).textfield-input .lu-select-suffix{bottom:var(--components-select-framed-bottom-padding);right:1.7rem}:host-context(.textfield.mod-filter) .lu-select-value,:host-context(.textfield.mod-filter) .lu-select-placeholder{padding:0;height:auto;padding-top:var(--spacings-S);color:var(--palettes-grey-800)}:host-context(.textfield.mod-material):after{color:var(--palettes-grey-500);bottom:.6rem;right:0}:host-context(.textfield.mod-material) .lu-select-value,:host-context(.textfield.mod-material) .lu-select-placeholder{padding-left:0;padding-right:.8rem}:host-context(.textfield.mod-material) .lu-select-suffix{right:calc(2 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material).is-select .lu-select-placeholder{display:none}:host-context(.textfield.mod-material).mod-search:after{bottom:0}:host-context(.textfield.mod-material).mod-search .lu-select-suffix{right:calc(2.75 * var(--components-select-input-padding-horizontal))}:host-context(.textfield.mod-material .textfield-input.is-focused) .lu-select-placeholder{display:none}:host(.mod-multiple) .lu-select-value{height:auto;align-items:center}:host(.mod-multiple) .lu-select-display-wrapper{overflow:visible;white-space:normal;margin-bottom:calc(var(--spacings-XXS) * -1)}:host-context(.textfield.mod-outlined).textfield-input:after{color:var(--palettes-grey-600)}:host-context(.textfield.mod-outlined).textfield-input .lu-select-placeholder{color:var(--palettes-grey-400)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error):after{color:var(--palettes-error-600)}:host-context(.textfield.mod-outlined) :host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-filled) .lu-select-placeholder{display:none}:host-context(.textfield-input.is-filled) .lu-select-value{display:flex;align-items:flex-start}:host-context(.textfield .textfield-input.is-focused):after{transform:rotate(-180deg)}:host-context(.textfield-input.is-clearable) .lu-select-value{padding-right:3.5rem}:host-context(.textfield-input.is-error):after{color:var(--palettes-error-700)}:host-context(.textfield-input.is-error) .lu-select-placeholder{color:var(--palettes-error-400)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]):after{color:var(--commons-disabled-color)}:host-context(.textfield-input.is-disabled,.textfield-input[disabled]) .lu-select-placeholder{color:var(--commons-disabled-placeholder)}.lu-select-value{padding-right:3.5rem}.lu-select-additionalInformation{font-size:80%;font-style:italic;margin-top:-.25em}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1$1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }]; }, propDecorators: { inputPlaceholder: [{
                type: Input,
                args: ['placeholder']
            }], fields: [{
                type: Input
            }], filters: [{
                type: Input
            }], orderBy: [{
                type: Input
            }], appInstanceId: [{
                type: Input
            }], operations: [{
                type: Input
            }], enableFormerEmployees: [{
                type: Input
            }] } });

class LuUserSelectInputModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserSelectInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuUserSelectInputModule, imports: [LuUserSelectInputComponent], exports: [LuUserSelectInputComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserSelectInputModule, imports: [LuUserSelectInputComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserSelectInputModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuUserSelectInputComponent],
                    exports: [LuUserSelectInputComponent],
                }]
        }] });

class LuUserSelectModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuUserSelectModule, imports: [LuUserSelectInputModule, LuUserSearcherModule, LuUserHomonymsModule, LuUserMeOptionModule], exports: [LuUserSelectInputModule, LuUserSearcherModule, LuUserHomonymsModule, LuUserMeOptionModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserSelectModule, imports: [LuUserSelectInputModule, LuUserSearcherModule, LuUserHomonymsModule, LuUserMeOptionModule, LuUserSelectInputModule, LuUserSearcherModule, LuUserHomonymsModule, LuUserMeOptionModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserSelectModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuUserSelectInputModule, LuUserSearcherModule, LuUserHomonymsModule, LuUserMeOptionModule],
                    exports: [LuUserSelectInputModule, LuUserSearcherModule, LuUserHomonymsModule, LuUserMeOptionModule],
                }]
        }] });

class LuUserModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuUserModule, imports: [LuUserDisplayModule, LuUserPictureModule, LuUserTileModule, LuUserSelectModule], exports: [LuUserDisplayModule, LuUserPictureModule, LuUserTileModule, LuUserSelectModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserModule, imports: [LuUserDisplayModule, LuUserPictureModule, LuUserTileModule, LuUserSelectModule, LuUserDisplayModule, LuUserPictureModule, LuUserTileModule, LuUserSelectModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuUserModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuUserDisplayModule, LuUserPictureModule, LuUserTileModule, LuUserSelectModule],
                    exports: [LuUserDisplayModule, LuUserPictureModule, LuUserTileModule, LuUserSelectModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ALuUserHomonymsService, ALuUserService, LU_DEFAULT_DISPLAY_POLICY, LU_USER_SEARCHER_TRANSLATIONS, LU_USER_SELECT_INPUT_TRANSLATIONS, LuDisplayFullname, LuDisplayHybrid, LuDisplayInitials, LuUserDisplayModule, LuUserDisplayPipe, LuUserHomonymsComponent, LuUserHomonymsModule, LuUserHomonymsService, LuUserMeOptionDirective, LuUserMeOptionModule, LuUserModule, LuUserPagedSearcherComponent, LuUserPictureComponent, LuUserPictureModule, LuUserSearcherModule, LuUserSelectInputComponent, LuUserSelectInputModule, LuUserSelectModule, LuUserTileComponent, LuUserTileModule, LuUserV3Service, luUserDisplay, luUserSearcherTranslations, luUserSelectInputTranslations };
//# sourceMappingURL=lucca-front-ng-user.mjs.map
