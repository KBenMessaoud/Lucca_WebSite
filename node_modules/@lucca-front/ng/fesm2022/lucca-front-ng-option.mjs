import * as i1 from '@angular/common';
import { CommonModule, NgForOf, DOCUMENT } from '@angular/common';
import * as i0 from '@angular/core';
import { EventEmitter, forwardRef, ElementRef, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule, InjectionToken, ViewContainerRef, ContentChild, Directive, HostBinding, TemplateRef, Inject, ContentChildren } from '@angular/core';
import { getIntl, ALuOnScrollBottomSubscriber, ALuOnOpenSubscriber, ALuOnCloseSubscriber } from '@lucca-front/ng/core';
import { ALuInputDisplayer } from '@lucca-front/ng/input';
import { LuTooltipTriggerDirective } from '@lucca-front/ng/tooltip';
import * as i2 from '@angular/cdk/a11y';
import { A11yModule } from '@angular/cdk/a11y';
import { OverlayModule } from '@angular/cdk/overlay';
import { ALuPickerPanel } from '@lucca-front/ng/picker';
import { luTransformPopover } from '@lucca-front/ng/popover';
import { LuScrollDirective } from '@lucca-front/ng/scroll';
import { BehaviorSubject, combineLatest, merge, of, Subscription, Subject } from 'rxjs';
import { map, tap, switchMap, delay, share, first, startWith, shareReplay, mergeAll } from 'rxjs/operators';
import * as i1$1 from '@angular/forms';
import { FormControl, ReactiveFormsModule } from '@angular/forms';

class ALuOptionItem {
}

/* eslint-disable @angular-eslint/no-output-on-prefix */
class LuOptionItemComponent extends ALuOptionItem {
    get selected() {
        return this._selected;
    }
    set selected(s) {
        if (s !== this._selected) {
            this._selected = s;
            this._cdr.markForCheck();
        }
    }
    get highlighted() {
        return this._highlighted;
    }
    set highlighted(h) {
        if (h !== this._highlighted) {
            this._highlighted = h;
            this._cdr.markForCheck();
        }
    }
    select() {
        if (!this.disabled) {
            this.onSelect.emit(this);
        }
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(d) {
        this._disabled = d;
    }
    constructor(_cdr) {
        super();
        this._cdr = _cdr;
        this._selected = false;
        this._highlighted = false;
        this.onSelect = new EventEmitter();
        this._disabled = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionItemComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuOptionItemComponent, isStandalone: true, selector: "lu-option", inputs: { selected: "selected", highlighted: "highlighted", value: "value", disabled: "disabled" }, outputs: { onSelect: "onSelect" }, providers: [
            {
                provide: ALuOptionItem,
                useExisting: forwardRef(() => LuOptionItemComponent),
                multi: true,
            },
        ], viewQueries: [{ propertyName: "element", first: true, predicate: ["element"], descendants: true, read: ElementRef, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"optionItem\" #element>\n\t<div\n\t\tclass=\"optionItem-value\"\n\t\t(click)=\"select()\"\n\t\t[class.is-selected]=\"selected\"\n\t\t[class.is-highlighted]=\"highlighted\"\n\t\t[class.is-disabled]=\"disabled\"\n\t>\n\t\t<ng-content></ng-content>\n\t</div>\n</div>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{display:block}.optionItem{position:relative}.optionItem-value{border-radius:var(--commons-borderRadius-M);display:block;padding:var(--components-options-item-padding-vertical) var(--components-options-item-padding-horizontal);transition:background-color 50ms;cursor:pointer}.optionItem-value.is-selected{background-color:var(--palettes-primary-50)}.optionItem-value.is-selected:hover{background-color:var(--palettes-primary-100)}.optionItem-value.is-selected:active{background-color:var(--palettes-primary-200)}.optionItem-value.is-selected.is-highlighted{background-color:var(--palettes-primary-100)}.optionItem-value.is-selected.is-highlighted:hover{background-color:var(--palettes-primary-200)}.optionItem-value:hover,.optionItem-value.is-highlighted,.optionItem-value.is-focus,.optionItem-value.is-highlighted:hover,.optionItem-value.is-focus:hover{background-color:var(--palettes-grey-50)}.optionItem-value.is-highlighted:active,.optionItem-value.is-focus:active,.optionItem-value:active{background-color:var(--palettes-grey-100)}:host-context(.lu-select-value) .optionItem-value{padding:0;overflow:hidden;text-overflow:ellipsis}:host-context(.lu-select-value) .optionItem-value:hover,:host-context(.lu-select-value) .optionItem-value.is-focus,:host-context(.lu-select-value) .optionItem-value.is-highlighted{background-color:inherit}:host-context(.mod-multiple) .optionItem-value{position:relative;padding-left:var(--components-options-item-multiple-padding)}:host-context(.mod-multiple) .optionItem-value:after,:host-context(.mod-multiple) .optionItem-value:before{display:block;position:absolute;left:var(--components-options-checkbox-left);top:50%;transform:translateY(-50%)}:host-context(.mod-multiple) .optionItem-value:before{content:\"\";border-radius:var(--components-options-checkbox-border-radius);box-shadow:inset 0 0 0 2px var(--components-options-checkbox-border-color);display:block;height:var(--components-options-checkbox-size);transition-property:background-color,box-shadow;transition-duration:var(--commons-animations-durations-fast);width:var(--components-options-checkbox-size)}:host-context(.mod-multiple) .optionItem-value:after{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons;color:transparent;font-size:var(--sizes-S-lineHeight);line-height:var(--components-options-checkbox-size);position:absolute;text-align:center;transform:translateY(-50%) scale(0);transition:all .1s;width:var(--components-options-checkbox-size)}@supports (content: \"*\"/\"\"){:host-context(.mod-multiple) .optionItem-value:after{content:\"\\e97d\"/\"\"}}@supports not (content: \"*\"/\"\"){:host-context(.mod-multiple) .optionItem-value:after{content:\"\\e97d\"}}:host-context(.mod-multiple) .optionItem-value.is-selected:before{background-color:var(--components-options-checkbox-color);box-shadow:inset 0 0 0 2px var(--components-options-checkbox-color)}:host-context(.mod-multiple) .optionItem-value.is-selected:after{color:var(--colors-white-color);transform:translateY(-50%) scale(1)}:host-context(.mod-multiple) .optionItem-value.is-disabled{--components-options-checkbox-border-color: var(--palettes-grey-500)}:host-context(.mod-multiple) .optionItem-value:not(.is-disabled):hover:before{box-shadow:inset 0 0 0 2px var(--components-options-checkbox-color)}:host-context(.mod-multiple).establishmentOption .optionItem-value{position:relative;padding-left:calc(var(--components-options-checkbox-size) + var(--spacings-XS) * 2)}:host-context(.mod-multiple).establishmentOption .optionItem-value:before,:host-context(.mod-multiple).establishmentOption .optionItem-value:after{left:var(--spacings-XS)}.is-disabled{color:var(--palettes-grey-500);-webkit-user-select:none;user-select:none;cursor:default}.is-disabled.is-selected{background-color:var(--palettes-grey-100)}.is-disabled:hover{background-color:inherit}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-option', changeDetection: ChangeDetectionStrategy.OnPush, imports: [CommonModule], standalone: true, providers: [
                        {
                            provide: ALuOptionItem,
                            useExisting: forwardRef(() => LuOptionItemComponent),
                            multi: true,
                        },
                    ], template: "<div class=\"optionItem\" #element>\n\t<div\n\t\tclass=\"optionItem-value\"\n\t\t(click)=\"select()\"\n\t\t[class.is-selected]=\"selected\"\n\t\t[class.is-highlighted]=\"highlighted\"\n\t\t[class.is-disabled]=\"disabled\"\n\t>\n\t\t<ng-content></ng-content>\n\t</div>\n</div>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{display:block}.optionItem{position:relative}.optionItem-value{border-radius:var(--commons-borderRadius-M);display:block;padding:var(--components-options-item-padding-vertical) var(--components-options-item-padding-horizontal);transition:background-color 50ms;cursor:pointer}.optionItem-value.is-selected{background-color:var(--palettes-primary-50)}.optionItem-value.is-selected:hover{background-color:var(--palettes-primary-100)}.optionItem-value.is-selected:active{background-color:var(--palettes-primary-200)}.optionItem-value.is-selected.is-highlighted{background-color:var(--palettes-primary-100)}.optionItem-value.is-selected.is-highlighted:hover{background-color:var(--palettes-primary-200)}.optionItem-value:hover,.optionItem-value.is-highlighted,.optionItem-value.is-focus,.optionItem-value.is-highlighted:hover,.optionItem-value.is-focus:hover{background-color:var(--palettes-grey-50)}.optionItem-value.is-highlighted:active,.optionItem-value.is-focus:active,.optionItem-value:active{background-color:var(--palettes-grey-100)}:host-context(.lu-select-value) .optionItem-value{padding:0;overflow:hidden;text-overflow:ellipsis}:host-context(.lu-select-value) .optionItem-value:hover,:host-context(.lu-select-value) .optionItem-value.is-focus,:host-context(.lu-select-value) .optionItem-value.is-highlighted{background-color:inherit}:host-context(.mod-multiple) .optionItem-value{position:relative;padding-left:var(--components-options-item-multiple-padding)}:host-context(.mod-multiple) .optionItem-value:after,:host-context(.mod-multiple) .optionItem-value:before{display:block;position:absolute;left:var(--components-options-checkbox-left);top:50%;transform:translateY(-50%)}:host-context(.mod-multiple) .optionItem-value:before{content:\"\";border-radius:var(--components-options-checkbox-border-radius);box-shadow:inset 0 0 0 2px var(--components-options-checkbox-border-color);display:block;height:var(--components-options-checkbox-size);transition-property:background-color,box-shadow;transition-duration:var(--commons-animations-durations-fast);width:var(--components-options-checkbox-size)}:host-context(.mod-multiple) .optionItem-value:after{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons;color:transparent;font-size:var(--sizes-S-lineHeight);line-height:var(--components-options-checkbox-size);position:absolute;text-align:center;transform:translateY(-50%) scale(0);transition:all .1s;width:var(--components-options-checkbox-size)}@supports (content: \"*\"/\"\"){:host-context(.mod-multiple) .optionItem-value:after{content:\"\\e97d\"/\"\"}}@supports not (content: \"*\"/\"\"){:host-context(.mod-multiple) .optionItem-value:after{content:\"\\e97d\"}}:host-context(.mod-multiple) .optionItem-value.is-selected:before{background-color:var(--components-options-checkbox-color);box-shadow:inset 0 0 0 2px var(--components-options-checkbox-color)}:host-context(.mod-multiple) .optionItem-value.is-selected:after{color:var(--colors-white-color);transform:translateY(-50%) scale(1)}:host-context(.mod-multiple) .optionItem-value.is-disabled{--components-options-checkbox-border-color: var(--palettes-grey-500)}:host-context(.mod-multiple) .optionItem-value:not(.is-disabled):hover:before{box-shadow:inset 0 0 0 2px var(--components-options-checkbox-color)}:host-context(.mod-multiple).establishmentOption .optionItem-value{position:relative;padding-left:calc(var(--components-options-checkbox-size) + var(--spacings-XS) * 2)}:host-context(.mod-multiple).establishmentOption .optionItem-value:before,:host-context(.mod-multiple).establishmentOption .optionItem-value:after{left:var(--spacings-XS)}.is-disabled{color:var(--palettes-grey-500);-webkit-user-select:none;user-select:none;cursor:default}.is-disabled.is-selected{background-color:var(--palettes-grey-100)}.is-disabled:hover{background-color:inherit}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { selected: [{
                type: Input
            }], highlighted: [{
                type: Input
            }], value: [{
                type: Input
            }], onSelect: [{
                type: Output
            }], disabled: [{
                type: Input
            }], element: [{
                type: ViewChild,
                args: ['element', { read: ElementRef, static: true }]
            }] } });

class LuOptionItemModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuOptionItemModule, imports: [LuOptionItemComponent], exports: [LuOptionItemComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionItemModule, imports: [LuOptionItemComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionItemModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuOptionItemComponent],
                    exports: [LuOptionItemComponent],
                }]
        }] });

class ALuTreeOptionItem extends ALuOptionItem {
    get allChildren() {
        return this.children.map((c) => [c, ...c.allChildren]).reduce((aggr, val) => [...aggr, ...val], []);
    }
}

const LU_TREE_OPTION_ITEM_TRANSLATIONS = new InjectionToken('LuTreeOptionItemTranslations', {
    factory: () => luTreeOptionItemTranslations,
});
const luTreeOptionItemTranslations = {
    en: {
        parentOnly: 'Parent only',
        childrenOnly: 'Children only',
    },
    fr: {
        parentOnly: 'Seulement le parent',
        childrenOnly: 'Seulement les enfants',
    },
};

/* eslint-disable @angular-eslint/no-output-on-prefix */
class LuTreeOptionItemComponent extends ALuTreeOptionItem {
    select() {
        if (this.disabled) {
            return;
        }
        this.onSelect.emit(this);
    }
    selectSelf() {
        if (this.disabled) {
            return;
        }
        this.onSelectSelf.emit(this);
    }
    selectChildren() {
        this.onSelectChildren.emit(this);
    }
    set tree(t) {
        this._tree = t;
        this._renderValue(t.value);
        this._renderChildren(t.children);
    }
    get value() {
        return this._tree.value;
    }
    get children() {
        return this._children;
    }
    set children(c) {
        this._children = c;
    }
    get hasChildren() {
        return !!this.children && this.children.length > 0;
    }
    get selected() {
        return this._selected;
    }
    set selected(s) {
        if (s !== this._selected && !this.disabled) {
            this._selected = s;
            this._cdr.markForCheck();
        }
    }
    get highlighted() {
        return this._highlighted;
    }
    set highlighted(h) {
        if (h !== this._highlighted) {
            this._highlighted = h;
            this._cdr.markForCheck();
        }
    }
    get disabled() {
        return this._tree.disabled;
    }
    set _contentChildDisplayer(displayer) {
        this._displayer = displayer;
    }
    constructor(_cdr) {
        super();
        this._cdr = _cdr;
        this._children = [];
        this.onSelect = new EventEmitter();
        this.onSelectSelf = new EventEmitter();
        this.onSelectChildren = new EventEmitter();
        this._selected = false;
        this._highlighted = false;
        this.intl = getIntl(LU_TREE_OPTION_ITEM_TRANSLATIONS);
    }
    _renderValue(value) {
        const evr = this._displayer.getViewRef(value);
        this._valueVCR.clear();
        this._valueVCR.insert(evr);
    }
    _renderChildren(children = []) {
        this._childrenVCR.clear();
        this.children = children.map((c) => {
            const ref = this._childrenVCR.createComponent(LuTreeOptionItemComponent);
            ref.instance._displayer = this._displayer;
            ref.instance.tree = c;
            return ref.instance; //yolo
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionItemComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuTreeOptionItemComponent, isStandalone: true, selector: "lu-tree-option", inputs: { tree: "tree", selected: "selected", highlighted: "highlighted" }, outputs: { onSelect: "onSelect", onSelectSelf: "onSelectSelf", onSelectChildren: "onSelectChildren" }, providers: [
            {
                provide: ALuTreeOptionItem,
                useExisting: forwardRef(() => LuTreeOptionItemComponent),
                multi: true,
            },
        ], queries: [{ propertyName: "_contentChildDisplayer", first: true, predicate: ALuInputDisplayer, descendants: true, static: true }], viewQueries: [{ propertyName: "_valueVCR", first: true, predicate: ["value"], descendants: true, read: ViewContainerRef, static: true }, { propertyName: "_childrenVCR", first: true, predicate: ["children"], descendants: true, read: ViewContainerRef, static: true }, { propertyName: "element", first: true, predicate: ["element"], descendants: true, read: ElementRef, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"optionItem\" #element>\n\t<div\n\t\tclass=\"optionItem-value\"\n\t\t(click)=\"select()\"\n\t\t[class.is-disabled]=\"disabled\"\n\t\t[class.is-selected]=\"selected\"\n\t\t[class.is-highlighted]=\"highlighted\"\n\t>\n\t\t<ng-container #value></ng-container>\n\t</div>\n\t<div class=\"optionItem-icons\" *ngIf=\"hasChildren\">\n\t\t<span *ngIf=\"!_tree.disabled\" class=\"optionItem-icon parentOnly\" (click)=\"selectSelf()\" [luTooltip]=\"intl.parentOnly\">\n\t\t\t<svg class=\"optionItem-icon-shape\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\">\n\t\t\t\t<path\n\t\t\t\t\topacity=\"0.2\"\n\t\t\t\t\td=\"M8 13C8.55 13 9 12.55 9 12C9 11.45 8.55 11 8 11C7.45 11 7 11.45 7 12C7 12.55 7.45 13 8 13ZM8 18C8.55 18 9 17.55 9 17C9 16.45 8.55 16 8 16C7.45 16 7 16.45 7 17C7 17.55 7.45 18 8 18ZM12 13H20C20.55 13 21 12.55 21 12C21 11.45 20.55 11 20 11H12C11.45 11 11 11.45 11 12C11 12.55 11.45 13 12 13ZM12 18H20C20.55 18 21 17.55 21 17C21 16.45 20.55 16 20 16H12C11.45 16 11 16.45 11 17C11 17.55 11.45 18 12 18ZM8 13C8.55 13 9 12.55 9 12C9 11.45 8.55 11 8 11C7.45 11 7 11.45 7 12C7 12.55 7.45 13 8 13ZM8 18C8.55 18 9 17.55 9 17C9 16.45 8.55 16 8 16C7.45 16 7 16.45 7 17C7 17.55 7.45 18 8 18ZM12 13H20C20.55 13 21 12.55 21 12C21 11.45 20.55 11 20 11H12C11.45 11 11 11.45 11 12C11 12.55 11.45 13 12 13ZM12 18H20C20.55 18 21 17.55 21 17C21 16.45 20.55 16 20 16H12C11.45 16 11 16.45 11 17C11 17.55 11.45 18 12 18Z\"\n\t\t\t\t/>\n\t\t\t\t<path\n\t\t\t\t\td=\"M4 8C4.55 8 5 7.55 5 7C5 6.45 4.55 6 4 6C3.45 6 3 6.45 3 7C3 7.55 3.45 8 4 8ZM7 7C7 7.55 7.45 8 8 8H20C20.55 8 21 7.55 21 7C21 6.45 20.55 6 20 6H8C7.45 6 7 6.45 7 7ZM4 8C4.55 8 5 7.55 5 7C5 6.45 4.55 6 4 6C3.45 6 3 6.45 3 7C3 7.55 3.45 8 4 8ZM7 7C7 7.55 7.45 8 8 8H20C20.55 8 21 7.55 21 7C21 6.45 20.55 6 20 6H8C7.45 6 7 6.45 7 7Z\"\n\t\t\t\t/>\n\t\t\t</svg>\n\t\t</span>\n\t\t<span class=\"optionItem-icon childrenOnly\" (click)=\"selectChildren()\" [luTooltip]=\"intl.childrenOnly\">\n\t\t\t<svg class=\"optionItem-icon-shape\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\">\n\t\t\t\t<path\n\t\t\t\t\td=\"M8 13C8.55 13 9 12.55 9 12C9 11.45 8.55 11 8 11C7.45 11 7 11.45 7 12C7 12.55 7.45 13 8 13ZM8 18C8.55 18 9 17.55 9 17C9 16.45 8.55 16 8 16C7.45 16 7 16.45 7 17C7 17.55 7.45 18 8 18ZM12 13H20C20.55 13 21 12.55 21 12C21 11.45 20.55 11 20 11H12C11.45 11 11 11.45 11 12C11 12.55 11.45 13 12 13ZM12 18H20C20.55 18 21 17.55 21 17C21 16.45 20.55 16 20 16H12C11.45 16 11 16.45 11 17C11 17.55 11.45 18 12 18ZM8 13C8.55 13 9 12.55 9 12C9 11.45 8.55 11 8 11C7.45 11 7 11.45 7 12C7 12.55 7.45 13 8 13ZM8 18C8.55 18 9 17.55 9 17C9 16.45 8.55 16 8 16C7.45 16 7 16.45 7 17C7 17.55 7.45 18 8 18ZM12 13H20C20.55 13 21 12.55 21 12C21 11.45 20.55 11 20 11H12C11.45 11 11 11.45 11 12C11 12.55 11.45 13 12 13ZM12 18H20C20.55 18 21 17.55 21 17C21 16.45 20.55 16 20 16H12C11.45 16 11 16.45 11 17C11 17.55 11.45 18 12 18Z\"\n\t\t\t\t/>\n\t\t\t\t<path\n\t\t\t\t\topacity=\"0.2\"\n\t\t\t\t\td=\"M4 8C4.55 8 5 7.55 5 7C5 6.45 4.55 6 4 6C3.45 6 3 6.45 3 7C3 7.55 3.45 8 4 8ZM7 7C7 7.55 7.45 8 8 8H20C20.55 8 21 7.55 21 7C21 6.45 20.55 6 20 6H8C7.45 6 7 6.45 7 7ZM4 8C4.55 8 5 7.55 5 7C5 6.45 4.55 6 4 6C3.45 6 3 6.45 3 7C3 7.55 3.45 8 4 8ZM7 7C7 7.55 7.45 8 8 8H20C20.55 8 21 7.55 21 7C21 6.45 20.55 6 20 6H8C7.45 6 7 6.45 7 7Z\"\n\t\t\t\t/>\n\t\t\t</svg>\n\t\t</span>\n\t</div>\n</div>\n\n<div #children class=\"children\">\n\t<ng-container #children></ng-container>\n</div>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{display:block}.optionItem{position:relative}.optionItem-value{border-radius:var(--commons-borderRadius-M);display:block;padding:var(--components-options-item-padding-vertical) var(--components-options-item-padding-horizontal);transition:background-color 50ms;cursor:pointer}.optionItem-value.is-selected{background-color:var(--palettes-primary-50)}.optionItem-value.is-selected:hover{background-color:var(--palettes-primary-100)}.optionItem-value.is-selected:active{background-color:var(--palettes-primary-200)}.optionItem-value.is-selected.is-highlighted{background-color:var(--palettes-primary-100)}.optionItem-value.is-selected.is-highlighted:hover{background-color:var(--palettes-primary-200)}.optionItem-value:hover,.optionItem-value.is-highlighted,.optionItem-value.is-focus,.optionItem-value.is-highlighted:hover,.optionItem-value.is-focus:hover{background-color:var(--palettes-grey-50)}.optionItem-value.is-highlighted:active,.optionItem-value.is-focus:active,.optionItem-value:active{background-color:var(--palettes-grey-100)}:host-context(.lu-select-value) .optionItem-value{padding:0;overflow:hidden;text-overflow:ellipsis}:host-context(.lu-select-value) .optionItem-value:hover,:host-context(.lu-select-value) .optionItem-value.is-focus,:host-context(.lu-select-value) .optionItem-value.is-highlighted{background-color:inherit}:host-context(.mod-multiple) .optionItem-value{position:relative;padding-left:var(--components-options-item-multiple-padding)}:host-context(.mod-multiple) .optionItem-value:after,:host-context(.mod-multiple) .optionItem-value:before{display:block;position:absolute;left:var(--components-options-checkbox-left);top:50%;transform:translateY(-50%)}:host-context(.mod-multiple) .optionItem-value:before{content:\"\";border-radius:var(--components-options-checkbox-border-radius);box-shadow:inset 0 0 0 2px var(--components-options-checkbox-border-color);display:block;height:var(--components-options-checkbox-size);transition-property:background-color,box-shadow;transition-duration:var(--commons-animations-durations-fast);width:var(--components-options-checkbox-size)}:host-context(.mod-multiple) .optionItem-value:after{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons;color:transparent;font-size:var(--sizes-S-lineHeight);line-height:var(--components-options-checkbox-size);position:absolute;text-align:center;transform:translateY(-50%) scale(0);transition:all .1s;width:var(--components-options-checkbox-size)}@supports (content: \"*\"/\"\"){:host-context(.mod-multiple) .optionItem-value:after{content:\"\\e97d\"/\"\"}}@supports not (content: \"*\"/\"\"){:host-context(.mod-multiple) .optionItem-value:after{content:\"\\e97d\"}}:host-context(.mod-multiple) .optionItem-value.is-selected:before{background-color:var(--components-options-checkbox-color);box-shadow:inset 0 0 0 2px var(--components-options-checkbox-color)}:host-context(.mod-multiple) .optionItem-value.is-selected:after{color:var(--colors-white-color);transform:translateY(-50%) scale(1)}:host-context(.mod-multiple) .optionItem-value.is-disabled{--components-options-checkbox-border-color: var(--palettes-grey-500)}:host-context(.mod-multiple) .optionItem-value:not(.is-disabled):hover:before{box-shadow:inset 0 0 0 2px var(--components-options-checkbox-color)}:host-context(.mod-multiple).establishmentOption .optionItem-value{position:relative;padding-left:calc(var(--components-options-checkbox-size) + var(--spacings-XS) * 2)}:host-context(.mod-multiple).establishmentOption .optionItem-value:before,:host-context(.mod-multiple).establishmentOption .optionItem-value:after{left:var(--spacings-XS)}:host{--components-options-tree-multiple-padding: 2.25rem;--components-options-tree-padding-child: .75rem}.is-disabled{color:var(--palettes-grey-500);-webkit-user-select:none;user-select:none;cursor:default}.is-disabled.is-selected{background-color:var(--palettes-grey-100)}.is-disabled:hover{background-color:inherit}.optionItem:not(:last-child){margin-bottom:var(--spacings-XXS)}.optionItem:hover .optionItem-value{background:var(--palettes-grey-50)}.optionItem:hover .optionItem-icons{opacity:1}.optionItem-value{padding:var(--components-options-item-padding-vertical) var(--components-options-item-padding-horizontal)}.optionItem-icons{display:none;position:absolute;top:var(--spacings-XS);right:var(--spacings-XS);opacity:0;transition:all var(--commons-animations-durations-fast) ease}.optionItem-icon{cursor:pointer;opacity:.66;margin-left:var(--spacings-XS);transition:all var(--commons-animations-durations-fast) ease}.optionItem-icon:hover{opacity:1}.optionItem-icon-shape{fill:var(--components-options-item-icon-color);width:1.4rem;height:1.4rem}:host-context(.lu-picker-panel){padding:0}:host-context(.lu-picker-panel) .optionItem-value:before{top:1.3rem;left:var(--spacings-XS);pointer-events:none}:host-context(.lu-picker-panel) .optionItem-value:after{top:1.3rem;left:var(--spacings-XS);pointer-events:none}:host-context(.lu-picker-panel.mod-multiple) .optionItem-icons{display:block}:host-context(.lu-picker-panel.mod-multiple) .optionItem-value{padding-right:4rem}:host-context(.lu-picker-panel lu-tree-option) .optionItem-value{padding-left:var(--spacings-XS)}:host-context(.lu-picker-panel lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child))}:host-context(.lu-picker-panel lu-tree-option lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 2)}:host-context(.lu-picker-panel lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 3)}:host-context(.lu-picker-panel lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 4)}:host-context(.lu-picker-panel lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 5)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option) .optionItem-value{padding-left:var(--components-options-tree-multiple-padding)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option) .optionItem-value:before{left:var(--spacings-XS)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option) .optionItem-value:after{left:var(--spacings-XS)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--components-options-tree-multiple-padding) + var(--components-options-tree-padding-child))}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option) .optionItem-value:before{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child))}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option) .optionItem-value:after{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child))}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--components-options-tree-multiple-padding) + var(--components-options-tree-padding-child) * 2)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option) .optionItem-value:before{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 2)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option) .optionItem-value:after{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 2)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--components-options-tree-multiple-padding) + var(--components-options-tree-padding-child) * 3)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value:before{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 3)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value:after{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 3)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--components-options-tree-multiple-padding) + var(--components-options-tree-padding-child) * 4)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value:before{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 4)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value:after{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 4)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--components-options-tree-multiple-padding) + var(--components-options-tree-padding-child) * 5)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value:before{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 5)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value:after{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 5)}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: LuTooltipTriggerDirective, selector: "[luTooltip]", inputs: ["luTooltip", "luTooltipEnterDelay", "luTooltipLeaveDelay", "luTooltipDisabled", "luTooltipPosition", "luTooltipWhenEllipsis"], outputs: ["luTooltipOnOpen", "luTooltipOnClose"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-tree-option', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [CommonModule, LuTooltipTriggerDirective], providers: [
                        {
                            provide: ALuTreeOptionItem,
                            useExisting: forwardRef(() => LuTreeOptionItemComponent),
                            multi: true,
                        },
                    ], template: "<div class=\"optionItem\" #element>\n\t<div\n\t\tclass=\"optionItem-value\"\n\t\t(click)=\"select()\"\n\t\t[class.is-disabled]=\"disabled\"\n\t\t[class.is-selected]=\"selected\"\n\t\t[class.is-highlighted]=\"highlighted\"\n\t>\n\t\t<ng-container #value></ng-container>\n\t</div>\n\t<div class=\"optionItem-icons\" *ngIf=\"hasChildren\">\n\t\t<span *ngIf=\"!_tree.disabled\" class=\"optionItem-icon parentOnly\" (click)=\"selectSelf()\" [luTooltip]=\"intl.parentOnly\">\n\t\t\t<svg class=\"optionItem-icon-shape\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\">\n\t\t\t\t<path\n\t\t\t\t\topacity=\"0.2\"\n\t\t\t\t\td=\"M8 13C8.55 13 9 12.55 9 12C9 11.45 8.55 11 8 11C7.45 11 7 11.45 7 12C7 12.55 7.45 13 8 13ZM8 18C8.55 18 9 17.55 9 17C9 16.45 8.55 16 8 16C7.45 16 7 16.45 7 17C7 17.55 7.45 18 8 18ZM12 13H20C20.55 13 21 12.55 21 12C21 11.45 20.55 11 20 11H12C11.45 11 11 11.45 11 12C11 12.55 11.45 13 12 13ZM12 18H20C20.55 18 21 17.55 21 17C21 16.45 20.55 16 20 16H12C11.45 16 11 16.45 11 17C11 17.55 11.45 18 12 18ZM8 13C8.55 13 9 12.55 9 12C9 11.45 8.55 11 8 11C7.45 11 7 11.45 7 12C7 12.55 7.45 13 8 13ZM8 18C8.55 18 9 17.55 9 17C9 16.45 8.55 16 8 16C7.45 16 7 16.45 7 17C7 17.55 7.45 18 8 18ZM12 13H20C20.55 13 21 12.55 21 12C21 11.45 20.55 11 20 11H12C11.45 11 11 11.45 11 12C11 12.55 11.45 13 12 13ZM12 18H20C20.55 18 21 17.55 21 17C21 16.45 20.55 16 20 16H12C11.45 16 11 16.45 11 17C11 17.55 11.45 18 12 18Z\"\n\t\t\t\t/>\n\t\t\t\t<path\n\t\t\t\t\td=\"M4 8C4.55 8 5 7.55 5 7C5 6.45 4.55 6 4 6C3.45 6 3 6.45 3 7C3 7.55 3.45 8 4 8ZM7 7C7 7.55 7.45 8 8 8H20C20.55 8 21 7.55 21 7C21 6.45 20.55 6 20 6H8C7.45 6 7 6.45 7 7ZM4 8C4.55 8 5 7.55 5 7C5 6.45 4.55 6 4 6C3.45 6 3 6.45 3 7C3 7.55 3.45 8 4 8ZM7 7C7 7.55 7.45 8 8 8H20C20.55 8 21 7.55 21 7C21 6.45 20.55 6 20 6H8C7.45 6 7 6.45 7 7Z\"\n\t\t\t\t/>\n\t\t\t</svg>\n\t\t</span>\n\t\t<span class=\"optionItem-icon childrenOnly\" (click)=\"selectChildren()\" [luTooltip]=\"intl.childrenOnly\">\n\t\t\t<svg class=\"optionItem-icon-shape\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\">\n\t\t\t\t<path\n\t\t\t\t\td=\"M8 13C8.55 13 9 12.55 9 12C9 11.45 8.55 11 8 11C7.45 11 7 11.45 7 12C7 12.55 7.45 13 8 13ZM8 18C8.55 18 9 17.55 9 17C9 16.45 8.55 16 8 16C7.45 16 7 16.45 7 17C7 17.55 7.45 18 8 18ZM12 13H20C20.55 13 21 12.55 21 12C21 11.45 20.55 11 20 11H12C11.45 11 11 11.45 11 12C11 12.55 11.45 13 12 13ZM12 18H20C20.55 18 21 17.55 21 17C21 16.45 20.55 16 20 16H12C11.45 16 11 16.45 11 17C11 17.55 11.45 18 12 18ZM8 13C8.55 13 9 12.55 9 12C9 11.45 8.55 11 8 11C7.45 11 7 11.45 7 12C7 12.55 7.45 13 8 13ZM8 18C8.55 18 9 17.55 9 17C9 16.45 8.55 16 8 16C7.45 16 7 16.45 7 17C7 17.55 7.45 18 8 18ZM12 13H20C20.55 13 21 12.55 21 12C21 11.45 20.55 11 20 11H12C11.45 11 11 11.45 11 12C11 12.55 11.45 13 12 13ZM12 18H20C20.55 18 21 17.55 21 17C21 16.45 20.55 16 20 16H12C11.45 16 11 16.45 11 17C11 17.55 11.45 18 12 18Z\"\n\t\t\t\t/>\n\t\t\t\t<path\n\t\t\t\t\topacity=\"0.2\"\n\t\t\t\t\td=\"M4 8C4.55 8 5 7.55 5 7C5 6.45 4.55 6 4 6C3.45 6 3 6.45 3 7C3 7.55 3.45 8 4 8ZM7 7C7 7.55 7.45 8 8 8H20C20.55 8 21 7.55 21 7C21 6.45 20.55 6 20 6H8C7.45 6 7 6.45 7 7ZM4 8C4.55 8 5 7.55 5 7C5 6.45 4.55 6 4 6C3.45 6 3 6.45 3 7C3 7.55 3.45 8 4 8ZM7 7C7 7.55 7.45 8 8 8H20C20.55 8 21 7.55 21 7C21 6.45 20.55 6 20 6H8C7.45 6 7 6.45 7 7Z\"\n\t\t\t\t/>\n\t\t\t</svg>\n\t\t</span>\n\t</div>\n</div>\n\n<div #children class=\"children\">\n\t<ng-container #children></ng-container>\n</div>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host{display:block}.optionItem{position:relative}.optionItem-value{border-radius:var(--commons-borderRadius-M);display:block;padding:var(--components-options-item-padding-vertical) var(--components-options-item-padding-horizontal);transition:background-color 50ms;cursor:pointer}.optionItem-value.is-selected{background-color:var(--palettes-primary-50)}.optionItem-value.is-selected:hover{background-color:var(--palettes-primary-100)}.optionItem-value.is-selected:active{background-color:var(--palettes-primary-200)}.optionItem-value.is-selected.is-highlighted{background-color:var(--palettes-primary-100)}.optionItem-value.is-selected.is-highlighted:hover{background-color:var(--palettes-primary-200)}.optionItem-value:hover,.optionItem-value.is-highlighted,.optionItem-value.is-focus,.optionItem-value.is-highlighted:hover,.optionItem-value.is-focus:hover{background-color:var(--palettes-grey-50)}.optionItem-value.is-highlighted:active,.optionItem-value.is-focus:active,.optionItem-value:active{background-color:var(--palettes-grey-100)}:host-context(.lu-select-value) .optionItem-value{padding:0;overflow:hidden;text-overflow:ellipsis}:host-context(.lu-select-value) .optionItem-value:hover,:host-context(.lu-select-value) .optionItem-value.is-focus,:host-context(.lu-select-value) .optionItem-value.is-highlighted{background-color:inherit}:host-context(.mod-multiple) .optionItem-value{position:relative;padding-left:var(--components-options-item-multiple-padding)}:host-context(.mod-multiple) .optionItem-value:after,:host-context(.mod-multiple) .optionItem-value:before{display:block;position:absolute;left:var(--components-options-checkbox-left);top:50%;transform:translateY(-50%)}:host-context(.mod-multiple) .optionItem-value:before{content:\"\";border-radius:var(--components-options-checkbox-border-radius);box-shadow:inset 0 0 0 2px var(--components-options-checkbox-border-color);display:block;height:var(--components-options-checkbox-size);transition-property:background-color,box-shadow;transition-duration:var(--commons-animations-durations-fast);width:var(--components-options-checkbox-size)}:host-context(.mod-multiple) .optionItem-value:after{display:inline-block;vertical-align:text-bottom;font-style:normal;font-family:Lucca icons;color:transparent;font-size:var(--sizes-S-lineHeight);line-height:var(--components-options-checkbox-size);position:absolute;text-align:center;transform:translateY(-50%) scale(0);transition:all .1s;width:var(--components-options-checkbox-size)}@supports (content: \"*\"/\"\"){:host-context(.mod-multiple) .optionItem-value:after{content:\"\\e97d\"/\"\"}}@supports not (content: \"*\"/\"\"){:host-context(.mod-multiple) .optionItem-value:after{content:\"\\e97d\"}}:host-context(.mod-multiple) .optionItem-value.is-selected:before{background-color:var(--components-options-checkbox-color);box-shadow:inset 0 0 0 2px var(--components-options-checkbox-color)}:host-context(.mod-multiple) .optionItem-value.is-selected:after{color:var(--colors-white-color);transform:translateY(-50%) scale(1)}:host-context(.mod-multiple) .optionItem-value.is-disabled{--components-options-checkbox-border-color: var(--palettes-grey-500)}:host-context(.mod-multiple) .optionItem-value:not(.is-disabled):hover:before{box-shadow:inset 0 0 0 2px var(--components-options-checkbox-color)}:host-context(.mod-multiple).establishmentOption .optionItem-value{position:relative;padding-left:calc(var(--components-options-checkbox-size) + var(--spacings-XS) * 2)}:host-context(.mod-multiple).establishmentOption .optionItem-value:before,:host-context(.mod-multiple).establishmentOption .optionItem-value:after{left:var(--spacings-XS)}:host{--components-options-tree-multiple-padding: 2.25rem;--components-options-tree-padding-child: .75rem}.is-disabled{color:var(--palettes-grey-500);-webkit-user-select:none;user-select:none;cursor:default}.is-disabled.is-selected{background-color:var(--palettes-grey-100)}.is-disabled:hover{background-color:inherit}.optionItem:not(:last-child){margin-bottom:var(--spacings-XXS)}.optionItem:hover .optionItem-value{background:var(--palettes-grey-50)}.optionItem:hover .optionItem-icons{opacity:1}.optionItem-value{padding:var(--components-options-item-padding-vertical) var(--components-options-item-padding-horizontal)}.optionItem-icons{display:none;position:absolute;top:var(--spacings-XS);right:var(--spacings-XS);opacity:0;transition:all var(--commons-animations-durations-fast) ease}.optionItem-icon{cursor:pointer;opacity:.66;margin-left:var(--spacings-XS);transition:all var(--commons-animations-durations-fast) ease}.optionItem-icon:hover{opacity:1}.optionItem-icon-shape{fill:var(--components-options-item-icon-color);width:1.4rem;height:1.4rem}:host-context(.lu-picker-panel){padding:0}:host-context(.lu-picker-panel) .optionItem-value:before{top:1.3rem;left:var(--spacings-XS);pointer-events:none}:host-context(.lu-picker-panel) .optionItem-value:after{top:1.3rem;left:var(--spacings-XS);pointer-events:none}:host-context(.lu-picker-panel.mod-multiple) .optionItem-icons{display:block}:host-context(.lu-picker-panel.mod-multiple) .optionItem-value{padding-right:4rem}:host-context(.lu-picker-panel lu-tree-option) .optionItem-value{padding-left:var(--spacings-XS)}:host-context(.lu-picker-panel lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child))}:host-context(.lu-picker-panel lu-tree-option lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 2)}:host-context(.lu-picker-panel lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 3)}:host-context(.lu-picker-panel lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 4)}:host-context(.lu-picker-panel lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 5)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option) .optionItem-value{padding-left:var(--components-options-tree-multiple-padding)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option) .optionItem-value:before{left:var(--spacings-XS)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option) .optionItem-value:after{left:var(--spacings-XS)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--components-options-tree-multiple-padding) + var(--components-options-tree-padding-child))}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option) .optionItem-value:before{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child))}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option) .optionItem-value:after{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child))}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--components-options-tree-multiple-padding) + var(--components-options-tree-padding-child) * 2)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option) .optionItem-value:before{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 2)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option) .optionItem-value:after{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 2)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--components-options-tree-multiple-padding) + var(--components-options-tree-padding-child) * 3)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value:before{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 3)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value:after{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 3)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--components-options-tree-multiple-padding) + var(--components-options-tree-padding-child) * 4)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value:before{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 4)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value:after{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 4)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value{padding-left:calc(var(--components-options-tree-multiple-padding) + var(--components-options-tree-padding-child) * 5)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value:before{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 5)}:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) .optionItem-value:after{left:calc(var(--spacings-XS) + var(--components-options-tree-padding-child) * 5)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { _valueVCR: [{
                type: ViewChild,
                args: ['value', { static: true, read: ViewContainerRef }]
            }], _childrenVCR: [{
                type: ViewChild,
                args: ['children', { static: true, read: ViewContainerRef }]
            }], element: [{
                type: ViewChild,
                args: ['element', { read: ElementRef, static: true }]
            }], onSelect: [{
                type: Output
            }], onSelectSelf: [{
                type: Output
            }], onSelectChildren: [{
                type: Output
            }], tree: [{
                type: Input
            }], selected: [{
                type: Input
            }], highlighted: [{
                type: Input
            }], _contentChildDisplayer: [{
                type: ContentChild,
                args: [ALuInputDisplayer, { static: true }]
            }] } });

class LuTreeOptionItemModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionItemModule, imports: [LuTreeOptionItemComponent], exports: [LuTreeOptionItemComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionItemModule, imports: [LuTreeOptionItemComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionItemModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuTreeOptionItemComponent],
                    exports: [LuTreeOptionItemComponent],
                }]
        }] });

class ALuOptionOperator {
}

class LuOptionFeederComponent {
    constructor() {
        this.outOptions$ = new BehaviorSubject([]);
    }
    set options(options) {
        this.outOptions$.next(options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionFeederComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuOptionFeederComponent, isStandalone: true, selector: "lu-option-feeder", inputs: { options: "options" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuOptionFeederComponent),
                multi: true,
            },
        ], ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionFeederComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-option-feeder', template: '', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuOptionFeederComponent),
                            multi: true,
                        },
                    ] }]
        }], propDecorators: { options: [{
                type: Input
            }] } });

class LuOptionFeederModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionFeederModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuOptionFeederModule, imports: [LuOptionFeederComponent], exports: [LuOptionFeederComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionFeederModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionFeederModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuOptionFeederComponent],
                    exports: [LuOptionFeederComponent],
                }]
        }] });

class ALuTreeOptionOperator extends ALuOptionOperator {
}

class LuTreeOptionFeederComponent {
    constructor() {
        this.outOptions$ = new BehaviorSubject([]);
    }
    set options(options) {
        this.outOptions$.next(options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionFeederComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuTreeOptionFeederComponent, isStandalone: true, selector: "lu-tree-option-feeder", inputs: { options: "options" }, providers: [
            {
                provide: ALuTreeOptionOperator,
                useExisting: forwardRef(() => LuTreeOptionFeederComponent),
                multi: true,
            },
        ], ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionFeederComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-tree-option-feeder', template: '', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [
                        {
                            provide: ALuTreeOptionOperator,
                            useExisting: forwardRef(() => LuTreeOptionFeederComponent),
                            multi: true,
                        },
                    ] }]
        }], propDecorators: { options: [{
                type: Input
            }] } });

class LuTreeOptionFeederModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionFeederModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionFeederModule, imports: [LuTreeOptionFeederComponent], exports: [LuTreeOptionFeederComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionFeederModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionFeederModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuTreeOptionFeederComponent],
                    exports: [LuTreeOptionFeederComponent],
                }]
        }] });

const MAGIC_STEP$1 = 10;
class LuOptionPagerComponent extends ALuOptionOperator {
    constructor() {
        super(...arguments);
        this.paging$ = new BehaviorSubject(MAGIC_STEP$1);
    }
    set inOptions$(in$) {
        this.outOptions$ = combineLatest([in$, this.paging$]).pipe(map(([options, paging]) => {
            return (options || []).slice(0, paging);
        }));
    }
    next() {
        this.paging$.next(this.paging$.value + MAGIC_STEP$1);
    }
    onScrollBottom() {
        this.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPagerComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuOptionPagerComponent, isStandalone: true, selector: "lu-option-pager", providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuOptionPagerComponent),
                multi: true,
            },
            {
                provide: ALuOnScrollBottomSubscriber,
                useExisting: forwardRef(() => LuOptionPagerComponent),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPagerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-option-pager', template: '', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuOptionPagerComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnScrollBottomSubscriber,
                            useExisting: forwardRef(() => LuOptionPagerComponent),
                            multi: true,
                        },
                    ] }]
        }] });

class LuOptionPagerModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPagerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPagerModule, imports: [LuOptionPagerComponent], exports: [LuOptionPagerComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPagerModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPagerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuOptionPagerComponent],
                    exports: [LuOptionPagerComponent],
                }]
        }] });

const MAGIC_STEP = 10;
class LuTreeOptionPagerComponent extends ALuTreeOptionOperator {
    constructor() {
        super(...arguments);
        this.paging$ = new BehaviorSubject(MAGIC_STEP);
    }
    set inOptions$(in$) {
        this.outOptions$ = combineLatest([in$, this.paging$]).pipe(map(([options, paging]) => {
            return this.trim(options, paging);
        }));
    }
    next() {
        this.paging$.next(this.paging$.value + MAGIC_STEP);
    }
    onScrollBottom() {
        this.next();
    }
    trim(trees = [], paging = MAGIC_STEP) {
        const flat = this.flatten(trees);
        const flatTrimmed = flat.slice(0, paging);
        return this.filter(trees, flatTrimmed);
    }
    flatten(trees = []) {
        return trees.map((t) => [t.value, ...this.flatten(t.children)]).reduce((a, v) => [...a, ...v], []);
    }
    filter(trees = [], values) {
        return trees
            .map((t) => {
            if (!values.some((v) => v === t.value)) {
                return undefined;
            }
            return { ...t, children: this.filter(t.children, values) };
        })
            .filter((t) => !!t);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPagerComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuTreeOptionPagerComponent, isStandalone: true, selector: "lu-tree-option-pager", providers: [
            {
                provide: ALuTreeOptionOperator,
                useExisting: forwardRef(() => LuTreeOptionPagerComponent),
                multi: true,
            },
            {
                provide: ALuOnScrollBottomSubscriber,
                useExisting: forwardRef(() => LuTreeOptionPagerComponent),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPagerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-tree-option-pager', template: '', standalone: true, changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: ALuTreeOptionOperator,
                            useExisting: forwardRef(() => LuTreeOptionPagerComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnScrollBottomSubscriber,
                            useExisting: forwardRef(() => LuTreeOptionPagerComponent),
                            multi: true,
                        },
                    ] }]
        }] });

class LuTreeOptionPagerModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPagerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPagerModule, imports: [LuTreeOptionPagerComponent], exports: [LuTreeOptionPagerComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPagerModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPagerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuTreeOptionPagerComponent],
                    exports: [LuTreeOptionPagerComponent],
                }]
        }] });

const LU_OPTION_PLACEHOLDER_TRANSLATIONS = new InjectionToken('LuOptionPlaceholderTranslations', {
    factory: () => luOptionPlaceholderTranslations,
});
const luOptionPlaceholderTranslations = {
    en: {
        placeholderDescription: 'No results match your search criteria.',
        placeholderAction: 'Clear search',
    },
    fr: {
        placeholderDescription: 'Aucun résultat pour votre recherche',
        placeholderAction: 'Vider la recherche',
    },
    es: {
        placeholderDescription: 'No se han encontrado resultados para su búsqueda',
        placeholderAction: 'Eliminar búsqueda',
    },
};

class LuOptionPlaceholderComponent {
    constructor() {
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onClear = new EventEmitter();
        this.intl = getIntl(LU_OPTION_PLACEHOLDER_TRANSLATIONS);
    }
    clear() {
        this.onClear.emit();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPlaceholderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuOptionPlaceholderComponent, isStandalone: true, selector: "lu-option-placeholder", outputs: { onClear: "onClear" }, ngImport: i0, template: "<div class=\"optionPlaceholder\">\n\t<p class=\"optionPlaceholder-content u-marginBottom0\">{{ intl.placeholderDescription }}</p>\n\t<button type=\"button\" class=\"link\" (click)=\"clear()\">{{ intl.placeholderAction }}</button>\n</div>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.optionPlaceholder{display:block;padding:var(--components-options-item-padding-vertical) var(--components-options-item-padding-horizontal);font-style:italic;color:var(--palettes-grey-600)}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPlaceholderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-option-placeholder', standalone: true, template: "<div class=\"optionPlaceholder\">\n\t<p class=\"optionPlaceholder-content u-marginBottom0\">{{ intl.placeholderDescription }}</p>\n\t<button type=\"button\" class=\"link\" (click)=\"clear()\">{{ intl.placeholderAction }}</button>\n</div>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.optionPlaceholder{display:block;padding:var(--components-options-item-padding-vertical) var(--components-options-item-padding-horizontal);font-style:italic;color:var(--palettes-grey-600)}\n"] }]
        }], propDecorators: { onClear: [{
                type: Output
            }] } });

class LuOptionPlaceholderModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPlaceholderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPlaceholderModule, imports: [LuOptionPlaceholderComponent], exports: [LuOptionPlaceholderComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPlaceholderModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPlaceholderModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuOptionPlaceholderComponent],
                    exports: [LuOptionPlaceholderComponent],
                }]
        }] });

class LuOptionSearcherComponent extends ALuOptionOperator {
    constructor() {
        super(...arguments);
        this.searchControl = new FormControl();
        this.clue$ = merge(of(''), this.searchControl.valueChanges);
        this.searchFn = () => true;
    }
    set inOptions$(in$) {
        this.outOptions$ = combineLatest([in$, this.clue$]).pipe(map(([options, clue]) => {
            return clue ? (options || []).filter((o) => this.searchFn(o, clue)) : options || [];
        }));
        this.empty$ = this.outOptions$.pipe(map((o) => !o || o.length === 0));
    }
    onOpen() {
        this.searchInput.nativeElement.focus();
        this.searchControl.setValue('');
    }
    resetClue() {
        this.searchControl.setValue('');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSearcherComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuOptionSearcherComponent, isStandalone: true, selector: "lu-option-searcher", inputs: { searchFn: "searchFn" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuOptionSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuOptionSearcherComponent),
                multi: true,
            },
        ], viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true, read: ElementRef, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"textfield mod-search\">\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"searchControl\" />\n</div>\n\n<lu-option-placeholder *ngIf=\"empty$ | async\" (onClear)=\"resetClue()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"], dependencies: [{ kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1$1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "component", type: LuOptionPlaceholderComponent, selector: "lu-option-placeholder", outputs: ["onClear"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSearcherComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-option-searcher', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [ReactiveFormsModule, CommonModule, LuOptionPlaceholderComponent], providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuOptionSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuOptionSearcherComponent),
                            multi: true,
                        },
                    ], template: "<div class=\"textfield mod-search\">\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"searchControl\" />\n</div>\n\n<lu-option-placeholder *ngIf=\"empty$ | async\" (onClear)=\"resetClue()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"] }]
        }], propDecorators: { searchInput: [{
                type: ViewChild,
                args: ['searchInput', { read: ElementRef, static: true }]
            }], searchFn: [{
                type: Input
            }] } });

class LuOptionSearcherModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSearcherModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSearcherModule, imports: [LuOptionSearcherComponent], exports: [LuOptionSearcherComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSearcherModule, imports: [LuOptionSearcherComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSearcherModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuOptionSearcherComponent],
                    exports: [LuOptionSearcherComponent],
                }]
        }] });

class LuTreeOptionSearcherComponent extends ALuTreeOptionOperator {
    constructor() {
        super(...arguments);
        this.searchControl = new FormControl();
        this.clue$ = merge(of(''), this.searchControl.valueChanges);
        this.searchFn = () => true;
    }
    set inOptions$(in$) {
        this.outOptions$ = combineLatest([in$, this.clue$]).pipe(map(([options, clue]) => {
            if (!clue) {
                return options || [];
            }
            return this.trim(options, clue);
        }));
        this.empty$ = this.outOptions$.pipe(map((o) => !o || o.length === 0));
    }
    onOpen() {
        this.searchInput.nativeElement.focus();
        this.searchControl.setValue('');
    }
    trim(options, clue) {
        return options
            .map((option) => {
            if (this.searchFn(option.value, clue)) {
                return { ...option };
            }
            const trimmedChildren = option.children ? this.trim(option.children, clue) : [];
            if (trimmedChildren.length) {
                return { ...option, children: trimmedChildren };
            }
            return undefined;
        })
            .filter((o) => !!o);
    }
    resetClue() {
        this.searchControl.setValue('');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSearcherComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuTreeOptionSearcherComponent, isStandalone: true, selector: "lu-tree-option-searcher", inputs: { searchFn: "searchFn" }, providers: [
            {
                provide: ALuTreeOptionOperator,
                useExisting: forwardRef(() => LuTreeOptionSearcherComponent),
                multi: true,
            },
            {
                provide: ALuOnOpenSubscriber,
                useExisting: forwardRef(() => LuTreeOptionSearcherComponent),
                multi: true,
            },
        ], viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true, read: ElementRef, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"textfield mod-search\">\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"searchControl\" />\n</div>\n\n<lu-option-placeholder *ngIf=\"empty$ | async\" (onClear)=\"resetClue()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"], dependencies: [{ kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1$1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "component", type: LuOptionPlaceholderComponent, selector: "lu-option-placeholder", outputs: ["onClear"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSearcherComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-tree-option-searcher', changeDetection: ChangeDetectionStrategy.OnPush, imports: [ReactiveFormsModule, CommonModule, LuOptionPlaceholderComponent], standalone: true, providers: [
                        {
                            provide: ALuTreeOptionOperator,
                            useExisting: forwardRef(() => LuTreeOptionSearcherComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOnOpenSubscriber,
                            useExisting: forwardRef(() => LuTreeOptionSearcherComponent),
                            multi: true,
                        },
                    ], template: "<div class=\"textfield mod-search\">\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"searchControl\" />\n</div>\n\n<lu-option-placeholder *ngIf=\"empty$ | async\" (onClear)=\"resetClue()\"></lu-option-placeholder>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}.textfield.mod-search{width:100%}.textfield-input{outline:none}.checkbox.mod-formerEmployee{padding:var(--spacings-XXS) var(--components-options-item-padding-horizontal);border-bottom:var(--commons-divider-width) solid var(--commons-divider-color);background-color:var(--palettes-grey-50);font-style:italic}\n"] }]
        }], propDecorators: { searchInput: [{
                type: ViewChild,
                args: ['searchInput', { read: ElementRef, static: true }]
            }], searchFn: [{
                type: Input
            }] } });

class LuTreeOptionSearcherModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSearcherModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSearcherModule, imports: [LuTreeOptionSearcherComponent], exports: [LuTreeOptionSearcherComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSearcherModule, imports: [LuTreeOptionSearcherComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSearcherModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuTreeOptionSearcherComponent],
                    exports: [LuTreeOptionSearcherComponent],
                }]
        }] });

class LuForGroupContext {
    constructor($implicit, index, count) {
        this.$implicit = $implicit;
        this.index = index;
        this.count = count;
    }
    get first() {
        return this.index === 0;
    }
    get last() {
        return this.index === this.count - 1;
    }
    get even() {
        return this.index % 2 === 0;
    }
    get odd() {
        return !this.even;
    }
}
class LuForGroupsDirective {
    set attrGroupBy(fn) {
        this._groupByFn = fn;
    }
    set inOptions$(options$) {
        this._subs.add(options$.subscribe((options) => this.render(options)));
        this.outOptions$ = options$;
    }
    constructor(_vcr, _cdr, _templateRef) {
        this._vcr = _vcr;
        this._cdr = _cdr;
        this._templateRef = _templateRef;
        this._subs = new Subscription();
    }
    ngOnDestroy() {
        this._subs.unsubscribe();
    }
    render(options) {
        this._vcr.clear();
        const count = options.length;
        const groups = this.groupBy(options);
        groups.forEach((group, index) => {
            this._vcr.createEmbeddedView(this._templateRef, new LuForGroupContext(group, index, count));
        });
        this._cdr.markForCheck();
    }
    groupBy(items) {
        const groups = [];
        items.forEach((item) => {
            const key = this._groupByFn(item);
            let group = groups.find((g) => g.key === key);
            if (!group) {
                group = { key: key, items: [] };
                groups.push(group);
            }
            group.items.push(item);
        });
        return groups;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForGroupsDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.ChangeDetectorRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuForGroupsDirective, isStandalone: true, selector: "[luForGroups]", inputs: { attrGroupBy: ["luForGroupsGroupBy", "attrGroupBy"] }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuForGroupsDirective),
                multi: true,
            },
        ], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForGroupsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luForGroups]',
                    standalone: true,
                    providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuForGroupsDirective),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }, { type: i0.TemplateRef }]; }, propDecorators: { attrGroupBy: [{
                type: Input,
                args: ['luForGroupsGroupBy']
            }] } });

class LuForGroupsModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForGroupsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuForGroupsModule, imports: [LuForGroupsDirective], exports: [LuForGroupsDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForGroupsModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForGroupsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuForGroupsDirective],
                    exports: [LuForGroupsDirective],
                }]
        }] });

class LuForOptionsDirective extends NgForOf {
    set inOptions$(options$) {
        this._subs.add(options$.subscribe((options) => {
            this.ngForOf = options;
            this._changeDetectionRef.markForCheck();
        }));
        this.outOptions$ = options$;
    }
    set luForOptionsTrackBy(fn) {
        this.ngForTrackBy = fn;
    }
    constructor(_viewContainer, _template, _differs, _changeDetectionRef) {
        super(_viewContainer, _template, _differs);
        this._changeDetectionRef = _changeDetectionRef;
        this._subs = new Subscription();
    }
    ngOnDestroy() {
        this._subs.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForOptionsDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuForOptionsDirective, isStandalone: true, selector: "[luForOptions]", inputs: { luForOptionsTrackBy: "luForOptionsTrackBy" }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuForOptionsDirective),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForOptionsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luForOptions]',
                    standalone: true,
                    providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuForOptionsDirective),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { luForOptionsTrackBy: [{
                type: Input
            }] } });

class LuForOptionsModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForOptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuForOptionsModule, imports: [LuForOptionsDirective], exports: [LuForOptionsDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForOptionsModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForOptionsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuForOptionsDirective],
                    exports: [LuForOptionsDirective],
                }]
        }] });

class LuForTreeOptionsDirective extends LuForOptionsDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForTreeOptionsDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: LuForTreeOptionsDirective, isStandalone: true, selector: "[luForTreeOptions]", providers: [
            {
                provide: ALuTreeOptionOperator,
                useExisting: forwardRef(() => LuForTreeOptionsDirective),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForTreeOptionsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luForTreeOptions]',
                    standalone: true,
                    providers: [
                        {
                            provide: ALuTreeOptionOperator,
                            useExisting: forwardRef(() => LuForTreeOptionsDirective),
                            multi: true,
                        },
                    ],
                }]
        }] });

class LuForTreeOptionsModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForTreeOptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuForTreeOptionsModule, imports: [LuForTreeOptionsDirective], exports: [LuForTreeOptionsDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForTreeOptionsModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuForTreeOptionsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuForTreeOptionsDirective],
                    exports: [LuForTreeOptionsDirective],
                }]
        }] });

class LuOptionOperatorModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionOperatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuOptionOperatorModule, imports: [LuOptionPagerComponent, LuOptionFeederComponent, LuOptionSearcherComponent, LuForOptionsDirective, LuForGroupsDirective], exports: [LuOptionPagerComponent, LuOptionFeederComponent, LuOptionSearcherComponent, LuForOptionsDirective, LuForGroupsDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionOperatorModule, imports: [LuOptionSearcherComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionOperatorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuOptionPagerComponent, LuOptionFeederComponent, LuOptionSearcherComponent, LuForOptionsDirective, LuForGroupsDirective],
                    exports: [LuOptionPagerComponent, LuOptionFeederComponent, LuOptionSearcherComponent, LuForOptionsDirective, LuForGroupsDirective],
                }]
        }] });

class LuTreeOptionOperatorModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionOperatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionOperatorModule, imports: [LuTreeOptionFeederComponent, LuForTreeOptionsDirective, LuTreeOptionPagerComponent, LuTreeOptionSearcherModule], exports: [LuTreeOptionFeederComponent, LuForTreeOptionsDirective, LuTreeOptionPagerComponent, LuTreeOptionSearcherModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionOperatorModule, imports: [LuTreeOptionSearcherModule, LuTreeOptionSearcherModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionOperatorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuTreeOptionFeederComponent, LuForTreeOptionsDirective, LuTreeOptionPagerComponent, LuTreeOptionSearcherModule],
                    exports: [LuTreeOptionFeederComponent, LuForTreeOptionsDirective, LuTreeOptionPagerComponent, LuTreeOptionSearcherModule],
                }]
        }] });

class ALuOptionSelector {
}

const LU_OPTION_SELECT_ALL_TRANSLATIONS = new InjectionToken('LuOptionSelectAllTranslations', {
    factory: () => luOptionSelectAllTranslations,
});
const luOptionSelectAllTranslations = {
    en: {
        select: 'Select all',
        deselect: 'Deselect all',
    },
    fr: {
        select: 'Tout sélectionner',
        deselect: 'Tout Déselectionner',
    },
    de: {
        select: 'Alle auswählen',
        deselect: 'Alle abwählen',
    },
    pt: {
        select: 'Selecionar tudo',
        deselect: 'Desselecionar tudo',
    },
    es: {
        select: 'Seleccionar todo',
        deselect: 'Desmarcar todo',
    },
};

class LuOptionSelectAllComponent extends ALuOptionOperator {
    constructor() {
        super(...arguments);
        this.multiple = true;
        this.onSelectValue = new Subject();
        this.fixed = true;
        this.intl = getIntl(LU_OPTION_SELECT_ALL_TRANSLATIONS);
    }
    set inOptions$(in$) {
        this.outOptions$ = in$.pipe(tap((options) => (this.options = options)));
    }
    selectAll() {
        this.onSelectValue.next([...this.options]);
    }
    deselectAll() {
        this.onSelectValue.next([]);
    }
    setValue(values) {
        this._values = values;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSelectAllComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuOptionSelectAllComponent, isStandalone: true, selector: "lu-option-select-all", host: { properties: { "class.position-fixed": "this.fixed" } }, providers: [
            {
                provide: ALuOptionOperator,
                useExisting: forwardRef(() => LuOptionSelectAllComponent),
                multi: true,
            },
            {
                provide: ALuOptionSelector,
                useExisting: forwardRef(() => LuOptionSelectAllComponent),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0, template: "<button type=\"button\" (click)=\"selectAll()\" class=\"link selectAll-button\">{{ intl.select }}</button>\n<button type=\"button\" (click)=\"deselectAll()\" class=\"link selectAll-button u-marginLeftXS\">{{ intl.deselect }}</button>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host .selectAll-button{color:var(--palettes-grey-600);font-size:var(--sizes-S-fontSize);outline:none}:host .selectAll-button:hover{color:var(--palettes-grey-800)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSelectAllComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-option-select-all', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [
                        {
                            provide: ALuOptionOperator,
                            useExisting: forwardRef(() => LuOptionSelectAllComponent),
                            multi: true,
                        },
                        {
                            provide: ALuOptionSelector,
                            useExisting: forwardRef(() => LuOptionSelectAllComponent),
                            multi: true,
                        },
                    ], template: "<button type=\"button\" (click)=\"selectAll()\" class=\"link selectAll-button\">{{ intl.select }}</button>\n<button type=\"button\" (click)=\"deselectAll()\" class=\"link selectAll-button u-marginLeftXS\">{{ intl.deselect }}</button>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host .selectAll-button{color:var(--palettes-grey-600);font-size:var(--sizes-S-fontSize);outline:none}:host .selectAll-button:hover{color:var(--palettes-grey-800)}\n"] }]
        }], propDecorators: { fixed: [{
                type: HostBinding,
                args: ['class.position-fixed']
            }] } });

class LuOptionSelectAllModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSelectAllModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSelectAllModule, imports: [LuOptionSelectAllComponent], exports: [LuOptionSelectAllComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSelectAllModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSelectAllModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuOptionSelectAllComponent],
                    exports: [LuOptionSelectAllComponent],
                }]
        }] });

class ALuTreeOptionSelector extends ALuOptionSelector {
}

class LuTreeOptionSelectAllComponent extends ALuTreeOptionOperator {
    constructor() {
        super(...arguments);
        this.multiple = true;
        this.onSelectValue = new Subject();
        this.fixed = true;
        this.intl = getIntl(LU_OPTION_SELECT_ALL_TRANSLATIONS);
    }
    set inOptions$(in$) {
        this.outOptions$ = in$.pipe(tap((options) => (this.flatOptions = this.flattenTree(options))));
    }
    selectAll() {
        this.onSelectValue.next([...this.flatOptions]);
    }
    deselectAll() {
        this.onSelectValue.next([]);
    }
    setValue(values) {
        this._values = values;
    }
    flattenTree(tree = []) {
        return tree.map((t) => [t.value, ...this.flattenTree(t.children)]).reduce((agg, cur) => [...agg, ...cur], []);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSelectAllComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuTreeOptionSelectAllComponent, isStandalone: true, selector: "lu-tree-option-select-all", host: { properties: { "class.position-fixed": "this.fixed" } }, providers: [
            {
                provide: ALuTreeOptionOperator,
                useExisting: forwardRef(() => LuTreeOptionSelectAllComponent),
                multi: true,
            },
            {
                provide: ALuTreeOptionSelector,
                useExisting: forwardRef(() => LuTreeOptionSelectAllComponent),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0, template: "<button type=\"button\" (click)=\"selectAll()\" class=\"link selectAll-button\">{{ intl.select }}</button>\n<button type=\"button\" (click)=\"deselectAll()\" class=\"link selectAll-button u-marginLeftXS\">{{ intl.deselect }}</button>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host .selectAll-button{color:var(--palettes-grey-600);font-size:var(--sizes-S-fontSize);outline:none}:host .selectAll-button:hover{color:var(--palettes-grey-800)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSelectAllComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-tree-option-select-all', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [
                        {
                            provide: ALuTreeOptionOperator,
                            useExisting: forwardRef(() => LuTreeOptionSelectAllComponent),
                            multi: true,
                        },
                        {
                            provide: ALuTreeOptionSelector,
                            useExisting: forwardRef(() => LuTreeOptionSelectAllComponent),
                            multi: true,
                        },
                    ], template: "<button type=\"button\" (click)=\"selectAll()\" class=\"link selectAll-button\">{{ intl.select }}</button>\n<button type=\"button\" (click)=\"deselectAll()\" class=\"link selectAll-button u-marginLeftXS\">{{ intl.deselect }}</button>\n", styles: [":root{--components-options-item-padding-vertical: var(--spacings-XS);--components-options-item-padding-horizontal: var(--spacings-XS);--components-options-item-multiple-padding: 2.25rem;--components-options-item-icon-color: var(--palettes-grey-800);--components-options-checkbox-left: .5rem;--components-options-checkbox-size: 1.25rem;--components-options-checkbox-color: var(--palettes-primary-700);--components-options-checkbox-border-radius: 6px;--components-options-checkbox-border-color: var(--palettes-grey-700);--components-options-establishment-multiple-padding: 2rem}:host .selectAll-button{color:var(--palettes-grey-600);font-size:var(--sizes-S-fontSize);outline:none}:host .selectAll-button:hover{color:var(--palettes-grey-800)}\n"] }]
        }], propDecorators: { fixed: [{
                type: HostBinding,
                args: ['class.position-fixed']
            }] } });

class LuTreeOptionSelectAllModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSelectAllModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSelectAllModule, imports: [LuTreeOptionSelectAllComponent], exports: [LuTreeOptionSelectAllComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSelectAllModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSelectAllModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuTreeOptionSelectAllComponent],
                    exports: [LuTreeOptionSelectAllComponent],
                }]
        }] });

class LuOptionSelectorModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSelectorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSelectorModule, imports: [LuOptionSelectAllModule], exports: [LuOptionSelectAllModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSelectorModule, imports: [LuOptionSelectAllModule, LuOptionSelectAllModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionSelectorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuOptionSelectAllModule],
                    exports: [LuOptionSelectAllModule],
                }]
        }] });

class LuTreeOptionSelectorModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSelectorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSelectorModule, imports: [LuTreeOptionSelectAllModule], exports: [LuTreeOptionSelectAllModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSelectorModule, imports: [LuTreeOptionSelectAllModule, LuTreeOptionSelectAllModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionSelectorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuTreeOptionSelectAllModule],
                    exports: [LuTreeOptionSelectAllModule],
                }]
        }] });

class ALuOptionPicker extends ALuPickerPanel {
    constructor() {
        super(...arguments);
        this._subs = new Subscription();
        this.optionComparer = (option1, option2) => JSON.stringify(option1) === JSON.stringify(option2);
    }
    setValue(value) {
        this._value = value;
        this._applySelected();
    }
    get _options$() {
        return this.__options$;
    }
    set _options$(options$) {
        this.__options$ = options$;
        // reapply selected when the options change
        this._subs.add(options$.subscribe(() => {
            this._applySelected();
            this._applyHighlight();
        }));
        // subscribe to any option.onSelect
        const singleFlow$ = options$.pipe(switchMap((items) => merge(...items.map((i) => i.onSelect))));
        this._subs.add(singleFlow$.subscribe((option) => this._toggle(option)));
    }
    _toggle(option) {
        const value = option.value;
        if (!this.multiple) {
            this._select(value);
        }
        else {
            const values = this._value || [];
            let newValues;
            if (values.some((v) => this.optionComparer(v, value))) {
                // value was present, we remove it
                newValues = values.filter((v) => !this.optionComparer(v, value));
            }
            else {
                // value was absent, we add it
                newValues = [...values, value];
            }
            this._select(newValues);
        }
    }
    _select(val) {
        this._emitSelectValue(val);
        if (!this.multiple) {
            this._emitCloseEvent();
        }
    }
    destroy() {
        this._subs.unsubscribe();
    }
    _handleKeydown(event) {
        switch (event.key) {
            case 'Escape':
                this._emitCloseEvent();
                event.preventDefault();
                event.stopPropagation();
                break;
            case 'Tab':
                this._emitCloseEvent();
                break;
        }
    }
}

/* eslint-disable @angular-eslint/no-output-native */
class ALuOptionPickerComponent extends ALuOptionPicker {
    /**
     * This method takes classes set on the host lu-popover element and applies them on the
     * popover template that displays in the overlay container.  Otherwise, it's difficult
     * to style the containing popover from outside the component.
     * @param classes list of class names
     */
    set inputPanelClasses(classes) {
        this.panelClasses = classes;
    }
    /**
     * This method takes classes set on the host lu-popover element and applies them on the
     * popover template that displays in the overlay container. Otherwise, it's difficult
     * to style the containing popover from outside the component.
     * @param classes list of class names
     */
    set inputContentClasses(classes) {
        this.contentClasses = classes;
    }
    /**
     * This method take a function that compare options from feeder and options from form value.
     * By default, compare JSON values.
     */
    set inputOptionComparer(comparer) {
        this.optionComparer = comparer;
    }
    set optionsQL(ql) {
        this._optionsQL = ql;
    }
    constructor(_changeDetectorRef, document) {
        super();
        this._changeDetectorRef = _changeDetectorRef;
        this.document = document;
        this.close = new EventEmitter();
        this.open = new EventEmitter();
        this.hovered = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onSelectValue = new EventEmitter();
        this._defaultOverlayPaneClasses = ['mod-optionPicker'];
        this._options = [];
        this._highlightIndex = -1;
        this._isOptionItemsInitialized = false;
        this.overlayPaneClass = this._defaultOverlayPaneClasses;
    }
    _emitSelectValue(val) {
        this.onSelectValue.emit(val);
    }
    ngOnDestroy() {
        super.destroy();
    }
    _emitOpenEvent() {
        this.open.emit();
    }
    _emitCloseEvent() {
        this.close.emit();
    }
    _emitHoveredEvent(h) {
        this.hovered.emit(h);
    }
    onOpen() {
        super.onOpen();
        this.highlightIndex = -1;
        this._incrHighlight();
        this._applySelected();
    }
    set vcTemplateRef(tr) {
        this.templateRef = tr;
    }
    // keydown
    _handleKeydown(event) {
        super._handleKeydown(event);
        switch (event.key) {
            case 'Enter':
                this._selectHighlighted();
                event.preventDefault();
                event.stopPropagation();
                break;
            case 'ArrowUp':
                this._decrHighlight();
                event.preventDefault();
                event.stopPropagation();
                break;
            case 'ArrowDown':
                this._incrHighlight();
                event.preventDefault();
                event.stopPropagation();
                break;
        }
    }
    get highlightIndex() {
        return this._highlightIndex;
    }
    set highlightIndex(i) {
        this._highlightIndex = i;
        this._applyHighlight(true);
    }
    _initHighlight() {
        this._subs.add(this._options$.subscribe((options) => {
            const optionCount = options.length;
            const newHighlight = Math.max(Math.min(this.highlightIndex, optionCount - 1), -1);
            if (newHighlight !== this.highlightIndex) {
                this.highlightIndex = newHighlight;
            }
        }));
        setTimeout(() => {
            this.highlightIndex = -1;
        }, 1);
    }
    _incrHighlight() {
        const nextIndex = this._options.findIndex((item, index) => index > this.highlightIndex && !item.disabled);
        this.highlightIndex = nextIndex > -1 ? nextIndex : this._options.findIndex((item) => !item.disabled);
    }
    _decrHighlight() {
        //NB: findLastIndex would be better but is not available on this project
        let nextIndex = -1;
        for (let i = this.highlightIndex - 1; i >= 0; --i) {
            if (!this._options[i].disabled) {
                nextIndex = i;
                break;
            }
        }
        if (nextIndex > -1) {
            this.highlightIndex = nextIndex;
            return;
        }
        const optionsLength = this._options.length - 1;
        for (let i = optionsLength; i >= 0; --i) {
            if (!this._options[i].disabled) {
                nextIndex = i;
                break;
            }
        }
        this.highlightIndex = nextIndex;
    }
    _applyHighlight(reScroll = false) {
        if (!this.isOpen) {
            return;
        }
        const options = this._options;
        // remove `is-highlighted` class from all other options
        options.forEach((option) => (option.highlighted = false));
        // apply `is-highlighted` to current highlight
        const highlightedOption = options[this.highlightIndex];
        if (highlightedOption) {
            highlightedOption.highlighted = true;
            // scroll to let the highlighted option visible
            if (reScroll) {
                setTimeout(() => {
                    this._scrollToHighlight(highlightedOption.element.nativeElement);
                }, 1);
            }
        }
        this._changeDetectorRef.markForCheck();
    }
    _scrollToHighlight(targetElt) {
        if (!targetElt) {
            return;
        }
        const contentElt = this.document.querySelector('.lu-picker-content');
        if (!contentElt) {
            return;
        }
        const headerElt = this.document.querySelector('.lu-picker-content .lu-picker-header');
        const headerHeight = headerElt ? headerElt.offsetHeight : 0;
        const footerElt = this.document.querySelector('.lu-picker-content .lu-picker-footer');
        const footerHeight = footerElt ? footerElt.offsetHeight : 0;
        // highlighted option is too high
        if (contentElt.scrollTop + headerHeight > targetElt.offsetTop) {
            contentElt.scrollTop = targetElt.offsetTop - headerHeight;
            return;
        }
        // highlight option is too low
        const offsetHeight = contentElt.offsetHeight;
        if (contentElt.scrollTop + offsetHeight - footerHeight < targetElt.offsetTop + targetElt.offsetHeight) {
            contentElt.scrollTop = targetElt.offsetTop + targetElt.offsetHeight - offsetHeight + footerHeight;
            return;
        }
    }
    _selectHighlighted() {
        const options = this._options ? this._options : [];
        const highlightedOption = options[this.highlightIndex];
        if (highlightedOption) {
            this._toggle(highlightedOption);
        }
    }
    _initSelected() {
        this._subs.add(this._options$.subscribe(() => {
            this._applySelected();
        }));
    }
    _applySelected() {
        if (!this._options) {
            return;
        }
        // const selectedClass = 'is-selected';
        const options = this._options;
        // remove `is-selected` class from all other options
        options.forEach((option) => (option.selected = false));
        // add `is-selected` to all selected indexes
        const selectedIndexes = [];
        if (!this.multiple) {
            const selectedIndex = this._options.findIndex((o) => this.optionComparer(o.value, this._value));
            if (selectedIndex !== -1) {
                selectedIndexes.push(selectedIndex);
            }
            if (selectedIndex !== -1 && this.highlightIndex === -1) {
                this.highlightIndex = selectedIndex;
            }
        }
        else {
            const values = this._value || [];
            const matchingIndexes = this._options
                .map((o) => values.some((v) => this.optionComparer(o.value, v)))
                .map((f, i) => (f ? i : null))
                .filter((i) => i !== null);
            selectedIndexes.push(...matchingIndexes);
            // selectedIndexes.push(
            // 	...values
            // 	.map(v => this._options.findIndex(o => this.optionComparer(o.value, v)))
            // 	.filter(i => i !== -1)
            // );
        }
        selectedIndexes.forEach((i) => {
            const option = options[i];
            if (option) {
                option.selected = true;
            }
        });
    }
    initItems() {
        const items$ = merge(of(this._optionsQL), this._optionsQL.changes).pipe(map((q) => q.toArray()), delay(0), share());
        items$.subscribe((o) => (this._options = o || []));
        this._options$ = items$;
        this._initHighlight();
        this._initSelected();
    }
    ngAfterViewInit() {
        this.initItems();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuOptionPickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: ALuOptionPickerComponent, inputs: { inputPanelClasses: ["panel-classes", "inputPanelClasses"], inputContentClasses: ["content-classes", "inputContentClasses"], inputOptionComparer: ["option-comparer", "inputOptionComparer"] }, outputs: { close: "close", open: "open", hovered: "hovered", onSelectValue: "onSelectValue" }, queries: [{ propertyName: "optionsQL", predicate: ALuOptionItem, descendants: true }], viewQueries: [{ propertyName: "vcTemplateRef", first: true, predicate: TemplateRef, descendants: true, static: true }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuOptionPickerComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { inputPanelClasses: [{
                type: Input,
                args: ['panel-classes']
            }], inputContentClasses: [{
                type: Input,
                args: ['content-classes']
            }], inputOptionComparer: [{
                type: Input,
                args: ['option-comparer']
            }], close: [{
                type: Output
            }], open: [{
                type: Output
            }], hovered: [{
                type: Output
            }], onSelectValue: [{
                type: Output
            }], optionsQL: [{
                type: ContentChildren,
                args: [ALuOptionItem, { descendants: true }]
            }], vcTemplateRef: [{
                type: ViewChild,
                args: [TemplateRef, { static: true }]
            }] } });
/**
 * basic option picker panel
 */
class LuOptionPickerComponent extends ALuOptionPickerComponent {
    constructor(_changeDetectorRef, document) {
        super(_changeDetectorRef, document);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuOptionPickerComponent, isStandalone: true, selector: "lu-option-picker", providers: [
            {
                provide: ALuPickerPanel,
                useExisting: forwardRef(() => LuOptionPickerComponent),
            },
        ], exportAs: ["LuOptionPicker"], usesInheritance: true, ngImport: i0, template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-option-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t[class.mod-multiple]=\"multiple\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\">\n\t\t\t<div class=\"lu-picker-content-option\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</ng-template>\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "ngmodule", type: OverlayModule }, { kind: "ngmodule", type: A11yModule }, { kind: "directive", type: i2.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }], animations: [luTransformPopover], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-option-picker', changeDetection: ChangeDetectionStrategy.OnPush, animations: [luTransformPopover], exportAs: 'LuOptionPicker', standalone: true, imports: [CommonModule, OverlayModule, LuOptionItemComponent, A11yModule], providers: [
                        {
                            provide: ALuPickerPanel,
                            useExisting: forwardRef(() => LuOptionPickerComponent),
                        },
                    ], template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-option-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t[class.mod-multiple]=\"multiple\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\">\n\t\t\t<div class=\"lu-picker-content-option\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });

class ALuOptionPickerAdvancedComponent extends ALuOptionPickerComponent {
    set operatorsQL(ql) {
        this._operatorsQL = ql;
    }
    set onOpenSubsQL(ql) {
        this._onOpenSubscribers = ql.toArray();
    }
    set onCloseSubsQL(ql) {
        this._onCloseSubscribers = ql.toArray();
    }
    set onScrollBottomSubsQL(ql) {
        this._onScrollBottomSubscribers = ql.toArray();
    }
    set selectorsQL(ql) {
        this._selectorsQL = ql;
    }
    constructor(_changeDetectorRef, document) {
        super(_changeDetectorRef, document);
        this._operators = [];
        this._onOpenSubscribers = [];
        this._onCloseSubscribers = [];
        this._onScrollBottomSubscribers = [];
        this._selectors = [];
    }
    onScrollBottom() {
        this._onScrollBottomSubscribers.forEach((o) => {
            if (!o.onScrollBottom) {
                return;
            }
            o.onScrollBottom();
        });
    }
    onOpen() {
        this._onOpenSubscribers.forEach((o) => {
            o.onOpen();
        });
        const operators = this._operators || [];
        const lastOperator = operators[operators.length - 1];
        if (lastOperator && lastOperator.outOptions$) {
            this.loading$ = lastOperator.outOptions$.pipe(first(), map(() => false), startWith(true), shareReplay());
        }
        super.onOpen();
    }
    onClose() {
        this._onCloseSubscribers.forEach((o) => {
            o.onClose();
        });
        super.onClose();
    }
    setValue(value) {
        super.setValue(value);
        this._selectors.forEach((s) => s.setValue(value));
    }
    initOperators() {
        const operators = this._operatorsQL.toArray();
        this._operators = operators;
        let options$;
        operators.forEach((operator) => {
            operator.inOptions$ = options$;
            options$ = operator.outOptions$;
        });
    }
    initSelectors() {
        // TODO : FIX changes type
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const selectors$ = this._selectorsQL.changes.pipe(startWith(this._selectorsQL.toArray()));
        this._subs.add(selectors$.subscribe((selectors) => {
            this._selectors = selectors;
            this._selectors.forEach((s) => s.setValue(this._value));
            this._subs.add(merge(this._selectors.map((s) => s.onSelectValue))
                .pipe(mergeAll())
                .subscribe((values) => {
                this._select(values);
            }));
        }));
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.initOperators();
        this.initSelectors();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuOptionPickerAdvancedComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: ALuOptionPickerAdvancedComponent, queries: [{ propertyName: "operatorsQL", predicate: ALuOptionOperator, descendants: true }, { propertyName: "onOpenSubsQL", predicate: ALuOnOpenSubscriber, descendants: true }, { propertyName: "onCloseSubsQL", predicate: ALuOnCloseSubscriber, descendants: true }, { propertyName: "onScrollBottomSubsQL", predicate: ALuOnScrollBottomSubscriber, descendants: true }, { propertyName: "selectorsQL", predicate: ALuOptionSelector, descendants: true }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuOptionPickerAdvancedComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { operatorsQL: [{
                type: ContentChildren,
                args: [ALuOptionOperator, { descendants: true }]
            }], onOpenSubsQL: [{
                type: ContentChildren,
                args: [ALuOnOpenSubscriber, { descendants: true }]
            }], onCloseSubsQL: [{
                type: ContentChildren,
                args: [ALuOnCloseSubscriber, { descendants: true }]
            }], onScrollBottomSubsQL: [{
                type: ContentChildren,
                args: [ALuOnScrollBottomSubscriber, { descendants: true }]
            }], selectorsQL: [{
                type: ContentChildren,
                args: [ALuOptionSelector, { descendants: true }]
            }] } });
/**
 * advanced option picker panel
 */
class LuOptionPickerAdvancedComponent extends ALuOptionPickerAdvancedComponent {
    constructor(_changeDetectorRef, document) {
        super(_changeDetectorRef, document);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPickerAdvancedComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuOptionPickerAdvancedComponent, isStandalone: true, selector: "lu-option-picker-advanced", providers: [
            {
                provide: ALuPickerPanel,
                useExisting: forwardRef(() => LuOptionPickerAdvancedComponent),
            },
        ], exportAs: ["LuOptionPickerAdvanced"], usesInheritance: true, ngImport: i0, template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-option-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t[class.mod-multiple]=\"multiple\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div\n\t\t\t[class.is-loading]=\"loading$ | async\"\n\t\t\tclass=\"lu-picker-content\"\n\t\t\t[ngClass]=\"contentClassesMap\"\n\t\t\t[cdkTrapFocus]=\"trapFocus\"\n\t\t\tluScroll\n\t\t\t(onScrollBottom)=\"onScrollBottom()\"\n\t\t>\n\t\t\t<ng-content></ng-content>\n\t\t\t<div *ngIf=\"loading$ | async\" class=\"loading lu-picker-loading\"></div>\n\t\t</div>\n\t</div>\n</ng-template>\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "ngmodule", type: OverlayModule }, { kind: "directive", type: LuScrollDirective, selector: "[luScroll]", inputs: ["debounceTime"], outputs: ["onScroll", "onScrollTop", "onScrollBottom", "onScrollLeft", "onScrollRight"], exportAs: ["luScroll"] }, { kind: "ngmodule", type: A11yModule }, { kind: "directive", type: i2.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }], animations: [luTransformPopover], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPickerAdvancedComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-option-picker-advanced', changeDetection: ChangeDetectionStrategy.OnPush, animations: [luTransformPopover], exportAs: 'LuOptionPickerAdvanced', standalone: true, imports: [CommonModule, OverlayModule, LuOptionItemComponent, LuScrollDirective, A11yModule], providers: [
                        {
                            provide: ALuPickerPanel,
                            useExisting: forwardRef(() => LuOptionPickerAdvancedComponent),
                        },
                    ], template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-option-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t[class.mod-multiple]=\"multiple\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div\n\t\t\t[class.is-loading]=\"loading$ | async\"\n\t\t\tclass=\"lu-picker-content\"\n\t\t\t[ngClass]=\"contentClassesMap\"\n\t\t\t[cdkTrapFocus]=\"trapFocus\"\n\t\t\tluScroll\n\t\t\t(onScrollBottom)=\"onScrollBottom()\"\n\t\t>\n\t\t\t<ng-content></ng-content>\n\t\t\t<div *ngIf=\"loading$ | async\" class=\"loading lu-picker-loading\"></div>\n\t\t</div>\n\t</div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });

class LuOptionPickerModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPickerModule, imports: [LuOptionPickerComponent, LuOptionPickerAdvancedComponent, LuOptionItemComponent], exports: [LuOptionPickerComponent, LuOptionPickerAdvancedComponent, LuOptionItemComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPickerModule, imports: [LuOptionPickerComponent, LuOptionPickerAdvancedComponent, LuOptionItemComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionPickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuOptionPickerComponent, LuOptionPickerAdvancedComponent, LuOptionItemComponent],
                    exports: [LuOptionPickerComponent, LuOptionPickerAdvancedComponent, LuOptionItemComponent],
                }]
        }] });

var ToggleMode;
(function (ToggleMode) {
    ToggleMode[ToggleMode["all"] = 0] = "all";
    ToggleMode[ToggleMode["self"] = 1] = "self";
    ToggleMode[ToggleMode["children"] = 2] = "children";
})(ToggleMode || (ToggleMode = {}));
class ALuTreeOptionPickerComponent extends ALuOptionPickerComponent {
    set optionsQL(ql) {
        this._optionsQL = ql;
    }
    set _options$(optionItems$) {
        // reapply selected when the options change
        this._subs.add(optionItems$.subscribe(() => this._applySelected()));
        // subscribe to any option.onSelect
        const singleFlowSelect$ = optionItems$.pipe(switchMap((items) => merge(...items.map((i) => i.onSelect))));
        const singleFlowSelectSelf$ = optionItems$.pipe(switchMap((items) => merge(...items.map((i) => i.onSelectSelf))));
        const singleFlowSelectChildren$ = optionItems$.pipe(switchMap((items) => merge(...items.map((i) => i.onSelectChildren))));
        this._subs.add(singleFlowSelect$.subscribe((option) => this._toggle(option, ToggleMode.all)));
        this._subs.add(singleFlowSelectSelf$.subscribe((option) => this._toggle(option, ToggleMode.self)));
        this._subs.add(singleFlowSelectChildren$.subscribe((option) => this._toggle(option, ToggleMode.children)));
    }
    constructor(_changeDetectorRef, document) {
        super(_changeDetectorRef, document);
    }
    _toggle(option, mod = ToggleMode.all) {
        switch (mod) {
            case ToggleMode.self:
                return this._toggleSelf(option);
            case ToggleMode.children:
                return this._toggleChildren(option);
            default:
                return this._toggleAll(option);
        }
    }
    _toggleAll(option) {
        const value = option.value;
        if (!this.multiple) {
            this._select(value);
            return;
        }
        const allChildren = option.allChildren.map((i) => i.value);
        const values = this._value || [];
        let newValues;
        const selfSelected = values.some((v) => this.optionComparer(v, value));
        const allChildrenSelected = allChildren.every((child) => values.some((v) => this.optionComparer(v, child)));
        if (selfSelected && allChildrenSelected) {
            // remove option and its children
            newValues = this._remove(values, [value, ...allChildren]);
        }
        else {
            // add option and its children
            newValues = this._add(values, [value, ...allChildren]);
        }
        this._select(newValues);
    }
    _toggleSelf(option) {
        const value = option.value;
        if (!this.multiple) {
            this._select(value);
            return;
        }
        const allChildren = option.allChildren.map((i) => i.value);
        const values = this._value || [];
        const selfSelected = values.some((v) => this.optionComparer(v, value));
        const someChildSelected = allChildren.some((child) => values.some((v) => this.optionComparer(v, child)));
        let newValues = this._remove(values, [...allChildren]);
        if (selfSelected && !someChildSelected) {
            // remove option
            newValues = this._remove(newValues, [value]);
        }
        else {
            // add option
            newValues = this._add(newValues, [value]);
        }
        this._select(newValues);
    }
    _toggleChildren(option) {
        const value = option.value;
        if (!this.multiple) {
            this._select(value);
            return;
        }
        const allChildren = option.allChildren.map((i) => i.value);
        const values = this._value || [];
        const selfSelected = values.some((v) => this.optionComparer(v, value));
        let newValues = this._remove(values, [value]);
        const allChildrenSelected = allChildren.every((child) => values.some((v) => this.optionComparer(v, child)));
        if (allChildrenSelected && !selfSelected) {
            newValues = this._remove(newValues, allChildren);
        }
        else {
            newValues = this._add(newValues, allChildren);
        }
        this._select(newValues);
    }
    _add(values, entries) {
        const newEntries = entries.filter((entry) => !values.some((v) => this.optionComparer(v, entry)));
        return [...values, ...newEntries];
    }
    _remove(values, entries) {
        const entriesToKeep = values.filter((value) => !entries.some((e) => this.optionComparer(e, value)));
        return [...entriesToKeep];
    }
    initItems() {
        const items$ = this._optionsQL.changes.pipe(startWith(this._optionsQL), map((q) => q.toArray()), map((roots) => roots.map((r) => [r, ...r.allChildren]).reduce((agg, val) => [...agg, ...val], [])), delay(0));
        this._subs.add(items$.subscribe((o) => (this._options = o || [])));
        this._options$ = items$;
    }
    ngAfterViewInit() {
        this.initItems();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuTreeOptionPickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: ALuTreeOptionPickerComponent, queries: [{ propertyName: "optionsQL", predicate: ALuTreeOptionItem, descendants: true }, { propertyName: "optionsQLVR", predicate: ALuTreeOptionItem, descendants: true, read: ViewContainerRef }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuTreeOptionPickerComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { optionsQL: [{
                type: ContentChildren,
                args: [ALuTreeOptionItem, { descendants: true }]
            }], optionsQLVR: [{
                type: ContentChildren,
                args: [ALuTreeOptionItem, {
                        descendants: true,
                        read: ViewContainerRef,
                    }]
            }] } });
/**
 * basic tree option picker panel
 */
class LuTreeOptionPickerComponent extends ALuTreeOptionPickerComponent {
    constructor(_changeDetectorRef, document) {
        super(_changeDetectorRef, document);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuTreeOptionPickerComponent, isStandalone: true, selector: "lu-tree-option-picker", providers: [
            {
                provide: ALuPickerPanel,
                useExisting: forwardRef(() => LuTreeOptionPickerComponent),
            },
        ], exportAs: ["LuTreeOptionPicker"], usesInheritance: true, ngImport: i0, template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-tree-option-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t[class.mod-multiple]=\"multiple\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\">\n\t\t\t<div class=\"lu-picker-content-option\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</ng-template>\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "ngmodule", type: A11yModule }, { kind: "directive", type: i2.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }], animations: [luTransformPopover], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-tree-option-picker', changeDetection: ChangeDetectionStrategy.OnPush, animations: [luTransformPopover], exportAs: 'LuTreeOptionPicker', standalone: true, imports: [CommonModule, A11yModule], providers: [
                        {
                            provide: ALuPickerPanel,
                            useExisting: forwardRef(() => LuTreeOptionPickerComponent),
                        },
                    ], template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-tree-option-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t[class.mod-multiple]=\"multiple\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\">\n\t\t\t<div class=\"lu-picker-content-option\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });

class ALuTreeOptionPickerAdvancedComponent extends ALuTreeOptionPickerComponent {
    set operatorsQL(ql) {
        this._operatorsQL = ql;
    }
    set onOpenSubsQL(ql) {
        this._onOpenSubscribers = ql.toArray();
    }
    set onCloseSubsQL(ql) {
        this._onCloseSubscribers = ql.toArray();
    }
    set onScrollBottomSubsQL(ql) {
        this._onScrollBottomSubscribers = ql.toArray();
    }
    set selectorsQL(ql) {
        this._selectorsQL = ql;
    }
    constructor(_changeDetectorRef, document) {
        super(_changeDetectorRef, document);
        this._operators = [];
        this._onOpenSubscribers = [];
        this._onCloseSubscribers = [];
        this._onScrollBottomSubscribers = [];
        this._selectors = [];
    }
    onScrollBottom() {
        this._onScrollBottomSubscribers.forEach((o) => {
            if (!o.onScrollBottom) {
                return;
            }
            o.onScrollBottom();
        });
    }
    onOpen() {
        this._onOpenSubscribers.forEach((o) => {
            o.onOpen();
        });
        super.onOpen();
    }
    onClose() {
        this._onCloseSubscribers.forEach((o) => {
            o.onClose();
        });
        super.onClose();
    }
    setValue(value) {
        super.setValue(value);
        this._selectors.forEach((s) => s.setValue(value));
    }
    initOperators() {
        const operators = this._operatorsQL.toArray();
        this._operators = operators;
        let options$;
        operators.forEach((operator) => {
            operator.inOptions$ = options$;
            options$ = operator.outOptions$;
        });
        const lastOperator = operators[operators.length - 1];
        if (lastOperator && lastOperator.outOptions$) {
            this.loading$ = lastOperator.outOptions$.pipe(first(), map(() => false), startWith(true), shareReplay());
        }
    }
    initSelectors() {
        this._selectors = this._selectorsQL.toArray();
        this._subs.add(merge(this._selectors.map((s) => s.onSelectValue))
            .pipe(mergeAll())
            .subscribe((values) => {
            this._select(values);
        }));
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.initOperators();
        this.initSelectors();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuTreeOptionPickerAdvancedComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: ALuTreeOptionPickerAdvancedComponent, queries: [{ propertyName: "operatorsQL", predicate: ALuTreeOptionOperator, descendants: true }, { propertyName: "onOpenSubsQL", predicate: ALuOnOpenSubscriber, descendants: true }, { propertyName: "onCloseSubsQL", predicate: ALuOnCloseSubscriber, descendants: true }, { propertyName: "onScrollBottomSubsQL", predicate: ALuOnScrollBottomSubscriber, descendants: true }, { propertyName: "selectorsQL", predicate: ALuTreeOptionSelector, descendants: true }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: ALuTreeOptionPickerAdvancedComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { operatorsQL: [{
                type: ContentChildren,
                args: [ALuTreeOptionOperator, { descendants: true }]
            }], onOpenSubsQL: [{
                type: ContentChildren,
                args: [ALuOnOpenSubscriber, { descendants: true }]
            }], onCloseSubsQL: [{
                type: ContentChildren,
                args: [ALuOnCloseSubscriber, { descendants: true }]
            }], onScrollBottomSubsQL: [{
                type: ContentChildren,
                args: [ALuOnScrollBottomSubscriber, { descendants: true }]
            }], selectorsQL: [{
                type: ContentChildren,
                args: [ALuTreeOptionSelector, { descendants: true }]
            }] } });
/**
 * advanced option picker panel
 */
class LuTreeOptionPickerAdvancedComponent extends ALuTreeOptionPickerAdvancedComponent {
    constructor(_changeDetectorRef, document) {
        super(_changeDetectorRef, document);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPickerAdvancedComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: LuTreeOptionPickerAdvancedComponent, isStandalone: true, selector: "lu-tree-option-picker-advanced", providers: [
            {
                provide: ALuPickerPanel,
                useExisting: forwardRef(() => LuTreeOptionPickerAdvancedComponent),
            },
        ], exportAs: ["LuOptionPicker"], usesInheritance: true, ngImport: i0, template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-tree-option-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t[class.mod-multiple]=\"multiple\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\" luScroll (onScrollBottom)=\"onScrollBottom()\">\n\t\t\t<div class=\"lu-picker-content-option\">\n\t\t\t\t<ng-content [class.is-loading]=\"loading$ | async\"></ng-content>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</ng-template>\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "ngmodule", type: A11yModule }, { kind: "directive", type: i2.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }], animations: [luTransformPopover], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPickerAdvancedComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-tree-option-picker-advanced', changeDetection: ChangeDetectionStrategy.OnPush, animations: [luTransformPopover], exportAs: 'LuOptionPicker', standalone: true, imports: [CommonModule, A11yModule], providers: [
                        {
                            provide: ALuPickerPanel,
                            useExisting: forwardRef(() => LuTreeOptionPickerAdvancedComponent),
                        },
                    ], template: "<ng-template>\n\t<div\n\t\tclass=\"lu-picker-panel lu-tree-option-picker-panel\"\n\t\trole=\"dialog\"\n\t\t[ngClass]=\"panelClassesMap\"\n\t\t[class.mod-multiple]=\"multiple\"\n\t\t(click)=\"onClick()\"\n\t\t(mouseover)=\"onMouseOver()\"\n\t\t(mouseleave)=\"onMouseLeave()\"\n\t\t(mousedown)=\"onMouseDown()\"\n\t>\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\" luScroll (onScrollBottom)=\"onScrollBottom()\">\n\t\t\t<div class=\"lu-picker-content-option\">\n\t\t\t\t<ng-content [class.is-loading]=\"loading$ | async\"></ng-content>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });

class LuTreeOptionPickerModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPickerModule, imports: [CommonModule, OverlayModule, LuScrollDirective, A11yModule, LuTreeOptionPickerAdvancedComponent, LuTreeOptionPickerComponent], exports: [LuTreeOptionPickerComponent, LuTreeOptionPickerAdvancedComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPickerModule, imports: [CommonModule, OverlayModule, A11yModule, LuTreeOptionPickerAdvancedComponent, LuTreeOptionPickerComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionPickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, OverlayModule, LuScrollDirective, A11yModule, LuTreeOptionPickerAdvancedComponent, LuTreeOptionPickerComponent],
                    exports: [LuTreeOptionPickerComponent, LuTreeOptionPickerAdvancedComponent],
                }]
        }] });

class ALuTreeOptionPicker extends ALuOptionPicker {
}

class LuOptionModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuOptionModule, imports: [LuOptionItemComponent,
            LuOptionPickerComponent,
            LuOptionPickerAdvancedComponent,
            LuOptionPagerComponent,
            LuOptionFeederComponent,
            LuOptionSearcherComponent,
            LuForOptionsDirective,
            LuForGroupsDirective,
            LuOptionSelectAllComponent,
            LuOptionPlaceholderComponent], exports: [LuOptionItemComponent,
            LuOptionPickerAdvancedComponent,
            LuOptionPickerComponent,
            LuOptionPagerComponent,
            LuOptionFeederComponent,
            LuOptionSearcherComponent,
            LuForOptionsDirective,
            LuForGroupsDirective,
            LuOptionSelectAllComponent,
            LuOptionPlaceholderComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionModule, imports: [LuOptionItemComponent,
            LuOptionPickerComponent,
            LuOptionPickerAdvancedComponent,
            LuOptionSearcherComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuOptionModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        LuOptionItemComponent,
                        LuOptionPickerComponent,
                        LuOptionPickerAdvancedComponent,
                        LuOptionPagerComponent,
                        LuOptionFeederComponent,
                        LuOptionSearcherComponent,
                        LuForOptionsDirective,
                        LuForGroupsDirective,
                        LuOptionSelectAllComponent,
                        LuOptionPlaceholderComponent,
                    ],
                    exports: [
                        LuOptionItemComponent,
                        LuOptionPickerAdvancedComponent,
                        LuOptionPickerComponent,
                        LuOptionPagerComponent,
                        LuOptionFeederComponent,
                        LuOptionSearcherComponent,
                        LuForOptionsDirective,
                        LuForGroupsDirective,
                        LuOptionSelectAllComponent,
                        LuOptionPlaceholderComponent,
                    ],
                }]
        }] });

class LuTreeOptionModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionModule, imports: [LuTreeOptionItemModule, LuTreeOptionPickerModule, LuTreeOptionOperatorModule, LuTreeOptionSelectorModule], exports: [LuTreeOptionItemModule, LuTreeOptionPickerModule, LuTreeOptionOperatorModule, LuTreeOptionSelectorModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionModule, imports: [LuTreeOptionItemModule, LuTreeOptionPickerModule, LuTreeOptionOperatorModule, LuTreeOptionSelectorModule, LuTreeOptionItemModule, LuTreeOptionPickerModule, LuTreeOptionOperatorModule, LuTreeOptionSelectorModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: LuTreeOptionModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LuTreeOptionItemModule, LuTreeOptionPickerModule, LuTreeOptionOperatorModule, LuTreeOptionSelectorModule],
                    exports: [LuTreeOptionItemModule, LuTreeOptionPickerModule, LuTreeOptionOperatorModule, LuTreeOptionSelectorModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ALuOptionItem, ALuOptionOperator, ALuOptionPicker, ALuOptionPickerAdvancedComponent, ALuOptionPickerComponent, ALuOptionSelector, ALuTreeOptionItem, ALuTreeOptionOperator, ALuTreeOptionPicker, ALuTreeOptionPickerAdvancedComponent, ALuTreeOptionPickerComponent, ALuTreeOptionSelector, LU_OPTION_PLACEHOLDER_TRANSLATIONS, LU_OPTION_SELECT_ALL_TRANSLATIONS, LU_TREE_OPTION_ITEM_TRANSLATIONS, LuForGroupContext, LuForGroupsDirective, LuForGroupsModule, LuForOptionsDirective, LuForOptionsModule, LuForTreeOptionsDirective, LuForTreeOptionsModule, LuOptionFeederComponent, LuOptionFeederModule, LuOptionItemComponent, LuOptionItemModule, LuOptionModule, LuOptionOperatorModule, LuOptionPagerComponent, LuOptionPagerModule, LuOptionPickerAdvancedComponent, LuOptionPickerComponent, LuOptionPickerModule, LuOptionPlaceholderComponent, LuOptionPlaceholderModule, LuOptionSearcherComponent, LuOptionSearcherModule, LuOptionSelectAllComponent, LuOptionSelectAllModule, LuOptionSelectorModule, LuTreeOptionFeederComponent, LuTreeOptionFeederModule, LuTreeOptionItemComponent, LuTreeOptionItemModule, LuTreeOptionModule, LuTreeOptionOperatorModule, LuTreeOptionPagerComponent, LuTreeOptionPagerModule, LuTreeOptionPickerAdvancedComponent, LuTreeOptionPickerComponent, LuTreeOptionPickerModule, LuTreeOptionSearcherComponent, LuTreeOptionSearcherModule, LuTreeOptionSelectAllComponent, LuTreeOptionSelectAllModule, LuTreeOptionSelectorModule, luOptionPlaceholderTranslations, luOptionSelectAllTranslations, luTreeOptionItemTranslations };
//# sourceMappingURL=lucca-front-ng-option.mjs.map
