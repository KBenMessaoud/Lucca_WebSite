import * as i0 from '@angular/core';
import { inject, ElementRef, Directive, HostBinding, booleanAttribute, Component, Input, ContentChild } from '@angular/core';
import { NgIf, NgSwitch, NgSwitchCase, NgTemplateOutlet } from '@angular/common';
import { BehaviorSubject } from 'rxjs';
import { InlineMessageComponent } from '@lucca-front/ng/inline-message';
import * as i2 from '@lucca-front/ng/tooltip';
import { LuTooltipModule } from '@lucca-front/ng/tooltip';
import * as i1 from '@lucca-front/ng/core';
import { NgClazz } from '@lucca-front/ng/core';
import { ReactiveFormsModule } from '@angular/forms';
import { IconComponent } from '@lucca-front/ng/icon';

class InputDirective {
    constructor() {
        this.clazz = 'textField-input-value';
        this.host = inject(ElementRef);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: InputDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.3", type: InputDirective, isStandalone: true, selector: "[luInput]", host: { properties: { "class": "this.clazz" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: InputDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[luInput]',
                    standalone: true,
                }]
        }], propDecorators: { clazz: [{
                type: HostBinding,
                args: ['class']
            }] } });

let nextId = 0;
class FormFieldComponent {
    constructor() {
        this.#ngClass = inject(NgClazz);
        this.clazz = 'form-field';
        this.hiddenLabel = false;
        this.required = false;
        this.invalid = false;
        this.layout = 'default';
        this.ready$ = new BehaviorSubject(false);
        this.#ariaLabelledBy = [];
    }
    #ngClass;
    get ready() {
        return this.ready$.value;
    }
    #ariaLabelledBy;
    addLabelledBy(id, prepend = false) {
        if (prepend) {
            this.#ariaLabelledBy = [id, ...this.#ariaLabelledBy];
        }
        else {
            this.#ariaLabelledBy = [...this.#ariaLabelledBy, id];
        }
        if (this.#nativeInputRef) {
            this.#nativeInputRef.setAttribute('aria-labelledby', this.#ariaLabelledBy.join(' '));
        }
    }
    removeLabelledBy(id) {
        this.#ariaLabelledBy = this.#ariaLabelledBy.filter((labelledBy) => labelledBy === id);
    }
    #nativeInputRef;
    ngOnChanges() {
        this.#ngClass.ngClass = {
            [`mod-${this.size}`]: true,
        };
        if (this.#nativeInputRef) {
            this.updateAria();
        }
    }
    ngAfterViewInit() {
        if (!this.input) {
            throw new Error('Missing input for form field, make sure to set `luInput` to your input inside lu-form-field');
        }
        this.#nativeInputRef = this.input.host.nativeElement;
        this.id = `${this.#nativeInputRef.tagName.toLowerCase()}-${++nextId}`;
        this.#nativeInputRef.id = this.id;
        this.updateAria();
        this.ready$.next(true);
    }
    updateAria() {
        this.#nativeInputRef.ariaInvalid = this.invalid.toString();
        this.#nativeInputRef.ariaRequired = this.required.toString();
        this.#nativeInputRef.setAttribute('aria-describedby', `${this.id}-message`);
        this.addLabelledBy(`${this.id}-label`);
    }
    ngOnDestroy() {
        this.ready$.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: FormFieldComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: FormFieldComponent, isStandalone: true, selector: "lu-form-field", inputs: { label: "label", hiddenLabel: ["hiddenLabel", "hiddenLabel", booleanAttribute], tooltip: "tooltip", required: ["required", "required", booleanAttribute], invalid: ["invalid", "invalid", booleanAttribute], inlineMessage: "inlineMessage", inlineMessageState: "inlineMessageState", size: "size", layout: "layout" }, host: { properties: { "class": "this.clazz" } }, queries: [{ propertyName: "input", first: true, predicate: InputDirective, descendants: true }], usesOnChanges: true, hostDirectives: [{ directive: i1.NgClazz }], ngImport: i0, template: "<label class=\"formLabel\" id=\"{{id}}-label\" for=\"{{id}}\" [class.u-mask]=\"hiddenLabel\" attr.aria-hidden=\"{{hiddenLabel}}\">\n\t{{label}}<sup class=\"formLabel-required\" aria-hidden=\"true\" *ngIf=\"required\">*</sup>\n\t<lu-icon icon=\"helpOutline\" alt=\"\" *ngIf=\"tooltip\" [luTooltip]=\"tooltip\"></lu-icon>\n</label>\n<ng-container [ngSwitch]=\"layout\">\n\t<div class=\"textField\" *ngSwitchCase=\"'default'\">\n\t\t<ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n\t</div>\n\t<ng-container *ngSwitchCase=\"'checkbox'\">\n\t\t<ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n\t</ng-container>\n</ng-container>\n<lu-inline-message id=\"{{id}}-message\" *ngIf=\"inlineMessage\" [label]=\"inlineMessage\" [state]=\"inlineMessageState\"></lu-inline-message>\n<!--We have to do this because multiple ng-content in the same template leads to weird behaviors-->\n<ng-template #contentTpl>\n\t<ng-content></ng-content>\n</ng-template>\n", styles: [".textField{--component-textField-lineHeight: var(--size-M-lightHeight);--component-textField-fontSize: var(--size-M-fontSize);--component-textField-placeholder: var(--palettes-grey-400);--component-textField-background: var(--colors-white-color);--component-textField-border: var(--palettes-grey-300);--component-textField-color: var(--palettes-grey-800);--component-textField-prefix-color: var(--palettes-grey-600);--component-textField-padding: var(--spacings-XS);--component-textField-affix-padding: var(--component-textField-padding);display:flex;align-items:stretch;border-radius:var(--commons-borderRadius-M);background-color:var(--component-textField-background)}.textField:focus-within:not(:has(.textField-input-affix-clear:focus)){outline:2px solid var(--palettes-primary-700);outline-offset:3px}.textField-input{display:flex;align-items:center;width:100%;box-shadow:0 0 0 1px var(--component-textField-border);border-radius:var(--commons-borderRadius-M);background-color:var(--component-textField-background);position:relative}.textField-input:hover{--component-textField-border: var(--palettes-grey-400)}.textField-input:has(.textField-input-affix-icon){--component-textField-affix-padding: 2.5rem}.textField-input:has(.textField-input-affix-clear){--component-textField-affix-padding: 2rem}.textField-input:has(.textField-input-affix-clear):has(.textField-input-affix-icon){--component-textField-affix-padding: 4rem}.textField-input-value{border:0;outline:0;line-height:var(--component-textField-lineHeight);font-size:var(--component-textField-fontSize);width:100%;padding:var(--component-textField-padding) var(--component-textField-affix-padding) var(--component-textField-padding) var(--component-textField-padding);background-color:transparent;color:var(--component-textField-color)}.textField-input-value::placeholder{color:var(--component-textField-placeholder)}.textField-input-affix{display:inline-flex;align-items:center;gap:var(--spacings-XS);position:absolute;right:var(--spacings-XS);pointer-events:none}.textField-input-affix-icon{--icon-size: 1.5rem;color:var(--palettes-grey-600);pointer-events:none}.textField-input-affix-clear{pointer-events:auto}.textField-prefix{display:flex;padding:0 var(--component-textField-padding);align-items:center;color:var(--component-textField-prefix-color);line-height:var(--component-textField-lineHeight);font-size:var(--component-textField-fontSize);box-shadow:0 0 0 1px var(--component-textField-border);border-top-left-radius:var(--commons-borderRadius-M);border-bottom-left-radius:var(--commons-borderRadius-M)}.textField-prefix~.textField-input{border-top-left-radius:0;border-bottom-left-radius:0}.textField-suffix{display:flex;padding:0 var(--component-textField-padding);align-items:center;color:var(--component-textField-prefix-color);line-height:var(--component-textField-lineHeight);font-size:var(--component-textField-fontSize);box-shadow:0 0 0 1px var(--component-textField-border);border-top-right-radius:var(--commons-borderRadius-M);border-bottom-right-radius:var(--commons-borderRadius-M);order:1}.textField-suffix~.textField-input{border-top-right-radius:0;border-bottom-right-radius:0}.textField.mod-S{--component-textField-fontSize: var(--sizes-S-fontSize);--component-textField-lineHeight: var(--sizes-S-lineHeight);--component-textField-padding: .375rem}.textField.mod-S .textField-input-affix-clear{--components-clear-size: .75rem;--icon-size: .75rem}.textField.mod-S .textField-input-affix-icon{--icon-size: 1.25rem}.textField.mod-XS{--component-textField-fontSize: var(--sizes-XS-fontSize);--component-textField-lineHeight: var(--sizes-XS-lineHeight);--component-textField-padding: var(--spacings-XXS)}.textField.mod-XS .textField-prefix,.textField.mod-XS .textField-suffix,.textField.mod-XS .textField-input-affix-icon{--icon-size: 1rem}.textField.mod-XS .textField-input-affix-clear{--components-clear-size: .75rem;--icon-size: .75rem}.textField.is-invalid,.textField:has(.textField-input-value[aria-invalid=true]){--component-textField-border: var(--palettes-error-400);--component-textField-background: var(--palettes-error-50);--component-textField-placeholder: var(--palettes-error-400)}.textField.is-invalid .textField-input:hover,.textField:has(.textField-input-value[aria-invalid=true]) .textField-input:hover{--component-textField-border: var(--palettes-error-600)}.textField.is-disabled,.textField:has(.textField-input-value:disabled){--component-textField-border: var(--palettes-grey-300);--component-textField-background: var(--palettes-grey-100);--component-textField-color: var(--palettes-grey-600)}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: InlineMessageComponent, selector: "lu-inline-message", inputs: ["label", "state", "size"] }, { kind: "ngmodule", type: LuTooltipModule }, { kind: "directive", type: i2.LuTooltipTriggerDirective, selector: "[luTooltip]", inputs: ["luTooltip", "luTooltipEnterDelay", "luTooltipLeaveDelay", "luTooltipDisabled", "luTooltipPosition", "luTooltipWhenEllipsis"], outputs: ["luTooltipOnOpen", "luTooltipOnClose"] }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "component", type: IconComponent, selector: "lu-icon", inputs: ["icon", "alt", "size", "color"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: FormFieldComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lu-form-field', standalone: true, imports: [NgIf, NgSwitch, NgSwitchCase, NgTemplateOutlet, InlineMessageComponent, LuTooltipModule, ReactiveFormsModule, IconComponent], hostDirectives: [NgClazz], template: "<label class=\"formLabel\" id=\"{{id}}-label\" for=\"{{id}}\" [class.u-mask]=\"hiddenLabel\" attr.aria-hidden=\"{{hiddenLabel}}\">\n\t{{label}}<sup class=\"formLabel-required\" aria-hidden=\"true\" *ngIf=\"required\">*</sup>\n\t<lu-icon icon=\"helpOutline\" alt=\"\" *ngIf=\"tooltip\" [luTooltip]=\"tooltip\"></lu-icon>\n</label>\n<ng-container [ngSwitch]=\"layout\">\n\t<div class=\"textField\" *ngSwitchCase=\"'default'\">\n\t\t<ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n\t</div>\n\t<ng-container *ngSwitchCase=\"'checkbox'\">\n\t\t<ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n\t</ng-container>\n</ng-container>\n<lu-inline-message id=\"{{id}}-message\" *ngIf=\"inlineMessage\" [label]=\"inlineMessage\" [state]=\"inlineMessageState\"></lu-inline-message>\n<!--We have to do this because multiple ng-content in the same template leads to weird behaviors-->\n<ng-template #contentTpl>\n\t<ng-content></ng-content>\n</ng-template>\n", styles: [".textField{--component-textField-lineHeight: var(--size-M-lightHeight);--component-textField-fontSize: var(--size-M-fontSize);--component-textField-placeholder: var(--palettes-grey-400);--component-textField-background: var(--colors-white-color);--component-textField-border: var(--palettes-grey-300);--component-textField-color: var(--palettes-grey-800);--component-textField-prefix-color: var(--palettes-grey-600);--component-textField-padding: var(--spacings-XS);--component-textField-affix-padding: var(--component-textField-padding);display:flex;align-items:stretch;border-radius:var(--commons-borderRadius-M);background-color:var(--component-textField-background)}.textField:focus-within:not(:has(.textField-input-affix-clear:focus)){outline:2px solid var(--palettes-primary-700);outline-offset:3px}.textField-input{display:flex;align-items:center;width:100%;box-shadow:0 0 0 1px var(--component-textField-border);border-radius:var(--commons-borderRadius-M);background-color:var(--component-textField-background);position:relative}.textField-input:hover{--component-textField-border: var(--palettes-grey-400)}.textField-input:has(.textField-input-affix-icon){--component-textField-affix-padding: 2.5rem}.textField-input:has(.textField-input-affix-clear){--component-textField-affix-padding: 2rem}.textField-input:has(.textField-input-affix-clear):has(.textField-input-affix-icon){--component-textField-affix-padding: 4rem}.textField-input-value{border:0;outline:0;line-height:var(--component-textField-lineHeight);font-size:var(--component-textField-fontSize);width:100%;padding:var(--component-textField-padding) var(--component-textField-affix-padding) var(--component-textField-padding) var(--component-textField-padding);background-color:transparent;color:var(--component-textField-color)}.textField-input-value::placeholder{color:var(--component-textField-placeholder)}.textField-input-affix{display:inline-flex;align-items:center;gap:var(--spacings-XS);position:absolute;right:var(--spacings-XS);pointer-events:none}.textField-input-affix-icon{--icon-size: 1.5rem;color:var(--palettes-grey-600);pointer-events:none}.textField-input-affix-clear{pointer-events:auto}.textField-prefix{display:flex;padding:0 var(--component-textField-padding);align-items:center;color:var(--component-textField-prefix-color);line-height:var(--component-textField-lineHeight);font-size:var(--component-textField-fontSize);box-shadow:0 0 0 1px var(--component-textField-border);border-top-left-radius:var(--commons-borderRadius-M);border-bottom-left-radius:var(--commons-borderRadius-M)}.textField-prefix~.textField-input{border-top-left-radius:0;border-bottom-left-radius:0}.textField-suffix{display:flex;padding:0 var(--component-textField-padding);align-items:center;color:var(--component-textField-prefix-color);line-height:var(--component-textField-lineHeight);font-size:var(--component-textField-fontSize);box-shadow:0 0 0 1px var(--component-textField-border);border-top-right-radius:var(--commons-borderRadius-M);border-bottom-right-radius:var(--commons-borderRadius-M);order:1}.textField-suffix~.textField-input{border-top-right-radius:0;border-bottom-right-radius:0}.textField.mod-S{--component-textField-fontSize: var(--sizes-S-fontSize);--component-textField-lineHeight: var(--sizes-S-lineHeight);--component-textField-padding: .375rem}.textField.mod-S .textField-input-affix-clear{--components-clear-size: .75rem;--icon-size: .75rem}.textField.mod-S .textField-input-affix-icon{--icon-size: 1.25rem}.textField.mod-XS{--component-textField-fontSize: var(--sizes-XS-fontSize);--component-textField-lineHeight: var(--sizes-XS-lineHeight);--component-textField-padding: var(--spacings-XXS)}.textField.mod-XS .textField-prefix,.textField.mod-XS .textField-suffix,.textField.mod-XS .textField-input-affix-icon{--icon-size: 1rem}.textField.mod-XS .textField-input-affix-clear{--components-clear-size: .75rem;--icon-size: .75rem}.textField.is-invalid,.textField:has(.textField-input-value[aria-invalid=true]){--component-textField-border: var(--palettes-error-400);--component-textField-background: var(--palettes-error-50);--component-textField-placeholder: var(--palettes-error-400)}.textField.is-invalid .textField-input:hover,.textField:has(.textField-input-value[aria-invalid=true]) .textField-input:hover{--component-textField-border: var(--palettes-error-600)}.textField.is-disabled,.textField:has(.textField-input-value:disabled){--component-textField-border: var(--palettes-grey-300);--component-textField-background: var(--palettes-grey-100);--component-textField-color: var(--palettes-grey-600)}\n"] }]
        }], propDecorators: { clazz: [{
                type: HostBinding,
                args: ['class']
            }], label: [{
                type: Input,
                args: [{
                        required: true,
                    }]
            }], hiddenLabel: [{
                type: Input,
                args: [{
                        transform: booleanAttribute,
                    }]
            }], tooltip: [{
                type: Input
            }], required: [{
                type: Input,
                args: [{
                        transform: booleanAttribute,
                    }]
            }], invalid: [{
                type: Input,
                args: [{
                        transform: booleanAttribute,
                    }]
            }], inlineMessage: [{
                type: Input
            }], inlineMessageState: [{
                type: Input
            }], size: [{
                type: Input
            }], layout: [{
                type: Input
            }], input: [{
                type: ContentChild,
                args: [InputDirective]
            }] } });

/**
 * Generated bundle index. Do not edit.
 */

export { FormFieldComponent, InputDirective };
//# sourceMappingURL=lucca-front-ng-form-field.mjs.map
