import { OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import { LuToast, LuToastInput, LuToastType } from './toasts.model';
import { LuToastsService } from './toasts.service';
import * as i0 from "@angular/core";
export declare class LuToastsComponent implements OnDestroy {
    private toastsService;
    bottom: boolean;
    set sources(sources: Array<Observable<LuToastInput>>);
    toasts$: import("rxjs").BehaviorSubject<LuToast[]>;
    private destroy$;
    intl: import("./toasts.translate").ILuToastLabel;
    constructor(toastsService: LuToastsService);
    ngOnDestroy(): void;
    iconClassByToastType: Record<LuToastType, string>;
    paletteClassByToastType: Record<LuToastType, string>;
    removeToast(toast: LuToast): void;
    trackToast(_index: number, toast: LuToast): string;
    isOnlyDismissibleManually(toast: LuToast): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<LuToastsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LuToastsComponent, "lu-toasts", never, { "bottom": { "alias": "bottom"; "required": false; }; "sources": { "alias": "sources"; "required": false; }; }, {}, never, never, true, never>;
}
