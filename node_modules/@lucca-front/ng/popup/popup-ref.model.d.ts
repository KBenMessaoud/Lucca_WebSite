import { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';
import { ComponentType } from '@angular/cdk/portal';
import { ComponentRef, Injector } from '@angular/core';
import { Observable, Subject, Subscription } from 'rxjs';
import { ILuPopupConfig } from './popup-config.model';
export interface ILuPopupRef<D = unknown, R = unknown> {
    onOpen: Observable<D>;
    onClose: Observable<R>;
    onDismiss: Observable<void>;
    onBackdropClick: Observable<void>;
    open(data: D): void;
    close(result: R): void;
    dismiss(): void;
}
export interface ILuPopupRefFactory<TComponent = unknown, TConfig extends ILuPopupConfig = ILuPopupConfig> {
    forge<T extends TComponent, C extends TConfig, D, R>(component: ComponentType<T>, config: C): ILuPopupRef<D, R>;
}
export declare abstract class ALuPopupRef<T = unknown, D = unknown, R = unknown, C extends ILuPopupConfig = ILuPopupConfig> implements ILuPopupRef<D, R> {
    protected _overlay: Overlay;
    protected _injector: Injector;
    protected _component: ComponentType<T>;
    protected _config: C;
    onOpen: Subject<D>;
    onClose: Subject<R>;
    onDismiss: Subject<void>;
    onBackdropClick: Subject<void>;
    protected _overlayRef: OverlayRef;
    protected _componentRef: ComponentRef<T>;
    protected _subs: Subscription;
    constructor(_overlay: Overlay, _injector: Injector, _component: ComponentType<T>, _config: C);
    open(data?: D): void;
    close(result?: R): void;
    dismiss(): void;
    /**
     *  This method creates the overlay from the provided popover's template and saves its
     *  OverlayRef so that it can be attached to the DOM when openPopover is called.
     */
    protected _createOverlay(): void;
    /**
     * This method builds the configuration object needed to create the overlay, the OverlayConfig.
     * @returns OverlayConfig
     */
    protected _getOverlayConfig(): OverlayConfig;
    protected _openPopup(data?: D): void;
    protected _getOverlayPanelClasses(): string[];
    protected _destroy(): void;
    protected _completeSubjects(): void;
    protected _destroyOverlay(): void;
    protected _closePopup(): void;
    protected _subToCloseEvents(): void;
    protected _subToEscapeKeydownEvent(): void;
    protected _subToBackdropClickEvent(): void;
    protected _cleanSubscription(): void;
}
