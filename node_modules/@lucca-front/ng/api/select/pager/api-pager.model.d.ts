import { ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber } from '@lucca-front/ng/core';
import { ILuOptionOperator } from '@lucca-front/ng/option';
import { Observable, Subject } from 'rxjs';
import { ILuApiItem } from '../../api.model';
import { ILuApiService } from '../../service/index';
declare enum Strategy {
    append = 0,
    replace = 1
}
export type ILuApiOptionPager<T extends ILuApiItem = ILuApiItem> = ILuOptionOperator<T>;
export interface ILuApiPagerService<T extends ILuApiItem = ILuApiItem> {
    getPaged(page: number): Observable<T[]>;
}
export declare abstract class ALuApiOptionPager<T extends ILuApiItem = ILuApiItem, S extends ILuApiService<T> = ILuApiService<T>> implements ILuApiOptionPager<T>, ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber {
    protected _service: S;
    outOptions$: Subject<T[]>;
    loading$: Observable<boolean>;
    protected _loading: boolean;
    protected _results$: Observable<{
        items: T[];
        strategy: Strategy;
    }>;
    protected _options: T[];
    protected _page$: Subject<number>;
    protected _page: number;
    protected _initialized: boolean;
    constructor(_service: S);
    protected init(): void;
    onOpen(): void;
    onScrollBottom(): void;
    protected initObservables(): void;
}
export {};
