import { ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber } from '@lucca-front/ng/core';
import { Observable, Subject } from 'rxjs';
import { ILuApiService } from '../../service/index';
import { ILuApiOptionFeeder } from '../feeder/index';
export type ILuApiOptionSearcher<T extends import('../../api.model').ILuApiItem = import('../../api.model').ILuApiItem> = ILuApiOptionFeeder<T>;
export declare abstract class ALuApiOptionSearcher<T extends import('../../api.model').ILuApiItem = import('../../api.model').ILuApiItem, S extends ILuApiService<T> = ILuApiService<T>> implements ILuApiOptionFeeder<T>, ILuOnOpenSubscriber {
    protected _service: S;
    outOptions$: Subject<T[]>;
    loading$: Observable<boolean>;
    empty$: Observable<boolean>;
    protected _clue$: Observable<string>;
    set clue$(clue$: Observable<string>);
    constructor(_service: S);
    init(): void;
    onOpen(): void;
    onClose(): void;
    protected initObservables(): void;
    abstract resetClue(): any;
    protected clearOptions(): void;
}
export type ILuApiOptionPagedSearcher<T extends import('../../api.model').ILuApiItem = import('../../api.model').ILuApiItem> = ILuApiOptionSearcher<T>;
export declare abstract class ALuApiOptionPagedSearcher<T extends import('../../api.model').ILuApiItem = import('../../api.model').ILuApiItem, S extends ILuApiService<T> = ILuApiService<T>> extends ALuApiOptionSearcher<T, S> implements ILuApiOptionPagedSearcher<T>, ILuOnScrollBottomSubscriber {
    outOptions$: Subject<T[]>;
    loading$: Observable<boolean>;
    protected _loading: boolean;
    protected _page$: Subject<void>;
    protected _isLastPage: boolean;
    protected _options: T[];
    constructor(service: S);
    onOpen(): void;
    onScrollBottom(): void;
    protected initObservables(): void;
    abstract resetClue(): any;
}
