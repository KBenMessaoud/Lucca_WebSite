import { EventEmitter } from '@angular/core';
import { Palette, PortalContent } from '@lucca-front/ng/core';
import { LuccaIcon } from '@lucca-front/icons';
import { CalloutState } from '../callout-state';
import * as i0 from "@angular/core";
export declare class CalloutComponent {
    /**
     * The title of the callout
     */
    heading: PortalContent;
    /**
     * Which palette should be used for the entire callout.
     * Defaults to none (inherits parent palette)
     */
    palette: Palette;
    /**
     * Which size should the callout be? Defaults to medium
     */
    size: 'M' | 'S';
    /**
     * Should we display the remove icon?
     */
    removable: boolean;
    /**
     * Which icon should we display in the callout if any?
     * Defaults to no icon.
     */
    icon: LuccaIcon;
    set state(state: CalloutState);
    /**
     * Is the callout removed? Works with two way binding too.
     */
    removed: boolean;
    get hiddenAttr(): 'hidden' | null;
    removedChange: EventEmitter<boolean>;
    intl: import("../callout.translate").LuCalloutLabel;
    static ɵfac: i0.ɵɵFactoryDeclaration<CalloutComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CalloutComponent, "lu-callout", never, { "heading": { "alias": "heading"; "required": false; }; "palette": { "alias": "palette"; "required": false; }; "size": { "alias": "size"; "required": false; }; "removable": { "alias": "removable"; "required": false; }; "icon": { "alias": "icon"; "required": false; }; "state": { "alias": "state"; "required": false; }; "removed": { "alias": "removed"; "required": false; }; }, { "removedChange": "removedChange"; }, never, ["*"], true, never>;
    static ngAcceptInputType_removable: unknown;
    static ngAcceptInputType_removed: unknown;
}
