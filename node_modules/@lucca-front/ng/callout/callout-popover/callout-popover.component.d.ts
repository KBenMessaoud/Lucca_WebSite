import { ElementRef, OnDestroy, TemplateRef } from '@angular/core';
import { Palette, PortalContent } from '@lucca-front/ng/core';
import { LuccaIcon } from '@lucca-front/icons';
import { CalloutState } from '../callout-state';
import * as i0 from "@angular/core";
export declare class CalloutPopoverComponent implements OnDestroy {
    #private;
    overlayOrigin: ElementRef;
    overlayContent: TemplateRef<unknown>;
    private _hideDelayId;
    private _showDelayId;
    /**
     * Debounce for the popover to open (mouse will have to be on the element fox openDelay milliseconds for popover to show)
     */
    readonly openDelay = 50;
    /**
     * Debounce for the popover to close (mouse will have to be out of both popover and trigger for closeDelay milliseconds for it to close)
     */
    readonly closeDelay = 500;
    /**
     * Label to put inside the button, often used to show just a number
     */
    buttonLabel: string;
    /**
     * Palette for both the button and the popover content
     */
    palette: Palette;
    /**
     * Size for both button and popover content
     */
    size?: 'M' | 'S' | 'XS';
    /**
     * Icon shows in button and next to popover's title
     */
    icon: LuccaIcon;
    set state(state: CalloutState);
    /**
     * Heading for the details popover
     */
    heading: PortalContent;
    get contentSize(): 'S' | 'M' | undefined;
    showContent(): void;
    private createPanelContent;
    hideContent(event: MouseEvent | null): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CalloutPopoverComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CalloutPopoverComponent, "lu-callout-popover", never, { "openDelay": { "alias": "openDelay"; "required": false; }; "closeDelay": { "alias": "closeDelay"; "required": false; }; "buttonLabel": { "alias": "buttonLabel"; "required": false; }; "palette": { "alias": "palette"; "required": false; }; "size": { "alias": "size"; "required": false; }; "icon": { "alias": "icon"; "required": false; }; "state": { "alias": "state"; "required": false; }; "heading": { "alias": "heading"; "required": true; }; }, {}, never, ["*"], true, never>;
    static ngAcceptInputType_openDelay: unknown;
    static ngAcceptInputType_closeDelay: unknown;
}
