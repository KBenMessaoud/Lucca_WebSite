"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const glob_1 = require("glob");
const path = require("path");
const migration_test_js_1 = require("../../lib/migration-test.js");
const collectionPath = path.normalize(path.join(__dirname, '..', '../migrations.json'));
const testsRoot = path.join(__dirname, 'tests');
const files = fs.readdirSync(testsRoot);
describe('TShirt Migration', () => {
    it('should update files', async () => {
        // Arrange
        const tree = (0, migration_test_js_1.createTreeFromFiles)(testsRoot, files, '.input.');
        const expectedTree = (0, migration_test_js_1.createTreeFromFiles)(testsRoot, files, '.output.');
        // Act
        try {
            await (0, migration_test_js_1.runMigration)(collectionPath, 'migration-v15-tshirt-size', { skipInstallation: true }, tree);
        }
        catch (error) {
            // eslint-disable-next-line no-console
            console.log(error);
        }
        // Assert
        (0, migration_test_js_1.expectTree)(tree).toMatchTree(expectedTree);
    });
    // Use this to migrate @lucca-front/* packages
    it.skip('should migrate @lucca-front/*', async () => {
        // Arrange
        const lfRoot = path.normalize(path.join(__dirname, '..', '..', '..', '..'));
        const lfFiles = [
            ...glob_1.default.sync('icons/**/*.scss', { cwd: lfRoot, nodir: true }),
            ...glob_1.default.sync('scss/**/*.scss', { cwd: lfRoot, nodir: true }),
            ...glob_1.default.sync('ng/**/*', { cwd: lfRoot, nodir: true, ignore: ['**/schematics/**'] }),
        ];
        const treeOriginalTree = (0, migration_test_js_1.createTreeFromFiles)(lfRoot, lfFiles, '.');
        const tree = (0, migration_test_js_1.createTreeFromFiles)(lfRoot, lfFiles, '.');
        // Act
        await (0, migration_test_js_1.runMigration)(collectionPath, 'migration-v15-tshirt-size', { skipInstallation: true }, tree);
        // Assert
        tree.visit((p, entry) => {
            const original = treeOriginalTree.get(p)?.content.toString() || '';
            const updated = entry?.content.toString() || '';
            if (original !== updated) {
                const fromRootPath = path.join(lfRoot, p);
                fs.writeFileSync(fromRootPath, updated);
            }
        });
    });
});
