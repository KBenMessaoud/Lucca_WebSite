"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const path = require("path");
const schematics_js_1 = require("../../lib/schematics.js");
const migration_js_1 = require("./migration.js");
exports.default = (options) => {
    const skipInstallation = options?.skipInstallation ?? false;
    return async (tree, context) => {
        if (!skipInstallation) {
            context.logger.info('Installing dependencies...');
            try {
                (0, child_process_1.spawnSync)('npm', ['ci'], {
                    cwd: path.join(__dirname, '../../lib/local-deps'),
                });
                context.logger.info('Installing dependencies... Done!');
            }
            catch (e) {
                // eslint-disable-next-line
                context.logger.error('Failed to install dependencies', e.toString());
            }
        }
        const postCssScss = await import('../../lib/local-deps/postcss-scss.js');
        const angularCompiler = await import('@angular/compiler');
        const { postcssValueParser } = await import('../../lib/local-deps/postcss-value-parser.js');
        const { postcssSelectorParser } = await import('../../lib/local-deps/postcss-selector-parser.js');
        tree.visit((path, entry) => {
            if (path.includes('node_modules') || !entry) {
                return;
            }
            if (path.endsWith('.scss')) {
                (0, schematics_js_1.migrateFile)(path, entry, tree, (content) => (0, migration_js_1.migrateScssFile)(content, postCssScss, postcssValueParser, postcssSelectorParser));
            }
            if (path.endsWith('.html')) {
                (0, schematics_js_1.migrateFile)(path, entry, tree, (content) => (0, migration_js_1.migrateHTMLFile)(content, angularCompiler));
            }
            if (path.endsWith('.ts')) {
                (0, schematics_js_1.migrateFile)(path, entry, tree, (content) => (0, migration_js_1.migrateTsFile)(path, content, angularCompiler));
            }
        });
    };
};
