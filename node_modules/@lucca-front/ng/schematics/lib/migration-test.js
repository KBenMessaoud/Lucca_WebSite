"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expectTree = exports.runMigration = exports.createTreeFromFiles = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const fs_1 = require("fs");
const path_1 = require("path");
function createTreeFromFiles(testsRoot, files, filePartFilter) {
    const tree = new testing_1.UnitTestTree(schematics_1.Tree.empty());
    const filteredFiles = files.filter((f) => f.includes(filePartFilter));
    for (const file of filteredFiles) {
        tree.create(file.replace(filePartFilter, '.'), fs_1.default.readFileSync(path_1.default.join(testsRoot, file)).toString().replace(/\r/g, ''));
    }
    return tree;
}
exports.createTreeFromFiles = createTreeFromFiles;
async function runMigration(collectionPath, migrationName, migrationOptions, tree) {
    const schematicRunner = new testing_1.SchematicTestRunner('migrations', collectionPath);
    await schematicRunner.runSchematic(migrationName, migrationOptions, tree);
}
exports.runMigration = runMigration;
function expectTree(tree) {
    return {
        toMatchTree(expectedTree) {
            tree.visit((path, entry) => {
                if (!expectedTree.exists(path)) {
                    throw new Error(`Expected tree does not contain file: ${path}`);
                }
                const actualContent = entry?.content.toString();
                const expectedContent = expectedTree.get(path)?.content.toString();
                try {
                    expect(stripLastNewLine(actualContent)).toEqual(stripLastNewLine(expectedContent));
                }
                catch (error) {
                    throw error instanceof Error ? new Error(`Expected file content to match for ${path}: \n${error.message}`) : error;
                }
            });
            // Ensure all files in expected tree exist in actual tree
            expectedTree.visit((path) => {
                if (!tree.exists(path)) {
                    throw new Error(`Input tree does not contain file: ${path}`);
                }
            });
        },
    };
}
exports.expectTree = expectTree;
function stripLastNewLine(input) {
    return input && input.endsWith('\n') ? input.slice(0, -1) : input;
}
