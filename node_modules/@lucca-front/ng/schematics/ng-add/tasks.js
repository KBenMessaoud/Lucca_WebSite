"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createShameScss = exports.createPalettesOverrideScss = exports.updateAngularJson = exports.updateStylesScss = void 0;
const file_content_1 = require("./file-content");
const files = {
    globalStyles: 'src/styles.scss',
    shameStyles: 'src/scss/_shame.scss',
    palettesOverride: 'src/scss/overrides/_palettes.override.scss',
};
function updateStylesScss(tree) {
    const existingLength = tree.read(files.globalStyles)?.toString().length ?? 0;
    const styleUpdateRecord = tree.beginUpdate(files.globalStyles).insertRight(existingLength, file_content_1.stylesScss);
    tree.commitUpdate(styleUpdateRecord);
}
exports.updateStylesScss = updateStylesScss;
function updateAngularJson(tree) {
    const angularJson = JSON.parse(tree.read('angular.json')?.toString() ?? '{}');
    const { defaultProject, projects } = angularJson;
    projects[defaultProject].architect.build.options.stylePreprocessorOptions = {
        includePaths: ['src/scss/overrides', 'src/scss', 'node_modules/@lucca-front/ng/src'],
    };
    tree.overwrite('angular.json', JSON.stringify(angularJson, undefined, '  ') + '\n');
}
exports.updateAngularJson = updateAngularJson;
function createPalettesOverrideScss(tree) {
    tree.create(files.palettesOverride, tree.read('node_modules/@lucca-front/scss/src/theming/_palettes.scss') ?? '');
}
exports.createPalettesOverrideScss = createPalettesOverrideScss;
function createShameScss(tree) {
    tree.create(files.shameStyles, file_content_1.shameScss);
}
exports.createShameScss = createShameScss;
