import { Overlay } from '@angular/cdk/overlay';
import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, ViewContainerRef } from '@angular/core';
import { ALuPopoverTrigger, ILuPopoverTarget, ILuPopoverTrigger, LuPopoverAlignment, LuPopoverPosition } from '@lucca-front/ng/popover';
import { ILuDropdownPanel } from '../panel/index';
import * as i0 from "@angular/core";
/**
 * This directive is intended to be used in conjunction with an lu-dropdown tag.  It is
 * responsible for toggling the display of the provided dropdown instance.
 */
export declare class LuDropdownTriggerDirective<TPanel extends ILuDropdownPanel = ILuDropdownPanel> extends ALuPopoverTrigger<TPanel, ILuPopoverTarget> implements ILuPopoverTrigger<TPanel, ILuPopoverTarget>, AfterViewInit, OnDestroy {
    protected _overlay: Overlay;
    protected _elementRef: ElementRef<HTMLElement>;
    protected _viewContainerRef: ViewContainerRef;
    /** References the popover instance that the trigger is associated with. */
    set inputPanel(p: TPanel);
    /** how you want to position the panel relative to the target, allowed values: above, below, before, after */
    set inputPosition(pos: LuPopoverPosition);
    /** how the panel will be align with the target, allowed values: top, bottom, left, right */
    set inputAlignment(al: LuPopoverAlignment);
    /** disable popover apparition */
    set inputDisabled(d: boolean);
    /** set to true if you want the panel to appear on top of the target */
    set inputOverlap(ov: boolean);
    /** Event emitted when the associated popover is opened. */
    onOpen: EventEmitter<void>;
    /** Event emitted when the associated popover is closed. */
    onClose: EventEmitter<void>;
    /** accessibility attribute - dont override */
    get _attrAriaExpanded(): boolean;
    /** accessibility attribute - dont override */
    get _attrId(): string;
    /** accessibility attribute - dont override */
    get _attrAriaControls(): string;
    constructor(_overlay: Overlay, _elementRef: ElementRef<HTMLElement>, _viewContainerRef: ViewContainerRef);
    onClick(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    protected _emitOpen(): void;
    protected _emitClose(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<LuDropdownTriggerDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<LuDropdownTriggerDirective<any>, "[luDropdown]", ["LuDropdownTrigger"], { "inputPanel": { "alias": "luDropdown"; "required": false; }; "inputPosition": { "alias": "luDropdownPosition"; "required": false; }; "inputAlignment": { "alias": "luDropdownAlignment"; "required": false; }; "inputDisabled": { "alias": "luDropdownDisabled"; "required": false; }; "inputOverlap": { "alias": "luDropdownOverlap"; "required": false; }; }, { "onOpen": "luDropdownOnOpen"; "onClose": "luDropdownOnClose"; }, never, never, false, never>;
}
