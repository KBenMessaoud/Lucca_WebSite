import { Direction } from '@angular/cdk/bidi';
import { FlexibleConnectedPositionStrategy, HorizontalConnectionPos, Overlay, OverlayConfig, OverlayRef, VerticalConnectionPos } from '@angular/cdk/overlay';
import { ComponentPortal, TemplatePortal } from '@angular/cdk/portal';
import { ElementRef, ViewContainerRef } from '@angular/core';
import { Observable, Subject, Subscription } from 'rxjs';
import { ILuPopoverPanel, LuPopoverScrollStrategy } from '../panel/index';
import { ILuPopoverTarget } from '../target/index';
export type LuPopoverTriggerEvent = 'click' | 'hover' | 'none' | 'focus';
/**
 * component that will decide when to show the popover and attach it to the target
 */
export declare interface ILuPopoverTrigger<TPanel extends ILuPopoverPanel = ILuPopoverPanel, TTarget extends ILuPopoverTarget = ILuPopoverTarget> {
    /** the popover panel to display */
    panel: TPanel;
    /** the popover target to attach the panel */
    target: TTarget;
    /** when to display the popover */
    triggerEvent: LuPopoverTriggerEvent;
    /** delay before popover apparition when trigger is 'hover' */
    enterDelay: number;
    /** delay before popover disparition when trigger is 'hover' */
    leaveDelay: number;
    /** disable popover apparition */
    disabled: boolean;
    /** Event emitted when the associated popover is opened. */
    onOpen: Observable<void>;
    /** Event emitted when the associated popover is closed. */
    onClose: Observable<void>;
    openPopover(): any;
    closePopover(): any;
    togglePopover(): any;
    destroyPopover(): any;
}
export declare abstract class ALuPopoverTrigger<TPanel extends ILuPopoverPanel = ILuPopoverPanel, TTarget extends ILuPopoverTarget = ILuPopoverTarget> implements ILuPopoverTrigger<TPanel, TTarget> {
    protected _overlay: Overlay;
    protected _elementRef: ElementRef<HTMLElement>;
    protected _viewContainerRef: ViewContainerRef;
    protected _portal: TemplatePortal<unknown> | ComponentPortal<TPanel>;
    protected _overlayRef: OverlayRef | null;
    protected _popoverOpen: boolean;
    protected _backdropSubscription: Subscription;
    protected _positionSubscription: Subscription;
    protected _mouseoverTimer: unknown;
    protected _hovered$: Subject<unknown>;
    protected _hoveredSubscription: Subscription;
    protected _panelEventsSubscriptions: Subscription;
    protected _overlayDetachmentsSubscription: Subscription;
    protected _openedByMouse: boolean;
    protected _panel: TPanel;
    /** References the popover instance that the trigger is associated with. */
    get panel(): TPanel;
    set panel(p: TPanel);
    protected _target: TTarget;
    /** References the popover target instance that the trigger is associated with. */
    get target(): TTarget;
    set target(t: TTarget);
    protected _triggerEvent: LuPopoverTriggerEvent;
    get triggerEvent(): LuPopoverTriggerEvent;
    set triggerEvent(te: LuPopoverTriggerEvent);
    protected _enterDelay: number;
    get enterDelay(): number;
    set enterDelay(d: number);
    protected _leaveDelay: number;
    get leaveDelay(): number;
    set leaveDelay(d: number);
    protected _disabled: boolean;
    get disabled(): boolean;
    set disabled(d: boolean);
    protected _whenEllipsis: boolean;
    get whenEllipsis(): boolean;
    set whenEllipsis(we: boolean);
    protected _triggerId: string;
    protected _panelId: string;
    /** Event emitted when the associated popover is opened. */
    abstract onOpen: Observable<void>;
    /** Event emitted when the associated popover is closed. */
    abstract onClose: Observable<void>;
    protected abstract _emitOpen(): void;
    protected abstract _emitClose(): void;
    constructor(_overlay: Overlay, _elementRef: ElementRef<HTMLElement>, _viewContainerRef: ViewContainerRef);
    onClick(): void;
    onMouseEnter(): void;
    onMouseLeave(): void;
    onFocus(): void;
    onBlur(): void;
    /** Toggles the popover between the open and closed states. */
    togglePopover(): void;
    /** Opens the popover. */
    openPopover(): void;
    /** Closes the popover. */
    closePopover(): void;
    /** Removes the popover from the DOM. */
    destroyPopover(): void;
    /** Focuses the popover trigger. */
    focus(): void;
    _handleMousedown(event: MouseEvent): void;
    /** The text direction of the containing app. */
    get dir(): Direction;
    /** Return if the popover main positionning is vertical */
    get isVerticallyPositionned(): boolean;
    protected _attachPortalToOverlay(): void;
    protected _getPanelScrollStrategy(): LuPopoverScrollStrategy;
    /**
     * This method ensures that the popover
     */
    protected _subscribeToPanelEvents(): void;
    /**
     * This method ensures that the popover closes when the overlay has been detached
     * Detach can occur if we scroll while popover is opened
     */
    protected _subscribeToOverlayDetachments(): void;
    /**
     * This method ensures that the popover closes when the overlay backdrop is clicked.
     * We do not use first() here because doing so would not catch clicks from within
     * the popover, and it would fail to unsubscribe properly. Instead, we unsubscribe
     * explicitly when the popover is closed or destroyed.
     */
    protected _subscribeToBackdrop(): void;
    /**
     * This method sets the popover state to open and focuses the first item if
     * the popover was opened via the keyboard.
     */
    protected _initPopover(): void;
    /**
     * This method resets the popover when it's closed, most importantly restoring
     * focus to the popover trigger if the popover was opened via the keyboard.
     */
    protected _resetPopover(): void;
    /** set state rather than toggle to support triggers sharing a popover */
    protected _setIsPopoverOpen(isOpen: boolean): void;
    /**
     *  This method checks that a valid instance of MdPopover has been passed into
     *  mdPopoverTriggerFor. If not, an exception is thrown.
     */
    protected _checkPanel(): void;
    protected _checkTarget(): void;
    /**
     *  This method creates the overlay from the provided popover's template and saves its
     *  OverlayRef so that it can be attached to the DOM when openPopover is called.
     */
    protected _createOverlay(): OverlayRef;
    /**
     * This method builds the configuration object needed to create the overlay, the OverlayConfig.
     * @returns OverlayConfig
     */
    protected _getOverlayConfig(): OverlayConfig;
    /**
     * Listens to changes in the position of the overlay and sets the correct classes
     * on the popover based on the new position. This ensures the animation origin is always
     * correct, even if a fallback position is used for the overlay.
     */
    protected _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void;
    /**
     * This method builds the position strategy for the overlay, so the popover is properly connected
     * to the trigger.
     * @returns FlexibleConnectedPositionStrategy
     */
    protected _getPosition(): FlexibleConnectedPositionStrategy;
    protected _invertVerticalPos(y: VerticalConnectionPos): VerticalConnectionPos;
    protected _invertHorizontalPos(x: HorizontalConnectionPos): HorizontalConnectionPos;
    protected _cleanUpSubscriptions(): void;
    protected _hasEllipsis(): boolean;
}
