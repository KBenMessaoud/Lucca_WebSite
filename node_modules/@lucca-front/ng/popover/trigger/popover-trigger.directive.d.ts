import { Overlay } from '@angular/cdk/overlay';
import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, ViewContainerRef } from '@angular/core';
import { ILuPopoverPanel } from '../panel/index';
import { ILuPopoverTarget, LuPopoverAlignment, LuPopoverPosition } from '../target/index';
import { ALuPopoverTrigger, ILuPopoverTrigger, LuPopoverTriggerEvent } from './popover-trigger.model';
import * as i0 from "@angular/core";
/**
 * This directive is intended to be used in conjunction with an lu-popover tag.  It is
 * responsible for toggling the display of the provided popover instance.
 */
export declare class LuPopoverTriggerDirective<TPanel extends ILuPopoverPanel = ILuPopoverPanel, TTarget extends ILuPopoverTarget = ILuPopoverTarget> extends ALuPopoverTrigger<TPanel, TTarget> implements ILuPopoverTrigger<TPanel, TTarget>, AfterViewInit, OnDestroy {
    protected _overlay: Overlay;
    protected _elementRef: ElementRef<HTMLElement>;
    protected _viewContainerRef: ViewContainerRef;
    /** References the popover instance that the trigger is associated with. */
    set inputPanel(p: TPanel);
    /** References the popover target instance that the trigger is associated with. */
    set inputTarget(t: TTarget);
    /** References the popover target instance that the trigger is associated with. */
    set inputTriggerEvent(te: LuPopoverTriggerEvent);
    /** Event emitted when the associated popover is opened. */
    onOpen: EventEmitter<void>;
    /** Event emitted when the associated popover is closed. */
    onClose: EventEmitter<void>;
    /** how you want to position the panel relative to the target, allowed values: above, below, before, after */
    set inputPosition(pos: LuPopoverPosition);
    /** how the panel will be align with the target, allowed values: top, bottom, left, right */
    set inputAlignment(al: LuPopoverAlignment);
    /** when trigger = hover, delay before the popover panel appears */
    set inputEnterDelay(d: number);
    /** when trigger = hover, delay before the popover panel disappears */
    set inputLeaveDelay(d: number);
    /** disable popover apparition */
    set inputDisabled(d: boolean);
    /** set to true if you want the panel to appear on top of the target */
    set inputOverlap(ov: boolean);
    set inputOffsetX(ox: number);
    set inputOffsetY(oy: number);
    /** accessibility attribute - dont override */
    get _attrAriaExpanded(): boolean;
    /** accessibility attribute - dont override */
    get _attrId(): string;
    /** accessibility attribute - dont override */
    get _attrAriaControls(): string;
    constructor(_overlay: Overlay, _elementRef: ElementRef<HTMLElement>, _viewContainerRef: ViewContainerRef);
    onClick(): void;
    onMouseEnter(): void;
    onMouseLeave(): void;
    onFocus(): void;
    onBlur(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    protected _emitOpen(): void;
    protected _emitClose(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<LuPopoverTriggerDirective<any, any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<LuPopoverTriggerDirective<any, any>, "[luPopover]", ["LuPopoverTrigger"], { "inputPanel": { "alias": "luPopover"; "required": false; }; "inputTarget": { "alias": "luPopoverTarget"; "required": false; }; "inputTriggerEvent": { "alias": "luPopoverTrigger"; "required": false; }; "inputPosition": { "alias": "luPopoverPosition"; "required": false; }; "inputAlignment": { "alias": "luPopoverAlignment"; "required": false; }; "inputEnterDelay": { "alias": "luPopoverEnterDelay"; "required": false; }; "inputLeaveDelay": { "alias": "luPopoverLeaveDelay"; "required": false; }; "inputDisabled": { "alias": "luPopoverDisabled"; "required": false; }; "inputOverlap": { "alias": "luPopoverOverlap"; "required": false; }; "inputOffsetX": { "alias": "luPopoverOffsetX"; "required": false; }; "inputOffsetY": { "alias": "luPopoverOffsetY"; "required": false; }; }, { "onOpen": "luPopoverOnOpen"; "onClose": "luPopoverOnClose"; }, never, never, true, never>;
}
