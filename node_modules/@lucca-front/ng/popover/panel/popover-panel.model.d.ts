import { HorizontalConnectionPos, VerticalConnectionPos } from '@angular/cdk/overlay';
import { TemplateRef } from '@angular/core';
import { Observable, Subscription } from 'rxjs';
export type LuPopoverScrollStrategy = 'reposition' | 'block' | 'close';
export declare interface ILuPopoverPanel<T = unknown> {
    scrollStrategy: LuPopoverScrollStrategy;
    closeOnClick: boolean;
    panelId?: string;
    triggerId?: string;
    templateRef?: TemplateRef<T>;
    /** will emit when the panel wants to close */
    close: Observable<void>;
    /** will emit when the panel wants to open */
    open: Observable<void>;
    /** will emit when the panel is hovered */
    hovered: Observable<boolean>;
    /** classes to apply to the panel, uses ' ' for separating values */
    panelClasses: string;
    /** class to apply to the panel content, uses ' ' for separating values */
    contentClasses: string;
    keydownEvents$: Observable<KeyboardEvent>;
    setPositionClasses: (posX: HorizontalConnectionPos, posY: VerticalConnectionPos) => void;
    /** method called by the trigger when it opens the popover */
    onOpen(): void;
    /** method called by the trigger when it closes the popover */
    onClose(): void;
}
/**
 * abstract class for basic implementation of a popover panel
 */
export declare abstract class ALuPopoverPanel<T = unknown> implements ILuPopoverPanel<T> {
    panelId: string;
    triggerId: string;
    protected _isOpen: boolean;
    get isOpen(): boolean;
    protected _closeOnClick: boolean;
    get closeOnClick(): boolean;
    set closeOnClick(coc: boolean);
    protected _trapFocus: boolean;
    get trapFocus(): boolean;
    set trapFocus(tf: boolean);
    protected _scrollStrategy: LuPopoverScrollStrategy;
    get scrollStrategy(): LuPopoverScrollStrategy;
    set scrollStrategy(ss: LuPopoverScrollStrategy);
    protected _templateRef: TemplateRef<T>;
    get templateRef(): TemplateRef<T>;
    set templateRef(tr: TemplateRef<T>);
    protected _positionClassesMap: Record<string, boolean>;
    protected _panelClasses: string;
    get panelClasses(): string;
    set panelClasses(cl: string);
    get panelClassesMap(): Record<string, boolean>;
    protected _contentClasses: string;
    get contentClasses(): string;
    set contentClasses(cl: string);
    get contentClassesMap(): Record<string, boolean>;
    /** Classes to be passed into the popover's overlay */
    protected _overlayPaneClass: string | string[];
    get overlayPaneClass(): string | string[];
    set overlayPaneClass(opc: string | string[]);
    protected _keydownEventsSub: Subscription;
    set keydownEvents$(evt$: Observable<KeyboardEvent>);
    close: Observable<void>;
    open: Observable<void>;
    hovered: Observable<boolean>;
    abstract _emitCloseEvent(): void;
    abstract _emitOpenEvent(): void;
    abstract _emitHoveredEvent(hovered: boolean): void;
    setPositionClasses(posX: HorizontalConnectionPos, posY: VerticalConnectionPos): void;
    onClick(): void;
    onOpen(): void;
    onClose(): void;
    /**
     * TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.
     * https://github.com/angular/material2/pull/5493#issuecomment-313085323
     */
    /** Disables close of popover when leaving trigger element and mouse over the popover */
    onMouseOver(): void;
    /** Enables close of popover when mouse leaving popover element */
    onMouseLeave(): void;
    /** does nothing but must be overridable */
    onMouseDown(): void;
    _handleKeydown(event: KeyboardEvent): void;
}
