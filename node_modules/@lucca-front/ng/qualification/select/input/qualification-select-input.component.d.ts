import { Overlay } from '@angular/cdk/overlay';
import { AfterViewInit, ChangeDetectorRef, ElementRef, Renderer2, ViewContainerRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ILuOptionPickerPanel, LuOptionComparer } from '@lucca-front/ng/option';
import { ILuInputWithPicker } from '@lucca-front/ng/picker';
import { ALuSelectInputComponent } from '@lucca-front/ng/select';
import { ILuQualification } from '../../qualification.model';
import * as i0 from "@angular/core";
export declare class LuQualificationSelectInputComponent<D extends import('../../qualification.model').ILuQualification = import('../../qualification.model').ILuQualification, P extends ILuOptionPickerPanel<D> = ILuOptionPickerPanel<D>> extends ALuSelectInputComponent<D, P> implements ControlValueAccessor, ILuInputWithPicker<D>, AfterViewInit {
    protected _changeDetectorRef: ChangeDetectorRef;
    protected _overlay: Overlay;
    protected _elementRef: ElementRef<HTMLElement>;
    protected _viewContainerRef: ViewContainerRef;
    protected _renderer: Renderer2;
    byId: LuOptionComparer<D>;
    filters: string[];
    isSearching: boolean;
    intl: import("./qualification-select-input.translate").ILuQualificationSelectInputLabel;
    constructor(_changeDetectorRef: ChangeDetectorRef, _overlay: Overlay, _elementRef: ElementRef<HTMLElement>, _viewContainerRef: ViewContainerRef, _renderer: Renderer2);
    onIsSearchingChanged(isSearching: boolean): void;
    trackById(_: number, item: ILuQualification): number;
    groupByJobName(qualification: ILuQualification): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<LuQualificationSelectInputComponent<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LuQualificationSelectInputComponent<any, any>, "lu-qualification-select", never, { "filters": { "alias": "filters"; "required": false; }; }, {}, never, never, true, never>;
}
