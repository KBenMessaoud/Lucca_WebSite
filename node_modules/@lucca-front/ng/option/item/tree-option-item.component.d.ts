import { ChangeDetectorRef, ElementRef, EventEmitter, ViewContainerRef } from '@angular/core';
import { ILuTree } from '@lucca-front/ng/core';
import { ILuInputDisplayer } from '@lucca-front/ng/input';
import { ALuTreeOptionItem, ILuTreeOptionItem } from './tree-option-item.model';
import * as i0 from "@angular/core";
export declare class LuTreeOptionItemComponent<T> extends ALuTreeOptionItem<T> implements ILuTreeOptionItem<T> {
    private _cdr;
    protected _children: this[];
    protected _tree: ILuTree<T>;
    protected _displayer: ILuInputDisplayer<T>;
    protected _valueVCR: ViewContainerRef;
    protected _childrenVCR: ViewContainerRef;
    element: ElementRef;
    onSelect: EventEmitter<this>;
    onSelectSelf: EventEmitter<this>;
    onSelectChildren: EventEmitter<this>;
    select(): void;
    selectSelf(): void;
    selectChildren(): void;
    set tree(t: ILuTree<T>);
    get value(): T;
    get children(): this[];
    set children(c: this[]);
    get hasChildren(): boolean;
    protected _selected: boolean;
    get selected(): boolean;
    set selected(s: boolean);
    protected _highlighted: boolean;
    get highlighted(): boolean;
    set highlighted(h: boolean);
    get disabled(): boolean;
    set _contentChildDisplayer(displayer: ILuInputDisplayer<T>);
    intl: import("./tree-option-item.translate").ILuTreeOptionItemLabel;
    constructor(_cdr: ChangeDetectorRef);
    private _renderValue;
    private _renderChildren;
    static ɵfac: i0.ɵɵFactoryDeclaration<LuTreeOptionItemComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LuTreeOptionItemComponent<any>, "lu-tree-option", never, { "tree": { "alias": "tree"; "required": false; }; "selected": { "alias": "selected"; "required": false; }; "highlighted": { "alias": "highlighted"; "required": false; }; }, { "onSelect": "onSelect"; "onSelectSelf": "onSelectSelf"; "onSelectChildren": "onSelectChildren"; }, ["_contentChildDisplayer"], never, true, never>;
}
