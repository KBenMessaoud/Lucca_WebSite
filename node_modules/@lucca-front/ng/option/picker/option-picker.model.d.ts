import { ALuPickerPanel, ILuPickerPanel } from '@lucca-front/ng/picker';
import { Observable, Subscription } from 'rxjs';
import { ILuOptionItem } from '../item/option-item.model';
export type ILuOptionPickerPanel<T> = ILuPickerPanel<T>;
export type LuOptionComparer<T> = (option1: T, option2: T) => boolean;
export declare abstract class ALuOptionPicker<T, O extends ILuOptionItem<T> = ILuOptionItem<T>> extends ALuPickerPanel<T> implements ILuOptionPickerPanel<T> {
    protected _subs: Subscription;
    onSelectValue: Observable<T | T[]>;
    protected _value: T | T[];
    setValue(value: T | T[]): void;
    private __options$;
    protected get _options$(): Observable<O[]>;
    protected set _options$(options$: Observable<O[]>);
    protected optionComparer: LuOptionComparer<T>;
    protected _toggle(option: O): void;
    protected _select(val: T | T[]): void;
    protected abstract _applySelected(): any;
    protected abstract _applyHighlight(): any;
    protected destroy(): void;
    _handleKeydown(event: KeyboardEvent): void;
    protected abstract _emitSelectValue(value: T | T[]): any;
}
