import { AfterViewInit, ChangeDetectorRef, EventEmitter, OnDestroy, QueryList, TemplateRef } from '@angular/core';
import { ALuOptionPicker, ILuOptionPickerPanel, LuOptionComparer } from './option-picker.model';
import * as i0 from "@angular/core";
export declare abstract class ALuOptionPickerComponent<T, O extends import('../item/option-item.model').ILuOptionItem<T> = import('../item/option-item.model').ILuOptionItem<T>> extends ALuOptionPicker<T, O> implements ILuOptionPickerPanel<T>, OnDestroy, AfterViewInit {
    protected _changeDetectorRef: ChangeDetectorRef;
    protected document: Document;
    /**
     * This method takes classes set on the host lu-popover element and applies them on the
     * popover template that displays in the overlay container.  Otherwise, it's difficult
     * to style the containing popover from outside the component.
     * @param classes list of class names
     */
    set inputPanelClasses(classes: string);
    /**
     * This method takes classes set on the host lu-popover element and applies them on the
     * popover template that displays in the overlay container. Otherwise, it's difficult
     * to style the containing popover from outside the component.
     * @param classes list of class names
     */
    set inputContentClasses(classes: string);
    /**
     * This method take a function that compare options from feeder and options from form value.
     * By default, compare JSON values.
     */
    set inputOptionComparer(comparer: LuOptionComparer<T>);
    close: EventEmitter<void>;
    open: EventEmitter<void>;
    hovered: EventEmitter<boolean>;
    onSelectValue: EventEmitter<T>;
    protected _isOptionItemsInitialized: boolean;
    protected _defaultOverlayPaneClasses: string[];
    protected _options: O[];
    protected _optionsQL: QueryList<O>;
    set optionsQL(ql: QueryList<O>);
    constructor(_changeDetectorRef: ChangeDetectorRef, document: Document);
    protected _emitSelectValue(val: T): void;
    ngOnDestroy(): void;
    _emitOpenEvent(): void;
    _emitCloseEvent(): void;
    _emitHoveredEvent(h: boolean): void;
    onOpen(): void;
    set vcTemplateRef(tr: TemplateRef<HTMLElement>);
    _handleKeydown(event: KeyboardEvent): void;
    protected _highlightIndex: number;
    get highlightIndex(): number;
    set highlightIndex(i: number);
    protected _initHighlight(): void;
    protected _incrHighlight(): void;
    protected _decrHighlight(): void;
    protected _applyHighlight(reScroll?: boolean): void;
    protected _scrollToHighlight(targetElt: HTMLElement): void;
    protected _selectHighlighted(): void;
    protected _initSelected(): void;
    protected _applySelected(): void;
    protected initItems(): void;
    ngAfterViewInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ALuOptionPickerComponent<any, any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ALuOptionPickerComponent<any, any>, never, never, { "inputPanelClasses": { "alias": "panel-classes"; "required": false; }; "inputContentClasses": { "alias": "content-classes"; "required": false; }; "inputOptionComparer": { "alias": "option-comparer"; "required": false; }; }, { "close": "close"; "open": "open"; "hovered": "hovered"; "onSelectValue": "onSelectValue"; }, ["optionsQL"], never, false, never>;
}
/**
 * basic option picker panel
 */
export declare class LuOptionPickerComponent<T, O extends import('../item/option-item.model').ILuOptionItem<T> = import('../item/option-item.model').ILuOptionItem<T>> extends ALuOptionPickerComponent<T, O> {
    constructor(_changeDetectorRef: ChangeDetectorRef, document: Document);
    static ɵfac: i0.ɵɵFactoryDeclaration<LuOptionPickerComponent<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LuOptionPickerComponent<any, any>, "lu-option-picker", ["LuOptionPicker"], {}, {}, never, ["*"], true, never>;
}
