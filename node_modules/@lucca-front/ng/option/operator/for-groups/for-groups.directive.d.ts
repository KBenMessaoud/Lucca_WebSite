import { ChangeDetectorRef, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';
import { ILuGroup } from '@lucca-front/ng/core';
import { Observable, Subscription } from 'rxjs';
import { ILuOptionOperator } from '../option-operator.model';
import * as i0 from "@angular/core";
export declare class LuForGroupContext<T> {
    $implicit: T;
    index: number;
    count: number;
    constructor($implicit: T, index: number, count: number);
    get first(): boolean;
    get last(): boolean;
    get even(): boolean;
    get odd(): boolean;
}
export declare class LuForGroupsDirective<TItem, TKey> implements ILuOptionOperator<TItem>, OnDestroy {
    protected _vcr: ViewContainerRef;
    protected _cdr: ChangeDetectorRef;
    protected _templateRef: TemplateRef<LuForGroupContext<ILuGroup<TItem, TKey>>>;
    outOptions$?: Observable<TItem[]>;
    private _groupByFn;
    set attrGroupBy(fn: (item: TItem) => TKey);
    protected _subs: Subscription;
    set inOptions$(options$: Observable<TItem[]>);
    constructor(_vcr: ViewContainerRef, _cdr: ChangeDetectorRef, _templateRef: TemplateRef<LuForGroupContext<ILuGroup<TItem, TKey>>>);
    ngOnDestroy(): void;
    render(options: TItem[]): void;
    protected groupBy(items: TItem[]): ILuGroup<TItem, TKey>[];
    static ɵfac: i0.ɵɵFactoryDeclaration<LuForGroupsDirective<any, any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<LuForGroupsDirective<any, any>, "[luForGroups]", never, { "attrGroupBy": { "alias": "luForGroupsGroupBy"; "required": false; }; }, {}, never, never, true, never>;
}
