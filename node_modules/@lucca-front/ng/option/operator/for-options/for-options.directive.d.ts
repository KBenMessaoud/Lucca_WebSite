import { NgForOf, NgForOfContext } from '@angular/common';
import { ChangeDetectorRef, IterableDiffers, OnDestroy, TemplateRef, TrackByFunction, ViewContainerRef } from '@angular/core';
import { Observable, Subscription } from 'rxjs';
import { ILuOptionOperator } from '../option-operator.model';
import * as i0 from "@angular/core";
export declare class LuForOptionsDirective<T> extends NgForOf<T> implements ILuOptionOperator<T>, OnDestroy {
    protected _changeDetectionRef: ChangeDetectorRef;
    outOptions$: any;
    protected _subs: Subscription;
    set inOptions$(options$: Observable<T[]>);
    set luForOptionsTrackBy(fn: TrackByFunction<T>);
    constructor(_viewContainer: ViewContainerRef, _template: TemplateRef<NgForOfContext<T>>, _differs: IterableDiffers, _changeDetectionRef: ChangeDetectorRef);
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<LuForOptionsDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<LuForOptionsDirective<any>, "[luForOptions]", never, { "luForOptionsTrackBy": { "alias": "luForOptionsTrackBy"; "required": false; }; }, {}, never, never, true, never>;
}
