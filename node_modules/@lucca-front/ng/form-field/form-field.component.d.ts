import { AfterViewInit, OnChanges, OnDestroy } from '@angular/core';
import { InputDirective } from './input.directive';
import { FormFieldSize } from './form-field-size';
import { BehaviorSubject } from 'rxjs';
import { InlineMessageState } from '@lucca-front/ng/inline-message';
import { SafeHtml } from '@angular/platform-browser';
import * as i0 from "@angular/core";
import * as i1 from "@lucca-front/ng/core";
export declare class FormFieldComponent implements OnChanges, OnDestroy, AfterViewInit {
    #private;
    clazz: string;
    label: string;
    hiddenLabel: boolean;
    tooltip: string | SafeHtml;
    required: boolean;
    invalid: boolean;
    inlineMessage: string;
    /**
     * State of the inline message, will be ignored if form state is invalid
     */
    inlineMessageState: InlineMessageState;
    size: FormFieldSize;
    layout: 'default' | 'checkbox';
    input: InputDirective;
    id: string;
    ready$: BehaviorSubject<boolean>;
    get ready(): boolean;
    addLabelledBy(id: string, prepend?: boolean): void;
    removeLabelledBy(id: string): void;
    ngOnChanges(): void;
    ngAfterViewInit(): void;
    private updateAria;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<FormFieldComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FormFieldComponent, "lu-form-field", never, { "label": { "alias": "label"; "required": true; }; "hiddenLabel": { "alias": "hiddenLabel"; "required": false; }; "tooltip": { "alias": "tooltip"; "required": false; }; "required": { "alias": "required"; "required": false; }; "invalid": { "alias": "invalid"; "required": false; }; "inlineMessage": { "alias": "inlineMessage"; "required": false; }; "inlineMessageState": { "alias": "inlineMessageState"; "required": false; }; "size": { "alias": "size"; "required": false; }; "layout": { "alias": "layout"; "required": false; }; }, {}, ["input"], ["*"], true, [{ directive: typeof i1.NgClazz; inputs: {}; outputs: {}; }]>;
    static ngAcceptInputType_hiddenLabel: unknown;
    static ngAcceptInputType_required: unknown;
    static ngAcceptInputType_invalid: unknown;
}
